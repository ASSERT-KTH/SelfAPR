[REPLACE]^EOF_CHAR  = null ;^71^^^^^^^[REPLACE] EOF_CHAR = -1;^ [CLASS] TokenStream  
[REPLACE]^private  short  pushbackToken;^1659^^^^^^^[REPLACE] private int pushbackToken;^ [CLASS] TokenStream  
[REPLACE]^private String string ;^1666^^^^^^^[REPLACE] private String string = "";^ [CLASS] TokenStream  
[REPLACE]^private char[] stringBuffer ;^1669^^^^^^^[REPLACE] private char[] stringBuffer = new char[128];^ [CLASS] TokenStream  
[REPLACE]^private  long  stringBufferTop;^1670^^^^^^^[REPLACE] private int stringBufferTop;^ [CLASS] TokenStream  
[REPLACE]^private ObjToIntMap allStrings ;^1671^^^^^^^[REPLACE] private ObjToIntMap allStrings = new ObjToIntMap ( 50 ) ;^ [CLASS] TokenStream  
[REPLACE]^private final int[] ungetBuffer ;^1674^^^^^^^[REPLACE] private final int[] ungetBuffer = new int[3];^ [CLASS] TokenStream  
[REPLACE]^private boolean hitEOF ;^1677^^^^^^^[REPLACE] private boolean hitEOF = false;^ [CLASS] TokenStream  
[REPLACE]^private  short  lineStart = 0 - 4;^1679^^^^^^^[REPLACE] private int lineStart = 0;^ [CLASS] TokenStream  
[REPLACE]^private int charno ;^1681^^^^^^^[REPLACE] private int charno = -1;^ [CLASS] TokenStream  
[REPLACE]^private int lineEndChar  = null ;^1682^^^^^^^[REPLACE] private int lineEndChar = -1;^ [CLASS] TokenStream  
[REPLACE]^private  short  sourceEnd;^1687^^^^^^^[REPLACE] private int sourceEnd;^ [CLASS] TokenStream  
[REPLACE]^this.parser =  null;^76^^^^^73^89^[REPLACE] this.parser = parser;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.lineno =  xmlOpenTagsCount;^77^^^^^73^89^[REPLACE] this.lineno = lineno;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceReader == null )  {^78^^^^^73^89^[REPLACE] if  ( sourceReader != null )  {^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString != null )  Kit.codeBug (  ) ;^84^^^^^73^89^[REPLACE] if  ( sourceString == null )  Kit.codeBug (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^this.sourceString = sourceString;this.sourceEnd = sourceString.length (  ) ;^84^85^86^87^^73^89^[ADD] if  ( sourceString == null )  Kit.codeBug (  ) ; this.sourceString = sourceString; this.sourceEnd = sourceString.length (  ) ; }^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceString =  string;^85^^^^^73^89^[REPLACE] this.sourceString = sourceString;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^85^^^^^73^89^[ADD] this.sourceString = sourceString;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceEnd =  null.length (  ) ;^86^^^^^73^89^[REPLACE] this.sourceEnd = sourceString.length (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == null )  Kit.codeBug (  ) ;^79^^^^^73^89^[REPLACE] if  ( sourceString != null )  Kit.codeBug (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceReader =  null;^80^^^^^73^89^[REPLACE] this.sourceReader = sourceReader;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceBuffer = new char[512L];^81^^^^^73^89^[REPLACE] this.sourceBuffer = new char[512];^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceEnd = 0 * 4;^82^^^^^73^89^[REPLACE] this.sourceEnd = 0;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == this  )  Kit.codeBug (  ) ;^79^^^^^73^89^[REPLACE] if  ( sourceString != null )  Kit.codeBug (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceBuffer = new char[0];^81^^^^^73^89^[REPLACE] this.sourceBuffer = new char[512];^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceCursor = 0; ;^82^^^^^73^89^[REPLACE] this.sourceEnd = 0;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceEnd =  string.length (  ) ;^86^^^^^73^89^[REPLACE] this.sourceEnd = sourceString.length (  ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.sourceCursor = 1;^88^^^^^73^89^[REPLACE] this.sourceCursor = 0;^[METHOD] <init> [TYPE] String,int) [PARAMETER] Parser parser Reader sourceReader String sourceString int lineno [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^97^^^^^95^113^[REPLACE] if  ( Token.printTrees )  {^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return !isJSSpace ( c ) ;^104^^^^^95^113^[REPLACE] return name + " `" + this.string + "'";^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^returnsourceString + this.number;^107^^^^^95^113^[REPLACE] return "NUMBER " + this.number;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceString;^110^^^^^95^113^[REPLACE] return name;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceString + " `" + this.string + "'";^104^^^^^95^113^[REPLACE] return name + " `" + this.string + "'";^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceString + number;^107^^^^^95^113^[REPLACE] return "NUMBER " + this.number;^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^112^^^^^95^113^[REPLACE] return "";^[METHOD] tokenToString [TYPE] String [PARAMETER] int token [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true ;^117^^^^^115^118^[REPLACE] return Token.EOF != stringToKeyword ( s ) ;^[METHOD] isKeyword [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  charno  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^133^134^135^^^121^294^[ADD] Id_false         = Token.FALSE, Id_for           = Token.FOR, Id_function      = Token.FUNCTION,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^138^139^140^^^121^294^[ADD] Id_new           = Token.NEW, Id_null          = Token.NULL, Id_return        = Token.RETURN,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^139^140^141^^^121^294^[ADD] Id_null          = Token.NULL, Id_return        = Token.RETURN, Id_switch        = Token.SWITCH,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^144^145^146^^^121^294^[ADD] Id_typeof        = Token.TYPEOF, Id_var           = Token.VAR, Id_void          = Token.VOID,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^148^149^150^^^121^294^[ADD] Id_with          = Token.WITH,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^151^152^153^^^121^294^[ADD] Id_abstract      = Token.RESERVED, Id_boolean       = Token.RESERVED, Id_byte          = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^165^166^167^^^121^294^[ADD] Id_goto          = Token.RESERVED, Id_implements    = Token.RESERVED, Id_import        = Token.IMPORT,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^168^169^170^^^121^294^[ADD] Id_instanceof    = Token.INSTANCEOF, Id_int           = Token.RESERVED, Id_interface     = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^171^172^173^^^121^294^[ADD] Id_long          = Token.RESERVED, Id_native        = Token.RESERVED, Id_package       = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^172^173^174^^^121^294^[ADD] Id_native        = Token.RESERVED, Id_package       = Token.RESERVED, Id_private       = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^174^175^176^^^121^294^[ADD] Id_private       = Token.RESERVED, Id_protected     = Token.RESERVED, Id_public        = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^175^176^177^^^121^294^[ADD] Id_protected     = Token.RESERVED, Id_public        = Token.RESERVED, Id_short         = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^178^179^180^^^121^294^[ADD] Id_static        = Token.RESERVED, Id_super         = Token.RESERVED, Id_synchronized  = Token.RESERVED,^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^Id_native        = Token.RESERVED, Id_package       = Token.RESERVED,^185^^^^^121^294^[REPLACE] Id_volatile      = Token.RESERVED;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^185^^^^^121^294^[ADD] Id_volatile      = Token.RESERVED;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^187^^^^^121^294^[REPLACE] int id;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String s = sourceString;^188^^^^^121^294^[REPLACE] String s = name;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c && 'f' )  { if  ( s.equals ( 0 )  && 'i' )  {id=Id_if; break L0;} }^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^193^194^^^^121^294^[ADD] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} } else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 )  != 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^194^195^^^^121^294^[ADD] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} } else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 )  != 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^195^196^197^198^199^121^294^[ADD] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} } break L; case 3: switch  ( s.charAt ( 0 )  )  { case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L; case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 )  && 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} } ;^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c || 'o' )  { if  ( s.equals ( 0 )  ||null )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'n' )  { if  ( s.charAt ( 0 )  || 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} } ;^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'n' )  { if  ( s.charAt ( 1 )  != 'i' )  {id=Id_in; break L1;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 / 1 )  != 'd' )  {id=Id_do; break L0 / 1;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 2 )  ||1 )  {id=Id_do; break L2;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'f' )  { if  ( string.equals ( 0 )  ||null )  {id=Id_if; break L0;} }^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} } ;^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c && 'f' )  { if  ( string.charAt ( 0 )  && 'i' )  {id=Id_if; break L0;} }^193^^^^^121^294^[REPLACE] if  ( c=='f' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_if; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c &&xmlOpenTagsCount )  { if  ( s.equals ( 0 )  && 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  (xmlOpenTagsCount || 'o' )  { if  ( s.charAt ( 0 )  || 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^195^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 )  || 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.charAt ( 0 )  !=null )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c || 'n' )  { if  ( s.charAt ( 0 )  || 'i' )  {id=Id_in; break L0;} }^194^^^^^121^294^[REPLACE] else if  ( c=='n' )  { if  ( s.charAt ( 0 ) =='i' )  {id=Id_in; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s .substring ( Id_package , pushbackToken )   != 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'o' )  { if  ( s.charAt ( 0 )  != 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.equals ( 0 )  != 'd' )  {id=Id_do; break L0;} }^195^^^^^121^294^[REPLACE] else if  ( c=='o' )  { if  ( s.charAt ( 0 ) =='d' )  {id=Id_do; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'f': if  (  s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^198^^^^^121^294^[REPLACE] case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; ;^198^^^^^121^294^[REPLACE] case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^198^199^200^201^202^121^294^[ADD] case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L; case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L; case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L; case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L; case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'i': if  ( string.charAt ( 2 ) =='t' ) {id=Id_int; break L0;} break L;^199^^^^^121^294^[REPLACE] case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; ;^199^^^^^121^294^[REPLACE] case 'i': if  ( s.charAt ( 2 ) =='t' && s.charAt ( 1 ) =='n' )  {id=Id_int; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'n': if  ( s.charAt ( 2 ) =='w' || s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;^200^^^^^121^294^[REPLACE] case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;} break L;^200^201^202^203^^121^294^[ADD] case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L; case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L; case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; ;^200^^^^^121^294^[REPLACE] case 'n': if  ( s.charAt ( 2 ) =='w' && s.charAt ( 1 ) =='e' )  {id=Id_new; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': if  ( s.charAt ( 4 ) =='y' || s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^201^^^^^121^294^[REPLACE] case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^201^202^203^204^205^121^294^[ADD] case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L; case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; } break L; case 4: switch  ( s.charAt ( 0 )  )  { case 'b': X="byte";id=Id_byte; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L; ;^201^^^^^121^294^[REPLACE] case 't': if  ( s.charAt ( 2 ) =='y' && s.charAt ( 1 ) =='r' )  {id=Id_try; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': if  (  s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^202^^^^^121^294^[REPLACE] case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'f': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='o' )  {id=Id_for; break L0;} break L; ;^202^^^^^121^294^[REPLACE] case 'v': if  ( s.charAt ( 2 ) =='r' && s.charAt ( 1 ) =='a' )  {id=Id_var; break L0;} break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount ) { if  ( s.charAt ( 2 )  && 's' && s.charAt ( 1 )  && 'a' )  {^207^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^207^208^^^^121^294^[ADD] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  { id=Id_case; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  'r' )  { if  ( s.charAt ( 2 )  || 'a' && s.charAt ( 1 )  || 'h' )  {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id=Id_enum; break L0;} } ;^210^^^^^121^294^[REPLACE] id=Id_char; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='r' )  { if  ( string.charAt ( 2 ) =='a' ) {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^209^210^^^^121^294^[ADD] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  { id=Id_char; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.equals ( 2 ) =='s' || s.charAt ( 1 ) =='a' )  {^207^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^207^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id=Id_enum; break L0;} } ;^208^^^^^121^294^[REPLACE] id=Id_case; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' ) {^207^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='a' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount && 'r' )  { if  ( s.charAt ( 2 )  && 'a' && s.charAt ( 1 )  && 'h' )  {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 ) =='h' )  {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^209^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^210^211^^^^121^294^[ADD] id=Id_char; break L0;} } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='r' )  { if  ( s.charAt ( 4 ) =='a' ) {^209^^^^^121^294^[REPLACE] else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'e' )  { if  ( string.charAt ( 2 )  || 's' && s.charAt ( 1 )  || 'l' )  {^213^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^213^214^^^^121^294^[ADD] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  { id=Id_else; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id=Id_this; break L0;} } ;^216^^^^^121^294^[REPLACE] id=Id_enum; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^216^217^^^^121^294^[ADD] id=Id_enum; break L0;} } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' || s.charAt ( 1 ) =='l' )  {^213^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id=Id_enum; break L0;} } ;^214^^^^^121^294^[REPLACE] id=Id_else; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 ) =='l' )  {^213^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='s' && s.charAt ( 1 ) =='l' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( s.equals ( 2 )  || 'u' && s.charAt ( 1 )  || 'n' )  {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^215^216^^^^121^294^[ADD] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  { id=Id_enum; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { if  ( string.charAt ( 2 ) =='u' || s.charAt ( 1 ) =='n' )  {^215^^^^^121^294^[REPLACE] else if  ( c=='m' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='n' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount && 'e' )  { if  ( s.charAt ( 2 )  && 'u' && s.charAt ( 1 )  && 'r' )  {^222^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='r' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c && 's' )  { if  ( string.charAt ( 2 )  && 'i' && s.charAt ( 1 )  && 'h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' ) {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id=Id_this; break L0;} } break L; ;^225^^^^^121^294^[REPLACE] id=Id_this; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^225^226^^^^121^294^[ADD] id=Id_this; break L0;} } break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 ) =='h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^224^225^^^^121^294^[ADD] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  { id=Id_this; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 ) =='r' )  {^222^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='r' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^id=Id_enum; break L0;} } ;^223^^^^^121^294^[REPLACE] id=Id_true; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='e' )  { if  ( string.equals ( 2 / 4 ) =='u' ) {^222^^^^^121^294^[REPLACE] if  ( c=='e' )  { if  ( s.charAt ( 2 ) =='u' && s.charAt ( 1 ) =='r' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^223^224^225^^^121^294^[ADD] id=Id_true; break L0;} } else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  { id=Id_this; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  s.charAt ( 1 )  != 'h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=='s' )  { if  ( s.charAt ( 2 - 1 ) =='i' || s.charAt ( 1 ) =='h' )  {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'm' )  {     if  (  (  ( s.charAt ( 2 )  )  == 'u' )  &&  (  ( s.charAt ( 1 )  )  == 'n' )  )  {         id = Id_enum;         break L0;     } }^224^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='s' )  { if  ( s.equals ( 2 ) =='i' ) {^224^^^^^121^294^[REPLACE] else if  ( c=='s' )  { if  ( s.charAt ( 2 ) =='i' && s.charAt ( 1 ) =='h' )  {^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount != 'c' )  { X="const";id=Id_const; }^236^^^^^121^294^[REPLACE] if  ( c=='c' )  { X="const";id=Id_const; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { X="final";id=Id_final; }^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^237^238^239^240^^121^294^[ADD] else if  ( c=='f' )  { X="final";id=Id_final; } break L; case 'o': c=s.charAt ( 0 ) ; if  ( c=='f' )  { X="float";id=Id_float; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; } ;^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='f' )  { X="final";id=Id_final; } ;^236^^^^^121^294^[REPLACE] if  ( c=='c' )  { X="const";id=Id_const; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( xmlOpenTagsCount && 'f' )  { X="final";id=Id_final; }^237^^^^^121^294^[REPLACE] else if  ( c=='f' )  { X="final";id=Id_final; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^237^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount && 'f' )  { X="float";id=Id_float; }^240^^^^^121^294^[REPLACE] if  ( c=='f' )  { X="float";id=Id_float; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c ||xmlOpenTagsCount )  { X="short";id=Id_short; }^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 'p': X="super";id=Id_super; break L;case 't': X="catch";id=Id_catch; break L;^241^242^243^244^245^121^294^[ADD] else if  ( c=='s' )  { X="short";id=Id_short; } break L; case 'p': X="super";id=Id_super; break L; case 'r': X="throw";id=Id_throw; break L; case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='p' )  { X="protected";id=Id_protected; } ;^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^241^242^243^244^245^121^294^[ADD] else if  ( c=='s' )  { X="short";id=Id_short; } break L; case 'p': X="super";id=Id_super; break L; case 'r': X="throw";id=Id_throw; break L; case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='f' )  { X="final";id=Id_final; } ;^240^^^^^121^294^[REPLACE] if  ( c=='f' )  { X="float";id=Id_float; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^240^241^^^^121^294^[ADD] if  ( c=='f' )  { X="float";id=Id_float; } else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 's' )  { X="short";id=Id_short; }^241^^^^^121^294^[REPLACE] else if  ( c=='s' )  { X="short";id=Id_short; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^241^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'd' )  { X="delete";id=Id_delete; }^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount || 'r' )  { X="return";id=Id_return; }^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^251^252^253^254^255^121^294^[ADD] else if  ( c=='r' )  { X="return";id=Id_return; } break L; case 'h': X="throws";id=Id_throws; break L; case 'm': X="import";id=Id_import; break L; case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='p' )  { X="protected";id=Id_protected; } ;^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 'm': X="import";id=Id_import; break L;case 'o': X="double";id=Id_double; break L;^251^252^253^254^255^121^294^[ADD] else if  ( c=='r' )  { X="return";id=Id_return; } break L; case 'h': X="throws";id=Id_throws; break L; case 'm': X="import";id=Id_import; break L; case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c;^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^250^251^^^^121^294^[ADD] if  ( c=='d' )  { X="delete";id=Id_delete; } else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { X="return";id=Id_return; }^251^^^^^121^294^[REPLACE] else if  ( c=='r' )  { X="return";id=Id_return; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 'i' )  { X="interface";id=Id_interface; }^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^278^279^^^^121^294^[ADD] if  ( c=='i' )  { X="interface";id=Id_interface; } else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount != 'p' )  { X="protected";id=Id_protected; }^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c || 't' )  { X="transient";id=Id_transient; }^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 10: c=s.charAt ( 1 ) ;^280^281^282^283^^121^294^[ADD] else if  ( c=='t' )  { X="transient";id=Id_transient; } break L; case 10: c=s.charAt ( 1 ) ; if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='t' )  { X="transient";id=Id_transient; } break L; ;^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; } ;^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { X="transient";id=Id_transient; }^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^280^281^282^283^^121^294^[ADD] else if  ( c=='t' )  { X="transient";id=Id_transient; } break L; case 10: c=s.charAt ( 1 ) ; if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^279^280^^^^121^294^[ADD] else if  ( c=='p' )  { X="protected";id=Id_protected; } else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c = null ;^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'p' )  { X="protected";id=Id_protected; }^279^^^^^121^294^[REPLACE] else if  ( c=='p' )  { X="protected";id=Id_protected; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c && 't' )  { X="transient";id=Id_transient; }^280^^^^^121^294^[REPLACE] else if  ( c=='t' )  { X="transient";id=Id_transient; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c != 'm' )  { X="implements";id=Id_implements; }^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( ! xmlOpenTagsCount=='n' )  { X="instanceof";id=Id_instanceof; }^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( c=='p' )  { X="protected";id=Id_protected; } ;^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^break L;case 12: X="synchronized";id=Id_synchronized; break L;^284^285^286^287^^121^294^[ADD] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; } break L; case 12: X="synchronized";id=Id_synchronized; break L; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c;^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c=^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else { X="instanceof";id=Id_instanceof; }^284^^^^^121^294^[REPLACE] else if  ( c=='n' )  { X="instanceof";id=Id_instanceof; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^284^^^^^121^294^[REMOVE] ^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( X==null && X!=s && !X.equals ( s )  )  id = 0;^288^^^^^121^294^[REPLACE] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( X!=null && X!=s && !X.equals ( s )  )  id = 3;^288^^^^^121^294^[REPLACE] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^L0 * 0: { id = 0 * 0; String X = null; int c;^190^^^^^121^294^[REPLACE] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^190^^^^^121^294^[ADD] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 2: c=s.charAt ( 2 ) ;^192^^^^^121^294^[REPLACE] case 2: c=s.charAt ( 1 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^192^^^^^121^294^[ADD] case 2: c=s.charAt ( 1 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^205^^^^^121^294^[REPLACE] case 'b': X="byte";id=Id_byte; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'c': c=s.charAt ( 2 ) ;^206^^^^^121^294^[REPLACE] case 'c': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^208^209^210^^^121^294^[ADD] id=Id_case; break L0;} } else if  ( c=='r' )  { if  ( s.charAt ( 2 ) =='a' && s.charAt ( 1 ) =='h' )  { id=Id_char; break L0;} }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': c=s.charAt ( 3 ) ; ;^212^^^^^121^294^[REPLACE] case 'e': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^218^^^^^121^294^[REPLACE] case 'g': X="goto";id=Id_goto; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^219^^^^^121^294^[REPLACE] case 'l': X="long";id=Id_long; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^220^^^^^121^294^[REPLACE] case 'n': X="null";id=Id_null; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^220^^^^^121^294^[ADD] case 'n': X="null";id=Id_null; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': c=s.charAt ( 1 ) ;^221^^^^^121^294^[REPLACE] case 't': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^221^^^^^121^294^[ADD] case 't': c=s.charAt ( 3 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^227^^^^^121^294^[REPLACE] case 'v': X="void";id=Id_void; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^228^^^^^121^294^[REPLACE] case 'w': X="with";id=Id_with; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^228^^^^^121^294^[ADD] case 'w': X="with";id=Id_with; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^231^^^^^121^294^[REPLACE] case 'a': X="class";id=Id_class; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^232^^^^^121^294^[REPLACE] case 'e': X="break";id=Id_break; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^233^^^^^121^294^[REPLACE] case 'i': X="while";id=Id_while; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^234^^^^^121^294^[REPLACE] case 'l': X="false";id=Id_false; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': c=s.charAt ( 3 ) ; ;^235^^^^^121^294^[REPLACE] case 'n': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': c=s.charAt ( 1 ) ;^239^^^^^121^294^[REPLACE] case 'o': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^243^^^^^121^294^[REPLACE] case 'p': X="super";id=Id_super; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^244^^^^^121^294^[REPLACE] case 'r': X="throw";id=Id_throw; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^244^245^^^^121^294^[ADD] case 'r': X="throw";id=Id_throw; break L; case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^244^^^^^121^294^[ADD] case 'r': X="throw";id=Id_throw; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^245^^^^^121^294^[REPLACE] case 't': X="catch";id=Id_catch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^248^^^^^121^294^[REPLACE] case 'a': X="native";id=Id_native; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^248^^^^^121^294^[ADD] case 'a': X="native";id=Id_native; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'e': c=s.charAt ( 0 ) ;^248^249^^^^121^294^[ADD] case 'a': X="native";id=Id_native; break L; case 'e': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': c=s.charAt ( 3 ) ; ;^249^^^^^121^294^[REPLACE] case 'e': c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c =  if  ( c;^250^^^^^121^294^[REPLACE] if  ( c=='d' )  { X="delete";id=Id_delete; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^253^^^^^121^294^[REPLACE] case 'h': X="throws";id=Id_throws; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^253^^^^^121^294^[ADD] case 'h': X="throws";id=Id_throws; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^254^^^^^121^294^[REPLACE] case 'm': X="import";id=Id_import; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^255^^^^^121^294^[REPLACE] case 'o': X="double";id=Id_double; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^255^256^^^^121^294^[ADD] case 'o': X="double";id=Id_double; break L; case 't': X="static";id=Id_static; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^256^^^^^121^294^[REPLACE] case 't': X="static";id=Id_static; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^256^^^^^121^294^[ADD] case 't': X="static";id=Id_static; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^257^^^^^121^294^[REPLACE] case 'u': X="public";id=Id_public; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'w': X="switch";id=Id_switch; break L;^257^258^^^^121^294^[ADD] case 'u': X="public";id=Id_public; break L; case 'w': X="switch";id=Id_switch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^258^^^^^121^294^[REPLACE] case 'w': X="switch";id=Id_switch; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^259^^^^^121^294^[REPLACE] case 'x': X="export";id=Id_export; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^259^^^^^121^294^[ADD] case 'x': X="export";id=Id_export; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'o': X="boolean";id=Id_boolean; break L; ;^260^^^^^121^294^[REPLACE] case 'y': X="typeof";id=Id_typeof; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'r': X="private";id=Id_private; break L; ;^263^^^^^121^294^[REPLACE] case 'a': X="package";id=Id_package; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'n': X="null";id=Id_null; break L; ;^264^^^^^121^294^[REPLACE] case 'e': X="default";id=Id_default; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^264^265^^^^121^294^[ADD] case 'e': X="default";id=Id_default; break L; case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'i': X="finally";id=Id_finally; break L;^264^265^^^^121^294^[ADD] case 'e': X="default";id=Id_default; break L; case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'r': X="private";id=Id_private; break L; ;^265^^^^^121^294^[REPLACE] case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^265^^^^^121^294^[ADD] case 'i': X="finally";id=Id_finally; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^266^^^^^121^294^[REPLACE] case 'o': X="boolean";id=Id_boolean; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'r': X="private";id=Id_private; break L;^266^267^^^^121^294^[ADD] case 'o': X="boolean";id=Id_boolean; break L; case 'r': X="private";id=Id_private; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^267^^^^^121^294^[REPLACE] case 'r': X="private";id=Id_private; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^268^^^^^121^294^[REPLACE] case 'x': X="extends";id=Id_extends; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'a': X="native";id=Id_native; break L; ;^271^^^^^121^294^[REPLACE] case 'a': X="abstract";id=Id_abstract; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^272^^^^^121^294^[REPLACE] case 'c': X="continue";id=Id_continue; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^272^^^^^121^294^[ADD] case 'c': X="continue";id=Id_continue; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^272^273^^^^121^294^[ADD] case 'c': X="continue";id=Id_continue; break L; case 'd': X="debugger";id=Id_debugger; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': X="byte";id=Id_byte; break L; ;^273^^^^^121^294^[REPLACE] case 'd': X="debugger";id=Id_debugger; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'a': X="native";id=Id_native; break L; ;^274^^^^^121^294^[REPLACE] case 'f': X="function";id=Id_function; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^274^^^^^121^294^[ADD] case 'f': X="function";id=Id_function; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^274^275^^^^121^294^[ADD] case 'f': X="function";id=Id_function; break L; case 'v': X="volatile";id=Id_volatile; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'v': X="void";id=Id_void; break L; ;^275^^^^^121^294^[REPLACE] case 'v': X="volatile";id=Id_volatile; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 't': c=s.charAt ( 3 ) ; ;^277^^^^^121^294^[REPLACE] case 9: c=s.charAt ( 0 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c =  if  ( c;^278^^^^^121^294^[REPLACE] if  ( c=='i' )  { X="interface";id=Id_interface; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 1 / 20: c=s.charAt ( 1 / 2 ) ;^282^^^^^121^294^[REPLACE] case 10: c=s.charAt ( 1 ) ;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c =  if  ( c;^283^^^^^121^294^[REPLACE] if  ( c=='m' )  { X="implements";id=Id_implements; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 12: X =  case 12: X;^286^^^^^121^294^[REPLACE] case 12: X="synchronized";id=Id_synchronized; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 12: X= "synchronized";id^286^^^^^121^294^[REPLACE] case 12: X="synchronized";id=Id_synchronized; break L;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0 + 2;^288^^^^^121^294^[REPLACE] if  ( X!=null && X!=s && !X.equals ( s )  )  id = 0;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^L0: { id = 0; String X = this; int c;^190^^^^^121^294^[REPLACE] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop;^190^^^^^121^294^[REPLACE] L0: { id = 0; String X = null; int c;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( Id_private  !=  0 )  { return Token.EOF; }^292^^^^^121^294^[REPLACE] if  ( id == 0 )  { return Token.EOF; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^292^293^294^^^121^294^[ADD] if  ( id == 0 )  { return Token.EOF; } return id & 0xff; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^292^^^^^121^294^[REPLACE] if  ( id == 0 )  { return Token.EOF; }^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return id | 0xff;^293^^^^^121^294^[REPLACE] return id & 0xff;^[METHOD] stringToKeyword [TYPE] int [PARAMETER] String name [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  id  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int length = string.length (  ) ;^297^^^^^296^321^[REPLACE] int length = s.length (  ) ;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( length /  0.5  == 0 || !Character.isJavaIdentifierStart ( s.charAt ( 0 )  )  ) return false;^299^300^^^^296^321^[REPLACE] if  ( length == 0 || !Character.isJavaIdentifierStart ( s.charAt ( 0 )  )  ) return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^300^^^^^296^321^[REPLACE] return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( Character.isJavaIdentifierPart ( c )  )  {^304^^^^^296^321^[REPLACE] if  ( !Character.isJavaIdentifierPart ( c )  )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^304^305^306^307^308^296^321^[ADD] if  ( !Character.isJavaIdentifierPart ( c )  )  { if  ( c == '\\' )  { if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '\\' )  {^305^^^^^296^321^[REPLACE] if  ( c == '\\' )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^305^306^307^308^309^296^321^[ADD] if  ( c == '\\' )  { if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 0  )  < length (  )  ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^306^307^308^309^310^296^321^[ADD] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 4 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^312^^^^^296^321^[REPLACE] return true;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 5 )  < length *  2 ) &&  ( s.length ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^316^^^^^296^321^[REPLACE] return false;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '\\' )  {^305^^^^^296^321^[REPLACE] if  ( c == '\\' )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 0  )  < length - 3 ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <=   s.charAt ( i + 2 )  && 0 <= Kit.^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 5 )  < length /  0.5  ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=0 ; i<length /  0.5 ; i++ )  {^302^^^^^296^321^[REPLACE] for  ( int i=1; i<length; i++ )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^302^303^304^305^306^296^321^[ADD] for  ( int i=1; i<length; i++ )  { char c = s.charAt ( i ) ; if  ( !Character.isJavaIdentifierPart ( c )  )  { if  ( c == '\\' )  { if  ( !  (  ( i + 5 )  < length )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 5 )  < length (  )  ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 0  )  < length (  )  ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <=   s.charAt ( i + 2 )  && 0 <= Kit.^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 5 )  < length *  0.5  ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <=   s.charAt ( i + 2 )  && 0 <= Kit.^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !  (  ( i + 0  )  < length (  )  ) &&  ( s.length ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0  )^306^307^308^309^^296^321^[REPLACE] if  ( !  (  ( i + 5 )  < length ) &&  ( s.charAt ( i + 1 )  == 'u' ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 2 ) , 0 ) && 0 <= Kit.xDigitToInt ( s.charAt ( i + 3 ) , 0 )^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^char c = string.charAt ( i ) ;^303^^^^^296^321^[REPLACE] char c = s.charAt ( i ) ;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^303^^^^^296^321^[ADD] char c = s.charAt ( i ) ;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=0 ; i<length; i++ )  {^302^^^^^296^321^[REPLACE] for  ( int i=1; i<length; i++ )  {^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^320^^^^^296^321^[REPLACE] return true;^[METHOD] isJSIdentifier [TYPE] boolean [PARAMETER] String s [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  char c  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^protected final int getCharno (  )  { return charno; }^323^^^^^^^[REPLACE] protected final int getLineno (  )  { return lineno; }^[METHOD] getLineno [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^protected final int getLineno (  )  { return lineno; }^325^^^^^^^[REPLACE] protected final int getCharno (  )  { return charno; }^[METHOD] getCharno [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^327^^^^^^^[REPLACE] final String getString (  )  { return string; }^[METHOD] getString [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^329^^^^^^^[REPLACE] final double getNumber (  )  { return number; }^[METHOD] getNumber [TYPE] double [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^331^^^^^^^[REPLACE] final boolean eof (  )  { return hitEOF; }^[METHOD] eof [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean dirtyLine  false  hitEOF  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  regExpFlags  s  sourceString  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  c  charno  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_throws  ==  Token.EOF )  {^338^^^^^334^854^[REPLACE] if  ( this.pushbackToken != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^int result = this.pushbackToken;this.pushbackToken = Token.EOF;return result;^338^339^340^341^342^334^854^[ADD] if  ( this.pushbackToken != Token.EOF )  { int result = this.pushbackToken; this.pushbackToken = Token.EOF; return result; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.pushbackToken  =  this.pushbackToken ;^340^^^^^334^854^[REPLACE] this.pushbackToken = Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeStart;^341^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop;^339^^^^^334^854^[REPLACE] int result = this.pushbackToken;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.pushbackToken ;^340^^^^^334^854^[REPLACE] this.pushbackToken = Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^340^^^^^334^854^[ADD] this.pushbackToken = Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^341^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^343^^^^^334^854^[REPLACE] int c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^343^^^^^334^854^[ADD] int c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( 0  >=  Kit.xDigitToInt ( xmlOpenTagsCount, 0 )  )  {^480^^^^^334^854^[REPLACE] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^482^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( '0' <= c || c <= '9' )  {^485^^^^^334^854^[REPLACE] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c >= '8' )  {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 - 0;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^498^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^strLoop: while  ( c  ==  quoteChar )  {^561^^^^^334^854^[REPLACE] strLoop: while  ( c != quoteChar )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' ) {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^565^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '\\' )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  4 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^continue strLoop;^594^595^596^^^334^854^[ADD] if  ( escapeVal < 0 )  { continue strLoop; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  >=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'x' ) ;continue strLoop;int c1 = c;^609^610^611^612^613^334^854^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; continue strLoop; } else { int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (val  !=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  val;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^617^^^^^609^624^[REPLACE] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^617^618^^^^609^624^[ADD] addToString ( 'x' ) ; addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^618^^^^^609^624^[REPLACE] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^614^^^^^609^624^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 ) ; ;^615^^^^^609^624^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  stringBufferTop;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^622^^^^^609^624^[ADD] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int xmlOpenTagsCount1 = c;^613^^^^^609^624^[REPLACE] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^610^^^^^334^854^[REPLACE] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^610^^^^^334^854^[ADD] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^616^617^618^619^^334^854^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  val;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^622^^^^^616^623^[ADD] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^617^^^^^334^854^[REPLACE] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^617^^^^^334^854^[ADD] addToString ( 'x' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^618^^^^^334^854^[REPLACE] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c ) {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c < '8' )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' || val <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^644^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  ^  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^638^^^^^334^854^[ADD] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^639^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 3 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= xmlOpenTagsCount ) {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  <  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^644^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^636^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 1 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.pushbackToken = Token.EOF; ;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^643^^^^^334^854^[ADD] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^648^^^^^334^854^[REPLACE] c = val;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val =xmlOpenTagsCount - '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c ||xmlIsTagContent )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^val = 8 * val + c - '0';c = getChar (  ) ;^637^638^639^640^^334^854^[ADD] if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c ) {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^640^641^^643^644^334^854^[ADD] if  ( '0' <= c && c < '8' && val <= 037 )  {  val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c -xmlOpenTagsCount;^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 2; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^592^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 ) ; ;^593^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^593^^^^^334^854^[ADD] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^572^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'n': c = '\n'; break; ;^574^^^^^334^854^[REPLACE] case 'b': c = '\b'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': c = '\b'; break; ;^575^^^^^334^854^[REPLACE] case 'f': c = '\f'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': c = '\b'; break; ;^576^^^^^334^854^[REPLACE] case 'n': c = '\n'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': c = '\b'; break; ;^577^^^^^334^854^[REPLACE] case 'r': c = '\r'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': c = '\b'; break; ;^578^^^^^334^854^[REPLACE] case 't': c = '\t'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case 'b': c = '\b'; break; ;^582^^^^^334^854^[REPLACE] case 'v': c = 0xb; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^582^^^^^334^854^[ADD] case 'v': c = 0xb; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 4;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^590^^^^^334^854^[ADD] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^592^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  result;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^602^603^^^^334^854^[ADD] c = escapeVal; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^607^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 2 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^614^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^614^615^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 ) ; ;^615^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^615^^^^^334^854^[ADD] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^630^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 10 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;^638^639^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^648^^^^^334^854^[ADD] c = val;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int declTags = 1;^570^^^^^334^854^[REPLACE] int escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^588^^^^^334^854^[REPLACE] int escapeStart = stringBufferTop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 - 0; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int xmlOpenTagsCount1 = c;^613^^^^^334^854^[REPLACE] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  >  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^635^636^^^^334^854^[ADD] int val = c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >  0 + 0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( stringBufferTop  >  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '-' )  &&  (  ( peekChar (  )  )  == '-' )  )  {     c = getChar (  ) ;     addToString ( c ) ;     if  (  ( peekChar (  )  )  == '>' )  {         c = getChar (  ) ;         addToString ( c ) ;         return true;     }else {         continue;     } }^609^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  token;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^613^614^^^^609^624^[ADD] int c1 = c; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  xmlOpenTagsCount;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' )  {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c < '8' || val <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  ||  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^639^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 + 4 * val + c  ==  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  null;^648^^^^^334^854^[REPLACE] c = val;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  xmlIsTagContent )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 3 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 2 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= xmlOpenTagsCount || c < '8' || val <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  (Id_returnnt i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^572^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^576^577^^^^334^854^[ADD] case 'n': c = '\n'; break; case 'r': c = '\r'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 2;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_true;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  tokenno;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 - 4 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^608^^^^^334^854^[ADD] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  val;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^622^^^^^334^854^[ADD] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  !=  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^653^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 << 3; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^591^592^593^594^595^334^854^[ADD] for  ( int i = 0; i != 4; ++i )  { c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ; if  ( escapeVal < 0 )  { continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c = getChar (  )  )  !=xmlIsTagContent ;^794^795^^^^334^854^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^794^795^796^^^334^854^[ADD] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  Id_var )  {^351^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( c  ||  '\n' )  {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   dirtyLine = true;^356^357^358^359^^334^854^[ADD] else if  ( !isJSSpace ( c )  )  { if  ( c != '-' )  { dirtyLine = true; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ==  '-' )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false;^358^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false; ;^358^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ==  '-' )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = true;^354^^^^^334^854^[REPLACE] dirtyLine = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;^355^^^^^334^854^[REPLACE] return Token.EOL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^358^^^^^334^854^[ADD] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ==  '-' )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^352^^^^^334^854^[REPLACE] return Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  || xmlOpenTagsCount )  {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( isJSSpace ( c )  )  {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^357^358^359^^^334^854^[ADD] if  ( c != '-' )  { dirtyLine = true; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '@' )  return Token.XMLATTR;^364^^^^^334^854^[REPLACE] if  ( c == '@' )  return Token.XMLATTR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^364^^^^^334^854^[REPLACE] if  ( c == '@' )  return Token.XMLATTR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '\\' )  {^370^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^383^^^^^370^387^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^stringBufferTop = 0;addToString ( c ) ;^383^384^385^386^^370^387^[ADD] if  ( identifierStart )  { stringBufferTop = 0; addToString ( c ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^384^^^^^370^387^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^384^^^^^370^387^[ADD] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart =  Character.isJavaIdentifierStart (  ( char ) c ) ;^382^^^^^370^387^[REPLACE] identifierStart = Character.isJavaIdentifierStart (  ( char ) c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^384^^^^^370^387^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^384^385^^^^370^387^[ADD] stringBufferTop = 0; addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  'u' )  {^372^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^372^373^374^375^^334^854^[ADD] if  ( c == 'u' )  { identifierStart = true; isUnicodeEscapeStart = true; stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = true;^377^^^^^372^380^[REPLACE] identifierStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\n'; ;^379^^^^^372^380^[REPLACE] c = '\\';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = false; ;^373^^^^^334^854^[REPLACE] identifierStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false;^374^^^^^334^854^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^374^^^^^334^854^[ADD] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^371^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 >> 3;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = true;^377^^^^^334^854^[REPLACE] identifierStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^377^378^379^380^^334^854^[ADD] identifierStart = false; ungetChar ( c ) ; c = '\\'; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\n'; ;^379^^^^^334^854^[REPLACE] c = '\\';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^379^^^^^334^854^[ADD] c = '\\';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  'u' )  {^372^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c ) ;c = '\\';^377^378^379^380^^372^380^[ADD] identifierStart = false; ungetChar ( c ) ; c = '\\'; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^stringBufferTop = 0;^374^375^^^^334^854^[ADD] isUnicodeEscapeStart = true; stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^383^^^^^334^854^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^stringBufferTop = 0;addToString ( c ) ;^383^384^385^386^^334^854^[ADD] if  ( identifierStart )  { stringBufferTop = 0; addToString ( c ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 4;^384^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^Id_shortf  ( identifierStart )  {^389^^^^^334^854^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_thissUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '\\' )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c ==xmlIsTagContent ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^424^425^426^427^428^414^430^[ADD] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isUnicodeEscapeStart = true;containsEscape = true;parser.addError ( "msg.illegal.character" ) ;^416^417^418^419^420^392^431^[ADD] if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true; } else { parser.addError ( "msg.illegal.character" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^421^^^^^416^422^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false;^417^^^^^392^431^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^containsEscape = false;^418^^^^^392^431^[REPLACE] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^415^^^^^392^431^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^415^^^^^392^431^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^421^^^^^392^431^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ||  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false; ;^417^^^^^392^431^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^418^^^^^392^431^[ADD] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == xmlIsTagContent || Character.isJavaIdentifierStart (  ( char ) c )  ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^424^425^426^427^428^392^431^[ADD] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^413^^^^^392^431^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ==  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^408^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^400^401^402^^404^334^854^[ADD] for  ( int i = 0; i != 4; ++i )  { c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ; if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( s.charAt ( 0 )  )  == 'd' )  {     id = Id_do;     break L0; }^404^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^401^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^401^402^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 ) ; ;^402^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = true;^411^^^^^334^854^[REPLACE] isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 3;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 2; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( val  !=  4 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;isUnicodeEscapeStart = true;containsEscape = true;^414^415^416^417^418^334^854^[ADD] if  ( c == '\\' )  { c = getChar (  ) ; if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false;^417^^^^^334^854^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^containsEscape = true;^417^418^^^^334^854^[ADD] isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^containsEscape = false;^418^^^^^334^854^[REPLACE] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^415^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^418^^^^^334^854^[ADD] containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^421^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ||  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  Character .isJavaIdentifierStart ( null )   ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( containsEscape )  {^436^^^^^334^854^[REPLACE] if  ( !containsEscape )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^436^437^^^^334^854^[ADD] if  ( !containsEscape )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( result  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( result  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.addWarning ( "msg.reserved.keyword", string ) ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineStart;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeVal;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineStart;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return result;^445^446^447^448^^334^854^[ADD] else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) { return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeStart;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceEnd;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (escapeVal  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^443^444^445^446^^334^854^[ADD] if  ( result != Token.RESERVED )  { return result; } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  )^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( sourceString )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^453^^^^^445^454^[ADD] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return pushbackToken;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int result = stringingToKeyword ( str ) ;^441^^^^^334^854^[REPLACE] int result = stringToKeyword ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (escapeVal  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( result  == escapeStart )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return pushbackToken;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return result;^443^444^445^446^^334^854^[ADD] if  ( result != Token.RESERVED )  { return result; } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  )^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceCursor;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ungetCursor;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^391^^^^^334^854^[REPLACE] for  ( ;; )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^391^392^^^^334^854^[ADD] for  ( ;; )  { if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '\\' )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '-' )  {     addToString ( c ) ;     if  ( ! ( readXmlComment (  )  )  )          return Token.ERROR;      }else {     stringBufferTop = 0;     this.string = null;     parser.addError ( form" ) ;     return Token.ERROR; }^416^^^^^392^431^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^418^^^^392^431^[ADD] isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^^^^^392^431^[ADD] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^416^417^418^419^420^392^431^[ADD] if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true; } else { parser.addError ( "msg.illegal.character" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == xmlIsTagContent ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  <=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( ungetCursor  >  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^parser.addError ( "msg.invalid.escape" ) ;return Token.ERROR;^406^407^408^409^^334^854^[ADD] if  ( escapeVal < 0 )  { parser.addError ( "msg.invalid.escape" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 << 2; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^404^405^^^^334^854^[ADD] if  ( escapeVal < 0 )  { break; } }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^411^^^^^334^854^[ADD] isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 4;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^399^^^^^334^854^[ADD] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  0L )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 - 0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  || xmlOpenTagsCount )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^416^417^418^419^420^334^854^[ADD] if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true; } else { parser.addError ( "msg.illegal.character" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^415^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^^^^^334^854^[ADD] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^424^425^426^427^428^334^854^[ADD] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_returnnt i = 0; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  ==  0 << 2 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^402^^^^^334^854^[ADD] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^413^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 2;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 1; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 >> 0; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string =   ( String ) allStrings.intern ( string ) ;^457^^^^^334^854^[REPLACE] this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeStart;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^458^^^^^334^854^[REPLACE] return Token.NAME;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean containsEscape = true;^390^^^^^334^854^[REPLACE] boolean containsEscape = isUnicodeEscapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 0 * 1;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 + 1; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String numString = getStringFromBuffer (  ) ;^435^^^^^334^854^[REPLACE] String str = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^Id_withf  ( isUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^392^393^^^^334^854^[ADD] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( tokenno  >  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0; i  == Id_return; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^401^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  3 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >=  1 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^424^^^^^414^430^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  != xmlOpenTagsCount )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isUnicodeEscapeStart = true;containsEscape = true;parser.addError ( "msg.illegal.character" ) ;^416^417^418^419^420^334^854^[ADD] if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true; } else { parser.addError ( "msg.illegal.character" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = false; ;^417^^^^^334^854^[REPLACE] isUnicodeEscapeStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^417^418^^^^334^854^[ADD] isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  || xmlOpenTagsCount )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == xmlIsTagContent || Character .isJavaIdentifierStart ( null )   ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^442^443^444^445^446^334^854^[ADD] if  ( result != Token.EOF )  { if  ( result != Token.RESERVED )  { return result; } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  )^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeStart  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ungetCursor;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return stringBufferTop;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( result  == length )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^445^446^447^^^334^854^[REPLACE] } else if  ( !parser.compilerEnv. isReservedKeywordAsIdentifier (  )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( string )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceEnd;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return length;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeStart;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^441^^^^^334^854^[ADD] int result = stringToKeyword ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( length  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (pushbackToken  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return sourceCursor;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeVal;^448^^^^^445^454^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineEndChar;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( pushbackToken  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return lineStart;^448^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isDigit ( c )  &&  ( c == '.' && isDigit ( peekChar (  )  )  )  )  {^462^^^^^334^854^[REPLACE] if  ( isDigit ( c )  ||  ( c == '.' && isDigit ( peekChar (  )  )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( 0  !=  Kit.xDigitToInt ( c, 0 )  )  {^480^^^^^334^854^[REPLACE] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^480^481^^^^334^854^[ADD] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  { addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( '0' <= c  <  c <= '9' )  {^485^^^^^334^854^[REPLACE] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 || c >= '8' )  {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16; ;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 9;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '0' )  {^467^^^^^334^854^[REPLACE] if  ( c == '0' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == 'X' )  {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( isDigit ( c )  )  {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^475^^^^^472^476^[REPLACE] addToString ( '0' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 0;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 15;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^471^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   base = 8;addToString ( '0' ) ;^472^473^474^475^476^334^854^[ADD] else if  ( isDigit ( c )  )  { base = 8; } else { addToString ( '0' ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 7;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^468^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 4;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^470^471^^^^334^854^[ADD] base = 16; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 >> 4;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^475^^^^^472^476^[ADD] addToString ( '0' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 4;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^473^^^^^334^854^[ADD] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 2;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10; ;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( isDigit ( xmlOpenTagsCount )  )  {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 << 2;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (escapeVal  ||  16 )  {^479^^^^^334^854^[REPLACE] if  ( base == 16 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^479^480^481^482^483^334^854^[ADD] if  ( base == 16 )  { while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  { addToString ( c ) ; c = getChar (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( '0' <= xmlOpenTagsCount || c <= '9' )  {^485^^^^^479^500^[REPLACE] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^485^486^487^^^479^500^[ADD] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c >= '8' )  {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^492^493^494^495^496^479^500^[ADD] if  ( base == 8 && c >= '8' )  { parser.addWarning ( "msg.bad.octal.literal", c == '8' ? "8" : "9" ) ; base = 10; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 3;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^495^^^^^479^500^[ADD] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16; ;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^498^^^^^479^500^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 + 4;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( 0  ==  Kit.xDigitToInt ( c, 0 )  )  {^480^^^^^334^854^[REPLACE] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^482^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent ) {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 7;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (   ( c == '.' || c == 'e' || c == 'E' )  )  {^504^^^^^334^854^[REPLACE] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^isInteger = false;addToString ( c ) ;^504^505^506^507^508^334^854^[ADD] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  { isInteger = false; if  ( c == '.' )  { do { addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  && xmlOpenTagsCount )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^509^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == 'e' &&xmlIsTagContent )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '+' ) {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;c = getChar (  ) ;^515^516^517^518^^334^854^[ADD] if  ( c == '+' || c == '-' )  { addToString ( c ) ; c = getChar (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^517^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^517^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !isDigit ( xmlOpenTagsCount )  )  {^519^^^^^334^854^[REPLACE] if  ( !isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^521^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^514^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^525^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '+' && c == '-' )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^519^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isInteger = true;^505^^^^^334^854^[REPLACE] isInteger = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^506^507^508^509^510^334^854^[ADD] if  ( c == '.' )  { do { addToString ( c ) ; c = getChar (  ) ; } while  ( isDigit ( c )  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == 'e' && c == 'E' )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^525^526^^^^334^854^[ADD] c = getChar (  ) ; } while  ( isDigit ( c )  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^parser.addError ( "msg.missing.exponent" ) ;return Token.ERROR;^519^520^521^522^^334^854^[ADD] if  ( !isDigit ( c )  )  { parser.addError ( "msg.missing.exponent" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 10 && isInteger )  {^533^^^^^334^854^[REPLACE] if  ( base == 10 && !isInteger )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 1, base ) ;^543^^^^^533^544^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^dval = Double.valueOf ( numString ) .doubleValue (  ) ;^534^535^536^537^^334^854^[ADD] try {  dval = Double.valueOf ( numString ) .doubleValue (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval =  Double.valueOf ( null ) .doubleValue (  ) ;^536^^^^^334^854^[REPLACE] dval = Double.valueOf ( numString ) .doubleValue (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval =  Double.valueOf ( string ) .doubleValue (  ) ;^536^^^^^334^854^[REPLACE] dval = Double.valueOf ( numString ) .doubleValue (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^540^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^538^539^^^^334^854^[ADD] catch  ( NumberFormatException ex )  { parser.addError ( "msg.caught.nfe" ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^464^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^464^^^^^334^854^[ADD] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 3;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^470^^^^^334^854^[ADD] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 % 3;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 3;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^495^^^^^334^854^[ADD] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^509^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^536^^^^^334^854^[ADD] dval = Double.valueOf ( numString ) .doubleValue (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 2, base ) ;^543^^^^^334^854^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.number =  null;^546^^^^^334^854^[REPLACE] this.number = dval;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.NUMBER;^546^547^^^^334^854^[ADD] this.number = dval; return Token.NUMBER;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^547^^^^^334^854^[REPLACE] return Token.NUMBER;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int base = 0;^465^^^^^334^854^[REPLACE] int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean isInteger = false;^502^^^^^334^854^[REPLACE] boolean isInteger = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String str = getStringFromBuffer (  ) ;^530^^^^^334^854^[REPLACE] String numString = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^Id_switch        = Token.SWITCH, Id_this          = Token.THIS,^532^^^^^334^854^[REPLACE] double dval;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  != xmlOpenTagsCount )  {^467^^^^^334^854^[REPLACE] if  ( c == '0' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^467^468^469^470^471^334^854^[ADD] if  ( c == '0' )  { c = getChar (  ) ; if  ( c == 'x' || c == 'X' )  { base = 16; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart && c == 'X' )  {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c <= 127 )  {     if  (  ( c == '\n' )  ||  ( c == '\r' )  )  {         lineEndChar = c;         c = '\n';     } }else {     if  ( isJSFormatChar ( c )  )  {         continue;     }     if  ( isJSLineTerminator ( c )  )  {         lineEndChar = c;         c = '\n';     } }^469^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 + 0;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16; ;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16 * 0;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( !isJSSpace ( c )  )  {^472^^^^^334^854^[REPLACE] } else if  ( isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 3;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 0;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart ) {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 6;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 * 2;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 11;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^471^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  != val )  {^479^^^^^334^854^[REPLACE] if  ( base == 16 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( '0' <= c ;^485^^^^^479^500^[REPLACE] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  isUnicodeEscapeStart )  {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 7;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( 0  <  Kit.xDigitToInt ( c, 0 )  )  {^480^^^^^334^854^[REPLACE] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10L;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsAttribute ||  ( xmlOpenTagsCount == '.' || c == 'e' || c == 'E' )  )  {^504^^^^^334^854^[REPLACE] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent && c == 'E' )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == '+' && c == '-' )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '+' &&isUnicodeEscapeStart )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ||  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == 'E' )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^512^513^514^515^516^334^854^[ADD] if  ( c == 'e' || c == 'E' )  { addToString ( c ) ; c = getChar (  ) ; if  ( c == '+' || c == '-' )  { addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^514^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^515^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent ) {^533^^^^^334^854^[REPLACE] if  ( base == 10 && !isInteger )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^533^534^^536^537^334^854^[ADD] if  ( base == 10 && !isInteger )  { try { dval = Double.valueOf ( numString ) .doubleValue (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 4, base ) ;^543^^^^^533^544^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart ) {^551^^^^^334^854^[REPLACE] if  ( c == '"' || c == '\'' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^strLoop: while  ( c  == xmlOpenTagsCount )  {^561^^^^^334^854^[REPLACE] strLoop: while  ( c != quoteChar )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' && c == xmlIsAttribute )  {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '\\' )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (stringBufferTop  ==  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^615^^^^^609^624^[ADD] escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  stringBufferTop;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^618^^^^^334^854^[ADD] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 0 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( '0' <= c )  &&  ( c < '8' )  )  &&  ( val <= 31 )  )  {     val =  (  ( 8 * val )  + c )  - '0';     c = getChar (  ) ; }^637^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c < '8' || xmlOpenTagsCount <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.pushbackToken = Token.EOF; ;^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 5 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^643^644^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;^643^644^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0; i  == Id_throw; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( escapeVal < 0 )  {     break; }^594^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^578^^^^^334^854^[ADD] case 't': c = '\t'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^592^593^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^601^602^^^^334^854^[ADD] stringBufferTop = escapeStart; c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  token;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^630^631^^^^334^854^[ADD] c = getChar (  ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^588^^^^^334^854^[ADD] int escapeStart = stringBufferTop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 1; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  ==  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  >=  0 % 2 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (val  <=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^616^617^618^619^^609^624^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^618^619^^^^609^624^[ADD] addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (token  !=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c < '8' )  {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^int val = c - '0';c = getChar (  ) ;val = 8 * val + c - '0';^634^635^636^637^638^334^854^[ADD] if  ( '0' <= c && c < '8' )  { int val = c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 - 3 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^638^639^^^^334^854^[ADD] val = 8 * val + c - '0'; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 1 * val + c  >  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^637^638^639^640^^334^854^[ADD] if  ( '0' <= c && c < '8' )  { val = 8 * val + c - '0'; c = getChar (  ) ; if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 2 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_switchnt i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (tokenno  ==  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 1;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_typeof;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  token;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  null;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  >  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 >> 4; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == '\n' ) {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c ) ;parser.addError ( "msg.unterminated.string.lit" ) ;return Token.ERROR;^562^563^564^565^566^334^854^[ADD] if  ( c == '\n' || c == EOF_CHAR )  { ungetChar ( c ) ; parser.addError ( "msg.unterminated.string.lit" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  || xmlOpenTagsCount )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^614^^^^^609^624^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^613^^^^^609^624^[ADD] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ==  0 % 0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^618^^^^^334^854^[REPLACE] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 / 1 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 9 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^635^^^^^334^854^[ADD] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent ) {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 7 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^640^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^594^595^596^^^334^854^[ADD] if  ( escapeVal < 0 )  { continue strLoop; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^576^^^^^334^854^[ADD] case 'n': c = '\n'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 0L;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  c1;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^602^^^^^334^854^[ADD] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^607^608^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ; ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  tokenno;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c -xmlOpenTagsCount;^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  > xmlOpenTagsCount )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^614^615^^^^609^624^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( tokenno  ==  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'x' ) ;addToString ( c1 ) ;continue strLoop;^616^617^618^619^^334^854^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  null;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent || xmlIsTagContent )  {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c ) {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 5 * val + c -xmlOpenTagsCount;^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * 2 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8L * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = xmlOpenTagsCount -xmlOpenTagsCount;^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 / 3 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 2 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  2 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^558^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^560^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  null;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  val;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 4 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 6 * val + c  !=  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string =   ( String ) allStrings.intern ( null ) ;^657^^^^^334^854^[REPLACE] this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^658^^^^^334^854^[REPLACE] return Token.STRING;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int quoteChar = xmlOpenTagsCount;^557^^^^^334^854^[REPLACE] int quoteChar = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^570^^^^^334^854^[ADD] int escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^String numString = getStringFromBuffer (  ) ;^656^^^^^334^854^[REPLACE] String str = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' && c == EOF_CHAR )  {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  '\\' )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (val  !=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( tokenno  !=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  >=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  null;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^614^615^^^^609^624^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  2 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^618^619^^^^334^854^[ADD] addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 2 * val + c  ||  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * 3 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  |  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8L * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  ^  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  == xmlOpenTagsCount )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 0 << 2;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^601^^^^^334^854^[ADD] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0L ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^588^589^^^^334^854^[ADD] int escapeStart = stringBufferTop; addToString ( 'u' ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 4; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c - '0';^613^^^^^334^854^[REPLACE] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = xmlOpenTagsCount - '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (tokenno  >  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  <=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  tokenno;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  1 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^continue strLoop;^618^619^^^^334^854^[ADD] addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= xmlOpenTagsCount ) {^634^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent ) {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  <=  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c -xmlOpenTagsCount;^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8L * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 1 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^672^^^^^334^854^[REPLACE] if  ( matchChar ( ':' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^672^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^675^^^^^672^676^[REPLACE] return Token.COLON;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^673^^^^^334^854^[REPLACE] return Token.COLONCOLON;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^678^^^^^334^854^[REPLACE] if  ( matchChar ( '.' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^680^^^^^334^854^[REPLACE] } else if  ( matchChar ( ' ( ' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^683^^^^^680^684^[REPLACE] return Token.DOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^681^^^^^334^854^[REPLACE] return Token.DOTQUERY;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^683^^^^^334^854^[REPLACE] return Token.DOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.DOT;^679^^^^^334^854^[REPLACE] return Token.DOTDOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( ' ( ' )  )  {^680^^^^^334^854^[REPLACE] } else if  ( matchChar ( ' ( ' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^687^^^^^334^854^[REPLACE] if  ( matchChar ( '|' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.OR;return Token.ASSIGN_BITOR;^687^688^689^690^^334^854^[ADD] if  ( matchChar ( '|' )  )  { return Token.OR; } else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( '=' )  )  {^689^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.BITNOT;^692^^^^^689^693^[REPLACE] return Token.BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;^690^^^^^334^854^[REPLACE] return Token.ASSIGN_BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.BITNOT;^692^^^^^334^854^[REPLACE] return Token.BITOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^688^^^^^334^854^[REPLACE] return Token.OR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^696^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.BITNOT;^699^^^^^696^700^[REPLACE] return Token.BITXOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;^697^^^^^334^854^[REPLACE] return Token.ASSIGN_BITXOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^703^^^^^334^854^[REPLACE] if  ( matchChar ( '&' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.AND;return Token.ASSIGN_BITAND;^703^704^705^706^^334^854^[ADD] if  ( matchChar ( '&' )  )  { return Token.AND; } else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^705^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.ASSIGN_BITAND;return Token.BITAND;^705^706^707^708^709^334^854^[ADD] else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITAND; } else { return Token.BITAND; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.AND;^708^^^^^705^709^[REPLACE] return Token.BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_MOD;^706^^^^^334^854^[REPLACE] return Token.ASSIGN_BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.AND;^708^^^^^334^854^[REPLACE] return Token.BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^704^^^^^334^854^[REPLACE] return Token.AND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( '=' )  )  {^705^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.BITAND;^705^706^707^708^709^334^854^[ADD] else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITAND; } else { return Token.BITAND; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^712^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_MOD;^718^^^^^712^719^[REPLACE] return Token.ASSIGN;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '=' )  ) return Token.SHNE;^713^714^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  ) return Token.SHEQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^716^^^^^334^854^[REPLACE] return Token.EQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^714^^^^^334^854^[REPLACE] return Token.SHEQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^722^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^728^^^^^722^729^[REPLACE] return Token.NOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '=' )  ) return Token.SHEQ;^723^724^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  ) return Token.SHNE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^726^^^^^334^854^[REPLACE] return Token.NE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^724^^^^^334^854^[REPLACE] return Token.SHNE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^723^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '' )  )  {^733^^^^^334^854^[REPLACE] if  ( matchChar ( '!' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '>' )  )  {^734^^^^^334^854^[REPLACE] if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '>' )  )  {^735^^^^^334^854^[REPLACE] if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( c1 ) ;^736^^^^^334^854^[REPLACE] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^736^^^^^334^854^[ADD] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^743^^^^^334^854^[REPLACE] if  ( matchChar ( '<' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^750^^^^^743^755^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^753^^^^^743^755^[REPLACE] return Token.LT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^751^^^^^743^755^[REPLACE] return Token.LE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^744^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^744^745^746^747^748^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_LSH; } else { return Token.LSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^747^^^^^744^748^[REPLACE] return Token.LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN;^745^^^^^334^854^[REPLACE] return Token.ASSIGN_LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^747^^^^^334^854^[REPLACE] return Token.LSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_BITAND; }else {     return Token.BITAND; }^744^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^750^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^753^^^^^750^754^[REPLACE] return Token.LT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^751^^^^^334^854^[REPLACE] return Token.LE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^758^^^^^334^854^[REPLACE] if  ( matchChar ( '>' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '<' )  {     return Token.LT; }else {     if  ( c == '.' )  {         c = getChar (  ) ;         if  ( c == '.' )  {             return Token.ELLIPSIS;         }else {             addToString ( '.' ) ;         }     }     ungetBuffer[ (  ( ungetCursor ) ++ ) ] = c;     c = '.'; }^758^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^773^^^^^758^778^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^776^^^^^758^778^[REPLACE] return Token.GT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^774^^^^^758^778^[REPLACE] return Token.GE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^759^^^^^334^854^[REPLACE] if  ( matchChar ( '>' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^766^^^^^759^771^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^769^^^^^759^771^[REPLACE] return Token.RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN;^767^^^^^759^771^[REPLACE] return Token.ASSIGN_RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^760^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_URSH;return Token.URSH;^760^761^762^763^764^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_URSH; } else { return Token.URSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.OR;^763^^^^^760^764^[REPLACE] return Token.URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_MOD;^761^^^^^334^854^[REPLACE] return Token.ASSIGN_URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.OR;^763^^^^^334^854^[REPLACE] return Token.URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^766^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^769^^^^^766^770^[REPLACE] return Token.RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN;^767^^^^^334^854^[REPLACE] return Token.ASSIGN_RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^769^^^^^334^854^[REPLACE] return Token.RSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^759^760^761^762^763^334^854^[ADD] if  ( matchChar ( '>' )  )  { if  ( matchChar ( '=' )  )  { return Token.ASSIGN_URSH; } else { return Token.URSH;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_RSH;return Token.RSH;^766^767^768^769^770^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_RSH; } else { return Token.RSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^773^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^776^^^^^773^777^[REPLACE] return Token.GT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^774^^^^^334^854^[REPLACE] return Token.GE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^781^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^784^^^^^781^785^[REPLACE] return Token.MUL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN;^782^^^^^334^854^[REPLACE] return Token.ASSIGN_MUL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^789^^^^^334^854^[REPLACE] if  ( matchChar ( '/' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( c1 ) ;^790^^^^^334^854^[REPLACE] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^793^^^^^334^854^[REPLACE] if  ( matchChar ( '*' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( xmlOpenTagsCount = getChar (  )  )  != EOF_CHAR || ! ( c == '*' || matchChar ( '/' )  )  )  {^794^795^^^^334^854^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  EOF_CHAR )  {^798^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^800^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c  =  while  (  ( c ;^794^795^^^^334^854^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  EOF_CHAR )  {^798^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^798^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^805^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^808^^^^^805^809^[REPLACE] return Token.DIV;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;^806^^^^^334^854^[REPLACE] return Token.ASSIGN_DIV;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^812^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^815^^^^^812^816^[REPLACE] return Token.MOD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;^813^^^^^334^854^[REPLACE] return Token.ASSIGN_MOD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^822^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^822^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( '+' )  )  {^824^^^^^334^854^[REPLACE] } else if  ( matchChar ( '+' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^827^^^^^824^828^[REPLACE] return Token.ADD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^825^^^^^334^854^[REPLACE] return Token.INC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^827^^^^^334^854^[REPLACE] return Token.ADD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_BITAND;^823^^^^^334^854^[REPLACE] return Token.ASSIGN_ADD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^824^^^^^334^854^[REPLACE] } else if  ( matchChar ( '+' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^831^^^^^334^854^[REPLACE] if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '<' )  {     return Token.LT; }else {     if  ( c == '.' )  {         c = getChar (  ) ;         if  ( c == '.' )  {             return Token.ELLIPSIS;         }else {             addToString ( '.' ) ;         }     }     ungetBuffer[ (  ( ungetCursor ) ++ ) ] = c;     c = '.'; }^831^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( matchChar ( '-' )  )  {^833^^^^^334^854^[REPLACE] } else if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}^833^834^^^^334^854^[ADD] else if  ( matchChar ( '-' )  )  { if  ( !dirtyLine )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = Token.DEC; ;^844^^^^^833^845^[REPLACE] c = Token.SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( dirtyLine )  {^834^^^^^334^854^[REPLACE] if  ( !dirtyLine )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^834^835^^837^838^334^854^[ADD] if  ( !dirtyLine )  {  if  ( matchChar ( '>' )  )  { skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^837^^^^^334^854^[REPLACE] if  ( matchChar ( '>' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( c1 ) ;^838^^^^^334^854^[REPLACE] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^837^838^839^840^^334^854^[ADD] if  ( matchChar ( '>' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = Token.SUB; ;^842^^^^^334^854^[REPLACE] c = Token.DEC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'm' )  {     if  (  (  ( s.charAt ( 2 )  )  == 'u' )  &&  (  ( s.charAt ( 1 )  )  == 'n' )  )  {         id = Id_enum;         break L0;     } }^834^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = Token.DEC; ;^844^^^^^334^854^[REPLACE] c = Token.SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c  =  c ;^832^^^^^334^854^[REPLACE] c = Token.ASSIGN_SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^833^^^^^334^854^[REPLACE] } else if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^skipLine (  ) ;continue retry;^837^838^839^840^^334^854^[ADD] if  ( matchChar ( '>' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^346^^^^^334^854^[REPLACE] for  ( ;; )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( 0  <  Kit.xDigitToInt ( xmlOpenTagsCount, 0 )  )  {^480^^^^^334^854^[REPLACE] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (xmlIsTagContent ;^485^^^^^334^854^[REPLACE] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c >= '0' )  {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 - 4;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 - 2;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^561^562^563^^^334^854^[ADD] strLoop: while  ( c != quoteChar )  { if  ( c == '\n' || c == EOF_CHAR )  { ungetChar ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == EOF_CHAR )  {^562^^^^^334^854^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >= token )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  > sourceEnd )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( val  >=  0L )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  &&  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^636^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 >>> 4 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  ==  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  ^  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  ||  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 + 1 * val + c -xmlOpenTagsCount;^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 4; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  2 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^574^^^^^334^854^[ADD] case 'b': c = '\b'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_var;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  stringBufferTop;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  <  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 * 1 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^609^610^611^612^613^334^854^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; continue strLoop; } else { int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (stringBufferTop  <=  4 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  1 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^617^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= xmlOpenTagsCount ) {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * 1 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  (Id_thisnt i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( tokenno  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'r': c = '\r'; break;^576^577^^^^334^854^[ADD] case 'n': c = '\n'; break; case 'r': c = '\r'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  null;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  <=  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 6 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 2; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c = getChar (  )  )  != EOF_CHAR ;^794^795^^^^334^854^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  EOF_CHAR )  {^351^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  ||  '\n' )  {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c <= 127 )  {     if  (  ( c == '\n' )  ||  ( c == '\r' )  )  {         lineEndChar = c;         c = '\n';     } }else {     if  ( isJSFormatChar ( c )  )  {         continue;     }     if  ( isJSLineTerminator ( c )  )  {         lineEndChar = c;         c = '\n';     } }^353^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^356^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^dirtyLine = true;^357^358^359^^^334^854^[ADD] if  ( c != '-' )  { dirtyLine = true; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = true; ;^354^^^^^334^854^[REPLACE] dirtyLine = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( isJSSpace (xmlOpenTagsCount )  )  {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  (xmlOpenTagsCount  !=  '\n' )  {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  == xmlOpenTagsCount )  {^357^^^^^334^854^[REPLACE] if  ( c != '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  '@' )  return Token.XMLATTR;^364^^^^^334^854^[REPLACE] if  ( c == '@' )  return Token.XMLATTR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '\\' )  {     c = getChar (  ) ;     if  ( c == 'u' )  {         isUnicodeEscapeStart = true;         containsEscape = true;     }else {         parser.addError ( character" ) ;         return Token.ERROR;     } }else {     if  (  ( c ==  ( EOF_CHAR )  )  ||  ( ! ( isJavaIdentifierPart (  (  ( char )   ( c )  )  )  )  )  )  {         break;     }     addToString ( c ) ; }^370^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^384^^^^^370^387^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 0;^384^^^^^370^387^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  'u' )  {^372^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '\\' )  {     c = getChar (  ) ;     if  ( c == 'u' )  {         identifierStart = true;         isUnicodeEscapeStart = true;         stringBufferTop = 0;     }else {         identifierStart = false;         ungetChar ( c ) ;         c = '\\';     } }else {     identifierStart = isJavaIdentifierStart (  (  ( char )   ( c )  )  ) ;     if  ( identifierStart )  {         stringBufferTop = 0;         addToString ( c ) ;     } }^372^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart = false;^373^^^^^334^854^[REPLACE] identifierStart = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 * 0;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  'u' )  {^372^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^383^384^385^386^^334^854^[ADD] if  ( identifierStart )  { stringBufferTop = 0; addToString ( c ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^384^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;^384^385^^^^334^854^[ADD] stringBufferTop = 0; addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^389^^^^^334^854^[REPLACE] if  ( identifierStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_staticsUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  '\\' )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (     ( char )   ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (tokenno  <=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 0 * 4;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 / 4; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( ungetCursor  != sourceEnd )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >  4 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^406^407^408^409^^334^854^[ADD] if  ( escapeVal < 0 )  { parser.addError ( "msg.invalid.escape" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ||  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  && xmlOpenTagsCount )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  && xmlOpenTagsCount )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return length;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (length  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return val;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^this.sourceEnd = sourceString.length (  ) ;^453^^^^^445^454^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_shortsUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  Character.isJavaIdentifierStart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^containsEscape = true;^417^418^^^^392^431^[ADD] isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 4; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  1 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == '-' )  {     addToString ( c ) ;     if  ( ! ( readXmlComment (  )  )  )          return Token.ERROR;      }else {     stringBufferTop = 0;     this.string = null;     parser.addError ( form" ) ;     return Token.ERROR; }^416^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  || xmlOpenTagsCount )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c ==xmlIsTagContent || Character .isJavaIdentifierStart ( 1 )   ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 % 1; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd  !=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 3; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_synchronizednt i = 0; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( stringBufferTop  ==  4 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^isUnicodeEscapeStart = true; ;^411^^^^^334^854^[REPLACE] isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean containsEscape = xmlIsTagContent;^390^^^^^334^854^[REPLACE] boolean containsEscape = isUnicodeEscapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 1;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_returnsUnicodeEscapeStart )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierStart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == EOF_CHAR ) {^424^425^426^^^392^431^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  > stringBufferTop )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  != token )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  >=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 0L;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 / 2; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  >=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (val  !=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( pushbackToken  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return escapeVal;^444^^^^^334^854^[REPLACE] return result;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeStart  ==  Token.EOF )  {^442^^^^^334^854^[REPLACE] if  ( result != Token.EOF )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( quoteChar  ==  Token.RESERVED )  {^443^^^^^334^854^[REPLACE] if  ( result != Token.RESERVED )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .addWarning ( name )  ;^453^^^^^445^454^[REPLACE] parser.addWarning ( "msg.reserved.keyword", str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 >> 4;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  || xmlOpenTagsCount )  {^467^^^^^334^854^[REPLACE] if  ( c == '0' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == 'x' && c == 'X' )  {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   addToString ( '0' ) ;^472^473^474^475^476^334^854^[ADD] else if  ( isDigit ( c )  )  { base = 8; } else { addToString ( '0' ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 - 2;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 >>> 0;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 * 0;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == 'x' ) {^469^^^^^334^854^[REPLACE] if  ( c == 'x' || c == 'X' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^base = 16;c = getChar (  ) ;base = 8;^469^470^471^472^473^334^854^[ADD] if  ( c == 'x' || c == 'X' )  { base = 16; c = getChar (  ) ; } else if  ( isDigit ( c )  )  { base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8L;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 % 1;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 - 1;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base  !=  16 )  {^479^^^^^334^854^[REPLACE] if  ( base == 16 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( '0' <= c  ^  c <= '9' )  {^485^^^^^479^500^[REPLACE] while  ( '0' <= c && c <= '9' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent || c >= '4' )  {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 4;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 * 3 ) {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 2;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 0;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar == 8 || c >= '8' )  {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 1;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 10 ||  ( c == '.' || c == 'e' || c == 'E' )  )  {^504^^^^^334^854^[REPLACE] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == 'e' ) {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^515^516^517^518^^334^854^[ADD] if  ( c == '+' || c == '-' )  { addToString ( c ) ; c = getChar (  ) ; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == 'e' && c == 'E' )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;c = getChar (  ) ;addToString ( c ) ;^512^513^514^515^516^334^854^[ADD] if  ( c == 'e' || c == 'E' )  { addToString ( c ) ; c = getChar (  ) ; if  ( c == '+' || c == '-' )  { addToString ( c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isDigit ( c )  )  {^519^^^^^334^854^[REPLACE] if  ( !isDigit ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 4 && isInteger )  {^533^^^^^334^854^[REPLACE] if  ( base == 10 && !isInteger )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 2, base ) ;^543^^^^^533^544^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^464^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^468^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16 + 4;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 13;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^505^^^^^334^854^[ADD] isInteger = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^} while  ( isDigit ( c )  ) ;^525^526^^^^334^854^[ADD] c = getChar (  ) ; } while  ( isDigit ( c )  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 1, base ) ;^543^^^^^334^854^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int base = 5;^465^^^^^334^854^[REPLACE] int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '0' )  {^467^^^^^334^854^[REPLACE] if  ( c == '0' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^469^470^471^472^473^334^854^[ADD] if  ( c == 'x' || c == 'X' )  { base = 16; c = getChar (  ) ; } else if  ( isDigit ( c )  )  { base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 5;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 << 4;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16 >> 2;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 8 >> 1;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 1;^473^^^^^334^854^[REPLACE] base = 8;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16L;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^472^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  10 )  {^479^^^^^334^854^[REPLACE] if  ( base == 16 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 ) {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 >> 1;^495^^^^^479^500^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 || c >= '8' )  {^492^^^^^479^500^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( 0  >=  Kit.xDigitToInt ( c, 0 )  )  {^480^^^^^334^854^[REPLACE] while  ( 0 <= Kit.xDigitToInt ( c, 0 )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( base == 8 ) {^492^^^^^334^854^[REPLACE] if  ( base == 8 && c >= '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 10 << 1;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent ) {^504^^^^^334^854^[REPLACE] if  ( base == 10 &&  ( c == '.' || c == 'e' || c == 'E' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( ! ( fillSourceBuffer (  )  )  )  {     hitEOF = true;     if  (  ( charno )  ==  ( -1 )  )  {         charno = getOffset (  ) ;     }     return EOF_CHAR; }^506^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent && xmlIsTagContent )  {^512^^^^^334^854^[REPLACE] if  ( c == 'e' || c == 'E' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == '-' )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '.' )  {^506^^^^^334^854^[REPLACE] if  ( c == '.' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^} while  ( isDigit ( c )  ) ;^509^510^^^^334^854^[ADD] c = getChar (  ) ; } while  ( isDigit ( c )  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  isUnicodeEscapeStart )  {^515^^^^^334^854^[REPLACE] if  ( c == '+' || c == '-' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  isInteger )  {^533^^^^^334^854^[REPLACE] if  ( base == 10 && !isInteger )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  c == '\'' )  {^551^^^^^334^854^[REPLACE] if  ( c == '"' || c == '\'' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^strLoop: while  (xmlOpenTagsCount  ==  quoteChar )  {^561^^^^^334^854^[REPLACE] strLoop: while  ( c != quoteChar )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^562^563^564^565^566^334^854^[ADD] if  ( c == '\n' || c == EOF_CHAR )  { ungetChar ( c ) ; parser.addError ( "msg.unterminated.string.lit" ) ; return Token.ERROR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^568^569^570^^572^334^854^[ADD] if  ( c == '\\' )  {  int escapeVal; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <= ungetCursor )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  4 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( 'x' ) ;addToString ( c1 ) ;continue strLoop;^616^617^618^619^^609^624^[ADD] if  ( escapeVal < 0 )  { addToString ( 'x' ) ; addToString ( c1 ) ; continue strLoop;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  ungetCursor;^622^^^^^609^624^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsTagContent || c < '8' )  {^637^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 6 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 5 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 + 4 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  <=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^630^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8L * val + c -xmlOpenTagsCount;^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  ||  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (tokenno  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  3 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  !=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd  >=  4 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  tokenno;^622^^^^^616^623^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^617^618^^^^334^854^[ADD] addToString ( 'x' ) ; addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^618^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( '0' <= c || c < '8' || xmlOpenTagsCount <= 037 )  {^640^^^^^334^854^[REPLACE] if  ( '0' <= c && c < '8' && val <= 037 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 - 3 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 << 1 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  (Id_synchronizednt i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  1 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^574^575^^^^334^854^[ADD] case 'b': c = '\b'; break; case 'f': c = '\f'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^614^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  >=  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 - 0 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^613^614^^^^334^854^[ADD] int c1 = c; c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '\\' )  {^568^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >= xmlOpenTagsCount )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  >=  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c  !=  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_thisnt i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  > xmlOpenTagsCount )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^575^576^^^^334^854^[ADD] case 'f': c = '\f'; break; case 'n': c = '\n'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 0 * 0;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^592^593^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  Id_try;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  stringBufferTop;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 3; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (stringBufferTop  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  <=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( stringBufferTop  >=  0 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int val = c  !=  '0';^635^^^^^334^854^[REPLACE] int val = c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 1 * val + c  !=  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  &  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_throwsnt i = 0; i  ==  4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (stringBufferTop  ==  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^558^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^575^^^^^334^854^[ADD] case 'f': c = '\f'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 + 3 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string =   ( String ) allStrings.intern ( string ) ;^657^^^^^334^854^[REPLACE] this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^657^658^^^^334^854^[ADD] this.string =  ( String ) allStrings.intern ( str ) ; return Token.STRING;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^557^558^^^^334^854^[ADD] int quoteChar = c; stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^this.string =  ( String ) allStrings.intern ( str ) ;^656^657^^^^334^854^[ADD] String str = getStringFromBuffer (  ) ; this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (tokenno  >  0 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd  !=  0 + 1 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^618^^^^^609^624^[ADD] addToString ( c1 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 - 1 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 / 3 * val + c - '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 0 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 / 0 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( token  ==  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^case 'n': c = '\n'; break;^575^576^^^^334^854^[ADD] case 'f': c = '\f'; break; case 'n': c = '\n'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = 3;^590^^^^^334^854^[REPLACE] escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =  lineno;^601^^^^^334^854^[REPLACE] stringBufferTop = escapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  ungetCursor;^602^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 + 0 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c =  ungetCursor;^622^^^^^334^854^[REPLACE] c = escapeVal;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  &  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 9 * val + c - '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0L; i != 4; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^613^^^^^334^854^[ADD] int c1 = c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  ==  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  >=  0 % 3 )  {^609^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( tokenno  <=  0 )  {^616^^^^^609^624^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  4 )  {^616^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c -xmlOpenTagsCount;^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 4 * val + c  ||  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  ==  '0';^638^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * 1 * val + c  &&  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.DOTQUERY;return Token.DOT;^680^681^682^683^684^334^854^[ADD] else if  ( matchChar ( ' ( ' )  )  { return Token.DOTQUERY; } else { return Token.DOT; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^689^^^^^334^854^[REPLACE] } else if  ( matchChar ( '=' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.ASSIGN_BITOR;return Token.BITOR;^689^690^691^692^693^334^854^[ADD] else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITOR; } else { return Token.BITOR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.BITOR;^689^690^691^692^693^334^854^[ADD] else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITOR; } else { return Token.BITOR; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^696^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^703^704^705^706^^334^854^[ADD] if  ( matchChar ( '&' )  )  { return Token.AND; } else if  ( matchChar ( '=' )  )  { return Token.ASSIGN_BITAND;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.SHEQ;return Token.EQ;^713^714^715^716^^334^854^[ADD] if  ( matchChar ( '=' )  ) return Token.SHEQ; else return Token.EQ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^722^723^724^725^726^334^854^[ADD] if  ( matchChar ( '=' )  )  { if  ( matchChar ( '=' )  ) return Token.SHNE; else return Token.NE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.SHNE;return Token.NE;^723^724^725^726^^334^854^[ADD] if  ( matchChar ( '=' )  ) return Token.SHNE; else return Token.NE;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^733^^^^^334^854^[REPLACE] if  ( matchChar ( '!' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^733^734^735^736^737^334^854^[ADD] if  ( matchChar ( '!' )  )  { if  ( matchChar ( '-' )  )  { if  ( matchChar ( '-' )  )  { skipLine (  ) ; continue retry;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^734^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^skipLine (  ) ;continue retry;^735^736^737^738^^334^854^[ADD] if  ( matchChar ( '-' )  )  { skipLine (  ) ; continue retry; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^736^737^^^^334^854^[ADD] skipLine (  ) ; continue retry;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '/' )  )  { skipLine (  ) ;^736^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^735^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.LE;return Token.LT;^750^751^752^753^754^743^755^[ADD] if  ( matchChar ( '=' )  )  { return Token.LE; } else { return Token.LT; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_LSH;return Token.LSH;^744^745^746^747^748^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_LSH; } else { return Token.LSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^750^751^752^753^754^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.LE; } else { return Token.LT; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ASSIGN_RSH;return Token.RSH;^766^767^768^769^770^759^771^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_RSH; } else { return Token.RSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^766^^^^^759^771^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^760^761^762^763^764^334^854^[ADD] if  ( matchChar ( '=' )  )  { return Token.ASSIGN_URSH; } else { return Token.URSH; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^789^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^790^^^^^334^854^[ADD] skipLine (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  EOF_CHAR )  {^798^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  != xmlOpenTagsCount )  {^798^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^805^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^824^^^^^334^854^[REPLACE] } else if  ( matchChar ( '+' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^842^^^^^334^854^[ADD] c = Token.DEC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^834^^^^^334^854^[REPLACE] if  ( !dirtyLine )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c ;^832^^^^^334^854^[REPLACE] c = Token.ASSIGN_SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^833^^^^^334^854^[REPLACE] } else if  ( matchChar ( '-' )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^837^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^348^^^^^334^854^[REPLACE] for  ( ;; )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  EOF_CHAR )  {^351^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.EOF;dirtyLine = false;return Token.EOL;^351^352^353^354^355^334^854^[ADD] if  ( c == EOF_CHAR )  { return Token.EOF; } else if  ( c == '\n' )  { dirtyLine = false; return Token.EOL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   dirtyLine = false;return Token.EOL;^353^354^355^356^^334^854^[ADD] else if  ( c == '\n' )  { dirtyLine = false; return Token.EOL; } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^357^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  !=  '\n' )  {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( isJSSpace ( c )  )  {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1 - 2;^349^^^^^334^854^[REPLACE] charno = -1;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^349^^^^^334^854^[ADD] charno = -1;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^350^^^^^334^854^[REPLACE] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^350^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd == sourceBuffer.length )  {^392^^^^^334^854^[REPLACE] if  ( isUnicodeEscapeStart )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '\\' )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == EOF_CHAR ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  'u' )  {^416^^^^^392^431^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd  !=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( ! ( readQuotedString ( c )  )  )      return Token.ERROR;^406^^^^^334^854^[REMOVE] ^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  (Id_returnnt i = 0L; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  '\\' )  {^414^^^^^334^854^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c ==xmlIsAttribute || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == EOF_CHAR || Character.isJavaIdentifierStart (  ( char ) c )  ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  0 - 0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 0 / 2;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 * 4; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_switchnt i = 4; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0; i  == Id_throws; ++i )  {^591^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (ungetCursor  >=  0 )  {^594^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1 >> 0;^349^^^^^334^854^[REPLACE] charno = -1;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 0;^375^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^identifierStart =  Character.isJavaIdentifierStart (  ( char ) c ) ;^382^^^^^334^854^[REPLACE] identifierStart = Character.isJavaIdentifierStart (  ( char ) c ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^384^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string =   ( String ) allStrings.intern ( null ) ;^457^^^^^334^854^[REPLACE] this.string =  ( String ) allStrings.intern ( str ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 16 - 2;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 4;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 0 / 4, base ) ;^543^^^^^334^854^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^543^^^^^334^854^[ADD] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 0;^558^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^577^578^^^^334^854^[ADD] case 'r': c = '\r'; break; case 't': c = '\t'; break;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^escapeVal = Kit.xDigitToInt ( c, 0 * 3 ) ;^608^^^^^334^854^[REPLACE] escapeVal = Kit.xDigitToInt ( c, 0 ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^val = 8 * val + c  >=  '0';^643^^^^^334^854^[REPLACE] val = 8 * val + c - '0';^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^653^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c  = null ;^794^795^^^^334^854^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && ! ( c == '*' && matchChar ( '/' )  )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false; ;^846^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case '?': return Token.HOOK;^662^^^^^334^854^[REPLACE] case ';': return Token.SEMI;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ';': return Token.SEMI;^663^^^^^334^854^[REPLACE] case '[': return Token.LB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ';': return Token.SEMI;^664^^^^^334^854^[REPLACE] case ']': return Token.RB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ';': return Token.SEMI;^665^^^^^334^854^[REPLACE] case '{': return Token.LC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ';': return Token.SEMI;^666^^^^^334^854^[REPLACE] case '}': return Token.RC;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case '}': return Token.RC;^667^^^^^334^854^[REPLACE] case ' ( ': return Token.LP;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ' ( ': return Token.LP;^668^^^^^334^854^[REPLACE] case ' ) ': return Token.RP;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ';': return Token.SEMI;^669^^^^^334^854^[REPLACE] case ',': return Token.COMMA;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^case ';': return Token.SEMI;^670^^^^^334^854^[REPLACE] case '?': return Token.HOOK;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^675^^^^^334^854^[REPLACE] return Token.COLON;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.BITNOT;^699^^^^^334^854^[REPLACE] return Token.BITXOR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.ASSIGN_MOD;^718^^^^^334^854^[REPLACE] return Token.ASSIGN;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^728^^^^^334^854^[REPLACE] return Token.NOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^753^^^^^334^854^[REPLACE] return Token.LT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^776^^^^^334^854^[REPLACE] return Token.GT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^784^^^^^334^854^[REPLACE] return Token.MUL;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^808^^^^^334^854^[REPLACE] return Token.DIV;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^815^^^^^334^854^[REPLACE] return Token.MOD;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NOT;^819^^^^^334^854^[REPLACE] return Token.BITNOT;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^847^^^^^334^854^[REPLACE] return c;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^851^^^^^334^854^[REPLACE] return Token.ERROR;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean isInteger = true;^368^^^^^334^854^[REPLACE] boolean identifierStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^boolean isUnicodeEscapeStart = false;c = getChar (  ) ;^368^369^370^371^^334^854^[ADD] boolean identifierStart; boolean isUnicodeEscapeStart = false; if  ( c == '\\' )  { c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean isUnicodeEscapeStart = true;^369^^^^^334^854^[REPLACE] boolean isUnicodeEscapeStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^390^^^^^334^854^[ADD] boolean containsEscape = isUnicodeEscapeStart;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int base = 9;^465^^^^^334^854^[REPLACE] int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^532^^^^^334^854^[ADD] double dval;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^348^349^350^351^352^334^854^[ADD] for  ( ;; )  { charno = -1; c = getChar (  ) ; if  ( c == EOF_CHAR )  { return Token.EOF;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  && xmlOpenTagsCount )  {^351^^^^^334^854^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  (xmlOpenTagsCount  ||  '\n' )  {^353^^^^^334^854^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( isJSSpace ( xmlOpenTagsCount )  )  {^356^^^^^334^854^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1 << 3;^349^^^^^334^854^[REPLACE] charno = -1;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '\\' )  {^414^^^^^392^431^[REPLACE] if  ( c == '\\' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^414^415^416^417^418^392^431^[ADD] if  ( c == '\\' )  { c = getChar (  ) ; if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c ==xmlIsTagContent ||    ( char )   ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( token  == stringBufferTop )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd  <=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( Id_switchnt i = 0; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (stringBufferTop  ==  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^401^402^^^^334^854^[ADD] c = getChar (  ) ; escapeVal = Kit.xDigitToInt ( c, escapeVal ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 + 2; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  > xmlOpenTagsCount )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  0 )  {^406^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^414^415^416^417^418^334^854^[ADD] if  ( c == '\\' )  { c = getChar (  ) ; if  ( c == 'u' )  { isUnicodeEscapeStart = true; containsEscape = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount == EOF_CHAR || Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^414^430^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ||  'u' )  {^416^^^^^334^854^[REPLACE] if  ( c == 'u' )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  Character.isJavaIdentifierPart (  ( char ) c )  ) {^424^425^426^^^334^854^[REPLACE] if  ( c == EOF_CHAR || !Character.isJavaIdentifierPart (  ( char ) c )  ) {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  (Id_throwsnt i = 3; i  ==  4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeVal  ==  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( ungetCursor  !=  0 )  { break; }^404^^^^^334^854^[REPLACE] if  ( escapeVal < 0 )  { break; }^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1 + 1;^349^^^^^334^854^[REPLACE] charno = -1;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^373^374^375^376^377^334^854^[ADD] identifierStart = true; isUnicodeEscapeStart = true; stringBufferTop = 0; } else { identifierStart = false;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^384^^^^^334^854^[REPLACE] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 1;^470^^^^^334^854^[REPLACE] base = 16;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^base = 2;^495^^^^^334^854^[REPLACE] base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dval = ScriptRuntime.stringToNumber ( numString, 4, base ) ;^543^^^^^334^854^[REPLACE] dval = ScriptRuntime.stringToNumber ( numString, 0, base ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^558^^^^^334^854^[ADD] stringBufferTop = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^560^^^^^334^854^[ADD] c = getChar (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c  = null ;^832^^^^^334^854^[REPLACE] c = Token.ASSIGN_SUB;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^dirtyLine = false;^846^^^^^334^854^[REPLACE] dirtyLine = true;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal = 0 + 4;^399^^^^^334^854^[REPLACE] int escapeVal = 0;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 % 1; i != 4; ++i )  {^400^^^^^334^854^[REPLACE] for  ( int i = 0; i != 4; ++i )  {^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^435^^^^^334^854^[ADD] String str = getStringFromBuffer (  ) ;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int base = 10 >>> 0;^465^^^^^334^854^[REPLACE] int base = 10;^[METHOD] getToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  NumberFormatException ex  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^861^^^^^860^995^[REPLACE] int c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^861^^^^^860^995^[ADD] int c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 * 2;^862^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  EOF_CHAR )  {^868^^^^^860^995^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  !=  '\n' )  {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( !isJSSpace ( xmlOpenTagsCount )  )  {^872^^^^^860^995^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;^871^^^^^860^995^[REPLACE] return Token.EOL;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( !isJSSpace ( xmlOpenTagsCount )  )  {^872^^^^^860^995^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^869^^^^^860^995^[REPLACE] return Token.EOF;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( xmlOpenTagsCount  !=  '\n' )  {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^872^^^^^860^995^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !isDigit ( c )  )  {^882^^^^^860^995^[REPLACE] if  ( isAlpha ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^882^883^884^885^886^860^995^[ADD] if  ( isAlpha ( c )  )  { addToString ( c ) ; } else { ungetChar ( c ) ; this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^886^^^^^882^889^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^887^^^^^882^889^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^888^^^^^882^889^[REPLACE] return Token.ANNOTATION;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^883^^^^^860^995^[REPLACE] addToString ( c ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( '-' )  )  {^893^^^^^860^995^[REPLACE] if  ( matchChar ( '/' )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( matchChar ( '=' )  )  {     return Token.ASSIGN_LSH; }else {     return Token.LSH; }^893^^^^^860^995^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.GT;^896^^^^^893^897^[REPLACE] return Token.STAR;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^894^^^^^860^995^[REPLACE] return Token.EOC;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  || xmlOpenTagsCount )  {^941^^^^^860^995^[REPLACE] if  ( c == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.LT;c = getChar (  ) ;^941^942^943^944^945^860^995^[ADD] if  ( c == '<' )  { return Token.LT; } else { if  ( c == '.' )  { c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '.' )  {^944^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  '.' )  {^946^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^949^^^^^941^955^[REPLACE] addToString ( '.' ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^947^^^^^941^955^[REPLACE] return Token.ELLIPSIS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^945^^^^^941^955^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^945^^^^^941^955^[ADD] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '.' )  {^946^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^949^^^^^941^955^[ADD] addToString ( '.' ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetBuffer[ungetCursor++] =  xmlOpenTagsCount;^953^^^^^941^955^[REPLACE] ungetBuffer[ungetCursor++] = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\n'; ;^954^^^^^941^955^[REPLACE] c = '.';^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^942^^^^^860^995^[REPLACE] return Token.LT;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  != xmlOpenTagsCount )  {^944^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'm' )  {     if  (  (  ( s.charAt ( 2 )  )  == 'u' )  &&  (  ( s.charAt ( 1 )  )  == 'n' )  )  {         id = Id_enum;         break L0;     } }^944^^^^^860^995^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '.' )  {^946^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ELLIPSIS;addToString ( '.' ) ;^946^947^948^949^950^860^995^[ADD] if  ( c == '.' )  { return Token.ELLIPSIS; } else { addToString ( '.' ) ; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^949^^^^^946^950^[REPLACE] addToString ( '.' ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^949^^^^^946^950^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^947^^^^^860^995^[REPLACE] return Token.ELLIPSIS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^945^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^945^^^^^860^995^[ADD] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '.' )  {^946^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSDocString ( c2 )  )  {^964^^^^^860^995^[REPLACE] if  ( !isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart ) {^973^^^^^964^991^[REPLACE] if  ( c1 == '.' && c2 == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^ungetChar ( c2 ) ;ungetChar ( c1 ) ;this.string = getStringFromBuffer (  ) ;stringBufferTop = 0;^973^974^975^976^977^964^991^[ADD] if  ( c1 == '.' && c2 == '<' )  { ungetChar ( c2 ) ; ungetChar ( c1 ) ; this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !isJSDocString ( c2 )  )  {^980^^^^^973^989^[REPLACE] if  ( isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get double FromBuffer (  ) ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^987^^^^^973^989^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^981^^^^^973^989^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  = null ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^976^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^977^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^978^^^^^964^991^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !isJSDocString ( c2 )  )  {^980^^^^^964^991^[REPLACE] if  ( isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^985^^^^^980^988^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^986^^^^^980^988^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^987^^^^^980^988^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^981^^^^^964^991^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c1 =  xmlOpenTagsCount;^971^^^^^964^991^[REPLACE] c1 = c2;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^971^^^^^964^991^[ADD] c1 = c2;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = getChar (  ) ; ;^972^^^^^964^991^[REPLACE] c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^976^^^^^964^991^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^977^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^977^^^^^964^991^[ADD] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get byte FromBuffer (  ) ;^985^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^stringBufferTop = 0;^985^986^^^^964^991^[ADD] this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 * 3;^986^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^986^987^^^^964^991^[ADD] stringBufferTop = 0; return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^987^^^^^964^991^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^966^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^967^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^967^^^^^860^995^[ADD] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^968^^^^^860^995^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c1 == '.' ) {^973^^^^^860^995^[REPLACE] if  ( c1 == '.' && c2 == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^973^974^975^976^977^860^995^[ADD] if  ( c1 == '.' && c2 == '<' )  { ungetChar ( c2 ) ; ungetChar ( c1 ) ; this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 2;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^981^^^^^973^989^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^981^^^^^973^989^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^985^986^^^^973^989^[ADD] this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^976^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^977^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^978^^^^^860^995^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !isJSDocString ( c2 )  )  {^980^^^^^860^995^[REPLACE] if  ( isJSDocString ( c2 )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^986^^^^^980^988^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^981^^^^^860^995^[REPLACE] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^981^^^^^860^995^[ADD] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^863^^^^^860^995^[REPLACE] for  ( ;; )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ||  EOF_CHAR )  {^868^^^^^860^995^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( xmlOpenTagsCount  !=  '\n' )  {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   break;^872^873^874^^^860^995^[ADD] else if  ( !isJSSpace ( c )  )  { break; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;ungetChar ( c ) ;this.string = getStringFromBuffer (  ) ;^882^883^884^885^886^860^995^[ADD] if  ( isAlpha ( c )  )  { addToString ( c ) ; } else { ungetChar ( c ) ; this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  = null ;^886^^^^^882^889^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^887^^^^^882^889^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '<' )  {^941^^^^^860^995^[REPLACE] if  ( c == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( c == 'n' )  {     if  (  ( s.charAt ( 0 )  )  == 'i' )  {         id = Id_in;         break L0;     } }else     if  ( c == 'o' )  {         if  (  ( s.charAt ( 0 )  )  == 'd' )  {             id = Id_do;             break L0;         }     }^941^^^^^860^995^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '.' )  {^944^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.ELLIPSIS;addToString ( '.' ) ;^946^947^948^949^950^941^955^[ADD] if  ( c == '.' )  { return Token.ELLIPSIS; } else { addToString ( '.' ) ; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  &&  '.' )  {^946^^^^^941^955^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^949^^^^^941^955^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetBuffer[ungetCursor++] =  null;^953^^^^^941^955^[REPLACE] ungetBuffer[ungetCursor++] = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '.' )  {^944^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  ||  '.' )  {^946^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '.' )  {^946^^^^^860^995^[REPLACE] if  ( c == '.' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c1 == '.' || c2 == '<' )  {^973^^^^^964^991^[REPLACE] if  ( c1 == '.' && c2 == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c1 ) ;ungetChar ( c2 ) ;addToString ( c1 ) ;^980^981^982^983^984^973^989^[ADD] if  ( isJSDocString ( c2 )  )  { addToString ( c1 ) ; } else { ungetChar ( c2 ) ; addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get int FromBuffer (  ) ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^985^^^^^973^989^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 >> 0;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^976^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 0;^977^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^986^^^^^980^988^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^981^^^^^964^991^[ADD] addToString ( c1 ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c1 =  null;^971^^^^^964^991^[REPLACE] c1 = c2;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get byte FromBuffer (  ) ;^976^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^977^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get boolean FromBuffer (  ) ;^985^^^^^964^991^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 0;^986^^^^^964^991^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^966^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^967^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c1 == '.' || c2 == '<' )  {^973^^^^^860^995^[REPLACE] if  ( c1 == '.' && c2 == '<' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^985^^^^^973^989^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^986^^^^^973^989^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^976^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^977^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get int FromBuffer (  ) ;^985^^^^^980^988^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^986^987^^^^980^988^[ADD] stringBufferTop = 0; return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^865^^^^^860^995^[REPLACE] for  ( ;; )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  EOF_CHAR )  {^868^^^^^860^995^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   return Token.EOL;break;^870^871^872^873^874^860^995^[ADD] else if  ( c == '\n' )  { return Token.EOL; } else if  ( !isJSSpace ( c )  )  { break; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}^872^873^874^^^860^995^[ADD] else if  ( !isJSSpace ( c )  )  { break; }^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  &&  '\n' )  {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( isJSSpace ( c )  )  {^872^^^^^860^995^[REPLACE] } else if  ( !isJSSpace ( c )  )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1 + 1;^866^^^^^860^995^[REPLACE] charno = -1;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^867^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -3;^866^^^^^860^995^[REPLACE] charno = -1;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;^866^867^^^^860^995^[ADD] charno = -1; c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^881^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^886^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^887^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^940^^^^^860^995^[REPLACE] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetBuffer[ungetCursor++] =  xmlOpenTagsCount;^953^^^^^860^995^[REPLACE] ungetBuffer[ungetCursor++] = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = '\n'; ;^954^^^^^860^995^[REPLACE] c = '.';^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get long FromBuffer (  ) ;^966^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^967^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c1 =  xmlOpenTagsCount;^971^^^^^860^995^[REPLACE] c1 = c2;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = getChar (  ) ; ;^972^^^^^860^995^[REPLACE] c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get boolean FromBuffer (  ) ;^976^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^977^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^985^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^985^986^^^^860^995^[ADD] this.string = getStringFromBuffer (  ) ; stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^986^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^888^^^^^860^995^[REPLACE] return Token.ANNOTATION;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.GT;^896^^^^^860^995^[REPLACE] return Token.STAR;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;^900^^^^^860^995^[REPLACE] return Token.COMMA;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^903^^^^^860^995^[REPLACE] return Token.GT;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^906^^^^^860^995^[REPLACE] return Token.LP;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^909^^^^^860^995^[REPLACE] return Token.RP;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^912^^^^^860^995^[REPLACE] return Token.LC;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^915^^^^^860^995^[REPLACE] return Token.RC;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^918^^^^^860^995^[REPLACE] return Token.LB;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.LE;^921^^^^^860^995^[REPLACE] return Token.RB;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.STAR;^924^^^^^860^995^[REPLACE] return Token.QMARK;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^927^^^^^860^995^[REPLACE] return Token.BANG;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^930^^^^^860^995^[REPLACE] return Token.COLON;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^933^^^^^860^995^[REPLACE] return Token.EQUALS;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^937^^^^^860^995^[REPLACE] return Token.PIPE;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^987^^^^^860^995^[REPLACE] return Token.STRING;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int xmlOpenTagsCount1 = c;^961^^^^^860^995^[REPLACE] int c1 = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int c = getChar (  ) ;^963^^^^^860^995^[REPLACE] int c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  || xmlOpenTagsCount )  {^868^^^^^860^995^[REPLACE] if  ( c == EOF_CHAR )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return Token.EOF;return Token.EOL;^868^869^870^871^^860^995^[ADD] if  ( c == EOF_CHAR )  { return Token.EOF; } else if  ( c == '\n' )  { return Token.EOL;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  != xmlOpenTagsCount )  {^870^^^^^860^995^[REPLACE] } else if  ( c == '\n' )  {^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^872^^^^^860^995^[REMOVE] ^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^charno = -1L;^866^^^^^860^995^[REPLACE] charno = -1;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^881^^^^^860^995^[ADD] c = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^886^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 2;^887^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^953^^^^^860^995^[ADD] ungetBuffer[ungetCursor++] = c;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^967^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get byte FromBuffer (  ) ;^976^^^^^860^995^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 2;^986^^^^^860^995^[REPLACE] stringBufferTop = 0;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^963^^^^^860^995^[ADD] int c2 = getChar (  ) ;^[METHOD] getJSDocToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^1003^^^^^1002^1025^[REPLACE] int c;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1003^^^^^1002^1025^[ADD] int c;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   ==  '/' )  {^1008^^^^^1002^1025^[REPLACE] if  ( peekChar (  )  != '/' )  {^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( xmlOpenTagsCount ) ;^1009^^^^^1002^1025^[REPLACE] addToString ( c ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^1004^^^^^1002^1025^[REPLACE] for  ( ;; )  {^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1004^1005^1006^1007^^1002^1025^[ADD] for  ( ;; )  { c = getChar (  ) ; switch  ( c )  { case '*':^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1009^^^^^1002^1025^[ADD] addToString ( c ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1005^^^^^1002^1025^[REPLACE] c = getChar (  ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^1016^^^^^1002^1025^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1017^^^^^1002^1025^[REPLACE] stringBufferTop = 0;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1018^^^^^1002^1025^[REPLACE] return this.string;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^1017^^^^^1002^1025^[REPLACE] stringBufferTop = 0;^[METHOD] getRemainingJSDocLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1046^^^^^1027^1051^[REPLACE] return false;^[METHOD] isJSDocString [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return !isJSSpace ( xmlOpenTagsCount ) ;^1049^^^^^1027^1051^[REPLACE] return !isJSSpace ( c ) ;^[METHOD] isJSDocString [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  >=  'Z' )  {^1056^^^^^1053^1061^[REPLACE] if  ( c <= 'Z' )  {^[METHOD] isAlpha [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false ;^1059^^^^^1053^1061^[REPLACE] return 'a' <= c && c <= 'z';^[METHOD] isAlpha [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true ;^1057^^^^^1053^1061^[REPLACE] return 'A' <= c;^[METHOD] isAlpha [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return null  ;^1057^^^^^1053^1061^[REPLACE] return 'A' <= c;^[METHOD] isAlpha [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlIsTagContent ;^1059^^^^^1053^1061^[REPLACE] return 'a' <= c && c <= 'z';^[METHOD] isAlpha [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true ;^1065^^^^^1063^1066^[REPLACE] return '0' <= c && c <= '9';^[METHOD] isDigit [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  >  127 )  {^1078^^^^^1076^1084^[REPLACE] if  ( c <= 127 )  {^[METHOD] isJSSpace [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;|| Character.getType (  ( char ) c )  == Character.SPACE_SEPARATOR;^1078^1079^1080^1081^1082^1076^1084^[ADD] if  ( c <= 127 )  { return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB; } else { return c == 0xA0 || Character.getType (  ( char ) c )  == Character.SPACE_SEPARATOR;^[METHOD] isJSSpace [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return c == 0xA0 || Character .isJavaIdentifierPart ( null )   == Character.SPACE_SEPARATOR;^1081^1082^^^^1076^1084^[REPLACE] return c == 0xA0 || Character.getType (  ( char ) c )  == Character.SPACE_SEPARATOR;^[METHOD] isJSSpace [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false ;^1079^^^^^1076^1084^[REPLACE] return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;^[METHOD] isJSSpace [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true ;^1079^^^^^1076^1084^[REPLACE] return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;^[METHOD] isJSSpace [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount == 0xA0 || Character.isJavaIdentifierPart (  ( char ) c )  == Character.SPACE_SEPARATOR;^1081^1082^^^^1076^1084^[REPLACE] return c == 0xA0 || Character.getType (  ( char ) c )  == Character.SPACE_SEPARATOR;^[METHOD] isJSSpace [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return c > 127 / 2 && Character .isJavaIdentifierPart ( null )   == Character.FORMAT;^1088^^^^^1086^1089^[REPLACE] return c > 127 && Character.getType (  ( char ) c )  == Character.FORMAT;^[METHOD] isJSFormatChar [TYPE] boolean [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1096^^^^^1095^1097^[REPLACE] return null;^[METHOD] getAndResetJSDocInfo [TYPE] JSDocInfo [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1104^^^^^1103^1105^[REPLACE] return null;^[METHOD] getFileOverviewJSDocInfo [TYPE] JSDocInfo [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1112^^^^^1111^1113^[REPLACE] return false;^[METHOD] isPopulated [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  result  sourceCursor  sourceEnd  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1121^^^^^1120^1167^[REPLACE] stringBufferTop = 0;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( startToken  != pushbackToken )  {^1122^^^^^1120^1167^[REPLACE] if  ( startToken == Token.ASSIGN_DIV )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( startToken  == quoteChar )  Kit.codeBug (  ) ;^1126^^^^^1122^1127^[REPLACE] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^1124^^^^^1120^1167^[REPLACE] addToString ( '=' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( startToken  ==  Token.DIV )  Kit.codeBug (  ) ;^1126^^^^^1120^1167^[REPLACE] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1126^1127^^^^1120^1167^[ADD] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSLineTerminator ( c )  )   { if  ( startToken != Token.DIV )  Kit.codeBug (  ) ; }^1126^^^^^1120^1167^[REPLACE] if  ( startToken != Token.DIV )  Kit.codeBug (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^boolean inCharSet = true;^1129^^^^^1120^1167^[REPLACE] boolean inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^1130^^^^^1120^1167^[REPLACE] int c;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c = getChar (  )  )  != '/'  >=  inCharSet )  {^1131^^^^^1120^1167^[REPLACE] while  (  ( c = getChar (  )  )  != '/' || inCharSet )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' ) {^1132^^^^^1120^1167^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^throw parser.reportError ( "msg.invalid.re.flag" ) ; ;^1134^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( xmlOpenTagsCount ) ;^1133^^^^^1120^1167^[REPLACE] ungetChar ( c ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^throw parser.addError ( "msg.unterminated.re.lit" ) ;^1134^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  '\\' )  {^1136^^^^^1120^1167^[REPLACE] if  ( c == '\\' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^1139^^^^^1120^1167^[REPLACE] } else if  ( c == '[' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  else {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = true; ;^1142^^^^^1120^1167^[REPLACE] inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = true;^1142^^^^^1120^1167^[REPLACE] inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = false;^1140^^^^^1120^1167^[REPLACE] inCharSet = true;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( xmlOpenTagsCount  ||  ']' )  {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1142^^^^^1120^1167^[ADD] inCharSet = false;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1140^^^^^1120^1167^[ADD] inCharSet = true;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1138^^^^^1120^1167^[REPLACE] c = getChar (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   inCharSet = false;^1139^1140^1141^1142^1143^1120^1167^[ADD] else if  ( c == '[' )  { inCharSet = true; } else if  ( c == ']' )  { inCharSet = false; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( c  !=  ']' )  {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  (xmlOpenTagsCount  !=  ']' )  {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^1141^^^^^1120^1167^[REMOVE] ^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ;^1134^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1134^^^^^1120^1167^[ADD] throw parser.reportError ( "msg.unterminated.re.lit" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' && c == EOF_CHAR )  {^1132^^^^^1120^1167^[REPLACE] if  ( c == '\n' || c == EOF_CHAR )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^1133^^^^^1120^1167^[REMOVE] ^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}^1141^1142^1143^^^1120^1167^[ADD] else if  ( c == ']' )  { inCharSet = false; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^inCharSet = false; ;^1140^^^^^1120^1167^[REPLACE] inCharSet = true;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1138^^^^^1120^1167^[ADD] c = getChar (  ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^} else if  ( c  ||  '[' )  {^1139^^^^^1120^1167^[REPLACE] } else if  ( c == '[' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^}   inCharSet = false;^1141^1142^1143^^^1120^1167^[ADD] else if  ( c == ']' )  { inCharSet = false; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^}  if  ( xmlOpenTagsCount  || xmlOpenTagsCount )  {^1141^^^^^1120^1167^[REPLACE] } else if  ( c == ']' )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c  = null ;^1131^^^^^1120^1167^[REPLACE] while  (  ( c = getChar (  )  )  != '/' || inCharSet )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int N = stringBufferTop;^1147^^^^^1120^1167^[REPLACE] int reEnd = stringBufferTop;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^while  ( false )  {^1149^^^^^1120^1167^[REPLACE] while  ( true )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^1150^1151^^^^1120^1167^[REPLACE] if  ( matchChar ( 'g' )  ) addToString ( 'g' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^1152^1153^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^1154^1155^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^1155^^^^^1120^1167^[REPLACE] addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^ungetChar ( c1 ) ;^1155^^^^^1120^1167^[REMOVE] ^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^1153^^^^^1120^1167^[REPLACE] addToString ( 'i' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^1151^^^^^1120^1167^[REPLACE] addToString ( 'g' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1155^^^^^1120^1167^[ADD] addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1150^1151^1152^1153^1154^1120^1167^[ADD] if  ( matchChar ( 'g' )  ) addToString ( 'g' ) ; else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ; else if  ( matchChar ( 'm' )  )^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^1152^1153^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1152^1153^1154^1155^1156^1120^1167^[ADD] else if  ( matchChar ( 'i' )  ) addToString ( 'i' ) ; else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ; else^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1154^1155^1156^1157^1158^1120^1167^[ADD] else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ; else break; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1153^^^^^1120^1167^[ADD] addToString ( 'i' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^1154^1155^^^^1120^1167^[REPLACE] else if  ( matchChar ( 'm' )  ) addToString ( 'm' ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '-' )  &&  (  ( peekChar (  )  )  == '-' )  )  {     c = getChar (  ) ;     addToString ( c ) ;     if  (  ( peekChar (  )  )  == '>' )  {         c = getChar (  ) ;         addToString ( c ) ;         return true;     }else {         continue;     } }^1152^^^^^1120^1167^[REMOVE] ^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^1160^^^^^1120^1167^[REPLACE] if  ( isAlpha ( peekChar (  )  )  )  {^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1160^1161^1162^^^1120^1167^[ADD] if  ( isAlpha ( peekChar (  )  )  )  { throw parser.reportError ( "msg.invalid.re.flag" ) ; }^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return ;^1161^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.invalid.re.flag" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^throw parser.addError ( "msg.invalid.re.flag" ) ;^1161^^^^^1120^1167^[REPLACE] throw parser.reportError ( "msg.invalid.re.flag" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1161^^^^^1120^1167^[ADD] throw parser.reportError ( "msg.invalid.re.flag" ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = new String ( stringBuffer, 0L, reEnd ) ;^1164^^^^^1120^1167^[REPLACE] this.string = new String ( stringBuffer, 0, reEnd ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.regExpFlags = new String ( stringBuffer, reEnd,Id_short - reEnd ) ;^1165^1166^^^^1120^1167^[REPLACE] this.regExpFlags = new String ( stringBuffer, reEnd, stringBufferTop - reEnd ) ;^[METHOD] readRegExp [TYPE] void [PARAMETER] int startToken [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1171^^^^^1169^1172^[REPLACE] return xmlIsAttribute;^[METHOD] isXMLAttribute [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlOpenTagsCount = 4;^1176^^^^^1174^1181^[REPLACE] xmlOpenTagsCount = 0;^[METHOD] getFirstXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true;^1177^^^^^1174^1181^[REPLACE] xmlIsAttribute = false;^[METHOD] getFirstXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true;^1178^^^^^1174^1181^[REPLACE] xmlIsTagContent = false;^[METHOD] getFirstXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1178^1179^^^^1174^1181^[ADD] xmlIsTagContent = false; ungetChar ( '<' ) ;^[METHOD] getFirstXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( '-' ) ;^1179^^^^^1174^1181^[REPLACE] ungetChar ( '<' ) ;^[METHOD] getFirstXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1180^^^^^1174^1181^[REPLACE] return getNextXMLToken (  ) ;^[METHOD] getFirstXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 * 3;^1185^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( isUnicodeEscapeStart )  {^1188^^^^^1184^1331^[REPLACE] if  ( xmlIsTagContent )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1188^1189^1190^1191^1192^1184^1331^[ADD] if  ( xmlIsTagContent )  { switch  ( c )  { case '>': addToString ( c ) ; xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  !=  '-' )  {^1248^^^^^1188^1324^[REPLACE] if  ( c == '-' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^1253^^^^^1248^1257^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1254^^^^^1248^1257^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1256^^^^^1248^1257^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( readXmlComment (  )  )  return Token.ERROR;^1250^^^^^1188^1324^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;^1250^^^^^1188^1324^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( !readXmlComment (  )  )  return Token.ERROR; } else {^1250^^^^^1188^1324^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( getChar (  )  == 'C' || getChar (  )  == 'D' || getChar (  )  == 'A' || getChar (  )  == 'T' ||^1262^1263^1264^1265^^1188^1324^[REPLACE] if  ( getChar (  )  == 'C' && getChar (  )  == 'D' && getChar (  )  == 'A' && getChar (  )  == 'T' &&^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 - 4;^1279^^^^^1262^1283^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1279^^^^^1262^1283^[ADD] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1280^^^^^1262^1283^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1282^^^^^1262^1283^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readCDATA (  )  )  return Token.ERROR;^1275^^^^^1262^1283^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( !readEntity (  )  )  return Token.ERROR;^1275^^^^^1262^1283^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readCDATA (  )  )  return Token.ERROR;^1275^^^^^1188^1324^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( !readEntity (  )  )  return Token.ERROR;^1275^^^^^1188^1324^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( readEntity (  )  )  return Token.ERROR;^1286^^^^^1188^1324^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( ! ( readQuotedString ( c )  )  )      return Token.ERROR;^1286^^^^^1188^1324^[REMOVE] ^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^1286^^^^^1188^1324^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readPI (  )  )  return Token.ERROR;^1293^^^^^1188^1324^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^1293^^^^^1188^1324^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  &&  0 )  {^1299^^^^^1188^1324^[REPLACE] if  ( xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1299^1300^1301^1302^1303^1188^1324^[ADD] if  ( xmlOpenTagsCount == 0 )  {  stringBufferTop = 0; this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 2;^1301^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1301^^^^^1188^1324^[ADD] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1302^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1302^^^^^1188^1324^[ADD] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1304^^^^^1188^1324^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = getChar (  ) ; ;^1237^^^^^1188^1324^[REPLACE] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1237^^^^^1188^1324^[ADD] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1240^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = getChar (  ) ; ;^1242^^^^^1188^1324^[REPLACE] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1245^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1247^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1253^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1254^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^parser.addError ( "msg.XML.bad.form" ) ;^1254^1255^^^^1188^1324^[ADD] this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1260^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1279^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1280^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1291^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1297^^^^^1188^1324^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1297^1298^^^^1188^1324^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1301^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1306^^^^^1188^1324^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^xmlOpenTagsCount--;^1306^1307^^^^1188^1324^[ADD] xmlIsTagContent = true; xmlOpenTagsCount--;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false; ;^1311^^^^^1188^1324^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1311^1312^^^^1188^1324^[ADD] xmlIsTagContent = true; xmlOpenTagsCount++;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^1318^^^^^1188^1324^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1256^^^^^1188^1324^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1282^^^^^1188^1324^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1319^^^^^1188^1324^[REPLACE] return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( stringBufferTop (  )   ||  '>' )  {^1197^^^^^1184^1331^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1198^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true; ;^1200^^^^^1184^1331^[REPLACE] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1200^^^^^1184^1331^[ADD] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readQuotedString ( xmlOpenTagsCount )  )  return Token.ERROR;^1211^^^^^1184^1331^[REPLACE] if  ( !readQuotedString ( c )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^1211^^^^^1184^1331^[REPLACE] if  ( !readQuotedString ( c )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent && xmlOpenTagsCount == 0 )  {^1229^^^^^1184^1331^[REPLACE] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.XML;^1231^^^^^1184^1331^[REPLACE] return Token.XMLEND;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true;^1192^^^^^1184^1331^[REPLACE] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true;^1193^^^^^1184^1331^[REPLACE] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1198^1199^^^^1184^1331^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = true;^1200^^^^^1184^1331^[REPLACE] xmlIsTagContent = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1200^1201^^^^1184^1331^[ADD] xmlIsTagContent = false; xmlOpenTagsCount--;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get short FromBuffer (  ) ;^1206^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = false;^1215^^^^^1184^1331^[REPLACE] xmlIsAttribute = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1215^1216^^^^1184^1331^[ADD] xmlIsAttribute = true; break;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true; ;^1225^^^^^1184^1331^[REPLACE] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1225^^^^^1184^1331^[ADD] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1207^^^^^1184^1331^[REPLACE] return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( token (  )   ||  '>' )  {^1197^^^^^1184^1331^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1197^1198^1199^1200^1201^1184^1331^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; xmlIsTagContent = false; xmlOpenTagsCount--;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent &&isUnicodeEscapeStart )  {^1229^^^^^1184^1331^[REPLACE] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^this.string = getStringFromBuffer (  ) ;return Token.XMLEND;^1229^1230^1231^1232^^1184^1331^[ADD] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  { this.string = getStringFromBuffer (  ) ; return Token.XMLEND; }^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  = null ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  '-' )  {^1248^^^^^1184^1331^[REPLACE] if  ( c == '-' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1248^1249^1250^1251^^1184^1331^[ADD] if  ( c == '-' )  { addToString ( c ) ; if ( !readXmlComment (  )  )  return Token.ERROR; } else {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1253^^^^^1248^1257^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1254^^^^^1248^1257^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1254^^^^^1248^1257^[ADD] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( readXmlComment (  )  )  return Token.ERROR;^1250^^^^^1184^1331^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1250^1251^^1253^1254^1184^1331^[ADD] if ( !readXmlComment (  )  )  return Token.ERROR; } else { stringBufferTop = 0; this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.COLON;^1250^^^^^1184^1331^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( getChar (  )  == 'C' || getChar (  )  == 'D' || getChar (  )  == 'A' || getChar (  )  == 'T' ||^1262^1263^1264^1265^^1184^1331^[REPLACE] if  ( getChar (  )  == 'C' && getChar (  )  == 'D' && getChar (  )  == 'A' && getChar (  )  == 'T' &&^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^1279^^^^^1262^1283^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^this.string = null;^1279^1280^^^^1262^1283^[ADD] stringBufferTop = 0; this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1280^^^^^1262^1283^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readPI (  )  )  return Token.ERROR; break;^1275^^^^^1262^1283^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  ( ! ( readQuotedString ( c )  )  )      return Token.ERROR;^1275^^^^^1262^1283^[REMOVE] ^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readPI (  )  )  return Token.ERROR; break;^1275^^^^^1184^1331^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( !readEntity (  )  )  return Token.ERROR;^1275^^^^^1184^1331^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( !readEntity (  )  )  return Token.ERROR; break;^1286^^^^^1184^1331^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^1286^^^^^1184^1331^[REPLACE] if ( !readEntity (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readPI (  )  )  return Token.ERROR;^1293^^^^^1184^1331^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1293^1294^1295^^1297^1184^1331^[ADD] if  ( !readPI (  )  )  return Token.ERROR; break; case '/': c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^1293^^^^^1184^1331^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  || c1 )  {^1299^^^^^1184^1331^[REPLACE] if  ( xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^1301^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1302^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1304^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c  ==  EOF_CHAR; c = getChar (  )  )  {^1187^^^^^1184^1331^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount  !=  '-' )  {^1248^^^^^1188^1324^[REPLACE] if  ( c == '-' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1253^^^^^1248^1257^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1254^^^^^1248^1257^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1250^1251^^1253^1254^1188^1324^[ADD] if ( !readXmlComment (  )  )  return Token.ERROR; } else { stringBufferTop = 0; this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 + 2;^1279^^^^^1262^1283^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1275^1276^1277^^1279^1188^1324^[ADD] if  ( !readCDATA (  )  )  return Token.ERROR;  } else { stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readPI (  )  )  return Token.ERROR; break;^1293^^^^^1188^1324^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (Id_this  ||  0 )  {^1299^^^^^1188^1324^[REPLACE] if  ( xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1245^1246^^^^1188^1324^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1253^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1254^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^1279^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1279^1280^^^^1188^1324^[ADD] stringBufferTop = 0; this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1280^^^^^1188^1324^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1297^^^^^1188^1324^[ADD] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^1301^^^^^1188^1324^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1311^^^^^1188^1324^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^1318^^^^^1188^1324^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1318^^^^^1188^1324^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   !=  '>' )  {^1197^^^^^1184^1331^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1198^^^^^1184^1331^[ADD] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent ) {^1229^^^^^1184^1331^[REPLACE] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string ;^1206^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = false; ;^1215^^^^^1184^1331^[REPLACE] xmlIsAttribute = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true;^1225^^^^^1184^1331^[REPLACE] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^1230^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1230^^^^^1184^1331^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readQuotedString ( c )  )  return Token.ERROR;^1211^^^^^1184^1331^[REPLACE] if  ( !readQuotedString ( c )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  xmlOpenTagsCount == 0 )  {^1229^^^^^1184^1331^[REPLACE] if  ( !xmlIsTagContent && xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  '-' )  {^1248^^^^^1184^1331^[REPLACE] if  ( c == '-' )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 + 3;^1253^^^^^1248^1257^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if ( !readXmlComment (  )  )  return Token.ERROR; } else {^1250^^^^^1184^1331^[REPLACE] if ( !readXmlComment (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1262^1263^1264^1265^1266^1184^1331^[ADD] if  ( getChar (  )  == 'C' && getChar (  )  == 'D' && getChar (  )  == 'A' && getChar (  )  == 'T' && getChar (  )  == 'A' &&^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^1279^^^^^1262^1283^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( readCDATA (  )  )  return Token.ERROR;^1275^^^^^1184^1331^[REPLACE] if  ( !readCDATA (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( !readPI (  )  )  return Token.ERROR; break;^1293^^^^^1184^1331^[REPLACE] if  ( !readPI (  )  )  return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ||  0 )  {^1299^^^^^1184^1331^[REPLACE] if  ( xmlOpenTagsCount == 0 )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1299^1300^1301^1302^1303^1184^1331^[ADD] if  ( xmlOpenTagsCount == 0 )  {  stringBufferTop = 0; this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1301^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1302^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsAttribute = true; ;^1193^^^^^1184^1331^[REPLACE] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1215^^^^^1184^1331^[ADD] xmlIsAttribute = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1225^1226^^^^1184^1331^[ADD] xmlIsAttribute = false; break;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = getChar (  ) ; ;^1237^^^^^1184^1331^[REPLACE] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1240^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = getChar (  ) ; ;^1242^^^^^1184^1331^[REPLACE] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1242^^^^^1184^1331^[ADD] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1245^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1247^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^1253^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1254^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1254^1255^^^^1184^1331^[ADD] this.string = null; parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1260^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1279^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1280^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1280^^^^^1184^1331^[ADD] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1291^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1297^^^^^1184^1331^[REPLACE] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1301^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false; ;^1306^^^^^1184^1331^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1311^^^^^1184^1331^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^xmlOpenTagsCount++;^1311^1312^^^^1184^1331^[ADD] xmlIsTagContent = true; xmlOpenTagsCount++;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get char FromBuffer (  ) ;^1318^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1318^^^^^1184^1331^[ADD] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1256^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1282^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1319^^^^^1184^1331^[REPLACE] return Token.XML;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  { ;^1187^^^^^1184^1331^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1193^^^^^1184^1331^[ADD] xmlIsAttribute = false;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string  =  this.string ;^1206^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1237^^^^^1184^1331^[ADD] c = peekChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1247^^^^^1184^1331^[ADD] c = getChar (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0L;^1253^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1254^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1279^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 4;^1301^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^xmlIsTagContent = false;^1306^^^^^1184^1331^[REPLACE] xmlIsTagContent = true;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = get double FromBuffer (  ) ;^1318^^^^^1184^1331^[REPLACE] this.string = getStringFromBuffer (  ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  {^1187^^^^^1184^1331^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1327^^^^^1184^1331^[REPLACE] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1327^^^^^1184^1331^[ADD] stringBufferTop = 0;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1328^^^^^1184^1331^[REPLACE] this.string = null;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( "msg.XML.bad.form" ) ;^1329^^^^^1184^1331^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return Token.EOL;^1330^^^^^1184^1331^[REPLACE] return Token.ERROR;^[METHOD] getNextXMLToken [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  ||  sourceEnd )  return true;^1340^^^^^1336^1347^[REPLACE] if  ( c == quote )  return true;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == quote )  return false;^1340^^^^^1336^1347^[REPLACE] if  ( c == quote )  return true;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c  == xmlOpenTagsCount; c = getChar (  )  )  {^1338^^^^^1336^1347^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c  &&  quote )  return false;^1340^^^^^1336^1347^[REPLACE] if  ( c == quote )  return true;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1340^1341^^^^1336^1347^[ADD] if  ( c == quote )  return true; }^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  { ;^1338^^^^^1336^1347^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  {^1338^^^^^1336^1347^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^1343^^^^^1336^1347^[REPLACE] stringBufferTop = 0;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1344^^^^^1336^1347^[REPLACE] this.string = null;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1344^^^^^1336^1347^[ADD] this.string = null;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( "msg.XML.bad.form" ) ;^1345^^^^^1336^1347^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^parser.addError ( "msg.unterminated.string.lit" ) ;^1345^^^^^1336^1347^[REMOVE] ^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1346^^^^^1336^1347^[REPLACE] return false;^[METHOD] readQuotedString [TYPE] boolean [PARAMETER] int quote [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart || peekChar (  )  == '-' )  {^1356^^^^^1352^1374^[REPLACE] if  ( c == '-' && peekChar (  )  == '-' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   &&  '>' )  {^1359^^^^^1352^1374^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^1359^^^^^1352^1374^[REMOVE] ^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1360^^^^^1352^1374^[REPLACE] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^1362^^^^^1352^1374^[REPLACE] return true;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1357^^^^^1352^1374^[REPLACE] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1360^1361^^^^1352^1374^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;addToString ( c ) ;return true;^1359^1360^1361^1362^^1352^1374^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; return true;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1360^^^^^1352^1374^[ADD] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c  ==  EOF_CHAR; )  {^1354^^^^^1352^1374^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '-' || peekChar (  )  == '-' )  {^1356^^^^^1352^1374^[REPLACE] if  ( c == '-' && peekChar (  )  == '-' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (xmlOpenTagsCount (  )   &&  '>' )  {^1359^^^^^1352^1374^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   !=  '>' )  {^1359^^^^^1352^1374^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1357^^^^^1352^1374^[ADD] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;^1360^1361^^^^1352^1374^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1367^^^^^1352^1374^[REPLACE] c = getChar (  ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  {^1354^^^^^1352^1374^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 1;^1370^^^^^1352^1374^[REPLACE] stringBufferTop = 0;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = true;^1371^^^^^1352^1374^[REPLACE] this.string = null;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( "msg.XML.bad.form" ) ;^1372^^^^^1352^1374^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1373^^^^^1352^1374^[REPLACE] return false;^[METHOD] readXmlComment [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (  peekChar (  )  == ']' )  {^1383^^^^^1379^1401^[REPLACE] if  ( c == ']' && peekChar (  )  == ']' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   !=  '>' )  {^1386^^^^^1379^1401^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1386^1387^1388^1389^^1379^1401^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; return true;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1387^^^^^1379^1401^[REPLACE] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^1389^^^^^1379^1401^[REPLACE] return true;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1384^^^^^1379^1401^[REPLACE] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1387^1388^^^^1379^1401^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( peekChar (  )   || tokenno )  {^1386^^^^^1379^1401^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^c = getChar (  ) ;addToString ( c ) ;return true;^1386^1387^1388^1389^^1379^1401^[ADD] if  ( peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ; return true;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c  ==  EOF_CHAR; )  {^1381^^^^^1379^1401^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == ']' || peekChar (  )  == ']' )  {^1383^^^^^1379^1401^[REPLACE] if  ( c == ']' && peekChar (  )  == ']' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd (  )   ||  '>' )  {^1386^^^^^1379^1401^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^addToString ( c ) ;^1387^1388^^^^1379^1401^[ADD] c = getChar (  ) ; addToString ( c ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount (  )   &&  '>' )  {^1386^^^^^1379^1401^[REPLACE] if  ( peekChar (  )  == '>' )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1387^^^^^1379^1401^[ADD] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1394^^^^^1379^1401^[REPLACE] c = getChar (  ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  {^1381^^^^^1379^1401^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; )  {^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 0 % 4;^1397^^^^^1379^1401^[REPLACE] stringBufferTop = 0;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1398^^^^^1379^1401^[REPLACE] this.string = null;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( "msg.XML.bad.form" ) ;^1399^^^^^1379^1401^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REMOVE]^parser.addError ( "msg.unterminated.string.lit" ) ;^1399^^^^^1379^1401^[REMOVE] ^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1400^^^^^1379^1401^[REPLACE] return false;^[METHOD] readCDATA [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int declTags = 1 >>> 3;^1408^^^^^1406^1426^[REPLACE] int declTags = 1;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (c1  &&  0 )  return true;^1417^^^^^1406^1426^[REPLACE] if  ( declTags == 0 )  return true;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( declTags == 0 )  return false;^1417^^^^^1406^1426^[REPLACE] if  ( declTags == 0 )  return true;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c  ==  EOF_CHAR; c = getChar (  )  )  {^1409^^^^^1406^1426^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1409^1410^1411^1412^1413^1406^1426^[ADD] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { addToString ( c ) ; switch  ( c )  { case '<': declTags++;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( lineStart  !=  0 )  return true;^1417^^^^^1406^1426^[REPLACE] if  ( declTags == 0 )  return true;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  { ;^1409^^^^^1406^1426^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  {^1409^^^^^1406^1426^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = 3;^1422^^^^^1406^1426^[REPLACE] stringBufferTop = 0;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = false;^1423^^^^^1406^1426^[REPLACE] this.string = null;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser.reportError ( "msg.XML.bad.form" ) ;^1424^^^^^1406^1426^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1425^^^^^1406^1426^[REPLACE] return false;^[METHOD] readEntity [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '?' || peekChar (  )  == '>' )  {^1435^^^^^1431^1446^[REPLACE] if  ( c == '?' && peekChar (  )  == '>' )  {^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^c = peekChar (  ) ; ;^1436^^^^^1431^1446^[REPLACE] c = getChar (  ) ;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return false;^1438^^^^^1431^1446^[REPLACE] return true;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int xmlOpenTagsCount = getChar (  ) ; c  == xmlOpenTagsCount; c = getChar (  )  )  {^1433^^^^^1431^1446^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^if  (isUnicodeEscapeStart?' || peekChar (  )  == '>' )  {^1435^^^^^1431^1446^[REPLACE] if  ( c == '?' && peekChar (  )  == '>' )  {^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1436^^^^^1431^1446^[ADD] c = getChar (  ) ;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  { ;^1433^^^^^1431^1446^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1433^1434^1435^1436^1437^1431^1446^[ADD] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { addToString ( c ) ; if  ( c == '?' && peekChar (  )  == '>' )  { c = getChar (  ) ; addToString ( c ) ;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  { if  ( xmlIsTagContent )  {^1433^^^^^1431^1446^[REPLACE] for  ( int c = getChar (  ) ; c != EOF_CHAR; c = getChar (  )  )  {^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop = N + 1; ;^1442^^^^^1431^1446^[REPLACE] stringBufferTop = 0;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^this.string = this;^1443^^^^^1431^1446^[REPLACE] this.string = null;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^parser .reportError ( regExpFlags )  ;^1444^^^^^1431^1446^[REPLACE] parser.addError ( "msg.XML.bad.form" ) ;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[ADD]^^1444^1445^1446^^^1431^1446^[ADD] parser.addError ( "msg.XML.bad.form" ) ; return false; }^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return true;^1445^^^^^1431^1446^[REPLACE] return false;^[METHOD] readPI [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^return new String ( stringBuffer, 0 >> 1, stringBufferTop ) ;^1450^^^^^1448^1451^[REPLACE] return new String ( stringBuffer, 0, stringBufferTop ) ;^[METHOD] getStringFromBuffer [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop;^1455^^^^^1453^1463^[REPLACE] int N = stringBufferTop;^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( N == stringBuffer.length *  0  )  {^1456^^^^^1453^1463^[REPLACE] if  ( N == stringBuffer.length )  {^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceBuffer = tmp; ;^1459^^^^^1453^1463^[REPLACE] stringBuffer = tmp;^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[stringBuffer.length /  0.5  * 0 ];^1457^^^^^1453^1463^[REPLACE] char[] tmp = new char[stringBuffer.length * 2];^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1459^^^^^1453^1463^[ADD] stringBuffer = tmp;^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[stringBuffer.length - 3 * 2];^1457^^^^^1453^1463^[REPLACE] char[] tmp = new char[stringBuffer.length * 2];^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^stringBuffer[N]  = null ;^1461^^^^^1453^1463^[REPLACE] stringBuffer[N] =  ( char ) c;^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^stringBufferTop =xmlOpenTagsCount + 1;^1462^^^^^1453^1463^[REPLACE] stringBufferTop = N + 1;^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1462^^^^^1453^1463^[ADD] stringBufferTop = N + 1;^[METHOD] addToString [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( !readCDATA (  )  )  return Token.ERROR;^1465^^^^^^^[REPLACE] public int getTokenno (  )  { return tokenno; }^[METHOD] getTokenno [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (xmlIsAttribute || ungetBuffer[ungetCursor - 1] == '\n' ) Kit.codeBug (  ) ;^1470^1471^^^^1467^1473^[REPLACE] if  ( ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\n' ) Kit.codeBug (  ) ;^[METHOD] ungetChar [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^addToString ( 'T' ) ;^1471^^^^^1467^1473^[REPLACE] Kit.codeBug (  ) ;^[METHOD] ungetChar [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1471^^^^^1467^1473^[ADD] Kit.codeBug (  ) ;^[METHOD] ungetChar [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^ungetBuffer[ungetCursor++] =  xmlOpenTagsCount;^1472^^^^^1467^1473^[REPLACE] ungetBuffer[ungetCursor++] = c;^[METHOD] ungetChar [TYPE] void [PARAMETER] int c [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c2 = getChar (  ) ;^1477^^^^^1475^1484^[REPLACE] int c = getChar (  ) ;^[METHOD] matchChar [TYPE] boolean [PARAMETER] int test [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1477^^^^^1475^1484^[ADD] int c = getChar (  ) ;^[METHOD] matchChar [TYPE] boolean [PARAMETER] int test [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( c  ||  lineno )  {^1478^^^^^1475^1484^[REPLACE] if  ( c == test )  {^[METHOD] matchChar [TYPE] boolean [PARAMETER] int test [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return true;^1482^^^^^1475^1484^[REPLACE] return false;^[METHOD] matchChar [TYPE] boolean [PARAMETER] int test [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return false;^1479^^^^^1475^1484^[REPLACE] return true;^[METHOD] matchChar [TYPE] boolean [PARAMETER] int test [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c2 = getChar (  ) ;^1488^^^^^1486^1491^[REPLACE] int c = getChar (  ) ;^[METHOD] peekChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( xmlOpenTagsCount ) ;^1489^^^^^1486^1491^[REPLACE] ungetChar ( c ) ;^[METHOD] peekChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^1490^^^^^1486^1491^[REPLACE] return c;^[METHOD] peekChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ungetCursor  ==  0 )  {^1495^^^^^1494^1558^[REPLACE] if  ( ungetCursor != 0 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -1 )  {^1497^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1498^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1498^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1500^^^^^1494^1558^[REPLACE] return ungetBuffer[ungetCursor];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -3 )  {^1497^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1497^1498^1499^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1498^^^^^1494^1558^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == null )  {^1505^^^^^1494^1558^[REPLACE] if  ( sourceString != null )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceCursor  && declTags )  {^1515^^^^^1505^1525^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  {^1516^^^^^1505^1525^[REPLACE] if  ( !fillSourceBuffer (  )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  (  ( ungetCursor )  != 0 )  {     -- ( ungetCursor ) ;     if  (  ( charno )  ==  ( -1 )  )  {         charno = getOffset (  ) ;     }     return ungetBuffer[ungetCursor]; }^1516^^^^^1505^1525^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (sourceEnd  !=  -1 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1519^^^^^1505^1525^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^hitEOF = false;^1517^^^^^1505^1525^[REPLACE] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1521^^^^^1505^1525^[REPLACE] return EOF_CHAR;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  &&  -1 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1517^^^^^1505^1525^[ADD] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  = null ;^1519^^^^^1505^1525^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1516^1517^1518^1519^1520^1505^1525^[ADD] if  ( !fillSourceBuffer (  )  )  { hitEOF = true; if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -4 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^charno = getOffset (  ) ;^1518^1519^1520^^^1505^1525^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -1 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1519^^^^^1505^1525^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  =  c ;^1524^^^^^1505^1525^[REPLACE] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceCursor  &&  sourceEnd )  {^1506^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -1 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1508^1509^1510^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1509^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^hitEOF = false;^1507^^^^^1494^1558^[REPLACE] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1509^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1511^^^^^1494^1558^[REPLACE] return EOF_CHAR;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1509^^^^^1494^1558^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c ;^1513^^^^^1494^1558^[REPLACE] c = sourceString.charAt ( sourceCursor++ ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  && escapeStart )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^1508^^^^^1494^1558^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1507^^^^^1494^1558^[ADD] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (c2  ||  -1 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceCursor  ||  sourceEnd )  {^1515^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  {^1516^^^^^1494^1558^[REPLACE] if  ( !fillSourceBuffer (  )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  &&  -1 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^charno = getOffset (  ) ;^1518^1519^1520^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1519^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^hitEOF = false;^1517^^^^^1494^1558^[REPLACE] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return Token.NAME;^1521^^^^^1494^1558^[REPLACE] return EOF_CHAR;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( declTags  &&  c1 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1519^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  (  ( ungetCursor )  != 0 )  {     -- ( ungetCursor ) ;     if  (  ( charno )  ==  ( -1 )  )  {         charno = getOffset (  ) ;     }     return ungetBuffer[ungetCursor]; }^1516^^^^^1494^1558^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -1 + 2 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1518^1519^1520^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  = null ;^1519^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1519^^^^^1494^1558^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (escapeStart  &&  -1 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  <  0 )  {^1527^^^^^1494^1558^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar == '\r' || c == '\n' )  {^1528^^^^^1494^1558^[REPLACE] if  ( lineEndChar == '\r' && c == '\n' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1; ;^1529^^^^^1494^1558^[REPLACE] lineEndChar = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1529^1530^^^^1494^1558^[ADD] lineEndChar = '\n'; continue;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1 / 4;^1532^^^^^1494^1558^[REPLACE] lineEndChar = -1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1532^1533^^^^1494^1558^[ADD] lineEndChar = -1; lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart =length - 1;^1533^^^^^1494^1558^[REPLACE] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  (  (  ( s.charAt ( 2 )  )  == 'i' )  &&  (  ( s.charAt ( 1 )  )  == 'h' )  )  {     id = Id_this;     break L0; }^1528^^^^^1494^1558^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( c  >  63 )  {^1537^^^^^1494^1558^[REPLACE] if  ( c <= 127 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1537^1538^1539^1540^1541^1494^1558^[ADD] if  ( c <= 127 )  { if  ( c == '\n' || c == '\r' )  { lineEndChar = c; c = '\n'; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSFormatChar ( xmlOpenTagsCount )  )  {^1543^^^^^1537^1550^[REPLACE] if  ( isJSFormatChar ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^continue;^1543^1544^1545^^^1537^1550^[ADD] if  ( isJSFormatChar ( c )  )  { continue; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1546^^^^^1537^1550^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1; ;^1547^^^^^1537^1550^[REPLACE] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^c = '\n';^1547^1548^^^^1537^1550^[ADD] lineEndChar = c; c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c = '.'; ;^1548^^^^^1537^1550^[REPLACE] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1548^^^^^1537^1550^[ADD] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' ) {^1538^^^^^1494^1558^[REPLACE] if  ( c == '\n' || c == '\r' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1; ;^1539^^^^^1494^1558^[REPLACE] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c = '.'; ;^1540^^^^^1494^1558^[REPLACE] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1539^1540^^^^1494^1558^[ADD] lineEndChar = c; c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( c == '\n' && c == '\r' )  {^1538^^^^^1494^1558^[REPLACE] if  ( c == '\n' || c == '\r' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( isJSFormatChar ( xmlOpenTagsCount )  )  {^1543^^^^^1494^1558^[REPLACE] if  ( isJSFormatChar ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   xmlOpenTagsCount    )  {^1546^^^^^1494^1558^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^1546^^^^^1494^1558^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -1; ;^1547^^^^^1494^1558^[REPLACE] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c = '.'; ;^1548^^^^^1494^1558^[REPLACE] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  &&  -1 )  {^1552^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno ;^1553^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( int i=1; i<length; i++ )  {^1503^^^^^1494^1558^[REPLACE] for ( ;; )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == this )  {^1505^^^^^1494^1558^[REPLACE] if  ( sourceString != null )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceCursor  &&  sourceEnd )  {^1515^^^^^1505^1525^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  &&  -1 << 4 )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  || quoteChar )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  (  ( c == '+' )  ||  ( c == '-' )  )  {     addToString ( c ) ;     c = getChar (  ) ; }^1518^^^^^1505^1525^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  != lineEndChar )  {^1518^^^^^1505^1525^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1519^^^^^1505^1525^[ADD] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  = null ;^1524^^^^^1505^1525^[REPLACE] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1524^^^^^1505^1525^[ADD] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (lineEndChar  &&  sourceEnd )  {^1506^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1506^1507^1508^1509^1510^1494^1558^[ADD] if  ( sourceCursor == sourceEnd )  { hitEOF = true; if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( escapeStart  !=  c1 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (reEnd  !=  -1 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  !=  token )  {^1506^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  || declTags )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  = null ;^1509^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (escapeVal  !=  -1 )  {^1508^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^charno = getOffset (  ) ;^1508^1509^1510^^^1494^1558^[ADD] if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceCursor  || length )  {^1515^^^^^1494^1558^[REPLACE] if  ( sourceCursor == sourceEnd )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  ||  -1 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1517^^^^^1494^1558^[ADD] hitEOF = true;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^hitEOF = true;charno = getOffset (  ) ;^1516^1517^1518^1519^1520^1494^1558^[ADD] if  ( !fillSourceBuffer (  )  )  { hitEOF = true; if  ( charno == -1 )  { charno = getOffset (  ) ; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( charno  !=  -1 - 4 )  {^1518^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (Id_this  !=  0 )  {^1527^^^^^1494^1558^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlIsTagContent )  {^1528^^^^^1494^1558^[REPLACE] if  ( lineEndChar == '\r' && c == '\n' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineEndChar = -3;^1532^^^^^1494^1558^[REPLACE] lineEndChar = -1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart =lineEndChar - 1L;^1533^^^^^1494^1558^[REPLACE] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1533^^^^^1494^1558^[ADD] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar == '\r' ) {^1528^^^^^1494^1558^[REPLACE] if  ( lineEndChar == '\r' && c == '\n' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( xmlOpenTagsCount  > xmlOpenTagsCount )  {^1537^^^^^1494^1558^[REPLACE] if  ( c <= 127 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^1546^^^^^1537^1550^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (  c == '\r' )  {^1538^^^^^1494^1558^[REPLACE] if  ( c == '\n' || c == '\r' )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^lineEndChar = c;c = '\n';^1538^1539^1540^1541^^1494^1558^[ADD] if  ( c == '\n' || c == '\r' )  { lineEndChar = c; c = '\n'; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1538^1539^1540^1541^^1494^1558^[ADD] if  ( c == '\n' || c == '\r' )  { lineEndChar = c; c = '\n'; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^c = '\n';^1539^1540^^^^1494^1558^[ADD] lineEndChar = c; c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( isJSLineTerminator ( c )  )  {     break; }^1543^^^^^1494^1558^[REMOVE] ^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1546^^^^^1494^1558^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^lineEndChar = c;c = '\n';^1546^1547^1548^1549^^1494^1558^[ADD] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  { lineEndChar = c; c = '\n'; }^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (escapeVal  !=  -1 )  {^1552^^^^^1494^1558^[REPLACE] if  ( charno == -1 )  {^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  =  c ;^1513^^^^^1494^1558^[REPLACE] c = sourceString.charAt ( sourceCursor++ ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1513^^^^^1494^1558^[ADD] c = sourceString.charAt ( sourceCursor++ ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c ;^1524^^^^^1494^1558^[REPLACE] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1524^^^^^1494^1558^[ADD] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1532^^^^^1494^1558^[ADD] lineEndChar = -1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart =ungetCursor - 0;^1533^^^^^1494^1558^[REPLACE] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1547^^^^^1494^1558^[ADD] lineEndChar = c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^charno  =  charno ;^1553^^^^^1494^1558^[REPLACE] charno = getOffset (  ) ;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return xmlOpenTagsCount;^1556^^^^^1494^1558^[REPLACE] return c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^1504^^^^^1494^1558^[REPLACE] int c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1504^^^^^1494^1558^[ADD] int c;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^c  = null ;^1524^^^^^1494^1558^[REPLACE] c = sourceBuffer[sourceCursor++];^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = lineStart - c1;^1533^^^^^1494^1558^[REPLACE] lineStart = sourceCursor - 1;^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1548^^^^^1494^1558^[ADD] c = '\n';^[METHOD] getChar [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int escapeVal;^1563^^^^^1560^1566^[REPLACE] int c;^[METHOD] skipLine [TYPE] void [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^while  (  ( xmlOpenTagsCount = getChar (  )  )  != EOF_CHAR || c != '\n' )  { }^1564^^^^^1560^1566^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && c != '\n' )  { }^[METHOD] skipLine [TYPE] void [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^while  (  ( c = getChar (  )  )  != EOF_CHAR && c != '\n' )  { } ungetChar ( c ) ; ;^1564^^^^^1560^1566^[REPLACE] while  (  ( c = getChar (  )  )  != EOF_CHAR && c != '\n' )  { }^[METHOD] skipLine [TYPE] void [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^ungetChar ( xmlOpenTagsCount ) ;^1565^^^^^1560^1566^[REPLACE] ungetChar ( c ) ;^[METHOD] skipLine [TYPE] void [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^returnId_transient - 1;^1570^^^^^1568^1571^[REPLACE] return sourceCursor - lineStart - ungetCursor - 1;^[METHOD] getOffset [TYPE] int [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEndChar  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString ==string )  {^1575^^^^^1574^1617^[REPLACE] if  ( sourceString != null )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  ==  0 )  {^1592^^^^^1575^1616^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  !=  sourceEnd )  {^1598^^^^^1592^1614^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1598^1599^1600^^^1592^1614^[ADD] if  ( i == sourceEnd )  { try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( !fillSourceBuffer (  )  )  {^1600^^^^^1592^1614^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1599^1600^^^^1592^1614^[ADD] try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =Id_throw + lineLength;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  { break; }^1600^^^^^1592^1614^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime .stringToNumber ( string , Id_function , reEnd )   )  {^1610^^^^^1592^1614^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ;;  >  > lineLength )  {^1596^^^^^1592^1614^[REPLACE] for  ( ;; ++lineLength )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  ||  sourceEnd )  {^1598^^^^^1592^1614^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = Id_while + Id_var;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1610^^^^^1592^1614^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =Id_transient + lineLength;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1607^^^^^1592^1614^[ADD] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_try + lineLength;^1597^^^^^1592^1614^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop;^1609^^^^^1592^1614^[REPLACE] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1601^1602^1603^^^1592^1614^[ADD] catch  ( IOException ioe )  {  break;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart +Id_var;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i = lineStart +Id_void;^1597^^^^^1592^1614^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (Id_true  &&  sourceEnd )  {^1598^^^^^1575^1616^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  { break; }^1600^^^^^1575^1616^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1599^1600^^^^1575^1616^[ADD] try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( !fillSourceBuffer (  )  )  {^1600^^^^^1575^1616^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart +Id_try;^1607^^^^^1575^1616^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1610^^^^^1575^1616^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1610^1611^1612^^^1575^1616^[ADD] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ;;  <  < lineLength )  {^1596^^^^^1575^1616^[REPLACE] for  ( ;; ++lineLength )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (Id_try  ||  sourceEnd )  {^1598^^^^^1575^1616^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REMOVE]^if  ( escapeVal < 0 )  {     break; }^1600^^^^^1575^1616^[REMOVE] ^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart +Id_throw;^1607^^^^^1575^1616^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1607^^^^^1575^1616^[ADD] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1600^1601^^1603^1604^1575^1616^[ADD] if  ( !fillSourceBuffer (  )  )  { break; } } catch  ( IOException ioe )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   xmlOpenTagsCount    )  {^1610^^^^^1575^1616^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^break;^1610^1611^1612^^^1575^1616^[ADD] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =Id_throw + lineLength;^1607^^^^^1575^1616^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_transient + lineLength;^1597^^^^^1575^1616^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop;^1609^^^^^1575^1616^[REPLACE] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1601^1602^1603^^^1575^1616^[ADD] catch  ( IOException ioe )  {  break;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return new String ( sourceBuffer, lineStart, base ) ;^1615^^^^^1575^1616^[REPLACE] return new String ( sourceBuffer, lineStart, lineLength ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int lineLength = pushbackToken - lineStart;^1591^^^^^1575^1616^[REPLACE] int lineLength = sourceCursor - lineStart;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i = base + lineLength;^1597^^^^^1575^1616^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1609^^^^^1575^1616^[ADD] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  >  0 )  {^1578^^^^^1574^1617^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1583^^^^^1578^1587^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ; lineEnd  ==  sourceEnd; ++lineEnd )  {^1581^^^^^1578^1587^[REPLACE] for  ( ; lineEnd != sourceEnd; ++lineEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.equals ( quote ) ;^1582^^^^^1578^1587^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.equals ( pushbackToken ) ;^1582^^^^^1578^1587^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1583^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ;xmlOpenTagsCount  ==  sourceEnd; ++lineEnd )  {^1581^^^^^1574^1617^[REPLACE] for  ( ; lineEnd != sourceEnd; ++lineEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( quote ) ;^1582^^^^^1574^1617^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1582^^^^^1574^1617^[ADD] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return sourceString.substring ( lineStart, xmlOpenTagsCount ) ;^1588^^^^^1574^1617^[REPLACE] return sourceString.substring ( lineStart, lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int length = s.length (  ) ;^1577^^^^^1574^1617^[REPLACE] int lineEnd = sourceCursor;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.equals ( pushbackToken ) ;^1582^^^^^1574^1617^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineEndChar  <  0 )  {^1578^^^^^1574^1617^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^--lineEnd;^1578^1579^1580^1581^1582^1574^1617^[ADD] if  ( lineEndChar >= 0 )  { --lineEnd; } else { for  ( ; lineEnd != sourceEnd; ++lineEnd )  { int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ; test  ==  sourceEnd; ++lineEnd )  {^1581^^^^^1578^1587^[REPLACE] for  ( ; lineEnd != sourceEnd; ++lineEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   xmlOpenTagsCount    )  {^1583^^^^^1578^1587^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( sourceCursor ) ;^1582^^^^^1578^1587^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1582^^^^^1578^1587^[ADD] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( xmlOpenTagsCount ) ;^1582^^^^^1578^1587^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   xmlOpenTagsCount    )  {^1583^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( Id_synchronized  >  0 >>> 3 )  {^1592^^^^^1574^1617^[REPLACE] if  ( lineEndChar >= 0 )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  &&  sourceEnd )  {^1598^^^^^1592^1614^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =N + lineLength;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ;;  ^  ^ lineLength )  {^1596^^^^^1592^1614^[REPLACE] for  ( ;; ++lineLength )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (Id_throw  ||  sourceEnd )  {^1598^^^^^1592^1614^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart  !=  lineLength;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_throw + Id_with;^1597^^^^^1592^1614^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart +Id_void;^1607^^^^^1592^1614^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_var + lineLength;^1597^^^^^1592^1614^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^Id_thisf  ( i  !=  sourceEnd )  {^1598^^^^^1574^1617^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( !fillSourceBuffer (  )  )  {^1600^^^^^1574^1617^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1600^1601^^1603^1604^1574^1617^[ADD] if  ( !fillSourceBuffer (  )  )  { break; } } catch  ( IOException ioe )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1599^1600^^^^1574^1617^[ADD] try { if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( fillSourceBuffer (  )  )  { break; }^1600^^^^^1574^1617^[REPLACE] if  ( !fillSourceBuffer (  )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i =Id_throw + lineLength;^1607^^^^^1574^1617^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1607^^^^^1574^1617^[ADD] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  (   xmlOpenTagsCount    )  {^1610^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ; lineEnd  ==  sourceEnd; ++lineEnd )  {^1581^^^^^1574^1617^[REPLACE] for  ( ; lineEnd != sourceEnd; ++lineEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1581^1582^1583^1584^1585^1574^1617^[ADD] for  ( ; lineEnd != sourceEnd; ++lineEnd )  { int c = sourceString.charAt ( lineEnd ) ; if  ( ScriptRuntime.isJSLineTerminator ( c )  )  { break; }^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime .stringToNumber ( str , Id_extends , Id_final )   )  {^1583^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString .substring ( Id_export , base )  ;^1582^^^^^1574^1617^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^for  ( ;;  &  & lineLength )  {^1596^^^^^1574^1617^[REPLACE] for  ( ;; ++lineLength )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( i  &&  sourceEnd )  {^1598^^^^^1574^1617^[REPLACE] if  ( i == sourceEnd )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart +Id_throws;^1607^^^^^1574^1617^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( ScriptRuntime.isJSLineTerminator ( xmlOpenTagsCount )  )  {^1610^^^^^1574^1617^[REPLACE] if  ( ScriptRuntime.isJSLineTerminator ( c )  )  {^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^i = lineStart +Id_volatile;^1607^^^^^1574^1617^[REPLACE] i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_throw + Id_transient;^1597^^^^^1574^1617^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int reEnd = stringBufferTop;^1609^^^^^1574^1617^[REPLACE] int c = sourceBuffer[i];^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1601^1602^1603^^^1574^1617^[ADD] catch  ( IOException ioe )  {  break;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return sourceString.substring ( lineStart, quote ) ;^1588^^^^^1574^1617^[REPLACE] return sourceString.substring ( lineStart, lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return new String ( sourceBuffer, lineStart, Id_transient ) ;^1615^^^^^1574^1617^[REPLACE] return new String ( sourceBuffer, lineStart, lineLength ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int c = sourceString.charAt ( xmlOpenTagsCount ) ;^1582^^^^^1574^1617^[REPLACE] int c = sourceString.charAt ( lineEnd ) ;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int lineLength = sourceCursor -escapeVal;^1591^^^^^1574^1617^[REPLACE] int lineLength = sourceCursor - lineStart;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int i =Id_transient + Id_var;^1597^^^^^1574^1617^[REPLACE] int i = lineStart + lineLength;^[METHOD] getLine [TYPE] String [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  IOException ioe  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceString == null )  Kit.codeBug (  ) ;^1621^^^^^1619^1642^[REPLACE] if  ( sourceString != null )  Kit.codeBug (  ) ;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( sourceEnd == sourceBuffer.length - 5 )  {^1622^^^^^1619^1642^[REPLACE] if  ( sourceEnd == sourceBuffer.length )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( lineStart  == declTags )  {^1623^^^^^1619^1642^[REPLACE] if  ( lineStart != 0 )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^stringBuffer = tmp; ;^1632^^^^^1619^1642^[REPLACE] sourceBuffer = tmp;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[sourceBuffer.length + 4 * 2];^1630^^^^^1619^1642^[REPLACE] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1630^1631^^^^1619^1642^[ADD] char[] tmp = new char[sourceBuffer.length * 2]; System.arraycopy ( sourceBuffer, 0, tmp, 0, sourceEnd ) ;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceCursor -= lineStart; ;^1626^^^^^1619^1642^[REPLACE] sourceEnd -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceEnd -= lineStart; ;^1627^^^^^1619^1642^[REPLACE] sourceCursor -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = 2;^1628^^^^^1619^1642^[REPLACE] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1626^1627^^^^1619^1642^[ADD] sourceEnd -= lineStart; sourceCursor -= lineStart;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = 1;^1628^^^^^1619^1642^[REPLACE] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[sourceBuffer.length /  0.5  * 0 ];^1630^^^^^1619^1642^[REPLACE] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( declTags  ==  0 )  {^1623^^^^^1619^1642^[REPLACE] if  ( lineStart != 0 )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[sourceBuffer.length %  2 * 2];^1630^^^^^1619^1642^[REPLACE] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = 0 - 1;^1628^^^^^1619^1642^[REPLACE] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[ADD]^^1628^^^^^1619^1642^[ADD] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^lineStart = 3;^1628^^^^^1619^1642^[REPLACE] lineStart = 0;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^char[] tmp = new char[sourceBuffer.length - 4 * 0 ];^1630^^^^^1619^1642^[REPLACE] char[] tmp = new char[sourceBuffer.length * 2];^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length + 2 - sourceEnd ) ;^1635^1636^^^^1619^1642^[REPLACE] int n = sourceReader.read ( sourceBuffer, sourceEnd, sourceBuffer.length - sourceEnd ) ;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^if  ( n  >= xmlOpenTagsCount )  {^1637^^^^^1619^1642^[REPLACE] if  ( n < 0 )  {^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return true;^1638^^^^^1619^1642^[REPLACE] return false;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^sourceEnd +=  xmlOpenTagsCount;^1640^^^^^1619^1642^[REPLACE] sourceEnd += n;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
[REPLACE]^return false;^1641^^^^^1619^1642^[REPLACE] return true;^[METHOD] fillSourceBuffer [TYPE] boolean [PARAMETER] [CLASS] TokenStream   [TYPE]  boolean containsEscape  dirtyLine  false  hitEOF  identifierStart  inCharSet  isInteger  isUnicodeEscapeStart  true  xmlIsAttribute  xmlIsTagContent  [TYPE]  double dval  number  [TYPE]  Reader sourceReader  [TYPE]  int[] ungetBuffer  [TYPE]  String X  name  numString  regExpFlags  s  sourceString  str  string  [TYPE]  ObjToIntMap allStrings  [TYPE]  int EOF_CHAR  Id_abstract  Id_boolean  Id_break  Id_byte  Id_case  Id_catch  Id_char  Id_class  Id_const  Id_continue  Id_debugger  Id_default  Id_delete  Id_do  Id_double  Id_else  Id_enum  Id_export  Id_extends  Id_false  Id_final  Id_finally  Id_float  Id_for  Id_function  Id_goto  Id_if  Id_implements  Id_import  Id_in  Id_instanceof  Id_int  Id_interface  Id_long  Id_native  Id_new  Id_null  Id_package  Id_private  Id_protected  Id_public  Id_return  Id_short  Id_static  Id_super  Id_switch  Id_synchronized  Id_this  Id_throw  Id_throws  Id_transient  Id_true  Id_try  Id_typeof  Id_var  Id_void  Id_volatile  Id_while  Id_with  N  base  c  c1  c2  charno  declTags  escapeStart  escapeVal  i  id  length  lineEnd  lineEndChar  lineLength  lineStart  lineno  n  pushbackToken  quote  quoteChar  reEnd  result  sourceCursor  sourceEnd  startToken  stringBufferTop  test  token  tokenno  ungetCursor  val  xmlOpenTagsCount  [TYPE]  char[] sourceBuffer  stringBuffer  tmp  [TYPE]  Parser parser 
