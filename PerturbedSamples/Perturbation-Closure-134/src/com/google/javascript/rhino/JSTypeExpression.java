[REPLACE]^private static final long serialVersionUID  = null ;^56^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] JSTypeExpression  
[REPLACE]^private  Node root;^59^^^^^^^[REPLACE] private final Node root;^ [CLASS] JSTypeExpression  
[REPLACE]^private  String sourceName;^62^^^^^^^[REPLACE] private final String sourceName;^ [CLASS] JSTypeExpression  
[REPLACE]^this.root =  null;^69^^^^^67^72^[REPLACE] this.root = root;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] Node root String sourceName JSTypeRegistry registry [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^this.sourceName =  null;^70^^^^^67^72^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] Node root String sourceName JSTypeRegistry registry [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[ADD]^^70^^^^^67^72^[ADD] this.sourceName = sourceName;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] Node root String sourceName JSTypeRegistry registry [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^this.registry =  null;^71^^^^^67^72^[REPLACE] this.registry = registry;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] Node root String sourceName JSTypeRegistry registry [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[ADD]^^71^^^^^67^72^[ADD] this.registry = registry;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] Node root String sourceName JSTypeRegistry registry [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^if  ( expr.isOptionalArg (  )  && expr.isVarArgs (  )  )  {^79^^^^^78^85^[REPLACE] if  ( expr.isOptionalArg (  )  || expr.isVarArgs (  )  )  {^[METHOD] makeOptionalArg [TYPE] JSTypeExpression [PARAMETER] JSTypeExpression expr [CLASS] JSTypeExpression   [TYPE]  JSTypeExpression expr  [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^82^83^^^^78^85^[REPLACE] return new JSTypeExpression ( new Node ( Token.EQUALS, expr.root ) , expr.sourceName, expr.registry ) ;^[METHOD] makeOptionalArg [TYPE] JSTypeExpression [PARAMETER] JSTypeExpression expr [CLASS] JSTypeExpression   [TYPE]  JSTypeExpression expr  [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^return type;^80^^^^^78^85^[REPLACE] return expr;^[METHOD] makeOptionalArg [TYPE] JSTypeExpression [PARAMETER] JSTypeExpression expr [CLASS] JSTypeExpression   [TYPE]  JSTypeExpression expr  [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^return root.checkTreeEqualsSilent (  )   ||  Token.EQUALS;^91^^^^^90^92^[REPLACE] return root.getType (  )  == Token.EQUALS;^[METHOD] isOptionalArg [TYPE] boolean [PARAMETER] [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^return root.getType (  )  == Token.EQUALS;^98^^^^^97^99^[REPLACE] return root.getType (  )  == Token.ELLIPSIS;^[METHOD] isVarArgs [TYPE] boolean [PARAMETER] [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^JSType type = registry.createFromTypeNodes ( root, sourceName, null ) ;^105^^^^^104^110^[REPLACE] JSType type = registry.createFromTypeNodes ( root, sourceName, scope ) ;^[METHOD] evaluate [TYPE] JSType [PARAMETER] JSType> scope [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  StaticScope scope  [TYPE]  String sourceName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( root .getType (  )   )  {^106^^^^^104^110^[REPLACE] if  ( root.getBooleanProp ( Node.BRACELESS_TYPE )  )  {^[METHOD] evaluate [TYPE] JSType [PARAMETER] JSType> scope [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  StaticScope scope  [TYPE]  String sourceName  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( root.getBooleanProp ( Node.BRACELESS_TYPE )  )  { type.forgiveUnknownNames (  ) ;^107^^^^^104^110^[REPLACE] type.forgiveUnknownNames (  ) ;^[METHOD] evaluate [TYPE] JSType [PARAMETER] JSType> scope [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  StaticScope scope  [TYPE]  String sourceName  [TYPE]  long serialVersionUID 
[REPLACE]^return expr;^109^^^^^104^110^[REPLACE] return type;^[METHOD] evaluate [TYPE] JSType [PARAMETER] JSType> scope [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  JSType type  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  StaticScope scope  [TYPE]  String sourceName  [TYPE]  long serialVersionUID 
[REPLACE]^return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root .getType (  )  ;^114^115^^^^113^116^[REPLACE] return other instanceof JSTypeExpression && (  ( JSTypeExpression )  other ) .root.checkTreeEqualsSilent ( root ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  Object other  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^return root.toStringTree (  )  .hashCode (  )  ;^120^^^^^119^121^[REPLACE] return root.toStringTree (  ) .hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] JSTypeExpression   [TYPE]  JSTypeRegistry registry  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Node root 
