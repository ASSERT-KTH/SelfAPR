[REPLACE]^this.parser =  null;^56^^^^^54^57^[REPLACE] this.parser = parser;^[METHOD] <init> [TYPE] Parser) [PARAMETER] Parser parser [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^return Node.newNumber ( number, lineno, charno ) ;^61^^^^^59^62^[REPLACE] return new ScriptOrFnNode ( Token.SCRIPT ) ;^[METHOD] createScript [TYPE] ScriptOrFnNode [PARAMETER] [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^Node children = children.removeChildren (  ) ;^69^^^^^67^71^[REPLACE] Node children = body.removeChildren (  ) ;^[METHOD] initScript [TYPE] void [PARAMETER] ScriptOrFnNode scriptNode Node body [CLASS] IRFactory   [TYPE]  ScriptOrFnNode scriptNode  [TYPE]  boolean false  true  [TYPE]  Parser parser  [TYPE]  Node body  children 
[REPLACE]^if  ( children == true )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^[REPLACE] if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[METHOD] initScript [TYPE] void [PARAMETER] ScriptOrFnNode scriptNode Node body [CLASS] IRFactory   [TYPE]  ScriptOrFnNode scriptNode  [TYPE]  boolean false  true  [TYPE]  Parser parser  [TYPE]  Node body  children 
[REPLACE]^if  ( body != null )  { scriptNode.addChildrenToBack ( children ) ; }^70^^^^^67^71^[REPLACE] if  ( children != null )  { scriptNode.addChildrenToBack ( children ) ; }^[METHOD] initScript [TYPE] void [PARAMETER] ScriptOrFnNode scriptNode Node body [CLASS] IRFactory   [TYPE]  ScriptOrFnNode scriptNode  [TYPE]  boolean false  true  [TYPE]  Parser parser  [TYPE]  Node body  children 
[REPLACE]^return  new Node ( nodeType, lineno, charno )  ;^78^^^^^76^79^[REPLACE] return new Node ( nodeType ) ;^[METHOD] createLeaf [TYPE] Node [PARAMETER] int nodeType [CLASS] IRFactory   [TYPE]  int nodeType  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^return  new Node ( Token.CASE, caseExpression, lineno, charno )  ;^86^^^^^84^87^[REPLACE] return new Node ( nodeType, lineno, charno ) ;^[METHOD] createLeaf [TYPE] Node [PARAMETER] int nodeType int lineno int charno [CLASS] IRFactory   [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^return new Node ( Token.BLOCK, lineno, charno ) ;^95^^^^^93^96^[REPLACE] return new Node ( Token.SWITCH, lineno, charno ) ;^[METHOD] createSwitch [TYPE] Node [PARAMETER] int lineno int charno [CLASS] IRFactory   [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^if  ( switchNode.getType (  )   ==  Token.SWITCH )  throw Kit.codeBug (  ) ;^104^^^^^101^115^[REPLACE] if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[ADD]^^104^105^106^107^108^101^115^[ADD] if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;  Node caseNode; if  ( caseExpression != null )  { caseNode = new Node (^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^if  ( target == null )  throw Kit.codeBug (  ) ; ;^104^^^^^101^115^[REPLACE] if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^Node idNode = right;^106^^^^^101^115^[REPLACE] Node caseNode;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^if  (switchNode == null )  {^107^^^^^101^115^[REPLACE] if  ( caseExpression != null )  {^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[ADD]^^107^108^109^110^111^101^115^[ADD] if  ( caseExpression != null )  { caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; } else { caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ; ;^111^^^^^101^115^[REPLACE] caseNode = new Node ( Token.DEFAULT, lineno, charno ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^caseNode =  new Node ( Token.CASE, switchNode, lineno, charno ) ;^108^109^^^^101^115^[REPLACE] caseNode = new Node ( Token.CASE, caseExpression, lineno, charno ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^caseNode.setJSDocInfo ( statements ) ;^113^^^^^101^115^[REPLACE] caseNode.addChildToBack ( statements ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^switchNode.setJSDocInfo ( caseNode ) ;^114^^^^^101^115^[REPLACE] switchNode.addChildToBack ( caseNode ) ;^[METHOD] addSwitchCase [TYPE] void [PARAMETER] Node switchNode Node caseExpression Node statements int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node caseExpression  caseNode  statements  switchNode 
[REPLACE]^return  new Node ( Token.CASE, caseExpression, lineno, charno )  ;^123^^^^^121^124^[REPLACE] return new Node ( token, lineno, charno ) ;^[METHOD] createVariables [TYPE] Node [PARAMETER] int token int lineno int charno [CLASS] IRFactory   [TYPE]  int charno  lineno  token  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^String name = child.getLastChild (  ) .getString (  ) ;^128^^^^^126^135^[REPLACE] int type;^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^if  ( parser.getSourceName (  )  )  {^129^^^^^126^135^[REPLACE] if  ( parser.insideFunction (  )  )  {^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^type = Token.EXPR_VOID; ;^132^^^^^126^135^[REPLACE] type = Token.EXPR_RESULT;^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[ADD]^^132^^^^^126^135^[ADD] type = Token.EXPR_RESULT;^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^type = Token.EXPR_RESULT; ;^130^^^^^126^135^[REPLACE] type = Token.EXPR_VOID;^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[ADD]^^130^^^^^126^135^[ADD] type = Token.EXPR_VOID;^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^return new Node ( Token.BLOCK, lineno, charno ) ;^134^^^^^126^135^[REPLACE] return new Node ( type, expr, lineno, charno ) ;^[METHOD] createExprStatement [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  type  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^return new Node ( Token.THROW, expr, lineno, charno ) ;^139^^^^^137^140^[REPLACE] return new Node ( Token.EXPR_VOID, expr, lineno, charno ) ;^[METHOD] createExprStatementNoReturn [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^String name = fn.getFunctionName (  ) ;^145^^^^^142^149^[REPLACE] setRequiresActivation (  ) ;^[METHOD] createDefaultNamespace [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr  n  result 
[REPLACE]^Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, charno, charno ) ;^146^^^^^142^149^[REPLACE] Node n = createUnary ( Token.DEFAULTNAMESPACE, expr, lineno, charno ) ;^[METHOD] createDefaultNamespace [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr  n  result 
[REPLACE]^Node result = createExprStatement ( n, lineno, lineno ) ;^147^^^^^142^149^[REPLACE] Node result = createExprStatement ( n, lineno, charno ) ;^[METHOD] createDefaultNamespace [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr  n  result 
[REPLACE]^return expr;^148^^^^^142^149^[REPLACE] return result;^[METHOD] createDefaultNamespace [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr  n  result 
[REPLACE]^return Node .newString ( true )  ;^152^^^^^151^153^[REPLACE] return Node.newString ( Token.NAME, "error" ) ;^[METHOD] createErrorName [TYPE] Node [PARAMETER] [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^return Node.newNumber ( number, lineno, charno ) ;^160^^^^^158^162^[REPLACE] checkActivationName ( name, Token.NAME ) ;^[METHOD] createName [TYPE] Node [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^return Node.newString ( Token.NAME, name, charno, charno ) ;^161^^^^^158^162^[REPLACE] return Node.newString ( Token.NAME, name, lineno, charno ) ;^[METHOD] createName [TYPE] Node [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^Node result = new Node ( Token.BREAK, lineno, charno ) ;^166^^^^^164^171^[REPLACE] Node n = createName ( name, lineno, charno ) ;^[METHOD] createTaggedName [TYPE] Node [PARAMETER] String name JSDocInfo info int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node n 
[ADD]^^166^^^^^164^171^[ADD] Node n = createName ( name, lineno, charno ) ;^[METHOD] createTaggedName [TYPE] Node [PARAMETER] String name JSDocInfo info int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node n 
[REPLACE]^if  ( info == this )  {^167^^^^^164^171^[REPLACE] if  ( info != null )  {^[METHOD] createTaggedName [TYPE] Node [PARAMETER] String name JSDocInfo info int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node n 
[REPLACE]^n .getString (  )  ;^168^^^^^164^171^[REPLACE] n.setJSDocInfo ( info ) ;^[METHOD] createTaggedName [TYPE] Node [PARAMETER] String name JSDocInfo info int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node n 
[REPLACE]^return fnNode;^170^^^^^164^171^[REPLACE] return n;^[METHOD] createTaggedName [TYPE] Node [PARAMETER] String name JSDocInfo info int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  JSDocInfo info  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node n 
[REPLACE]^return Node .newString ( string , null , null )  ;^178^^^^^176^179^[REPLACE] return Node.newString ( string ) ;^[METHOD] createString [TYPE] Node [PARAMETER] String string [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  String string  [TYPE]  boolean false  true 
[REPLACE]^return Node.newNumber ( string, lineno, charno ) ;^183^^^^^181^184^[REPLACE] return Node.newString ( string, lineno, charno ) ;^[METHOD] createString [TYPE] Node [PARAMETER] String string int lineno int charno [CLASS] IRFactory   [TYPE]  String string  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^return Node.Node ( number ) ;^191^^^^^189^192^[REPLACE] return Node.newNumber ( number ) ;^[METHOD] createNumber [TYPE] Node [PARAMETER] double number [CLASS] IRFactory   [TYPE]  double number  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^return Node .newNumber ( number )  ;^196^^^^^194^197^[REPLACE] return Node.newNumber ( number, lineno, charno ) ;^[METHOD] createNumber [TYPE] Node [PARAMETER] double number int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  double number  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^if  ( catchCond !=stmts )  {^213^^^^^210^219^[REPLACE] if  ( catchCond == null )  {^[METHOD] createCatch [TYPE] Node [PARAMETER] String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [CLASS] IRFactory   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int catchCharno  catchLineno  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node catchCond  stmts 
[REPLACE]^catchCond =  new Node ( Token.EMPTY, nameCharno, nameCharno ) ;^214^^^^^210^219^[REPLACE] catchCond = new Node ( Token.EMPTY, nameLineno, nameCharno ) ;^[METHOD] createCatch [TYPE] Node [PARAMETER] String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [CLASS] IRFactory   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int catchCharno  catchLineno  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node catchCond  stmts 
[REPLACE]^return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , stmts, stmts, catchLineno, catchCharno ) ;^216^217^218^^^210^219^[REPLACE] return new Node ( Token.CATCH, createName ( varName, nameLineno, nameCharno ) , catchCond, stmts, catchLineno, catchCharno ) ;^[METHOD] createCatch [TYPE] Node [PARAMETER] String varName int nameLineno int nameCharno Node catchCond Node stmts int catchLineno int catchCharno [CLASS] IRFactory   [TYPE]  String varName  [TYPE]  boolean false  true  [TYPE]  int catchCharno  catchLineno  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node catchCond  stmts 
[REPLACE]^return new Node ( Token.BLOCK, lineno, charno ) ;^226^^^^^224^227^[REPLACE] return new Node ( Token.THROW, expr, lineno, charno ) ;^[METHOD] createThrow [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^return false ;^234^235^236^^^232^237^[REPLACE] return expr == null ? new Node ( Token.RETURN, lineno, charno ) : new Node ( Token.RETURN, expr, lineno, charno ) ;^[METHOD] createReturn [TYPE] Node [PARAMETER] Node expr int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node expr 
[REPLACE]^return new Node ( Token.LABEL, Node .newString ( name )  , lineno, charno ) ;^244^245^246^^^242^247^[REPLACE] return new Node ( Token.LABEL, Node.newString ( Token.NAME, name, lineno, charno ) , lineno, charno ) ;^[METHOD] createLabel [TYPE] Node [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^254^^^^^252^262^[REPLACE] Node result = new Node ( Token.BREAK, lineno, charno ) ;^[METHOD] createBreak [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[ADD]^^254^^^^^252^262^[ADD] Node result = new Node ( Token.BREAK, lineno, charno ) ;^[METHOD] createBreak [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^if  ( label != null )  {^255^^^^^252^262^[REPLACE] if  ( label == null )  {^[METHOD] createBreak [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^return fnNode;^260^^^^^252^262^[REPLACE] return result;^[METHOD] createBreak [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^Node result = new Node ( Token.BREAK, lineno, charno ) ;^258^^^^^252^262^[REPLACE] Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[METHOD] createBreak [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^return fnNode;^256^^^^^252^262^[REPLACE] return result;^[METHOD] createBreak [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^Node result = new Node ( Token.BREAK, lineno, charno ) ;^269^^^^^267^277^[REPLACE] Node result = new Node ( Token.CONTINUE, lineno, charno ) ;^[METHOD] createContinue [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^if  ( label != null )  {^270^^^^^267^277^[REPLACE] if  ( label == null )  {^[METHOD] createContinue [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^return fnNode;^275^^^^^267^277^[REPLACE] return result;^[METHOD] createContinue [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^Node name = Node.newString ( Token.NAME, label, charno, charno ) ;^273^^^^^267^277^[REPLACE] Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[METHOD] createContinue [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^return fnNode;^271^^^^^267^277^[REPLACE] return result;^[METHOD] createContinue [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^Node result = new Node ( Token.BREAK, lineno, charno ) ;^273^^^^^267^277^[REPLACE] Node name = Node.newString ( Token.NAME, label, lineno, charno ) ;^[METHOD] createContinue [TYPE] Node [PARAMETER] String label int lineno int charno [CLASS] IRFactory   [TYPE]  String label  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node name  result 
[REPLACE]^return new Node ( Token.BLOCK, lineno, charno ) ;^283^^^^^282^284^[REPLACE] return new Node ( Token.DEBUGGER, lineno, charno ) ;^[METHOD] createDebugger [TYPE] Node [PARAMETER] int lineno int charno [CLASS] IRFactory   [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^return new Node ( Token.THROW, expr, lineno, charno ) ;^293^^^^^291^294^[REPLACE] return new Node ( Token.BLOCK, lineno, charno ) ;^[METHOD] createBlock [TYPE] Node [PARAMETER] int lineno int charno [CLASS] IRFactory   [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^Node result = new Node ( Token.BREAK, lineno, charno ) ;^298^^^^^296^304^[REPLACE] FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[METHOD] createFunction [TYPE] FunctionNode [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  FunctionNode fnNode  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[ADD]^^298^^^^^296^304^[ADD] FunctionNode fnNode = new FunctionNode ( name, lineno, charno ) ;^[METHOD] createFunction [TYPE] FunctionNode [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  FunctionNode fnNode  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^fnNode.setJSDocInfo ( createName ( name, lineno, charno )  ) ;^302^^^^^296^304^[REPLACE] fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[METHOD] createFunction [TYPE] FunctionNode [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  FunctionNode fnNode  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^fnNode.addChildToBack ( createName ( name, lineno, lineno )  ) ;^302^^^^^296^304^[REPLACE] fnNode.addChildToBack ( createName ( name, lineno, charno )  ) ;^[METHOD] createFunction [TYPE] FunctionNode [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  FunctionNode fnNode  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^return node;^303^^^^^296^304^[REPLACE] return fnNode;^[METHOD] createFunction [TYPE] FunctionNode [PARAMETER] String name int lineno int charno [CLASS] IRFactory   [TYPE]  FunctionNode fnNode  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^fnNode.itsFunctionType =  i;^310^^^^^309^340^[REPLACE] fnNode.itsFunctionType = functionType;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.addChildToBack ( statements ) ;^311^^^^^309^340^[REPLACE] fnNode.addChildToBack ( args ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.addChildToBack ( args ) ;^312^^^^^309^340^[REPLACE] fnNode.addChildToBack ( statements ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.getSourceName (  )  == null )  {^313^^^^^309^340^[REPLACE] if  ( parser.getSourceName (  )  != null )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.putProp ( Node.SOURCENAME_PROP, parser.insideFunction (  )  ) ;^314^^^^^309^340^[REPLACE] fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^314^^^^^309^340^[ADD] fnNode.putProp ( Node.SOURCENAME_PROP, parser.getSourceName (  )  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( info == this  )  {^316^^^^^309^340^[REPLACE] if  ( info != null )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.addChildToBack ( info ) ;^317^^^^^309^340^[REPLACE] fnNode.setJSDocInfo ( info ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^int functionCount = fn.getFunctionCount (  ) ;^320^^^^^309^340^[REPLACE] int functionCount = fnNode.getFunctionCount (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  (i  ==  4 )  {^321^^^^^309^340^[REPLACE] if  ( functionCount != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( fn.getFunctionType (  )  !=  FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^309^340^[REPLACE] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null && name.length (  )  - 4 != 0 )  {^331^^^^^327^334^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.putIntProp ( name ) ;^332^^^^^327^334^[REPLACE] fnNode.removeParamOrVar ( name ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^String name = fnNode.getFunctionName (  ) ;^330^^^^^327^334^[REPLACE] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null ) {^331^^^^^309^340^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode .putProp (  )  ;^332^^^^^309^340^[REPLACE] fnNode.removeParamOrVar ( name ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0; i  ==  functionCount; ++i )  {^324^^^^^309^340^[REPLACE] for  ( int i = 0; i != functionCount; ++i )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( fnNode.getFunctionType (  )  !=  FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^309^340^[REPLACE] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null && name.size (  )  != 0 )  {^331^^^^^327^334^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode .putProp (  )  ;^332^^^^^327^334^[REPLACE] fnNode.removeParamOrVar ( name ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^330^^^^^327^334^[ADD] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  (  name.length (  )  /  0.5  != 0 )  {^331^^^^^309^340^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^fnNode.removeParamOrVar ( name ) ;^331^332^333^^^309^340^[ADD] if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.putIntProp ( name ) ;^332^^^^^309^340^[REPLACE] fnNode.removeParamOrVar ( name ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^FunctionNode fn = fn.putIntProp ( i ) ;^325^^^^^309^340^[REPLACE] FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^String name = fnNode.getFunctionName (  ) ;^330^^^^^309^340^[REPLACE] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode.itsNeedsActivation = false;^323^^^^^309^340^[REPLACE] fnNode.itsNeedsActivation = true;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 * 1; i != functionCount; ++i )  {^324^^^^^309^340^[REPLACE] for  ( int i = 0; i != functionCount; ++i )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^324^325^^327^328^309^340^[ADD] for  ( int i = 0; i != functionCount; ++i )  { FunctionNode fn = fnNode.getFunctionNode ( i ) ; if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT )^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^FunctionNode fn = fnNode.getFunctionNode ( functionType ) ;^325^^^^^309^340^[REPLACE] FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^327^328^329^330^^309^340^[ADD] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) { String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null ) {^331^^^^^327^334^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^331^332^333^^^327^334^[ADD] if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null && name.length (  )  %  2 != 0 )  {^331^^^^^309^340^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^331^332^333^^^309^340^[ADD] if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^for  (functionTypent i = 0; i  ==  functionCount; ++i )  {^324^^^^^309^340^[REPLACE] for  ( int i = 0; i != functionCount; ++i )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( fn.getFunctionType (  )  ||  FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^327^328^329^^^309^340^[REPLACE] if  ( fn.getFunctionType (  ) == FunctionNode.FUNCTION_EXPRESSION_STATEMENT ) {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  ( name != null && name.length (  )  *  2 != 0 )  {^331^^^^^327^334^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^fnNode.removeParamOrVar ( name ) ;^331^332^333^^^327^334^[ADD] if  ( name != null && name.length (  )  != 0 )  { fnNode.removeParamOrVar ( name ) ; }^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^if  (  name.length (  )  *  0.5  != 0 )  {^331^^^^^309^340^[REPLACE] if  ( name != null && name.length (  )  != 0 )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[ADD]^^330^^^^^309^340^[ADD] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 1; i != functionCount; ++i )  {^324^^^^^309^340^[REPLACE] for  ( int i = 0; i != functionCount; ++i )  {^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^FunctionNode fn = fnNode.putIntProp ( i ) ;^325^^^^^309^340^[REPLACE] FunctionNode fn = fnNode.getFunctionNode ( i ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^String name = fnNode.getFunctionType (  ) ;^330^^^^^309^340^[REPLACE] String name = fn.getFunctionName (  ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^fnNode .putProp (  )  ;^338^^^^^309^340^[REPLACE] fnNode.putIntProp ( Node.FUNCTION_PROP, functionIndex ) ;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^return fn;^339^^^^^309^340^[REPLACE] return fnNode;^[METHOD] initFunction [TYPE] Node [PARAMETER] FunctionNode fnNode int functionIndex Node args JSDocInfo info Node statements int functionType [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  Node args  statements  [TYPE]  FunctionNode fn  fnNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int functionCount  functionIndex  functionType  i  [TYPE]  Parser parser 
[REPLACE]^parent .addChildToBack ( parent , child )  ;^349^^^^^347^350^[REPLACE] parent.addChildToBack ( child ) ;^[METHOD] addChildToBack [TYPE] void [PARAMETER] Node parent Node child [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  Node child  parent  [TYPE]  boolean false  true 
[REPLACE]^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^357^^^^^355^358^[REPLACE] return new Node ( Token.WHILE, cond, body, lineno, charno ) ;^[METHOD] createWhile [TYPE] Node [PARAMETER] Node cond Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  cond 
[REPLACE]^return new Node ( Token.THROW, expr, lineno, charno ) ;^365^^^^^363^366^[REPLACE] return new Node ( Token.DO, body, cond, lineno, charno ) ;^[METHOD] createDoWhile [TYPE] Node [PARAMETER] Node body Node cond int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  cond 
[REPLACE]^return new Node ( Token.FOR, init, test, init, body, lineno, charno ) ;^374^^^^^371^375^[REPLACE] return new Node ( Token.FOR, init, test, incr, body, lineno, charno ) ;^[METHOD] createFor [TYPE] Node [PARAMETER] Node init Node test Node incr Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  incr  init  test 
[REPLACE]^return new Node ( Token.WITH, obj, body, lineno, charno ) ;^384^^^^^381^385^[REPLACE] return new Node ( Token.FOR, lhs, obj, body, lineno, charno ) ;^[METHOD] createForIn [TYPE] Node [PARAMETER] Node lhs Node obj Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  lhs  obj 
[REPLACE]^if  ( finallyBlock != null )  {^393^^^^^390^399^[REPLACE] if  ( finallyBlock == null )  {^[METHOD] createTryCatchFinally [TYPE] Node [PARAMETER] Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node catchBlocks  finallyBlock  tryBlock 
[ADD]^^393^394^395^396^^390^399^[ADD] if  ( finallyBlock == null )  { return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ; }^[METHOD] createTryCatchFinally [TYPE] Node [PARAMETER] Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node catchBlocks  finallyBlock  tryBlock 
[REPLACE]^return new Node ( Token.TRY, tryBlock, finallyBlock, lineno, charno ) ;^394^395^^^^390^399^[REPLACE] return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[METHOD] createTryCatchFinally [TYPE] Node [PARAMETER] Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node catchBlocks  finallyBlock  tryBlock 
[REPLACE]^return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^394^395^^^^390^399^[REPLACE] return new Node ( Token.TRY, tryBlock, catchBlocks, lineno, charno ) ;^[METHOD] createTryCatchFinally [TYPE] Node [PARAMETER] Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node catchBlocks  finallyBlock  tryBlock 
[REPLACE]^return new Node ( Token.TRY, tryBlock, tryBlock, finallyBlock, lineno, charno ) ;^397^398^^^^390^399^[REPLACE] return new Node ( Token.TRY, tryBlock, catchBlocks, finallyBlock, lineno, charno ) ;^[METHOD] createTryCatchFinally [TYPE] Node [PARAMETER] Node tryBlock Node catchBlocks Node finallyBlock int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node catchBlocks  finallyBlock  tryBlock 
[REPLACE]^return new Node ( Token.THROW, expr, lineno, charno ) ;^410^^^^^408^411^[REPLACE] return new Node ( Token.WITH, obj, body, lineno, charno ) ;^[METHOD] createWith [TYPE] Node [PARAMETER] Node obj Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  obj 
[REPLACE]^String name = fn.getFunctionName (  ) ;^418^^^^^416^421^[REPLACE] setRequiresActivation (  ) ;^[METHOD] createDotQuery [TYPE] Node [PARAMETER] Node obj Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  obj  result 
[REPLACE]^Node result = new Node ( Token.DOTQUERY, body, body, lineno, charno ) ;^419^^^^^416^421^[REPLACE] Node result = new Node ( Token.DOTQUERY, obj, body, lineno, charno ) ;^[METHOD] createDotQuery [TYPE] Node [PARAMETER] Node obj Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  obj  result 
[REPLACE]^return fnNode;^420^^^^^416^421^[REPLACE] return result;^[METHOD] createDotQuery [TYPE] Node [PARAMETER] Node obj Node body int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node body  obj  result 
[REPLACE]^int childType = child.getType (  ) ;^426^^^^^423^445^[REPLACE] int length = elems.size (  ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^int[] skipIndexes = false;^427^^^^^423^445^[REPLACE] int[] skipIndexes = null;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^if  ( lineno  ==  0 )  {^428^^^^^423^445^[REPLACE] if  ( skipCount != 0 )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes =  new int[lineno];^429^^^^^423^445^[REPLACE] skipIndexes = new int[skipCount];^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes =  new int[null];^429^^^^^423^445^[REPLACE] skipIndexes = new int[skipCount];^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^Node array = new Node ( Token.ARRAYLIT, lineno, skipCount ) ;^431^^^^^423^445^[REPLACE] Node array = new Node ( Token.ARRAYLIT, lineno, charno ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^if  ( elem == null )  {^434^^^^^423^445^[REPLACE] if  ( elem != null )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[ADD]^array.addChildToBack ( elem ) ;skipIndexes[j] = i;++j;^434^435^436^437^438^423^445^[ADD] if  ( elem != null )  { array.addChildToBack ( elem ) ; } else { skipIndexes[j] = i; ++j;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes[j]  =  skipIndexes[j] ;^437^^^^^423^445^[REPLACE] skipIndexes[j] = i;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^array.setJSDocInfo ( elem ) ;^435^^^^^423^445^[REPLACE] array.addChildToBack ( elem ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^for  ( int i = 0, j = 0; i != length - 3; ++i )  {^432^^^^^423^445^[REPLACE] for  ( int i = 0, j = 0; i != length; ++i )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[ADD]^^434^435^436^437^438^423^445^[ADD] if  ( elem != null )  { array.addChildToBack ( elem ) ; } else { skipIndexes[j] = i; ++j;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^skipIndexes[j] ;^437^^^^^423^445^[REPLACE] skipIndexes[j] = i;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^Node elem =  ( Node ) elems.get ( skipCount ) ;^433^^^^^423^445^[REPLACE] Node elem =  ( Node ) elems.get ( i ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^for  ( int i = 0 , j = 0 ; i != length; ++i )  {^432^^^^^423^445^[REPLACE] for  ( int i = 0, j = 0; i != length; ++i )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^Node elem =  ( Node ) elems.size ( skipCount ) ;^433^^^^^423^445^[REPLACE] Node elem =  ( Node ) elems.get ( i ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^if  ( lineno  ==  0 )  {^441^^^^^423^445^[REPLACE] if  ( skipCount != 0 )  {^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^n.putIntProp ( Node.INCRDECR_PROP, post ? 1 : 0 ) ;^442^^^^^423^445^[REPLACE] array.putProp ( Node.SKIP_INDEXES_PROP, skipIndexes ) ;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^return fnNode;^444^^^^^423^445^[REPLACE] return array;^[METHOD] createArrayLiteral [TYPE] Node [PARAMETER] ObjArray elems int skipCount int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray elems  [TYPE]  int[] skipIndexes  [TYPE]  boolean false  true  [TYPE]  int charno  i  j  length  lineno  skipCount  [TYPE]  Parser parser  [TYPE]  Node array  elem 
[REPLACE]^Node result = new Node ( Token.BREAK, lineno, charno ) ;^452^^^^^450^461^[REPLACE] Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[ADD]^^452^^^^^450^461^[ADD] Node object = new Node ( Token.OBJECTLIT, lineno, charno ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^for  ( int i = 0 ; i < obj.length (  ) ; i += 2 )  {^453^^^^^450^461^[REPLACE] for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^n =  ( Node ) obj.get ( i  <=  1 ) ;^456^^^^^450^461^[REPLACE] n =  ( Node ) obj.get ( i + 1 ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[ADD]^^456^^^^^450^461^[ADD] n =  ( Node ) obj.get ( i + 1 ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^Node n =  ( Node ) obj.size ( i ) ;^454^^^^^450^461^[REPLACE] Node n =  ( Node ) obj.get ( i ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^for  ( int i = 0; i < obj.size (  ) ; i += 0  )  {^453^^^^^450^461^[REPLACE] for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^n =  ( Node ) obj.get ( i +lineno ) ;^456^^^^^450^461^[REPLACE] n =  ( Node ) obj.get ( i + 1 ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^for  ( int i = 0 ; i < obj.size (  ) ; i += 2 )  {^453^^^^^450^461^[REPLACE] for  ( int i = 0; i < obj.size (  ) ; i += 2 )  {^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[ADD]^^453^454^455^456^457^450^461^[ADD] for  ( int i = 0; i < obj.size (  ) ; i += 2 )  { Node n =  ( Node ) obj.get ( i ) ; object.addChildToBack ( n ) ; n =  ( Node ) obj.get ( i + 1 ) ; object.addChildToBack ( n ) ;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^return fnNode;^460^^^^^450^461^[REPLACE] return object;^[METHOD] createObjectLiteral [TYPE] Node [PARAMETER] ObjArray obj int lineno int charno [CLASS] IRFactory   [TYPE]  ObjArray obj  [TYPE]  boolean false  true  [TYPE]  int charno  i  lineno  [TYPE]  Parser parser  [TYPE]  Node n  object 
[REPLACE]^return flags.equals (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^468^469^470^471^^466^476^[REPLACE] return flags.length (  )  == 0 ? new Node ( Token.REGEXP, Node.newString ( string, lineno, charno ) , lineno, charno )^[METHOD] createRegExp [TYPE] Node [PARAMETER] String string String flags int lineno int charno [CLASS] IRFactory   [TYPE]  String flags  string  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser 
[REPLACE]^if  ( ifFalse != null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^483^484^^^^481^486^[REPLACE] if  ( ifFalse == null ) return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[METHOD] createIf [TYPE] Node [PARAMETER] Node cond Node ifTrue Node ifFalse int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node cond  ifFalse  ifTrue 
[REPLACE]^return new Node ( Token.IF, cond, ifTrue, lineno, lineno ) ;^484^^^^^481^486^[REPLACE] return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[METHOD] createIf [TYPE] Node [PARAMETER] Node cond Node ifTrue Node ifFalse int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node cond  ifFalse  ifTrue 
[REPLACE]^return new Node ( Token.IF, cond, ifTrue, charno, charno ) ;^484^^^^^481^486^[REPLACE] return new Node ( Token.IF, cond, ifTrue, lineno, charno ) ;^[METHOD] createIf [TYPE] Node [PARAMETER] Node cond Node ifTrue Node ifFalse int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node cond  ifFalse  ifTrue 
[REPLACE]^return new Node ( Token.IF, cond, ifTrue, ifTrue, lineno, charno ) ;^485^^^^^481^486^[REPLACE] return new Node ( Token.IF, cond, ifTrue, ifFalse, lineno, charno ) ;^[METHOD] createIf [TYPE] Node [PARAMETER] Node cond Node ifTrue Node ifFalse int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node cond  ifFalse  ifTrue 
[REPLACE]^return new Node ( Token.HOOK, cond, ifTrue, ifTrue, lineno, charno ) ;^491^^^^^488^492^[REPLACE] return new Node ( Token.HOOK, cond, ifTrue, ifFalse, lineno, charno ) ;^[METHOD] createCondExpr [TYPE] Node [PARAMETER] Node cond Node ifTrue Node ifFalse int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  [TYPE]  Parser parser  [TYPE]  Node cond  ifFalse  ifTrue 
[REPLACE]^return new Node ( nodeType, left, right, lineno, charno ) ;^499^^^^^497^500^[REPLACE] return new Node ( nodeType, child, lineno, charno ) ;^[METHOD] createUnary [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child 
[REPLACE]^int childType = child.getType (  ) ;^504^^^^^502^525^[REPLACE] int type = Node.NON_SPECIALCALL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if  ( child.getType (  )   !=  Token.NAME )  {^505^^^^^502^525^[REPLACE] if  ( child.getType (  )  == Token.NAME )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^}  else {^512^^^^^502^525^[REPLACE] } else if  ( child.getType (  )  == Token.GETPROP )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^}   String name = child.getLastChild (  ) .getString (  ) ;type = Node.SPECIALCALL_EVAL;^512^513^514^515^516^502^525^[ADD] else if  ( child.getType (  )  == Token.GETPROP )  { String name = child.getLastChild (  ) .getString (  ) ; if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if  ( child.getType (  )  == Token.NAME )  {^514^^^^^502^525^[REPLACE] if  ( name.equals ( "eval" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^type = Node.SPECIALCALL_WITH; ;^515^^^^^502^525^[REPLACE] type = Node.SPECIALCALL_EVAL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^515^^^^^502^525^[ADD] type = Node.SPECIALCALL_EVAL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getString (  ) .getString (  ) ;^513^^^^^502^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^514^515^516^^^502^525^[ADD] if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^int childType = child.getType (  ) ;^513^^^^^502^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if  ( child.getType (  )  == Token.NAME )  {^507^^^^^502^525^[REPLACE] if  ( name.equals ( "eval" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^}  if  ( name.equals ( "With" )  )  {^509^^^^^502^525^[REPLACE] } else if  ( name.equals ( "With" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^}^509^510^511^^^502^525^[ADD] else if  ( name.equals ( "With" )  )  { type = Node.SPECIALCALL_WITH; }^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^type = Node.SPECIALCALL_EVAL; ;^510^^^^^502^525^[REPLACE] type = Node.SPECIALCALL_WITH;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^510^^^^^502^525^[ADD] type = Node.SPECIALCALL_WITH;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^type = Node.SPECIALCALL_WITH; ;^508^^^^^502^525^[REPLACE] type = Node.SPECIALCALL_EVAL;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getType (  ) ;^506^^^^^502^525^[REPLACE] String name = child.getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^506^^^^^502^525^[ADD] String name = child.getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^}  else {^509^^^^^502^525^[REPLACE] } else if  ( name.equals ( "With" )  )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^type = Node.SPECIALCALL_EVAL;^514^515^516^^^502^525^[ADD] if  ( name.equals ( "eval" )  )  { type = Node.SPECIALCALL_EVAL; }^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child .getString (  )  .getString (  ) ;^513^^^^^502^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = child.getLastChild (  )  .newString ( name )  ;^513^^^^^502^525^[REPLACE] String name = child.getLastChild (  ) .getString (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^Node n = new Node ( nodeType, child, lineno, charno ) ;^518^^^^^502^525^[REPLACE] Node node = new Node ( nodeType, child, lineno, charno ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[ADD]^^518^^^^^502^525^[ADD] Node node = new Node ( nodeType, child, lineno, charno ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^if  ( type  ==  Node.NON_SPECIALCALL )  {^519^^^^^502^525^[REPLACE] if  ( type != Node.NON_SPECIALCALL )  {^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^String name = fn.getFunctionName (  ) ;^521^^^^^502^525^[REPLACE] setRequiresActivation (  ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^node .putProp (  )  ;^522^^^^^502^525^[REPLACE] node.putIntProp ( Node.SPECIALCALL_PROP, type ) ;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^return fnNode;^524^^^^^502^525^[REPLACE] return node;^[METHOD] createCallOrNew [TYPE] Node [PARAMETER] int nodeType Node child int lineno int charno [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  type  [TYPE]  Parser parser  [TYPE]  Node child  node 
[REPLACE]^child =  makeReference ( null ) ;^530^^^^^529^556^[REPLACE] child = makeReference ( child ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( child != this )  {^531^^^^^529^556^[REPLACE] if  ( child == null )  {^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( nodeType  ||  Token.DEC )  {^533^^^^^529^556^[REPLACE] if  ( nodeType == Token.DEC )  {^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[ADD]^msg = "msg.bad.decr";msg = "msg.bad.incr";^533^534^535^536^537^529^556^[ADD] if  ( nodeType == Token.DEC )  { msg = "msg.bad.decr"; } else { msg = "msg.bad.incr"; }^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^msg = "msg.bad.decr"; ;^536^^^^^533^537^[REPLACE] msg = "msg.bad.incr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^msg = "msg.bad.incr"; ;^534^^^^^529^556^[REPLACE] msg = "msg.bad.decr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^msg = "msg.bad.decr"; ;^536^^^^^529^556^[REPLACE] msg = "msg.bad.incr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return true;^539^^^^^529^556^[REPLACE] return null;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^String name = child.getLastChild (  ) .getString (  ) ;^532^^^^^529^556^[REPLACE] String msg;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  ( lineno  ||  Token.DEC )  {^533^^^^^529^556^[REPLACE] if  ( nodeType == Token.DEC )  {^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[ADD]^^536^^^^^533^537^[ADD] msg = "msg.bad.incr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[ADD]^^534^^^^^529^556^[ADD] msg = "msg.bad.decr";^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return this;^539^^^^^529^556^[REPLACE] return null;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^int childType = child.setType (  ) ;^542^^^^^529^556^[REPLACE] int childType = child.getType (  ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return fnNode;^552^^^^^529^556^[REPLACE] return n;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^Node n = new Node ( nodeType, child, lineno, lineno ) ;^550^^^^^529^556^[REPLACE] Node n = new Node ( nodeType, child, lineno, charno ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^return ;^555^^^^^529^556^[REPLACE] throw Kit.codeBug (  ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^Node n =  ( Node ) obj.get ( i ) ;^555^^^^^529^556^[REPLACE] throw Kit.codeBug (  ) ;^[METHOD] createIncDec [TYPE] Node [PARAMETER] int nodeType boolean post Node child int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  post  true  [TYPE]  String msg  [TYPE]  int charno  childType  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node child  n 
[REPLACE]^if  (  true )  {^562^^^^^558^581^[REPLACE] if  ( namespace == null && memberTypeFlags == 0 )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^if  (ref != null )  {^563^^^^^558^581^[REPLACE] if  ( target == null )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( name, nameLineno, nameLineno ) ;^564^^^^^558^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^if  (   name    )  {^567^^^^^558^581^[REPLACE] if  ( ScriptRuntime.isSpecialProperty ( name )  )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^Node ref = new Node ( Token.REF_SPECIAL, target ) ;ref.putProp ( Node.NAME_PROP, name ) ;return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^567^568^569^570^571^558^581^[ADD] if  ( ScriptRuntime.isSpecialProperty ( name )  )  { Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ; return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ; }^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, target, dotLineno, dotCharno ) ;^570^^^^^558^581^[REPLACE] return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^Node ref = new Node ( Token.REF_SPECIAL, ref ) ;^568^^^^^558^581^[REPLACE] Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^^568^^^^^558^581^[ADD] Node ref = new Node ( Token.REF_SPECIAL, target ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( namespace, nameLineno, nameCharno ) ;^564^^^^^558^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, ref, dotLineno, nameLineno ) ;^570^^^^^558^581^[REPLACE] return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , nameCharno, dotCharno ) ;^572^573^574^575^^558^581^[REPLACE] return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^if  ( target != this  )  {^563^^^^^558^581^[REPLACE] if  ( target == null )  {^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( name, nameCharno, nameCharno ) ;^564^^^^^558^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, ref, nameLineno, dotCharno ) ;^570^^^^^558^581^[REPLACE] return new Node ( Token.GET_REF, ref, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^^568^569^^^^558^581^[ADD] Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createName ( name, nameLineno, memberTypeFlags ) ;^564^^^^^558^581^[REPLACE] return createName ( name, nameLineno, nameCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameLineno ) , dotLineno, dotCharno ) ;^572^573^574^575^^558^581^[REPLACE] return new Node ( Token.GETPROP, target, createString ( name, nameLineno, nameCharno ) , dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[ADD]^ref.putProp ( Node.NAME_PROP, name ) ;^568^569^^^^558^581^[ADD] Node ref = new Node ( Token.REF_SPECIAL, target ) ; ref.putProp ( Node.NAME_PROP, name ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^Node elem = createString ( namespace ) ;^577^^^^^558^581^[REPLACE] Node elem = createString ( name ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^memberTypeFlags | =  memberTypeFlags |;^578^^^^^558^581^[REPLACE] memberTypeFlags |= Node.PROPERTY_FLAG;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^return createMemberRefGet ( target, namespace, target, memberTypeFlags, dotLineno, dotCharno ) ;^579^580^^^^558^581^[REPLACE] return createMemberRefGet ( target, namespace, elem, memberTypeFlags, dotLineno, dotCharno ) ;^[METHOD] createPropertyGet [TYPE] Node [PARAMETER] Node target String namespace String name int memberTypeFlags int dotLineno int dotCharno int nameLineno int nameCharno [CLASS] IRFactory   [TYPE]  String name  namespace  [TYPE]  boolean false  true  [TYPE]  int dotCharno  dotLineno  memberTypeFlags  nameCharno  nameLineno  [TYPE]  Parser parser  [TYPE]  Node elem  ref  target 
[REPLACE]^if  ( namespace != null ) {^588^^^^^583^596^[REPLACE] if  ( namespace == null && memberTypeFlags == 0 )  {^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[ADD]^^588^589^^591^592^583^596^[ADD] if  ( namespace == null && memberTypeFlags == 0 )  {  if  ( target == null )  throw Kit.codeBug (  ) ; return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[REPLACE]^if  (elem != false )  throw Kit.codeBug (  ) ;^591^^^^^583^596^[REPLACE] if  ( target == null )  throw Kit.codeBug (  ) ;^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[REPLACE]^if  ( switchNode.getType (  )  != Token.SWITCH )  throw Kit.codeBug (  ) ; ;^591^^^^^583^596^[REPLACE] if  ( target == null )  throw Kit.codeBug (  ) ;^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[ADD]^^591^592^593^^^583^596^[ADD] if  ( target == null )  throw Kit.codeBug (  ) ; return new Node ( Token.GETELEM, target, elem, lineno, charno ) ; }^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[REPLACE]^return new Node ( Token.GETELEM, elem, elem, lineno, charno ) ;^592^^^^^583^596^[REPLACE] return new Node ( Token.GETELEM, target, elem, lineno, charno ) ;^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[REPLACE]^if  ( elem != null )  throw Kit.codeBug (  ) ;^591^^^^^583^596^[REPLACE] if  ( target == null )  throw Kit.codeBug (  ) ;^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[REPLACE]^return createMemberRefGet ( target, namespace, target, memberTypeFlags, lineno, charno ) ;^594^595^^^^583^596^[REPLACE] return createMemberRefGet ( target, namespace, elem, memberTypeFlags, lineno, charno ) ;^[METHOD] createElementGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  target 
[REPLACE]^Node nsNode = false;^601^^^^^600^629^[REPLACE] Node nsNode = null;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace == false )  {^602^^^^^600^629^[REPLACE] if  ( namespace != null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( child.getType (  )  == Token.NAME )  {^604^^^^^600^629^[REPLACE] if  ( namespace.equals ( "*" )  )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^nsNode =  createName ( null, lineno, charno ) ;^607^^^^^604^608^[REPLACE] nsNode = createName ( namespace, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^caseNode = new Node ( Token.DEFAULT, lineno, charno ) ; ;^605^^^^^600^629^[REPLACE] nsNode = new Node ( Token.NULL, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^605^^^^^600^629^[ADD] nsNode = new Node ( Token.NULL, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^nsNode =  createName ( null, lineno, charno ) ;^607^^^^^600^629^[REPLACE] nsNode = createName ( namespace, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^Node caseNode;^610^^^^^600^629^[REPLACE] Node ref;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( ref != null )  {^611^^^^^600^629^[REPLACE] if  ( target == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace != null )  {^618^^^^^611^624^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref =  new Node ( Token.REF_NS_MEMBER, elem, nsNode, elem, lineno, charno ) ;^621^622^^^^611^624^[REPLACE] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; ;^619^^^^^611^624^[REPLACE] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^619^^^^^611^624^[ADD] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^621^622^^^^611^624^[ADD] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace != this )  {^612^^^^^600^629^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; ;^615^^^^^612^616^[REPLACE] ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; ;^613^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ; ;^615^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace != this  )  {^612^^^^^600^629^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^612^613^614^615^616^600^629^[ADD] if  ( namespace == null )  { ref = new Node ( Token.REF_NAME, elem, lineno, charno ) ; } else { ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; }^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  ( namespace != null )  {^618^^^^^600^629^[REPLACE] if  ( namespace == null )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref =  new Node ( Token.REF_NS_MEMBER, elem, nsNode, elem, lineno, charno ) ;^621^622^^^^618^623^[REPLACE] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^621^622^^^^618^623^[ADD] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref = new Node ( Token.REF_NS_NAME, nsNode, elem, lineno, charno ) ; ;^619^^^^^600^629^[REPLACE] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^619^^^^^600^629^[ADD] ref = new Node ( Token.REF_MEMBER, target, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref =  new Node ( Token.REF_NS_MEMBER, elem, nsNode, elem, lineno, charno ) ;^621^622^^^^600^629^[REPLACE] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^^621^622^^^^600^629^[ADD] ref = new Node ( Token.REF_NS_MEMBER, target, nsNode, elem, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^if  (lineno  ==  0 )  {^625^^^^^600^629^[REPLACE] if  ( memberTypeFlags != 0 )  {^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[ADD]^ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^625^626^627^^^600^629^[ADD] if  ( memberTypeFlags != 0 )  { ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ; }^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^ref .putProp (  )  ;^626^^^^^600^629^[REPLACE] ref.putIntProp ( Node.MEMBER_TYPE_PROP, memberTypeFlags ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REMOVE]^return Node.newNumber ( number, lineno, charno ) ;^626^^^^^600^629^[REMOVE] ^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^return new Node ( Token.GET_REF, ref, memberTypeFlags, charno ) ;^628^^^^^600^629^[REPLACE] return new Node ( Token.GET_REF, ref, lineno, charno ) ;^[METHOD] createMemberRefGet [TYPE] Node [PARAMETER] Node target String namespace Node elem int memberTypeFlags int lineno int charno [CLASS] IRFactory   [TYPE]  String namespace  [TYPE]  boolean false  true  [TYPE]  int charno  lineno  memberTypeFlags  [TYPE]  Parser parser  [TYPE]  Node elem  nsNode  ref  target 
[REPLACE]^Node caseNode;^637^^^^^634^652^[REPLACE] Node temp;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^nodeType = Token.GETELEM; ;^641^^^^^634^652^[REPLACE] nodeType = Token.GETPROP;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^nodeType = Token.GETPROP; ;^648^^^^^634^652^[REPLACE] nodeType = Token.GETELEM;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^Node idNode = left;^642^^^^^634^652^[REPLACE] Node idNode = right;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^return new Node ( nodeType, left, right, nodeType, charno ) ;^651^^^^^634^652^[REPLACE] return new Node ( nodeType, left, right, lineno, charno ) ;^[METHOD] createBinary [TYPE] Node [PARAMETER] int nodeType Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeType  [TYPE]  Parser parser  [TYPE]  Node idNode  left  right  temp 
[REPLACE]^int nodeType = right.setType (  ) ;^657^^^^^654^670^[REPLACE] int nodeType = left.getType (  ) ;^[METHOD] createAssignment [TYPE] Node [PARAMETER] int nodeOp Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeOp  nodeType  [TYPE]  Parser parser  [TYPE]  Node left  right 
[REPLACE]^parser.reportError ( msg ) ;^666^^^^^654^670^[REPLACE] parser.reportError ( "msg.bad.assign.left" ) ;^[METHOD] createAssignment [TYPE] Node [PARAMETER] int nodeOp Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeOp  nodeType  [TYPE]  Parser parser  [TYPE]  Node left  right 
[REPLACE]^return new Node ( nodeType, left, right, lineno, charno ) ;^669^^^^^654^670^[REPLACE] return new Node ( Token.ASSIGN, left, right, lineno, charno ) ;^[METHOD] createAssignment [TYPE] Node [PARAMETER] int nodeOp Node left Node right int lineno int charno [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int charno  lineno  nodeOp  nodeType  [TYPE]  Parser parser  [TYPE]  Node left  right 
[REPLACE]^int type = node.setType (  ) ;^674^^^^^672^685^[REPLACE] int type = node.getType (  ) ;^[METHOD] makeReference [TYPE] Node [PARAMETER] Node node [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Parser parser  [TYPE]  Node node 
[ADD]^^674^^^^^672^685^[ADD] int type = node.getType (  ) ;^[METHOD] makeReference [TYPE] Node [PARAMETER] Node node [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Parser parser  [TYPE]  Node node 
[REPLACE]^return fnNode;^681^^^^^672^685^[REPLACE] return node;^[METHOD] makeReference [TYPE] Node [PARAMETER] Node node [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Parser parser  [TYPE]  Node node 
[REPLACE]^return false;^684^^^^^672^685^[REPLACE] return null;^[METHOD] makeReference [TYPE] Node [PARAMETER] Node node [CLASS] IRFactory   [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Parser parser  [TYPE]  Node node 
[REPLACE]^if  ( child.getType (  )  == Token.NAME )  {^713^^^^^711^733^[REPLACE] if  ( parser.insideFunction (  )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  (   ( parser.compilerEnv.activationNames == true && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^715^716^717^718^^711^733^[REPLACE] if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^715^716^717^718^719^711^733^[ADD] if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) { activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^}  else {^720^^^^^711^733^[REPLACE] } else if  ( "length".equals ( name )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP || parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^activation = false;^726^^^^^711^733^[REPLACE] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^726^^^^^711^733^[ADD] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  (  parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^activation = false;^719^^^^^711^733^[REPLACE] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^}  if  ( "length + 1".equals ( name )  )  {^720^^^^^711^733^[REPLACE] } else if  ( "length".equals ( name )  )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP ) {^721^722^723^724^^711^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( true )  {^729^^^^^711^733^[REPLACE] if  ( activation )  {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^setRequiresActivation (  ) ;^729^730^731^^^711^733^[ADD] if  ( activation )  { setRequiresActivation (  ) ; }^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^String name = fn.getFunctionName (  ) ;^730^^^^^711^733^[REPLACE] setRequiresActivation (  ) ;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^boolean activation = true;^714^^^^^711^733^[REPLACE] boolean activation = false;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( "arguments".equals ( name ) ) {^715^716^717^718^^711^733^[REPLACE] if  ( "arguments".equals ( name ) ||  ( parser.compilerEnv.activationNames != null && parser.compilerEnv.activationNames.containsKey ( name )  )  ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^721^722^723^724^^711^733^[ADD] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( token == Token.GETPROP || parser.compilerEnv.createLeaf (  ) == Context.VERSION_1_2 ) {^721^722^723^724^^711^733^[REPLACE] if  ( token == Token.GETPROP && parser.compilerEnv.getLanguageVersion (  ) == Context.VERSION_1_2 ) {^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[ADD]^^719^^^^^711^733^[ADD] activation = true;^[METHOD] checkActivationName [TYPE] void [PARAMETER] String name int token [CLASS] IRFactory   [TYPE]  String name  [TYPE]  boolean activation  false  true  [TYPE]  int token  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.getSourceName (  )  )  {^737^^^^^735^740^[REPLACE] if  ( parser.insideFunction (  )  )  {^[METHOD] setRequiresActivation [TYPE] void [PARAMETER] [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
[ADD]^^737^738^739^^^735^740^[ADD] if  ( parser.insideFunction (  )  )  { (  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true; }^[METHOD] setRequiresActivation [TYPE] void [PARAMETER] [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
[REPLACE]^(  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = false;^738^^^^^735^740^[REPLACE] (  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true;^[METHOD] setRequiresActivation [TYPE] void [PARAMETER] [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
[ADD]^^738^^^^^735^740^[ADD] (  ( FunctionNode ) parser.currentScriptOrFn ) .itsNeedsActivation = true;^[METHOD] setRequiresActivation [TYPE] void [PARAMETER] [CLASS] IRFactory   [TYPE]  Parser parser  [TYPE]  boolean false  true 
