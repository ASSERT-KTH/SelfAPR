[REPLACE]^private static final int DTOBASESTR_BUFFER_SIZE  = null ;^71^^^^^^^[REPLACE] private static final int DTOBASESTR_BUFFER_SIZE = 1078;^ [CLASS] DToA  
[REPLACE]^D   private static final int Frac_mask ;^82^83^84^85^^^^[REPLACE] D   private static final int Frac_mask = 0xfffff;^ [CLASS] DToA  
[REPLACE]^private static  int Exp_shift = 20;^86^^^^^^^[REPLACE] private static final int Exp_shift = 20;^ [CLASS] DToA  
[REPLACE]^private static final int Exp_msk1 ;^87^^^^^^^[REPLACE] private static final int Exp_msk1 = 0x100000;^ [CLASS] DToA  
[REPLACE]^private static final long Frac_maskL ;^89^^^^^^^[REPLACE] private static final long Frac_maskL = 0xfffffffffffffL;^ [CLASS] DToA  
[REPLACE]^private static final int Exp_shiftL  = null ;^90^^^^^^^[REPLACE] private static final int Exp_shiftL = 52;^ [CLASS] DToA  
[REPLACE]^private static final int Bias ;^93^^^^^^^[REPLACE] private static final int Bias = 1023;^ [CLASS] DToA  
[REPLACE]^private  final int P = 53;^94^^^^^^^[REPLACE] private static final int P = 53;^ [CLASS] DToA  
[REPLACE]^private static final int Exp_shift1 ;^96^^^^^^^[REPLACE] private static final int Exp_shift1 = 20;^ [CLASS] DToA  
[REPLACE]^private static final int Exp_mask   = null ;^97^^^^^^^[REPLACE] private static final int Exp_mask  = 0x7ff00000;^ [CLASS] DToA  
[REPLACE]^private static final int Exp_mask_shifted ;^98^^^^^^^[REPLACE] private static final int Exp_mask_shifted = 0x7ff;^ [CLASS] DToA  
[REPLACE]^private static final int Bndry_mask   = null ;^99^^^^^^^[REPLACE] private static final int Bndry_mask  = 0xfffff;^ [CLASS] DToA  
[REPLACE]^private static  int Log2P = 1;^100^^^^^^^[REPLACE] private static final int Log2P = 1;^ [CLASS] DToA  
[REPLACE]^private static final  long  Sign_bit = 0x80000000;^102^^^^^^^[REPLACE] private static final int Sign_bit = 0x80000000;^ [CLASS] DToA  
[REPLACE]^private static final  long  Exp_11  = 0x3ff00000;^103^^^^^^^[REPLACE] private static final int Exp_11  = 0x3ff00000;^ [CLASS] DToA  
[REPLACE]^private static final int Ten_pmax ;^104^^^^^^^[REPLACE] private static final int Ten_pmax = 22;^ [CLASS] DToA  
[REPLACE]^private static final int Quick_max = 14 - 0;^105^^^^^^^[REPLACE] private static final int Quick_max = 14;^ [CLASS] DToA  
[REPLACE]^private static  int Bletch = 0x10;^106^^^^^^^[REPLACE] private static final int Bletch = 0x10;^ [CLASS] DToA  
[REPLACE]^private static final int Frac_mask1 ;^107^^^^^^^[REPLACE] private static final int Frac_mask1 = 0xfffff;^ [CLASS] DToA  
[REPLACE]^private static final int Int_max = 3;^108^^^^^^^[REPLACE] private static final int Int_max = 14;^ [CLASS] DToA  
[REPLACE]^private static final int n_bigtens  = null ;^109^^^^^^^[REPLACE] private static final int n_bigtens = 5;^ [CLASS] DToA  
[REPLACE]^private static  double tens[] = {^112^^^^^112^116^[REPLACE] private static final double tens[] = {^ [CLASS] DToA  
[REPLACE]^private static  double bigtens[] = { 1e16, 1e32, 1e64, 1e128, 1e256 };^118^^^^^^^[REPLACE] private static final double bigtens[] = { 1e16, 1e32, 1e64, 1e128, 1e256 };^ [CLASS] DToA  
[REPLACE]^return  ( char )  (  ( digit  ;^74^^^^^73^75^[REPLACE] return  ( char )  (  ( digit >= 10 )  ? 'a' - 10 + digit : '0' + digit ) ;^[METHOD] BASEDIGIT [TYPE] char [PARAMETER] int digit [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  n_bigtens  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^int digit;^123^^^^^122^158^[REPLACE] int k;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^int x = Bndry_mask;^124^^^^^122^158^[REPLACE] int x = y;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( Ten_pmax & 7 )   == x )  {^126^^^^^122^158^[REPLACE] if  (  ( x & 7 )  != 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( Ten_pmax & 1 )   ==  0 ) return 0;^127^128^^^^122^158^[REPLACE] if  (  ( x & 1 )  != 0 ) return 0;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 4;^128^^^^^122^158^[REPLACE] return 0;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  (Ten_pmax )   ==  0 )  {^129^^^^^122^158^[REPLACE] if  (  ( x & 2 )  != 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return k;^130^^^^^122^158^[REPLACE] return 1;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 1 * 3;^130^^^^^122^158^[REPLACE] return 1;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 3;^132^^^^^122^158^[REPLACE] return 2;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  (Ten_pmax )   ==  0 ) return 0;^127^128^^^^122^158^[REPLACE] if  (  ( x & 1 )  != 0 ) return 0;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 0 + 0;^128^^^^^122^158^[REPLACE] return 0;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  (x )   ==  0 )  {^129^^^^^122^158^[REPLACE] if  (  ( x & 2 )  != 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^129^130^131^^^122^158^[ADD] if  (  ( x & 2 )  != 0 )  { return 1; }^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 2;^128^^^^^122^158^[REPLACE] return 0;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 5;^132^^^^^122^158^[REPLACE] return 2;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k0 = k; ;^134^^^^^122^158^[REPLACE] k = 0;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x &xxffff )   != x )  {^135^^^^^122^158^[REPLACE] if  (  ( x & 0xffff )  == 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^k = 16;x >>>= 16;^135^136^137^138^^122^158^[ADD] if  (  ( x & 0xffff )  == 0 )  { k = 16; x >>>= 16; }^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k = 5;^136^^^^^122^158^[REPLACE] k = 16;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 4; ;^137^^^^^122^158^[REPLACE] x >>>= 16;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k = 3;^136^^^^^122^158^[REPLACE] k = 16;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 1;^137^^^^^122^158^[REPLACE] x >>>= 16;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^137^^^^^122^158^[ADD] x >>>= 16;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0xff )   &&  0 )  {^139^^^^^122^158^[REPLACE] if  (  ( x & 0xff )  == 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 8 * 1;^140^^^^^122^158^[REPLACE] k += 8;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^140^141^^^^122^158^[ADD] k += 8; x >>>= 8;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 2;^141^^^^^122^158^[REPLACE] x >>>= 8;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 6;^140^^^^^122^158^[REPLACE] k += 8;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 0;^141^^^^^122^158^[REPLACE] x >>>= 8;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0xf )   !=  0 )  {^143^^^^^122^158^[REPLACE] if  (  ( x & 0xf )  == 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^k += 4;x >>>= 4;^143^144^145^146^^122^158^[ADD] if  (  ( x & 0xf )  == 0 )  { k += 4; x >>>= 4; }^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 1;^144^^^^^122^158^[REPLACE] k += 4;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 4L;^145^^^^^122^158^[REPLACE] x >>>= 4;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^145^^^^^122^158^[ADD] x >>>= 4;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^d += d; ;^144^^^^^122^158^[REPLACE] k += 4;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 3;^145^^^^^122^158^[REPLACE] x >>>= 4;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0x4 )   &&  0 )  {^147^^^^^122^158^[REPLACE] if  (  ( x & 0x3 )  == 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 0;^148^^^^^122^158^[REPLACE] k += 2;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^148^149^^^^122^158^[ADD] k += 2; x >>>= 2;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 2 + 2;^149^^^^^122^158^[REPLACE] x >>>= 2;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^z >>>= k; ;^149^^^^^122^158^[REPLACE] x >>>= 2;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 1 )   ||  0 )  {^151^^^^^122^158^[REPLACE] if  (  ( x & 1 )  == 0 )  {^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 1 )   !=  0 ) return 32;^154^155^^^^122^158^[REPLACE] if  (  ( x & 1 )  == 0 ) return 32;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 4;^155^^^^^122^158^[REPLACE] return 32;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 3;^153^^^^^122^158^[REPLACE] x >>>= 1;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( Ten_pmax & 1 * 1 )   ||  0 ) return 32;^154^155^^^^122^158^[REPLACE] if  (  ( x & 1 )  == 0 ) return 32;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 32L;^155^^^^^122^158^[REPLACE] return 32;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x >>>= 1 * 3;^153^^^^^122^158^[REPLACE] x >>>= 1;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^153^^^^^122^158^[ADD] x >>>= 1;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return Quick_max;^157^^^^^122^158^[REPLACE] return k;^[METHOD] lo0bits [TYPE] int [PARAMETER] int y [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^int k = 0L;^163^^^^^162^187^[REPLACE] int k = 0;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^163^^^^^162^187^[ADD] int k = 0;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0xffff0000 )   &&  0 )  {^165^^^^^162^187^[REPLACE] if  (  ( x & 0xffff0000 )  == 0 )  {^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^165^166^167^168^^162^187^[ADD] if  (  ( x & 0xffff0000 )  == 0 )  { k = 16; x <<= 16; }^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k = 3;^166^^^^^162^187^[REPLACE] k = 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^166^167^^^^162^187^[ADD] k = 16; x <<= 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 0;^167^^^^^162^187^[REPLACE] x <<= 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^167^^^^^162^187^[ADD] x <<= 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k = 8;^166^^^^^162^187^[REPLACE] k = 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^166^^^^^162^187^[ADD] k = 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 7;^167^^^^^162^187^[REPLACE] x <<= 16;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( Ten_pmax & 0xff000000 )   &&  0 )  {^169^^^^^162^187^[REPLACE] if  (  ( x & 0xff000000 )  == 0 )  {^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^169^^^^^162^187^[REMOVE] ^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^d += d; ;^170^^^^^162^187^[REPLACE] k += 8;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 8 - 2;^171^^^^^162^187^[REPLACE] x <<= 8;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^^171^^^^^162^187^[ADD] x <<= 8;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 4;^170^^^^^162^187^[REPLACE] k += 8;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 16; ;^171^^^^^162^187^[REPLACE] x <<= 8;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0xf0000000 )   !=  0 )  {^173^^^^^162^187^[REPLACE] if  (  ( x & 0xf0000000 )  == 0 )  {^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^k += 4;x <<= 4;^173^174^175^176^^162^187^[ADD] if  (  ( x & 0xf0000000 )  == 0 )  { k += 4; x <<= 4; }^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 4L;^174^^^^^162^187^[REPLACE] k += 4;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 3;^175^^^^^162^187^[REPLACE] x <<= 4;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^d += d; ;^174^^^^^162^187^[REPLACE] k += 4;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 4 + 4;^175^^^^^162^187^[REPLACE] x <<= 4;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0xc0000000 )   ||  0 )  {^177^^^^^162^187^[REPLACE] if  (  ( x & 0xc0000000 )  == 0 )  {^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^k += 2;x <<= 2;^177^178^179^180^^162^187^[ADD] if  (  ( x & 0xc0000000 )  == 0 )  { k += 2; x <<= 2; }^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 0;^178^^^^^162^187^[REPLACE] k += 2;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 0;^179^^^^^162^187^[REPLACE] x <<= 2;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^k += 4;^178^^^^^162^187^[REPLACE] k += 2;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^x <<= 2 - 3;^179^^^^^162^187^[REPLACE] x <<= 2;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x & 0x80000000 )   !=  0 )  {^181^^^^^162^187^[REPLACE] if  (  ( x & 0x80000000 )  == 0 )  {^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( Ten_pmax &xx40000000 )   != x ) return 32;^183^184^^^^162^187^[REPLACE] if  (  ( x & 0x40000000 )  == 0 ) return 32;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 32 << 0;^184^^^^^162^187^[REPLACE] return 32;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 32 % 3;^184^^^^^162^187^[REPLACE] return 32;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^if  (  ( x &xx40000000 )   != x ) return 32;^183^184^^^^162^187^[REPLACE] if  (  ( x & 0x40000000 )  == 0 ) return 32;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 3;^184^^^^^162^187^[REPLACE] return 32;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return 32L;^184^^^^^162^187^[REPLACE] return 32;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^return Quick_max;^186^^^^^162^187^[REPLACE] return k;^[METHOD] hi0bits [TYPE] int [PARAMETER] int x [CLASS] DToA   [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^bits[offset] =  ( byte )  ( val  <  1 ) ;^191^^^^^189^195^[REPLACE] bits[offset] =  ( byte )  ( val >> 24 ) ;^[METHOD] stuffBits [TYPE] void [PARAMETER] byte[] bits int offset int val [CLASS] DToA   [TYPE]  byte[] bits  [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  offset  val  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^bits[offset  &  1] =  ( byte )  ( val >> 16 ) ;^192^^^^^189^195^[REPLACE] bits[offset + 1] =  ( byte )  ( val >> 16 ) ;^[METHOD] stuffBits [TYPE] void [PARAMETER] byte[] bits int offset int val [CLASS] DToA   [TYPE]  byte[] bits  [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  offset  val  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^bits[offset +n_bigtens] =  ( byte )  ( val >> 8 ) ;^193^^^^^189^195^[REPLACE] bits[offset + 2] =  ( byte )  ( val >> 8 ) ;^[METHOD] stuffBits [TYPE] void [PARAMETER] byte[] bits int offset int val [CLASS] DToA   [TYPE]  byte[] bits  [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  offset  val  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[ADD]^bits[offset + 3] =  ( byte )  ( val ) ;^193^194^^^^189^195^[ADD] bits[offset + 2] =  ( byte )  ( val >> 8 ) ; bits[offset + 3] =  ( byte )  ( val ) ;^[METHOD] stuffBits [TYPE] void [PARAMETER] byte[] bits int offset int val [CLASS] DToA   [TYPE]  byte[] bits  [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  offset  val  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^bits[offset  ==  3] =  ( byte )  ( val ) ;^194^^^^^189^195^[REPLACE] bits[offset + 3] =  ( byte )  ( val ) ;^[METHOD] stuffBits [TYPE] void [PARAMETER] byte[] bits int offset int val [CLASS] DToA   [TYPE]  byte[] bits  [TYPE]  int[] dtoaModes  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  digit  k  n_bigtens  offset  val  x  y  [TYPE]  long Exp_msk1L  Frac_maskL 
[REPLACE]^int digit;^202^^^^^201^245^[REPLACE] byte dbl_bits[];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^int S_hiWord = 0;^203^^^^^201^245^[REPLACE] int i, k, y, z, de;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^long dBits = Double.isInfinite ( d ) ;^204^^^^^201^245^[REPLACE] long dBits = Double.doubleToLongBits ( d ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^int d0 =  ( int )  ( dBits  == Frac_maskL ) ;^205^^^^^201^245^[REPLACE] int d0 =  ( int )  ( dBits >>> 32 ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^205^^^^^201^245^[ADD] int d0 =  ( int )  ( dBits >>> 32 ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^int word1 =  ( int )  ( dBits ) ;^206^^^^^201^245^[REPLACE] int d1 =  ( int )  ( dBits ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^z = d0 |digit;^208^^^^^201^245^[REPLACE] z = d0 & Frac_mask;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  (  ( de =  ( d0 >>> Exp_shift )  )   ==  0 ) z |= Exp_msk1;^211^212^^^^201^245^[REPLACE] if  (  ( de =  ( d0 >>> Exp_shift )  )  != 0 ) z |= Exp_msk1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^z | =  z |;^212^^^^^201^245^[REPLACE] z |= Exp_msk1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^212^^^^^201^245^[ADD] z |= Exp_msk1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  (  ( de =  ( d0  !=  Exp_shift )  )  != 0 ) z |= Exp_msk1;^211^212^^^^201^245^[REPLACE] if  (  ( de =  ( d0 >>> Exp_shift )  )  != 0 ) z |= Exp_msk1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^211^212^^214^215^201^245^[ADD] if  (  ( de =  ( d0 >>> Exp_shift )  )  != 0 ) z |= Exp_msk1; if  (  ( y = d1 )  != 0 )  { dbl_bits = new byte[8];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  (  ( y = d1 )   ==  0 + 2 )  {^214^^^^^201^245^[REPLACE] if  (  ( y = d1 )  != 0 )  {^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^dbl_bits = new byte[4 - 3];^229^^^^^214^235^[REPLACE] dbl_bits = new byte[4];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^229^^^^^214^235^[ADD] dbl_bits = new byte[4];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^k = lo0bits ( y ) ; ;^230^^^^^214^235^[REPLACE] k = lo0bits ( z ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^x >>>= 4; ;^231^^^^^214^235^[REPLACE] z >>>= k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^k += 1;^233^^^^^214^235^[REPLACE] k += 32;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^i = 1 / 0;^234^^^^^214^235^[REPLACE] i = 1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  ( k  == Quick_max )  {^218^^^^^201^245^[REPLACE] if  ( k != 0 )  {^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^stuffBits ( dbl_bits, 2, y ) ;^223^^^^^201^245^[REPLACE] stuffBits ( dbl_bits, 4, y ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^stuffBits ( dbl_bits, 0, z ) ;^223^224^^^^201^245^[ADD] stuffBits ( dbl_bits, 4, y ) ; stuffBits ( dbl_bits, 0, z ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^z >>>= k; ;^220^^^^^201^245^[REPLACE] z >>= k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^220^^^^^201^245^[ADD] z >>= k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^dbl_bits = new byte[8 % 1];^215^^^^^201^245^[REPLACE] dbl_bits = new byte[8];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^k = lo0bits ( z ) ; ;^216^^^^^201^245^[REPLACE] k = lo0bits ( y ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^z >>>= k; ;^217^^^^^201^245^[REPLACE] y >>>= k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^i  =  1;^225^^^^^201^245^[REPLACE] i =  ( z != 0 )  ? 2 : 1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  (Quick_max  ==  0 )  {^218^^^^^201^245^[REPLACE] if  ( k != 0 )  {^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^stuffBits ( dbl_bits, 4 * 4, Bndry_mask ) ;^223^^^^^201^245^[REPLACE] stuffBits ( dbl_bits, 4, y ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REMOVE]^buffer.insert ( decPt, '.' ) ;^223^^^^^201^245^[REMOVE] ^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^else if  (  ( j1 = -k )  != 0 )  { ;^214^^^^^201^245^[REPLACE] if  (  ( y = d1 )  != 0 )  {^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^dbl_bits = new byte[4]; ;^215^^^^^201^245^[REPLACE] dbl_bits = new byte[8];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^217^^^^^201^245^[ADD] y >>>= k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^i  =  2 ;^225^^^^^201^245^[REPLACE] i =  ( z != 0 )  ? 2 : 1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^225^^^^^201^245^[ADD] i =  ( z != 0 )  ? 2 : 1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^dbl_bits = new byte[3];^229^^^^^201^245^[REPLACE] dbl_bits = new byte[4];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^229^^^^^201^245^[ADD] dbl_bits = new byte[4];^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^k = lo0bits ( y ) ; ;^230^^^^^201^245^[REPLACE] k = lo0bits ( z ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^x >>>= 4; ;^231^^^^^201^245^[REPLACE] z >>>= k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^k += 19;^233^^^^^201^245^[REPLACE] k += 32;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^i = 0;^234^^^^^201^245^[REPLACE] i = 1;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  ( de  ==  0 )  {^236^^^^^201^245^[REPLACE] if  ( de != 0 )  {^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^e[0] = de - Bias -  ( P-1 )   >=  1  >=  k;^241^^^^^236^243^[REPLACE] e[0] = de - Bias -  ( P-1 )  + 1 + k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^bits[0 / 4] = 32*i  !=  hi0 / 4bits ( z ) ;^242^^^^^236^243^[REPLACE] bits[0] = 32*i - hi0bits ( z ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^e[0] = de - Bias -  ( P-1 )   >  k;^237^^^^^201^245^[REPLACE] e[0] = de - Bias -  ( P-1 )  + k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^bits[0] = P -Ten_pmax;^238^^^^^201^245^[REPLACE] bits[0] = P - k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^e[0] = de - Bias -  ( P-1 )  +d1;^237^^^^^201^245^[REPLACE] e[0] = de - Bias -  ( P-1 )  + k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^237^^^^^201^245^[ADD] e[0] = de - Bias -  ( P-1 )  + k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^bits[2] = P -Ten_pmax;^238^^^^^201^245^[REPLACE] bits[0] = P - k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[ADD]^^238^^^^^201^245^[ADD] bits[0] = P - k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^e[0] = de - Bias -  ( P-1 )   <=  1  <=  k;^241^^^^^201^245^[REPLACE] e[0] = de - Bias -  ( P-1 )  + 1 + k;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^bits[0] = 32*i  ^  hi0bits ( z ) ;^242^^^^^201^245^[REPLACE] bits[0] = 32*i - hi0bits ( z ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^return  ( int )  ( dBits >> 32 ) ;^244^^^^^201^245^[REPLACE] return new BigInteger ( dbl_bits ) ;^[METHOD] d2b [TYPE] BigInteger [PARAMETER] double d int[] e int[] bits [CLASS] DToA   [TYPE]  byte[] dbl_bits  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  d0  d1  de  digit  i  k  n_bigtens  offset  val  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits 
[REPLACE]^if  (  ( 2 <= base && base <= 36 )  ) throw new IllegalArgumentException  (" ")  ;^249^250^^^^248^405^[REPLACE] if  ( ! ( 2 <= base && base <= 36 )  ) throw new IllegalArgumentException  (" ")  ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return ;^250^^^^^248^405^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^250^^^^^248^405^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( Double.isNaN ( dfloor )  )  {^253^^^^^248^405^[REPLACE] if  ( Double.isNaN ( d )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^return "NaN";return  ( d > 0.0 )  ? "Infinity" : "-Infinity";^253^254^255^256^^248^405^[ADD] if  ( Double.isNaN ( d )  )  { return "NaN"; } else if  ( Double.isInfinite ( d )  )  { return  ( d > 0.0 )  ? "Infinity" : "-Infinity";^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  if  ( Double .isNaN ( df )   )  {^255^^^^^248^405^[REPLACE] } else if  ( Double.isInfinite ( d )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  if  ( d  !=  word0 )  {^257^^^^^248^405^[REPLACE] } else if  ( d == 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return 0;^259^^^^^248^405^[REPLACE] return "0";^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return  ( d  ;^256^^^^^248^405^[REPLACE] return  ( d > 0.0 )  ? "Infinity" : "-Infinity";^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  else {^257^^^^^248^405^[REPLACE] } else if  ( d == 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^}   return "0";^257^258^259^260^^248^405^[ADD] else if  ( d == 0 )  {  return "0"; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return k;^254^^^^^248^405^[REPLACE] return "NaN";^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  else {^255^^^^^248^405^[REPLACE] } else if  ( Double.isInfinite ( d )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  if  ( d  &&  0 )  {^257^^^^^248^405^[REPLACE] } else if  ( d == 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return false ;^256^^^^^248^405^[REPLACE] return  ( d > 0.0 )  ? "Infinity" : "-Infinity";^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^} else if  ( d  ||  word0 )  {^257^^^^^248^405^[REPLACE] } else if  ( d == 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^257^^^^^248^405^[REMOVE] ^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^boolean exponentialNotation = false;^262^^^^^248^405^[REPLACE] boolean negative;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^262^^^^^248^405^[ADD] boolean negative;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( d  !=  0.0 )  {^263^^^^^248^405^[REPLACE] if  ( d >= 0.0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^negative = false;^266^^^^^263^268^[REPLACE] negative = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^d += d; ;^267^^^^^263^268^[REPLACE] d = -d;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^negative = true;^264^^^^^248^405^[REPLACE] negative = false;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^264^^^^^248^405^[ADD] negative = false;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^negative = false;^266^^^^^248^405^[REPLACE] negative = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^d += d; ;^267^^^^^248^405^[REPLACE] d = -d;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^267^^^^^248^405^[ADD] d = -d;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int digit;^271^^^^^248^405^[REPLACE] String intDigits;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^double dfloorfloor = Math.floor ( d ) ;^273^^^^^248^405^[REPLACE] double dfloor = Math.floor ( d ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^long floorBits = Double.doubleToLongBits ( dfloor ) ;^274^^^^^248^405^[REPLACE] long lfloor =  ( long ) dfloor;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( floorBits  &&  dfloor )  {^275^^^^^248^405^[REPLACE] if  ( lfloor == dfloor )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^275^276^277^278^^248^405^[ADD] if  ( lfloor == dfloor )  {  intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ; } else {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( exp  &&  0 * 4 )  {^283^^^^^275^299^[REPLACE] if  ( exp == 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^mantissa =  ( floorBits & Frac_maskL )  << 1;mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^283^284^285^286^287^275^299^[ADD] if  ( exp == 0 )  { mantissa =  ( floorBits & Frac_maskL )  << 1; } else { mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits & Frac_maskL )  << 1; ;^286^^^^^275^299^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits & Frac_maskL )   >  1;^284^^^^^275^299^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  << 1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( true )  {^288^^^^^275^299^[REPLACE] if  ( negative )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  -floorBits;^289^^^^^275^299^[REPLACE] mantissa = -mantissa;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^289^^^^^275^299^[ADD] mantissa = -mantissa;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( exp  >= x )  {^293^^^^^275^299^[REPLACE] if  ( exp > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^x = x.shiftLeft ( exp ) ;x = x.shiftRight ( -exp ) ;^293^294^295^296^297^275^299^[ADD] if  ( exp > 0 )  { x = x.shiftLeft ( exp ) ; } else if  ( exp < 0 )  { x = x.shiftRight ( -exp ) ; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^} else if  ( exp  <=  0 )  {^295^^^^^275^299^[REPLACE] } else if  ( exp < 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^x = x.shiftLeft ( exp ) ; ;^296^^^^^275^299^[REPLACE] x = x.shiftRight ( -exp ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^296^297^^^^275^299^[ADD] x = x.shiftRight ( -exp ) ; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^x = x.shiftRight ( -exp ) ; ;^294^^^^^275^299^[REPLACE] x = x.shiftLeft ( exp ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  else {^295^^^^^275^299^[REPLACE] } else if  ( exp < 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^}   x = x.shiftRight ( -exp ) ;^295^296^297^^^275^299^[ADD] else if  ( exp < 0 )  { x = x.shiftRight ( -exp ) ; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits & Frac_maskL )   >=  1;^284^^^^^275^299^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  << 1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^284^^^^^275^299^[ADD] mantissa =  ( floorBits & Frac_maskL )  << 1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits & Frac_maskL )  & Exp_msk1L;^286^^^^^275^299^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^exp -= 4;^291^^^^^275^299^[REPLACE] exp -= 1075;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^intDigits =  null.toString ( base ) ;^298^^^^^275^299^[REPLACE] intDigits = x.toString ( base ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^298^^^^^275^299^[ADD] intDigits = x.toString ( base ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^long floorBits = Double.doubleToLongBits ( df ) ;^280^^^^^275^299^[REPLACE] long floorBits = Double.doubleToLongBits ( dfloor ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^280^^^^^275^299^[ADD] long floorBits = Double.doubleToLongBits ( dfloor ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int exp =  ( int )  ( floorBits >> mantissa )  | base;^281^^^^^275^299^[REPLACE] int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^String intDigits;^282^^^^^275^299^[REPLACE] long mantissa;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger x = BigInteger.valueOf ( floorBits ) ;^292^^^^^275^299^[REPLACE] BigInteger x = BigInteger.valueOf ( mantissa ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^intDigits =  Long.toString (  ( true )  ? -lfloor : lfloor, base ) ;^277^^^^^248^405^[REPLACE] intDigits = Long.toString (  ( negative )  ? -lfloor : lfloor, base ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( exp  !=  0 )  {^283^^^^^248^405^[REPLACE] if  ( exp == 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits &mantissa )  & Exp_msk1L;^286^^^^^283^287^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits &mantissa )   !=  1;^284^^^^^248^405^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  << 1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( true )  {^288^^^^^248^405^[REPLACE] if  ( negative )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  -floorBits;^289^^^^^248^405^[REPLACE] mantissa = -mantissa;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( exp  !=  0 )  {^293^^^^^248^405^[REPLACE] if  ( exp > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  else {^295^^^^^248^405^[REPLACE] } else if  ( exp < 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^}   x = x.shiftRight ( -exp ) ;^295^296^297^^^248^405^[ADD] else if  ( exp < 0 )  { x = x.shiftRight ( -exp ) ; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^x = x.shiftLeft ( exp ) ; ;^296^^^^^248^405^[REPLACE] x = x.shiftRight ( -exp ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^296^297^^^^248^405^[ADD] x = x.shiftRight ( -exp ) ; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^x = x.shiftRight ( -exp ) ; ;^294^^^^^248^405^[REPLACE] x = x.shiftLeft ( exp ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits & Frac_maskL )   ==  1;^284^^^^^248^405^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  << 1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mantissa =  ( floorBits & Frac_maskL )  << 1; ;^286^^^^^248^405^[REPLACE] mantissa =  ( floorBits & Frac_maskL )  | Exp_msk1L;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^exp -= 4;^291^^^^^248^405^[REPLACE] exp -= 1075;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^intDigits =  null.toString ( base ) ;^298^^^^^248^405^[REPLACE] intDigits = x.toString ( base ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^long floorBits = Double .longBitsToDouble ( Exp_msk1L )  ;^280^^^^^248^405^[REPLACE] long floorBits = Double.doubleToLongBits ( dfloor ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int exp =  ( int )  ( floorBits >>mantissa )  | Exp_mask_shifted;^281^^^^^248^405^[REPLACE] int exp =  ( int )  ( floorBits >> Exp_shiftL )  & Exp_mask_shifted;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^String intDigits;^282^^^^^248^405^[REPLACE] long mantissa;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger x = BigInteger.valueOf ( floorBits ) ;^292^^^^^248^405^[REPLACE] BigInteger x = BigInteger.valueOf ( mantissa ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( d  != df )  {^301^^^^^248^405^[REPLACE] if  ( d == dfloor )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^301^302^303^304^^248^405^[ADD] if  ( d == dfloor )  {  return intDigits; } else {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( s2  != offset ) s2 = -1;^330^331^^^^301^403^[REPLACE] if  ( s2 == 0 ) s2 = -1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^s2 = -1;s2 += Bias + P;^330^331^332^^^301^403^[ADD] if  ( s2 == 0 ) s2 = -1; s2 += Bias + P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^s2 = -1L;^331^^^^^301^403^[REPLACE] s2 = -1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  (  ( j1 == 0 )  ) {^337^338^^^^301^403^[REPLACE] if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b2 += Log2P; ;^341^^^^^337^343^[REPLACE] s2 += Log2P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^341^^^^^337^343^[ADD] s2 += Log2P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mhi = BigInteger.valueOf ( 1 == Log2P ) ;^342^^^^^337^343^[REPLACE] mhi = BigInteger.valueOf ( 1<<Log2P ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^342^^^^^337^343^[ADD] mhi = BigInteger.valueOf ( 1<<Log2P ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( delta  !=  mlo ) mlo = mhi = mlo .subtract ( s )  ;^361^362^^^^301^403^[REPLACE] if  ( mlo == mhi ) mlo = mhi = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mhi = mhi.multiply ( bigBase ) ; ;^364^^^^^361^366^[REPLACE] mlo = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^365^^^^^361^366^[REPLACE] mhi = mhi.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^362^^^^^301^403^[REPLACE] mlo = mhi = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^362^^^^^301^403^[ADD] mlo = mhi = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1 == 0 - 2 ) {^374^^^^^301^403^[REPLACE] if  ( j1 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j < 0 &&  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  {^379^^^^^301^403^[REPLACE] if  ( j < 0 ||  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  else {^390^^^^^301^403^[REPLACE] } else if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^done = false;^392^^^^^301^403^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^392^^^^^301^403^[ADD] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( word1  !=  word0 )  {^380^^^^^301^403^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REMOVE]^if  ( j >= 0 )  {     b2 = 0;     s2 = j; }else {     b2 = -j;     s2 = 0; }^380^^^^^301^403^[REMOVE] ^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 3 ) ;^383^^^^^301^403^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^j = b.compareTo ( S ) ; ;^384^^^^^301^403^[REPLACE] j1 = b.compareTo ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^384^^^^^301^403^[ADD] j1 = b.compareTo ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 1 * 0 ) ;^383^^^^^301^403^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^383^384^385^^387^301^403^[ADD] b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( s ) ; i digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^done = false;^389^^^^^301^403^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  (word1  !=  0 )  {^380^^^^^301^403^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^380^381^382^383^384^301^403^[ADD] if  ( j1 > 0 )  {  Use whichever would produce an output value closer to d. */ b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^383^^^^^301^403^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 4 ) ;^383^^^^^301^403^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  (j1  <=  0 ) digit++;^375^376^^^^301^403^[REPLACE] if  ( j > 0 ) digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^done = false;^377^^^^^301^403^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1  >=  0 ) digit++;^375^376^^^^301^403^[REPLACE] if  ( j > 0 ) digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j < 0 ) {^379^^^^^301^403^[REPLACE] if  ( j < 0 ||  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^379^380^^382^383^301^403^[ADD] if  ( j < 0 ||  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  { if  ( j1 > 0 )  { Use whichever would produce an output value closer to d. */ b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  if  ( word1  !=  0 )  {^390^^^^^301^403^[REPLACE] } else if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1  ==  0 )  {^380^^^^^301^403^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^385^386^387^^^301^403^[ADD] i  digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 1 << 2 ) ;^383^^^^^301^403^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1  <  0 )  {^380^^^^^301^403^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  if  ( j1  <  0 )  {^390^^^^^301^403^[REPLACE] } else if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^buffer  =  buffer ;^314^^^^^301^403^[REPLACE] buffer = new char[DTOBASESTR_BUFFER_SIZE];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^314^^^^^301^403^[ADD] buffer = new char[DTOBASESTR_BUFFER_SIZE];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^p = 2;^315^^^^^301^403^[REPLACE] p = 0;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^df = d  &  dfloor;^316^^^^^301^403^[REPLACE] df = d - dfloor;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = d2b ( d, be, bbits ) ; ;^325^^^^^301^403^[REPLACE] b = d2b ( df, e, bbits ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^s2 = 0; ;^331^^^^^301^403^[REPLACE] s2 = -1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^s2 += Bias + P;^331^332^^^^301^403^[ADD] s2 = -1; s2 += Bias + P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^s2 +=val + P;^332^^^^^301^403^[REPLACE] s2 += Bias + P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b2 += Log2P; ;^341^^^^^301^403^[REPLACE] s2 += Log2P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mhi = BigInteger.valueOf ( 1 <=word1 ) ;^342^^^^^301^403^[REPLACE] mhi = BigInteger.valueOf ( 1<<Log2P ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( e[0] + offset ) ;^345^^^^^301^403^[REPLACE] b = b.shiftLeft ( e[0] + s2 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^347^^^^^301^403^[REPLACE] s = s.shiftLeft ( s2 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^357^^^^^301^403^[REPLACE] b = b.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = divResult[2];^359^^^^^301^403^[REPLACE] b = divResult[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^359^360^^^^301^403^[ADD] b = divResult[1]; digit =  ( char )  ( divResult[0].intValue (  )  ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^digit =  ( char )  ( divResult[3].intValue (  )  ) ;^360^^^^^301^403^[REPLACE] digit =  ( char )  ( divResult[0].intValue (  )  ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mhi = mhi.multiply ( bigBase ) ; ;^364^^^^^301^403^[REPLACE] mlo = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^365^^^^^301^403^[REPLACE] mhi = mhi.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^377^^^^^301^403^[ADD] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^j1 = b.compareTo ( s ) ;digit++;^383^384^385^^387^301^403^[ADD] b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( s ) ; i digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^denorm = true; ;^389^^^^^301^403^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^buffer[p++] =  BASEDIGIT ( digit ) ;^395^^^^^301^403^[REPLACE] buffer[p++] = BASEDIGIT ( digit ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return sb.length (  ) ;^402^^^^^301^403^[REPLACE] return sb.toString (  ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^307^308^309^^^301^403^[ADD] c i int q;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int digit;^309^^^^^301^403^[REPLACE] int q;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^String intDigits;^310^^^^^301^403^[REPLACE] int digit;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^310^^^^^301^403^[ADD] int digit;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^d BigInteger b;^312^^^^^301^403^[REPLACE] BigInteger b;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^long dfloorBits = Double.doubleToLongBits ( d ) ;^318^^^^^301^403^[REPLACE] long dBits = Double.doubleToLongBits ( d ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int word0 =  ( int )  ( mantissa  !=  s2 ) ;^319^^^^^301^403^[REPLACE] int word0 =  ( int )  ( dBits >> 32 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int d1 =  ( int )  ( dBits ) ;^320^^^^^301^403^[REPLACE] int word1 =  ( int )  ( dBits ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int[] e = new int[3];^322^^^^^301^403^[REPLACE] int[] e = new int[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int[] bbits = new int[1 + 3];^323^^^^^301^403^[REPLACE] int[] bbits = new int[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int s2 = - ( word0 >>>j1 | Exp_mask >> Exp_shift1 ) ;^329^^^^^301^403^[REPLACE] int s2 = - ( word0 >>> Exp_shift1 & Exp_mask >> Exp_shift1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger mlo = BigInteger.valueOf ( 0 ) ;^335^^^^^301^403^[REPLACE] BigInteger mlo = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger mhi = mhi;^336^^^^^301^403^[REPLACE] BigInteger mhi = mlo;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger s = BigInteger.valueOf ( 1 * 2 ) ;^346^^^^^301^403^[REPLACE] BigInteger s = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^346^^^^^301^403^[ADD] BigInteger s = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger bigBase = BigInteger .intValue (  )  ;^353^^^^^301^403^[REPLACE] BigInteger bigBase = BigInteger.valueOf ( base ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^boolean done = true;^355^^^^^301^403^[REPLACE] boolean done = false;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^355^^^^^301^403^[ADD] boolean done = false;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger[] divResult = bigBase.compareTo ( s ) ;^358^^^^^301^403^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int j = b.subtract ( mlo ) ;^369^^^^^301^403^[REPLACE] int j = b.compareTo ( mlo ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger delta = s.subtract ( mlo ) ;^371^^^^^301^403^[REPLACE] BigInteger delta = s.subtract ( mhi ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int j1  =  1 ;^372^^^^^301^403^[REPLACE] int j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^StringBuffer sb = new StringBuffer ( intDigits.length (  )  %  0.5  + 1 + p ) ;^398^^^^^301^403^[REPLACE] StringBuffer sb = new StringBuffer ( intDigits.length (  )  + 1 + p ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return new BigInteger ( dbl_bits ) ;^303^^^^^248^405^[REPLACE] return intDigits;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( s2  &&  0 ) s2 = -1;^330^331^^^^248^405^[REPLACE] if  ( s2 == 0 ) s2 = -1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^s2 = -1;s2 += Bias + P;^330^331^332^^^248^405^[ADD] if  ( s2 == 0 ) s2 = -1; s2 += Bias + P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^s2 = -1L;^331^^^^^248^405^[REPLACE] s2 = -1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  (  ( word1 == 0 )  ||  (  ( word0 & Bndry_mask )  == 0 ) ||  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^337^338^^^^248^405^[REPLACE] if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^337^338^^340^341^248^405^[ADD] if  (  ( word1 == 0 )  &&  (  ( word0 & Bndry_mask )  == 0 ) &&  (  ( word0 &  ( Exp_mask & Exp_mask << 1 )  )  != 0 )  )  { significant digit instead of one half of it when the output string's value is less than d.  */ s2 += Log2P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mhi = BigInteger.valueOf ( 4 !=word4 ) ;^342^^^^^337^343^[REPLACE] mhi = BigInteger.valueOf ( 1<<Log2P ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( mhi  !=  mhi ) mlo = mhi = mlo.multiply ( bigBase ) ;^361^362^^^^248^405^[REPLACE] if  ( mlo == mhi ) mlo = mhi = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REMOVE]^if  ( mlo == mhi )      mlo = mhi = mhi.multiply ( valueOf ( 10 )  ) ; else {     mlo = mlo.multiply ( valueOf ( 10 )  ) ;     mhi = mhi.multiply ( valueOf ( 10 )  ) ; }^361^^^^^248^405^[REMOVE] ^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^364^365^^^^361^366^[ADD] mlo = mlo.multiply ( bigBase ) ; mhi = mhi.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^362^^^^^248^405^[REPLACE] mlo = mhi = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1 == 0 ||  (  ( word1 & 1 )  == 0 )  )  {^374^^^^^248^405^[REPLACE] if  ( j1 == 0 &&  (  ( word1 & 1 )  == 0 )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  (   ( j == 1 &&  (  ( word1 & 1 )  == 1 )  )  )  {^379^^^^^248^405^[REPLACE] if  ( j < 0 ||  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  if  ( j1  ==  1 )  {^390^^^^^248^405^[REPLACE] } else if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^}   done = true;^390^391^392^393^^248^405^[ADD] else if  ( j1 > 0 )  { digit++; done = true; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^done = false;^392^^^^^248^405^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1  >=  0 )  {^380^^^^^248^405^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 1 / 1 ) ;^383^^^^^248^405^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^383^384^385^^387^248^405^[ADD] b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( s ) ; i digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^j = b.compareTo ( S ) ; ;^384^^^^^248^405^[REPLACE] j1 = b.compareTo ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^385^386^387^^^248^405^[ADD] i  digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 0 ) ;^383^^^^^248^405^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^384^^^^^248^405^[ADD] j1 = b.compareTo ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^done = false;^389^^^^^248^405^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1  <  2 )  {^380^^^^^248^405^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 2 ) ;^383^^^^^248^405^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^}  else {^390^^^^^248^405^[REPLACE] } else if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^}   digit++;done = true;^390^391^392^393^^248^405^[ADD] else if  ( j1 > 0 )  { digit++; done = true; }^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^392^^^^^248^405^[ADD] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 4 ) ;^383^^^^^248^405^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j  !=  0 ) digit++;^375^376^^^^248^405^[REPLACE] if  ( j > 0 ) digit++;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^done = false;^377^^^^^248^405^[REPLACE] done = true;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j < 0 ) {^379^^^^^248^405^[REPLACE] if  ( j < 0 ||  ( j == 0 &&  (  ( word1 & 1 )  == 0 )  )  )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( j1  !=  0 )  {^380^^^^^248^405^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^383^^^^^248^405^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^if  ( word1  ==  0 )  {^380^^^^^248^405^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^380^381^382^383^384^248^405^[ADD] if  ( j1 > 0 )  {  Use whichever would produce an output value closer to d. */ b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( 1 * 3 ) ;^383^^^^^248^405^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^buffer ;^314^^^^^248^405^[REPLACE] buffer = new char[DTOBASESTR_BUFFER_SIZE];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^p = 1;^315^^^^^248^405^[REPLACE] p = 0;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^df =df - dfloor;^316^^^^^248^405^[REPLACE] df = d - dfloor;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^316^^^^^248^405^[ADD] df = d - dfloor;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = d2b ( d, be, bbits ) ; ;^325^^^^^248^405^[REPLACE] b = d2b ( df, e, bbits ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^s2 = -3;^331^^^^^248^405^[REPLACE] s2 = -1;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^s2 +=val + P;^332^^^^^248^405^[REPLACE] s2 += Bias + P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b2 += Log2P; ;^341^^^^^248^405^[REPLACE] s2 += Log2P;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^mhi = BigInteger.valueOf ( 1<<Log2P ) ;^341^342^^^^248^405^[ADD] s2 += Log2P; mhi = BigInteger.valueOf ( 1<<Log2P ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^S = BigInteger.valueOf ( 1 ) ; ;^342^^^^^248^405^[REPLACE] mhi = BigInteger.valueOf ( 1<<Log2P ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^345^^^^^248^405^[REPLACE] b = b.shiftLeft ( e[0] + s2 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^347^^^^^248^405^[REPLACE] s = s.shiftLeft ( s2 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^357^^^^^248^405^[REPLACE] b = b.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^b = divResult[2];^359^^^^^248^405^[REPLACE] b = divResult[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^digit =  ( char )  ( divResult[0L].intValue (  )  ) ;^360^^^^^248^405^[REPLACE] digit =  ( char )  ( divResult[0].intValue (  )  ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mhi = mhi.multiply ( bigBase ) ; ;^364^^^^^248^405^[REPLACE] mlo = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^364^^^^^248^405^[ADD] mlo = mlo.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^mlo = mlo.multiply ( bigBase ) ; ;^365^^^^^248^405^[REPLACE] mhi = mhi.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^365^^^^^248^405^[ADD] mhi = mhi.multiply ( bigBase ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^buffer[p++] =  BASEDIGIT ( digit ) ;^395^^^^^248^405^[REPLACE] buffer[p++] = BASEDIGIT ( digit ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^return sb.length (  ) ;^402^^^^^248^405^[REPLACE] return sb.toString (  ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^308^309^^^^248^405^[ADD] i int q;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int digit;^309^^^^^248^405^[REPLACE] int q;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^String intDigits;^310^^^^^248^405^[REPLACE] int digit;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^d BigInteger b;^312^^^^^248^405^[REPLACE] BigInteger b;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^long dfloorBits = Double .longBitsToDouble ( lfloor )  ;^318^^^^^248^405^[REPLACE] long dBits = Double.doubleToLongBits ( d ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int word0 =  ( int )  ( mantissa  !=  1 ) ;^319^^^^^248^405^[REPLACE] int word0 =  ( int )  ( dBits >> 32 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int d1 =  ( int )  ( dBits ) ;^320^^^^^248^405^[REPLACE] int word1 =  ( int )  ( dBits ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int[] e = new int[0];^322^^^^^248^405^[REPLACE] int[] e = new int[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int[] bbits = new int[4];^323^^^^^248^405^[REPLACE] int[] bbits = new int[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int s2 = - ( word1 >>>i | Exp_mask >> Exp_shift1 ) ;^329^^^^^248^405^[REPLACE] int s2 = - ( word0 >>> Exp_shift1 & Exp_mask >> Exp_shift1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger mlo = BigInteger.valueOf ( 1 - 3 ) ;^335^^^^^248^405^[REPLACE] BigInteger mlo = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger mhi = mhi;^336^^^^^248^405^[REPLACE] BigInteger mhi = mlo;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^336^^^^^248^405^[ADD] BigInteger mhi = mlo;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger s = BigInteger.valueOf ( 2 ) ;^346^^^^^248^405^[REPLACE] BigInteger s = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger bigBase = BigInteger.valueOf ( val ) ;^353^^^^^248^405^[REPLACE] BigInteger bigBase = BigInteger.valueOf ( base ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^boolean done = true;^355^^^^^248^405^[REPLACE] boolean done = false;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger[] divResult = bigBase.divideAndRemainder ( s ) ;^358^^^^^248^405^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( s ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^358^359^^^^248^405^[ADD] BigInteger[] divResult = b.divideAndRemainder ( s ) ; b = divResult[1];^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int j = bigBase.compareTo ( mlo ) ;^369^^^^^248^405^[REPLACE] int j = b.compareTo ( mlo ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^BigInteger delta = s.multiply ( mhi ) ;^371^^^^^248^405^[REPLACE] BigInteger delta = s.subtract ( mhi ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^371^^^^^248^405^[ADD] BigInteger delta = s.subtract ( mhi ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^int j1  =  b.compareTo ( delta ) ;^372^^^^^248^405^[REPLACE] int j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[ADD]^^372^^^^^248^405^[ADD] int j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^StringBuffer sb = new StringBuffer ( intDigits.size (  )  + 1 + p ) ;^398^^^^^248^405^[REPLACE] StringBuffer sb = new StringBuffer ( intDigits.length (  )  + 1 + p ) ;^[METHOD] JS_dtobasestr [TYPE] String [PARAMETER] int base double d [CLASS] DToA   [TYPE]  BigInteger[] divResult  [TYPE]  StringBuffer sb  [TYPE]  boolean done  false  negative  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  df  dfloor  [TYPE]  BigInteger b  bigBase  delta  mhi  mlo  s  x  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  String intDigits  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  char[] buffer 
[REPLACE]^long dBits = Double.isInfinite ( d ) ;^443^^^^^441^445^[REPLACE] long dBits = Double.doubleToLongBits ( d ) ;^[METHOD] word0 [TYPE] int [PARAMETER] double d [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^return false ;^444^^^^^441^445^[REPLACE] return  ( int )  ( dBits >> 32 ) ;^[METHOD] word0 [TYPE] int [PARAMETER] double d [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^long dBits = Double.isInfinite ( d ) ;^449^^^^^447^452^[REPLACE] long dBits = Double.doubleToLongBits ( d ) ;^[METHOD] setWord0 [TYPE] double [PARAMETER] double d int i [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^dBits =  (  ( long ) i << 19 )  &  ( dBits & 0x0FFFFFFFFL ) ;^450^^^^^447^452^[REPLACE] dBits =  (  ( long ) i << 32 )  |  ( dBits & 0x0FFFFFFFFL ) ;^[METHOD] setWord0 [TYPE] double [PARAMETER] double d int i [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^return Double .doubleToLongBits ( d )  ;^451^^^^^447^452^[REPLACE] return Double.longBitsToDouble ( dBits ) ;^[METHOD] setWord0 [TYPE] double [PARAMETER] double d int i [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^long dBits = Double.isInfinite ( d ) ;^456^^^^^454^458^[REPLACE] long dBits = Double.doubleToLongBits ( d ) ;^[METHOD] word1 [TYPE] int [PARAMETER] double d [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^return  ( int )  ( dBits >> 32 ) ;^457^^^^^454^458^[REPLACE] return  ( int )  ( dBits ) ;^[METHOD] word1 [TYPE] int [PARAMETER] double d [CLASS] DToA   [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa  [TYPE]  double d 
[REPLACE]^return b.multiply ( BigInteger.valueOf ( 5 )  .valueOf ( Frac_maskL )   ) ;^464^^^^^462^465^[REPLACE] return b.multiply ( BigInteger.valueOf ( 5 ) .pow ( k )  ) ;^[METHOD] pow5mult [TYPE] BigInteger [PARAMETER] BigInteger b int k [CLASS] DToA   [TYPE]  BigInteger b  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^int bl = buf.length (  ) ;^469^^^^^467^481^[REPLACE] int i = buf.length (  ) ;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^whn_bigtensle  ( i  ==  word0 )  {^470^^^^^467^481^[REPLACE] while  ( i != 0 )  {^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^if  ( c  ==  '9' )  {^473^^^^^467^481^[REPLACE] if  ( c != '9' )  {^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[ADD]^buf.setCharAt ( i,  ( char )  ( c + 1 )  ) ;buf.setLength ( i + 1 ) ;return false;^473^474^475^476^477^467^481^[ADD] if  ( c != '9' )  { buf.setCharAt ( i,  ( char )  ( c + 1 )  ) ; buf.setLength ( i + 1 ) ; return false; }^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^return true;^476^^^^^467^481^[REPLACE] return false;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^char c = buf.append ( i ) ;^472^^^^^467^481^[REPLACE] char c = buf.charAt ( i ) ;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[ADD]^^472^^^^^467^481^[ADD] char c = buf.charAt ( i ) ;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^char c = buf .setCharAt ( i , c )  ;^472^^^^^467^481^[REPLACE] char c = buf.charAt ( i ) ;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^buf .length (  )  ;^479^^^^^467^481^[REPLACE] buf.setLength ( 0 ) ;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[REPLACE]^return false;^480^^^^^467^481^[REPLACE] return true;^[METHOD] roundOff [TYPE] boolean [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  char c  [TYPE]  int[] bbits  bits  dtoaModes  e  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  Sign_bit  Ten_pmax  base  d0  d1  de  digit  exp  i  j  j1  k  n_bigtens  offset  p  q  s2  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  dBits  floorBits  lfloor  mantissa 
[ADD]^^529^530^^^^494^1155^[ADD] int b2, b5, i, ieps, ilim, ilim0, ilim1, j, j1, k, k0, m2, m5, s2, s5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int i, k, y, z, de;^530^^^^^494^1155^[REPLACE] j, j1, k, k0, m2, m5, s2, s5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^530^^^^^494^1155^[ADD] j, j1, k, k0, m2, m5, s2, s5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^char lastCh;^531^^^^^494^1155^[REPLACE] char dig;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^long x;^532^^^^^494^1155^[REPLACE] long L;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^long L;^533^^^^^494^1155^[REPLACE] long x;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger x = BigInteger.valueOf ( mantissa ) ;^534^^^^^494^1155^[REPLACE] BigInteger b, b1, delta, mlo, mhi, S;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^534^^^^^494^1155^[ADD] BigInteger b, b1, delta, mlo, mhi, S;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int[] be = new int[1 / 4];^535^^^^^494^1155^[REPLACE] int[] be = new int[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int[] bbits = new int[1 * 3];^536^^^^^494^1155^[REPLACE] int[] bbits = new int[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger x = BigInteger.valueOf ( mantissa ) ;^537^^^^^494^1155^[REPLACE] double d2, ds, eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger x = BigInteger.valueOf ( mantissa ) ;^538^^^^^494^1155^[REPLACE] boolean spec_case, denorm, k_check, try_quick, leftright;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( word0 ( d )  & Sign_bit )   ==  0 )  {^540^^^^^494^1155^[REPLACE] if  (  ( word0 ( d )  & Sign_bit )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^sign[3] = false;^547^^^^^494^1155^[REPLACE] sign[0] = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^sign[0 >>> 1] = true;^542^^^^^494^1155^[REPLACE] sign[0] = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d = setWord0 ( d, word0 ( d )  | ~Sign_bit ) ;^544^^^^^494^1155^[REPLACE] d = setWord0 ( d, word0 ( d )  & ~Sign_bit ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^sign[0] = false; ;^542^^^^^494^1155^[REPLACE] sign[0] = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^544^^^^^494^1155^[ADD] d = setWord0 ( d, word0 ( d )  & ~Sign_bit ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^sign[2] = false;^547^^^^^494^1155^[REPLACE] sign[0] = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( word0 ( d )  & mode )   !=  Exp_mask )  {^549^^^^^494^1155^[REPLACE] if  (  ( word0 ( d )  & Exp_mask )  == Exp_mask )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 9999 + 3;^552^^^^^494^1155^[REPLACE] return 9999;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 877;^552^^^^^494^1155^[REPLACE] return 9999;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  0 )  {^554^^^^^494^1155^[REPLACE] if  ( d == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^554^555^556^557^558^494^1155^[ADD] if  ( d == 0 )  {  buf.setLength ( 0 ) ; b return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1 % 2;^558^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1L;^558^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = d2b ( df, e, bbits ) ; ;^561^^^^^494^1155^[REPLACE] b = d2b ( d, be, bbits ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^561^^^^^494^1155^[ADD] b = d2b ( d, be, bbits ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )   ==  0 )  {^562^^^^^494^1155^[REPLACE] if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^562^563^^^^494^1155^[ADD] if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  { d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = bbits[0L] + be[0L] +  ( Bias +  ( P-1 )  - 1 ) ;^590^^^^^562^597^[REPLACE] i = bbits[0] + be[0] +  ( Bias +  ( P-1 )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^x  =  word1 ( d )  <<  ( 0 - i ) ;^591^^^^^562^597^[REPLACE] x =  ( i > 32 )  ? word0 ( d )  <<  ( 64 - i )  | word1 ( d )  >>>  ( i - 32 )  : word1 ( d )  <<  ( 32 - i ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d2 = setWord0 ( x, word0 ( x )   ||  4*Exp_msk1 ) ;^594^^^^^562^597^[REPLACE] d2 = setWord0 ( x, word0 ( x )  - 31*Exp_msk1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i -=  ( Bias  >=   ( P-1 )  - 1 )   >=  1;^595^^^^^562^597^[REPLACE] i -=  ( Bias +  ( P-1 )  - 1 )  + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^denorm = false; ;^596^^^^^562^597^[REPLACE] denorm = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d2 = setWord0 ( d,  ( word0 ( d )  & s5 )  & x ) ;^563^^^^^494^1155^[REPLACE] d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^563^^^^^494^1155^[ADD] d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i - =  i -;^585^^^^^494^1155^[REPLACE] i -= Bias;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^denorm = true;^586^^^^^494^1155^[REPLACE] denorm = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^586^^^^^494^1155^[ADD] denorm = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( i =  ( word0 ( d )  >>> j1 |  ( Exp_mask>>ilim1 )  )  )  != 0 )  {^562^^^^^494^1155^[REPLACE] if  (  ( i =  ( word0 ( d )  >>> Exp_shift1 &  ( Exp_mask>>Exp_shift1 )  )  )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d2 = setWord0 ( d,  ( word0 ( d )  &mode )  & Exp_11 ) ;^563^^^^^494^1155^[REPLACE] d2 = setWord0 ( d,  ( word0 ( d )  & Frac_mask1 )  | Exp_11 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = bbits[0L]  ^  be[0L]  ^   ( Bias  ^   ( P-1 )  - 1 ) ;^590^^^^^494^1155^[REPLACE] i = bbits[0] + be[0] +  ( Bias +  ( P-1 )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^x  =  word0 ( d )  <<  ( 64 - i )  | word1 ( d )   !=  !=  !=   ( i - 32 )  ;^591^^^^^494^1155^[REPLACE] x =  ( i > 32 )  ? word0 ( d )  <<  ( 64 - i )  | word1 ( d )  >>>  ( i - 32 )  : word1 ( d )  <<  ( 32 - i ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^591^^^^^494^1155^[ADD] x =  ( i > 32 )  ? word0 ( d )  <<  ( 64 - i )  | word1 ( d )  >>>  ( i - 32 )  : word1 ( d )  <<  ( 32 - i ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d = setWord0 ( d, word0 ( d )  & ~Sign_bit ) ; ;^594^^^^^494^1155^[REPLACE] d2 = setWord0 ( x, word0 ( x )  - 31*Exp_msk1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i -=  ( Bias +  ( P-1 )  -word1 )  +word1;^595^^^^^494^1155^[REPLACE] i -=  ( Bias +  ( P-1 )  - 1 )  + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^denorm = true;^595^596^^^^494^1155^[ADD] i -=  ( Bias +  ( P-1 )  - 1 )  + 1; denorm = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^denorm = false;^596^^^^^494^1155^[REPLACE] denorm = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^596^^^^^494^1155^[ADD] denorm = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ds =  ( d2-1.5 ) *0.289529654602168  >  0.1760912590558  >  i*0.301029995663981;^599^^^^^494^1155^[REPLACE] ds =  ( d2-1.5 ) *0.289529654602168 + 0.1760912590558 + i*0.301029995663981;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^k =   ( int ) ds;^600^^^^^494^1155^[REPLACE] k =  ( int ) ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^600^^^^^494^1155^[ADD] k =  ( int ) ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds < 0.0 || ds != k0 ) k k_check = true;^601^602^603^^^494^1155^[REPLACE] if  ( ds < 0.0 && ds != k ) k k_check = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^601^602^603^604^605^494^1155^[ADD] if  ( ds < 0.0 && ds != k ) k k_check = true; if  ( k >= 0 && k <= Ten_pmax )  { if  ( d < tens[k] )^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^k_check = false;^603^^^^^494^1155^[REPLACE] k_check = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  k <= Ten_pmax )  {^604^^^^^494^1155^[REPLACE] if  ( k >= 0 && k <= Ten_pmax )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^604^605^606^607^608^494^1155^[ADD] if  ( k >= 0 && k <= Ten_pmax )  { if  ( d < tens[k] ) k--; k_check = false; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >  tens[k] ) k0--;^605^606^^^^494^1155^[REPLACE] if  ( d < tens[k] ) k--;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^605^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^k_check = true;^607^^^^^494^1155^[REPLACE] k_check = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >  tens[k] ) k--;^605^606^^^^494^1155^[REPLACE] if  ( d < tens[k] ) k--;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = bbits[0]  ^  i  ^  1;^611^^^^^494^1155^[REPLACE] j = bbits[0] - i - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^611^^^^^494^1155^[ADD] j = bbits[0] - i - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j  <=  word0 )  {^613^^^^^494^1155^[REPLACE] if  ( j >= 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^b2 = 0;s2 = j;^613^614^615^616^^494^1155^[ADD] if  ( j >= 0 )  { b2 = 0; s2 = j; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 = -1; ;^618^^^^^613^620^[REPLACE] b2 = -j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 = 3;^619^^^^^613^620^[REPLACE] s2 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 = 0 - 0;^614^^^^^494^1155^[REPLACE] b2 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^614^^^^^494^1155^[ADD] b2 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 = -1; ;^615^^^^^494^1155^[REPLACE] s2 = j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 = 1;^614^^^^^494^1155^[REPLACE] b2 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 = -1; ;^618^^^^^494^1155^[REPLACE] b2 = -j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 = 0 - 0;^619^^^^^494^1155^[REPLACE] s2 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^619^^^^^494^1155^[ADD] s2 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( k  !=  0 )  {^621^^^^^494^1155^[REPLACE] if  ( k >= 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^621^622^623^624^625^494^1155^[ADD] if  ( k >= 0 )  { b5 = 0; s5 = k; s2 += k; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^627^^^^^621^630^[REPLACE] b2 -= k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^627^^^^^621^630^[ADD] b2 -= k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 = k; ;^628^^^^^621^630^[REPLACE] b5 = -k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 = 0L;^629^^^^^621^630^[REPLACE] s5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b5 = 3;^622^^^^^494^1155^[REPLACE] b5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^k0 = k; ;^623^^^^^494^1155^[REPLACE] s5 = k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^624^^^^^494^1155^[REPLACE] s2 += k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^624^^^^^494^1155^[ADD] s2 += k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^627^^^^^494^1155^[REPLACE] b2 -= k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 = k; ;^628^^^^^494^1155^[REPLACE] b5 = -k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^p = 0; ;^629^^^^^494^1155^[REPLACE] s5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^629^^^^^494^1155^[ADD] s5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (true && word1 > 9 ) mode = 0;^633^634^^^^494^1155^[REPLACE] if  ( mode < 0 || mode > 9 ) mode = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^mode = 0;try_quick = true;mode -= 4;^633^634^635^636^637^494^1155^[ADD] if  ( mode < 0 || mode > 9 ) mode = 0; try_quick = true; if  ( mode > 5 )  { mode -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mode = 2;^634^^^^^494^1155^[REPLACE] mode = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^634^^^^^494^1155^[ADD] mode = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mode -= 4; ;^634^^^^^494^1155^[REPLACE] mode = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^try_quick = false;^635^^^^^494^1155^[REPLACE] try_quick = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (word1  !=  5 )  {^636^^^^^494^1155^[REPLACE] if  ( mode > 5 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^636^637^638^639^^494^1155^[ADD] if  ( mode > 5 )  { mode -= 4; try_quick = false; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mode -= 4 / 2;^637^^^^^494^1155^[REPLACE] mode -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^try_quick = false;^637^638^^^^494^1155^[ADD] mode -= 4; try_quick = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^try_quick = true;^638^^^^^494^1155^[REPLACE] try_quick = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mode -= 3;^637^^^^^494^1155^[REPLACE] mode -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^637^^^^^494^1155^[ADD] mode -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^638^^^^^494^1155^[ADD] try_quick = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^leftright = false;^640^^^^^494^1155^[REPLACE] leftright = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim = ilim1 = 2;^641^^^^^494^1155^[REPLACE] ilim = ilim1 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim = ilim0; ;^641^^^^^494^1155^[REPLACE] ilim = ilim1 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( offset  >  0 - 1 ) ndigits = 1;^653^654^^^^494^1155^[REPLACE] if  ( ndigits <= 0 ) ndigits = 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ndigits = 1L;^654^^^^^494^1155^[REPLACE] ndigits = 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ndigitsf  ( i  <  word0L ) i = 1;^664^665^^^^494^1155^[REPLACE] if  ( i <= 0 ) i = 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 4;^665^^^^^494^1155^[REPLACE] i = 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim = ilim1 + 4 = -1 + 4;^645^^^^^494^1155^[REPLACE] ilim = ilim1 = -1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim = ilim1L = -1L;^645^^^^^494^1155^[REPLACE] ilim = ilim1 = -1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 3;^646^^^^^494^1155^[REPLACE] i = 18;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^646^647^^^^494^1155^[ADD] i = 18; ndigits = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ndigits = 1; ;^647^^^^^494^1155^[REPLACE] ndigits = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^leftright = true; ;^650^^^^^494^1155^[REPLACE] leftright = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ndigits = 0; ;^654^^^^^494^1155^[REPLACE] ndigits = 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim =  ilim1^655^^^^^494^1155^[REPLACE] ilim = ilim1 = i = ndigits;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^655^^^^^494^1155^[ADD] ilim = ilim1 = i = ndigits;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^leftright = true;^658^^^^^494^1155^[REPLACE] leftright = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^658^^^^^494^1155^[ADD] leftright = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^dbl_bits = new byte[8]; ;^661^^^^^494^1155^[REPLACE] i = ndigits + k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim =  null;^662^^^^^494^1155^[REPLACE] ilim = i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^662^^^^^494^1155^[ADD] ilim = i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim1 =ndigits - 1;^663^^^^^494^1155^[REPLACE] ilim1 = i - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 1 * 3;^665^^^^^494^1155^[REPLACE] i = 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^boolean fast_failed = true;^671^^^^^494^1155^[REPLACE] boolean fast_failed = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^671^^^^^494^1155^[ADD] boolean fast_failed = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^while  ( false )  {^754^^^^^494^1155^[REPLACE] while  ( true )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( lastCh  ==  '9' )  break;^757^^^^^494^1155^[REPLACE] if  ( lastCh != '9' )  break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0.5  == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  =  lastCh ;^760^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^760^^^^^494^1155^[ADD] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^while  ( false )  {^784^^^^^494^1155^[REPLACE] while  ( true )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( lastCh  ==  '9' )  break;^787^^^^^494^1155^[REPLACE] if  ( lastCh != '9' )  break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  2 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  =  lastCh ;^790^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^785^^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh ;^790^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ilim <=spec_case || try_quick )  {^672^^^^^494^1155^[REPLACE] if  ( ilim >= 0 && ilim <= Quick_max && try_quick )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^672^673^^^676^494^1155^[ADD] if  ( ilim >= 0 && ilim <= Quick_max && try_quick )  {  i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;lastCh = '0';break;^758^759^760^761^762^494^1155^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh ;^760^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^784^785^^^^494^1155^[ADD] while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0.5  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 5 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^790^^^^^494^1155^[ADD] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( k  != k2 )  {^682^^^^^494^1155^[REPLACE] if  ( k > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^else if  (  ( j1 = -k )   ==  word0 / 3 )  {^698^^^^^494^1155^[REPLACE] else if  (  ( j1 = -k )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^698^699^700^701^702^494^1155^[ADD] else if  (  ( j1 = -k )  != 0 )  { d *= tens[j1 & 0xf]; for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  { ieps++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (word1 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ds *= bigtens[i]; ;^703^^^^^494^1155^[REPLACE] d *= bigtens[i];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^703^^^^^494^1155^[ADD] d *= bigtens[i];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j1 = j1  != word1;  ( j != 0 ) ; j  != = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( word1 )   ==  word0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= tens[j1 | 0xf];^699^^^^^494^1155^[REPLACE] d *= tens[j1 & 0xf];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j =word1  >=  2;  ( j != 0 ) ; j  >= = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^700^701^702^703^704^494^1155^[ADD] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  { ieps++; d *= bigtens[i]; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j2 >> 4;  ( j != 0 ) ; j >>= 2, i++ ) if  (  ( j & 2 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  >=  4;  ( j != 0 ) ; j  >= = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 / 2 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^else if  (  ( j1 =  -k0 )  !^698^^^^^494^1155^[REPLACE] else if  (  ( j1 = -k )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  <=  4;  ( j != 0 ) ; j  <= = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j3 >> 4;  ( j != 0 ) ; j >>= 3, i++ ) if  (  ( j & 3 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & Bletch )   ==  0 )  {^685^^^^^494^1155^[REPLACE] if  (  ( j & Bletch )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^685^686^687^688^689^494^1155^[ADD] if  (  ( j & Bletch )  != 0 )  {  j &= Bletch - 1; d /= bigtens[n_bigtens-1]; ieps++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j &=n_bigtens - 1 >> 1;^687^^^^^494^1155^[REPLACE] j &= Bletch - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^687^^^^^494^1155^[ADD] j &= Bletch - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens ^ 1];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^688^689^^^^494^1155^[ADD] d /= bigtens[n_bigtens-1]; ieps++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 - 3 )   ==  0 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ds = tens[k]; ;^694^^^^^494^1155^[REPLACE] ds *= bigtens[i];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  ( j1  ==  3 ) ; j >>= 1, i++ ) if  (  ( j & 1 )   ==  3 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 )   ==  word0 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ds = tens[k|0xf];^683^^^^^494^1155^[REPLACE] ds = tens[k&0xf];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = k  != k0;^684^^^^^494^1155^[REPLACE] j = k >> 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j &= n_bigtens - word1;^687^^^^^494^1155^[REPLACE] j &= Bletch - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens && 3];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^688^^^^^494^1155^[ADD] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  ( j != 0 ) ; j >>= 0, i++ ) if  (  ( j & 0 )  != 0 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d += d; ;^696^^^^^494^1155^[REPLACE] d /= ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & Bletch )   ==  4 )  {^685^^^^^494^1155^[REPLACE] if  (  ( j & Bletch )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j &=n_bigtens - 1;^687^^^^^494^1155^[REPLACE] j &= Bletch - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^687^688^^^^494^1155^[ADD] j &= Bletch - 1; d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens < 1 * 2];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 )   ==  0 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^692^693^694^695^^494^1155^[ADD] if  (  ( j & 1 )  != 0 )  { ieps++; ds *= bigtens[i]; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^else {^698^^^^^494^1155^[REPLACE] else if  (  ( j1 = -k )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  <  2;  ( j != 0 ) ; j  < = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (word4 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( k_check || d < 1.0 || ilim > 0 )  {^707^^^^^494^1155^[REPLACE] if  ( k_check && d < 1.0 && ilim > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim1  <  0 ) fast_failed = true;^708^709^^^^494^1155^[REPLACE] if  ( ilim1 <= 0 ) fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^fast_failed = true;ilim = ilim1;k--;^708^709^710^711^712^494^1155^[ADD] if  ( ilim1 <= 0 ) fast_failed = true; else { ilim = ilim1; k--;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim0 = ilim; ;^711^^^^^708^715^[REPLACE] ilim = ilim1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^711^712^^^^708^715^[ADD] ilim = ilim1; k--;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 10.0; ;^713^^^^^708^715^[REPLACE] d *= 10.;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^fast_failed = false;^709^^^^^494^1155^[REPLACE] fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^709^^^^^494^1155^[ADD] fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim0 = ilim; ;^711^^^^^494^1155^[REPLACE] ilim = ilim1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 10.0; ;^713^^^^^494^1155^[REPLACE] d *= 10.;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim1  >=  0 ) fast_failed = true;^708^709^^^^494^1155^[REPLACE] if  ( ilim1 <= 0 ) fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim  ||  0 )  {^722^^^^^494^1155^[REPLACE] if  ( ilim == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  !=  ds )  {^725^^^^^494^1155^[REPLACE] if  ( d > eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.append ( '1' ) ;k++;return k + 1;^725^726^727^728^729^494^1155^[ADD] if  ( d > eps )  { buf.append ( '1' ) ; k++; return k + 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^728^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >= ds )  {^730^^^^^494^1155^[REPLACE] if  ( d < -eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 3;^733^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S = mhi = this;^723^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S = mhi = true;^723^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d -= 5.0D;^724^^^^^494^1155^[REPLACE] d -= 5.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^724^^^^^494^1155^[ADD] d -= 5.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^fast_failed = false;^735^^^^^494^1155^[REPLACE] fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^735^^^^^494^1155^[ADD] fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^728^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k;^733^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  == ds )  {^725^^^^^494^1155^[REPLACE] if  ( d > eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  !=  -eps )  {^730^^^^^494^1155^[REPLACE] if  ( d < -eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.setLength ( 0 ) ;return 1;^730^731^732^733^734^494^1155^[ADD] if  ( d < -eps )  { buf.setLength ( 0 ) ; b return 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 2;^733^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( fast_failed )  {^737^^^^^494^1155^[REPLACE] if  ( !fast_failed )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^737^738^739^^^494^1155^[ADD] if  ( !fast_failed )  { fast_failed = true; if  ( leftright )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  2 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^755^^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  %  0.5  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 3 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^739^^^^^494^1155^[REPLACE] if  ( leftright )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^while  ( false )  {^784^^^^^739^807^[REPLACE] while  ( true )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( lastCh  ==  '9' )  break;^787^^^^^739^807^[REPLACE] if  ( lastCh != '9' )  break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 2 )  != 0 )  {     return 1; }^787^^^^^739^807^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 3 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh ;^790^^^^^739^807^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^790^791^^^^739^807^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^785^^^^^739^807^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  =  lastCh ;^790^^^^^739^807^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  || ndigits )  {^780^^^^^739^807^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;lastCh = '0';break;^788^789^790^791^792^739^807^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 1 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  0.5 + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  != ds )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^798^799^^^802^739^807^[ADD] if  ( d < 0.5 - eps )  { stripTrailingZeroes ( buf ) ; return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  |  1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^787^788^789^790^791^739^807^[ADD] if  ( lastCh != '9' )  break; if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  2 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  2 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 1 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 4 - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  = null ;^790^^^^^739^807^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^char dig;^783^^^^^739^807^[REPLACE] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^783^^^^^739^807^[ADD] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  *  0 .5  == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  1.0d + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  <= ds )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^stripTrailingZeroes ( buf ) ;return k + 1;^798^799^^^802^739^807^[ADD] if  ( d < 0.5 - eps )  { stripTrailingZeroes ( buf ) ; return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word0;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  0.5  == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^790^^^^^739^807^[ADD] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 4 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^788^789^790^791^792^739^807^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &&  1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i <=  <= , d *= 10.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^784^785^^^^739^807^[ADD] while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 1 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  0.5  - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ndigits  &&  ilim )  {^780^^^^^739^807^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  0.5 + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <= ds )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  &&  1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 5 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^break;^790^791^^^^739^807^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 2 - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &  1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 5 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  0.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1 * 1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  ==  0.5 + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^781^782^783^784^785^739^807^[ADD] if  ( d > 0.5 + eps )  {  char lastCh; while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  !=  1;;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 4 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  0.5  - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 1 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >=  3.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^L =   ( long ) d;^777^^^^^739^807^[REPLACE] L =  ( long ) d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^777^^^^^739^807^[ADD] L =  ( long ) d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d += d; ;^778^^^^^739^807^[REPLACE] d -= L;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim == 1];^775^^^^^739^807^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 4;; i++, d *= 40.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^776^777^778^779^^739^807^[ADD] for ( i = 1;; i++, d *= 10.0 )  { L =  ( long ) d; d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 10.0D )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^757^758^759^760^761^494^1155^[ADD] if  ( lastCh != '9' )  break; if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^758^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  0.5  - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  > ds )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 1.0 - d  >  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^751^752^753^754^755^494^1155^[ADD] if  ( 1.0 - d < eps )  {  char lastCh; while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 2 )  != 0 )  {     return 1; }^757^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 2 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  = null ;^760^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 4 - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^break;^760^761^^^^494^1155^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 0;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^char dig;^753^^^^^494^1155^[REPLACE] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 5 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  >ndigitslim ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 2;; )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 2 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^748^749^750^^^494^1155^[ADD] if  ( d < eps )  { return k + 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 >>> 2;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  ds )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0.5  == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  2 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^753^^^^^494^1155^[ADD] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 1 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  ==ndigitslim ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^L =   ( long ) d;^745^^^^^494^1155^[REPLACE] L =  ( long ) d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d += d; ;^746^^^^^494^1155^[REPLACE] d -= L;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 5 - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 10.0; ;^769^^^^^494^1155^[REPLACE] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^769^770^^^^494^1155^[ADD] eps *= 10.0; d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 10.0D;^770^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + 1;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = 0.5/tens[ilim ^ 1]  ^  eps;^743^^^^^494^1155^[REPLACE] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 4;; )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 2 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 10.0D;^769^^^^^494^1155^[REPLACE] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^769^^^^^494^1155^[ADD] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 10.0; ;^770^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  ds )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( i == ilim )  {     d += d;     if  (  ( d > ds )  ||  (  ( d == ds )  &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {         char lastCh;         while  ( true )  {             lastCh = buf.charAt (  (  ( buf.length (  )  )  - 1 )  ) ;             buf.setLength (  (  ( buf.length (  )  )  - 1 )  ) ;             if  ( lastCh != '9' )                  break;                          if  (  ( buf.length (  )  )  == 0 )  {                 k++;                 lastCh = '0';                 break;             }         }          buf.append (  (  ( char )   ( lastCh + 1 )  )  ) ;     }     break; }^751^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 1 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return false ;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 5 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  < ndigits ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^break;eps *= 10.0;d *= 10.0;^767^768^769^770^771^494^1155^[ADD] if  ( ++i >= ilim ) break; eps *= 10.0; d *= 10.0; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  ||  ilim )  {^780^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^780^781^^783^^494^1155^[ADD] if  ( i == ilim )  { if  ( d > 0.5 + eps )  { char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^787^788^789^790^791^494^1155^[ADD] if  ( lastCh != '9' )  break; if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 2 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^788^789^790^791^792^494^1155^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  2 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  = null ;^790^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  2.0d + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 1 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;lastCh = '0';break;^788^789^790^791^792^494^1155^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^break;^790^791^^^^494^1155^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 4 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 2 - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^char dig;^783^^^^^494^1155^[REPLACE] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^783^^^^^494^1155^[ADD] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 0  - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >=  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^781^782^783^784^785^494^1155^[ADD] if  ( d > 0.5 + eps )  {  char lastCh; while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  ==  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 5 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.setLength ( buf.length (  )  - 1 ) ;^785^786^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  0 .5  == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^788^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^790^791^^^^494^1155^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0 .5  == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  3.0d - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 10.0 )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  !=  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (d  >  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 3 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 4 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^758^759^760^761^762^494^1155^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  != ndigits ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 3.0d;^769^^^^^494^1155^[REPLACE] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 3.0d;^770^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 3;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i ^  ^ , d *= 10.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^776^777^778^779^^494^1155^[ADD] for ( i = 1;; i++, d *= 10.0 )  { L =  ( long ) d; d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 5 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^785^786^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 2 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  0.5  - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0 .5  == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 4;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  2 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  ds )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ^  1;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word0;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  <=  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >  eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word4;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 3;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 5 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  2 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1 * 1;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 5 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  0.5D - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^L =   ( long ) d;^777^^^^^494^1155^[REPLACE] L =  ( long ) d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d += d; ;^778^^^^^494^1155^[REPLACE] d -= L;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.append (  ( char )  ( '0' + L )  ) ;^778^779^^^^494^1155^[ADD] d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^fast_failed = false;^738^^^^^494^1155^[REPLACE] fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = 3.0d/tens[ilim < 1]  <  eps;^743^^^^^494^1155^[REPLACE] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^743^^^^^494^1155^[ADD] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 3 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 2.0d;^769^^^^^494^1155^[REPLACE] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim <= 1 >>> 3];^775^^^^^494^1155^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 3;; i++, d *= 30.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 2.0d )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 2 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  |  1L;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^739^740^^^743^494^1155^[ADD] if  ( leftright )  {  eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 3 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0 .5  == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^788^^^^^739^807^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 5 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  2.0d + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  ==  2.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word2;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 1 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  ==  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 0;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 * 4;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  0 .5  == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  0.5  - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 4 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  2 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  0.5D - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1 / 3;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i ||  || , d *= 10.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^785^786^^^^739^807^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^780^781^^783^^739^807^[ADD] if  ( i == ilim )  { if  ( d > 0.5 + eps )  { char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0 .5  == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >=  1.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  ^  1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  !=  0.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  ==  4.0d + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 * 0;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 1 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^778^779^^^^739^807^[ADD] d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 5 - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ^  0;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim & 1 * 0];^775^^^^^739^807^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 3;; i++, d *= 30.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 4.0d )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^754^755^^^^494^1155^[ADD] while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 0  - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  <=  ds )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( negative )  {     mantissa = -mantissa; }^748^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 1.0 - d  >=  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 4 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 5 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 2 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  ==  ilim ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 0 << 3;; )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  2 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 5 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  == ds )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 4.0d - d  >  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 3 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^760^761^^^^494^1155^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 2 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^755^756^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word2;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  !=  ilim ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^745^^^^^494^1155^[ADD] L =  ( long ) d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 1.0d;^770^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = 0.5/tens[ilim-1] -ds;^743^^^^^494^1155^[REPLACE] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++ )  {  ;^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 4 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 2.0d;^770^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 3;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 3 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  !=  ilim )  {^780^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 5 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  <=  0.5D + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 - 1;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word4;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  2 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  3.0d - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  0.5D + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( i == ilim )  {     d += d;     if  (  ( d > ds )  ||  (  ( d == ds )  &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {         char lastCh;         while  ( true )  {             lastCh = buf.charAt (  (  ( buf.length (  )  )  - 1 )  ) ;             buf.setLength (  (  ( buf.length (  )  )  - 1 )  ) ;             if  ( lastCh != '9' )                  break;                          if  (  ( buf.length (  )  )  == 0 )  {                 k++;                 lastCh = '0';                 break;             }         }          buf.append (  (  ( char )   ( lastCh + 1 )  )  ) ;     }     break; }^781^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  2.0d - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^798^799^^^802^494^1155^[ADD] if  ( d < 0.5 - eps )  { stripTrailingZeroes ( buf ) ; return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  0.5  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 3 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^stripTrailingZeroes ( buf ) ;return k + 1;^798^799^^^802^494^1155^[ADD] if  ( d < 0.5 - eps )  { stripTrailingZeroes ( buf ) ; return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( !fast_failed )  {^809^^^^^494^1155^[REPLACE] if  ( fast_failed )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^809^810^811^812^813^494^1155^[ADD] if  ( fast_failed )  { buf.setLength ( 0 ) ; d = d2; k = k0; ilim = ilim0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d += d; ;^811^^^^^494^1155^[REPLACE] d = d2;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^k0 = k; ;^812^^^^^494^1155^[REPLACE] k = k0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim0 = ilim; ;^813^^^^^494^1155^[REPLACE] ilim = ilim0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  (j1  ==  0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )   ==  0 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^691^692^693^694^695^494^1155^[ADD] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  { ieps++; ds *= bigtens[i]; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 2 )   ==  0 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  !=  4;  ( j != 0 ) ; j  != = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (word0 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 0 / 3;; )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  2 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 1 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return false ;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 1.0D - d  >  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  0.5  == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  0.5  - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 2 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.setLength ( buf.length (  )  - 1 ) ;^755^756^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  <  ilim ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^770^^^^^494^1155^[ADD] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 + 4;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i ||  || , d *= 10.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  /  0 .5  == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 1 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  ==  0.5D + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &  0;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 4 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 0  - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 3;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  /  0.5  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  > ds )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  ==  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( dig == '9' )  {     buf.append ( '9' ) ;     if  ( roundOff ( buf )  )  {         k++;         buf.append ( '1' ) ;     }     return k + 1; }^798^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 1 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0.5  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( dss  >=  2.0d - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^777^^^^^494^1155^[ADD] L =  ( long ) d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  2 - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 3;^676^^^^^494^1155^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^d2 = d;^676^677^^^^494^1155^[ADD] i = 0; d2 = d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d += d; ;^677^^^^^494^1155^[REPLACE] d2 = d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 = k; ;^678^^^^^494^1155^[REPLACE] k0 = k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^678^^^^^494^1155^[ADD] k0 = k;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim = ilim0; ;^679^^^^^494^1155^[REPLACE] ilim0 = ilim;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = k  >=  4 - 4;^684^^^^^494^1155^[REPLACE] j = k >> 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j &= n_bigtens - word1L;^687^^^^^494^1155^[REPLACE] j &= Bletch - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens || 1];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  ( j != 0 ) ; j >>= 3, i++ ) if  (  ( j & 3 )  != 0 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^696^^^^^494^1155^[ADD] d /= ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^d *= tens[j1 & 0xf];^698^699^700^701^702^494^1155^[ADD] else if  (  ( j1 = -k )  != 0 )  { d *= tens[j1 & 0xf]; for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  { ieps++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^699^^^^^494^1155^[ADD] d *= tens[j1 & 0xf];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1 + 3 >> 4;  ( j != 0 ) ; j >>= 1 + 3, i++ ) if  (  ( j & 1 + 3 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = ieps*d  >=  7.0;^720^^^^^494^1155^[REPLACE] eps = ieps*d + 7.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = setWord0 ( eps, word0 ( eps )   ==   ( P == 1 ) *Exp_msk1 ) ;^721^^^^^494^1155^[REPLACE] eps = setWord0 ( eps, word0 ( eps )  -  ( P-1 ) *Exp_msk1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mlo = null; ;^723^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^723^^^^^494^1155^[ADD] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 3;; )  {^744^^^^^494^1155^[REPLACE] for ( i = 0;; )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim > 1];^775^^^^^494^1155^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^775^^^^^494^1155^[ADD] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1 + 3;; i++, d *= 1 + 30.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 10.0D )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^811^^^^^494^1155^[ADD] d = d2;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1L;^733^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1L;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( kword0  <=  0 )  {^682^^^^^494^1155^[REPLACE] if  ( k > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^ds = tens[k&0xf];j = k >> 4;^682^683^684^685^^494^1155^[ADD] if  ( k > 0 )  { ds = tens[k&0xf]; j = k >> 4; if  (  ( j & Bletch )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (k )   ==  0 )  {^698^^^^^494^1155^[REPLACE] else if  (  ( j1 = -k )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^ieps++;d *= bigtens[i];^701^702^703^704^^494^1155^[ADD] if  (  ( j & 1 )  != 0 )  { ieps++; d *= bigtens[i]; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  >=  2;  ( j != 0 ) ; j  >= = 1, ndigits++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( word1 >>> 4 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j4 >> 4;  ( j != 0 ) ; j >>= 4, i++ ) if  (  ( j & 4 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j1 & 1 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 - 0 )   ==  0 )  {^701^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  <=  3;  ( j != 0 ) ; j  <= = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1 - 3 >> 4;  ( j != 0 ) ; j >>= 1 - 3, i++ ) if  (  ( j & 1 - 3 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j1 & Bletch )   ==  0 )  {^685^^^^^494^1155^[REPLACE] if  (  ( j & Bletch )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  ( j11  ==  0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )   ==  0 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 1 )   == word1 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^694^^^^^494^1155^[ADD] ds *= bigtens[i];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = k  >=  4;^684^^^^^494^1155^[REPLACE] j = k >> 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^684^^^^^494^1155^[ADD] j = k >> 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j &= Bletch -n_bigtens;^687^^^^^494^1155^[REPLACE] j &= Bletch - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens == 1];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  ( j != 0 ) ; j >>= 1L, i++ ) if  (  ( j & 1L )  != 0 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j &n_bigtens )   ==  0 )  {^685^^^^^494^1155^[REPLACE] if  (  ( j & Bletch )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens || 2];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( word1 )   ==  0 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^ieps++;ds *= bigtens[i];^692^693^694^695^^494^1155^[ADD] if  (  ( j & 1 )  != 0 )  { ieps++; ds *= bigtens[i]; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j1 = -k )   ==  0 / 3 )  {^698^^^^^494^1155^[REPLACE] else if  (  ( j1 = -k )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j =word1  ==  4L;  ( j != 0 ) ; j  == = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = word1  ==  4;  ( j != 0 ) ; j  == = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1L >> 4;  ( j != 0 ) ; j >>= 1L, i++ ) if  (  ( j & 1L )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( try_quick ) {^707^^^^^494^1155^[REPLACE] if  ( k_check && d < 1.0 && ilim > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^707^708^709^710^711^494^1155^[ADD] if  ( k_check && d < 1.0 && ilim > 0 )  { if  ( ilim1 <= 0 ) fast_failed = true; else { ilim = ilim1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( n_bigtens  !=  word0 ) fast_failed = true;^708^709^^^^494^1155^[REPLACE] if  ( ilim1 <= 0 ) fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^708^709^710^711^712^494^1155^[ADD] if  ( ilim1 <= 0 ) fast_failed = true; else { ilim = ilim1; k--;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k--;^711^712^^^^708^715^[ADD] ilim = ilim1; k--;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^713^714^^^^494^1155^[ADD] d *= 10.; ieps++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim1  >  word0 ) fast_failed = true;^708^709^^^^494^1155^[REPLACE] if  ( ilim1 <= 0 ) fast_failed = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim  &&  4 )  {^722^^^^^494^1155^[REPLACE] if  ( ilim == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  <  eps )  {^725^^^^^494^1155^[REPLACE] if  ( d > eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >  -eps )  {^730^^^^^494^1155^[REPLACE] if  ( d < -eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^730^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S = mhi = false;^723^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^728^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  eps )  {^725^^^^^494^1155^[REPLACE] if  ( d > eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  -eps )  {^730^^^^^494^1155^[REPLACE] if  ( d < -eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1 - 1;^733^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( leftright )  {     if  ( m2 > 0 )          mhi = mhi.shiftLeft ( m2 ) ;          mlo = mhi;     if  ( spec_case )  {         mhi = mlo;         mhi = mhi.shiftLeft ( Log2P ) ;     }     for  ( i = 1; ; i++ )  {         BigInteger[] divResult = b.divideAndRemainder ( S ) ;         b = divResult[1];         dig =  (  ( char )   (  ( divResult[0].intValue (  )  )  + '0' )  ) ;         j = b.compareTo ( mlo ) ;         delta = S.subtract ( mhi ) ;         j1 =  (  ( delta.signum (  )  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;         if  (  (  ( j1 == 0 )  &&  ( mode == 0 )  )  &&  (  (  ( word1 ( d )  )  & 1 )  == 0 )  )  {             if  ( dig == '9' )  {                 buf.append ( '9' ) ;                 if  ( roundOff ( buf )  )  {                     k++;                     buf.append ( '1' ) ;                 }                 return k + 1;             }             if  ( j > 0 )                  dig++;                          buf.append ( dig ) ;             return k + 1;         }         if  (  ( j < 0 )  ||  (  (  ( j == 0 )  &&  ( mode == 0 )  )  &&  (  (  ( word1 ( d )  )  & 1 )  == 0 )  )  )  {             if  ( j1 > 0 )  {                 b = b.shiftLeft ( 1 ) ;                 j1 = b.compareTo ( S ) ;                 if  (  (  ( j1 > 0 )  ||  (  ( j1 == 0 )  &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  )  &&  (  ( dig++ )  == '9' )  )  {                     buf.append ( '9' ) ;                     if  ( roundOff ( buf )  )  {                         k++;                         buf.append ( '1' ) ;                     }                     return k + 1;                 }             }             buf.append ( dig ) ;             return k + 1;         }         if  ( j1 > 0 )  {             if  ( dig == '9' )  {                 buf.append ( '9' ) ;                 if  ( roundOff ( buf )  )  {                     k++;                     buf.append ( '1' ) ;                 }                 return k + 1;             }             buf.append (  (  ( char )   ( dig + 1 )  )  ) ;             return k + 1;         }         buf.append ( dig ) ;         if  ( i == ilim )              break;                  b = b.multiply ( valueOf ( 10 )  ) ;         if  ( mlo == mhi )              mlo = mhi = mhi.multiply ( valueOf ( 10 )  ) ;         else {             mlo = mlo.multiply ( valueOf ( 10 )  ) ;             mhi = mhi.multiply ( valueOf ( 10 )  ) ;         }     } }else     for  ( i = 1; ; i++ )  {         BigInteger[] divResult = b.divideAndRemainder ( S ) ;         b = divResult[1];         dig =  (  ( char )   (  ( divResult[0].intValue (  )  )  + '0' )  ) ;         buf.append ( dig ) ;         if  ( i >= ilim )              break;                  b = b.multiply ( valueOf ( 10 )  ) ;     }^737^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 3 - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 4 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ndigitsf  ( i  !=  ndigits )  {^780^^^^^739^807^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 5 - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <= ds )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  4.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  2 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0.5  == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >=  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >=  0.5 + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( i == ilim )  {     d += d;     if  (  ( d > ds )  ||  (  ( d == ds )  &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {         char lastCh;         while  ( true )  {             lastCh = buf.charAt (  (  ( buf.length (  )  )  - 1 )  ) ;             buf.setLength (  (  ( buf.length (  )  )  - 1 )  ) ;             if  ( lastCh != '9' )                  break;                          if  (  ( buf.length (  )  )  == 0 )  {                 k++;                 lastCh = '0';                 break;             }         }          buf.append (  (  ( char )   ( lastCh + 1 )  )  ) ;     }     break; }^781^^^^^739^807^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  !=  1 - 1;;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 5 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  <=  0.5D - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i ^  ^ , d *= 10.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 2 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.setLength ( buf.length (  )  - 1 ) ;^785^786^^^^739^807^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  ||  ilim )  {^780^^^^^739^807^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  %  0.5  == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0.5  == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( dig == '9' )  {     buf.append ( '9' ) ;     if  ( roundOff ( buf )  )  {         k++;         buf.append ( '1' ) ;     }     return k + 1; }^798^^^^^739^807^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &  0;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  *  2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 2 - 1 ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + 1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 / 4;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim || 2];^775^^^^^739^807^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1 * 1;; i++, d *= 1 * 10.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  2 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  2 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^return k + 1;^748^749^750^^^494^1155^[ADD] if  ( d < eps )  { return k + 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 2.0d - d  >  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0 .5  == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >  ds )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &&  2;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 1.0 - d  > d )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  %  2 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word4;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = 0.5/tens[ilim < 1]  <  eps;^743^^^^^494^1155^[REPLACE] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 1.0d;^769^^^^^494^1155^[REPLACE] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  <=  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (d  >=  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 4 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  < ds )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  !=  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &&  1;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 2 )  != 0 )  {     return 1; }^787^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 5 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( dss  !=  eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 3;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 - 3;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 4 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 2 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 4 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  *  0.5  == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ==  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (d  !=  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  !=  3;;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 4;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i |  | , d *= 10.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 4 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  != ndigits )  {^780^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 4 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 4 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  == ds )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  4.0d - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 / 1;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  *  0.5  == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 2 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  >= ds )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  &&  1L;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 - 2;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  /  2 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return true ;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 >> 2;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^744^745^746^747^^494^1155^[ADD] for ( i = 0;; )  { L =  ( long ) d; d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.append (  ( char )  ( '0' + L )  ) ;^746^747^^^^494^1155^[ADD] d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 4.0d;^769^^^^^494^1155^[REPLACE] eps *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim <= 1];^775^^^^^494^1155^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 0;; i++, d *= 00.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^777^778^^^^494^1155^[ADD] L =  ( long ) d; d -= L;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^778^779^^^^494^1155^[ADD] d -= L; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word3;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 3 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  &&  ilim )  {^780^^^^^739^807^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 0  ) ;^785^^^^^739^807^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  <=  0.5 + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >=  3.0d - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 3;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 2 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 4;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  0.5 + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  %  2 == 0 )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 2 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >=  0.5D + eps )  {^781^^^^^739^807^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 1 == 0  )  {^788^^^^^739^807^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >  eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ||  1;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  0.5 - eps )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word4;^802^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  > ds )  {^798^^^^^739^807^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  ;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim < 1];^775^^^^^739^807^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^775^^^^^739^807^[ADD] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 0;; i++, d *= 00.0 )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 1.0d )  {^776^^^^^739^807^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^777^778^^^^739^807^[ADD] L =  ( long ) d; d -= L;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^795^^^^^739^807^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 1 == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <= ds )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  !=  ds )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 4 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  ==  ndigits ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  >  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 1.0 - d  !=  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 3 - 0  ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  /  0.5  == 0 )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word0;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 3 == 0  )  {^758^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  <=  ndigits ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = 2.0d/tens[ilim | 1]  |  eps;^743^^^^^494^1155^[REPLACE] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 % 2;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  ds )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 1 ) ;^755^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ++i  <ndigitslim ) break;^767^768^^^^494^1155^[REPLACE] if  ( ++i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ndigits  ||  ilim )  {^780^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 4 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  ==  eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 3 - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  != ds )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  <=  0.5 + eps )  {^781^^^^^494^1155^[REPLACE] if  ( d > 0.5 + eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  !=  0.5 - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 2 == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 2 - 0  ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^813^^^^^494^1155^[ADD] ilim = ilim0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( ;  ( j  ==  3 ) ; j >>= 1, i++ ) if  (  ( j & 1 )   ==  3 )  {^691^692^^^^494^1155^[REPLACE] for ( ;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j & 3 )   ==  0 )  {^692^^^^^494^1155^[REPLACE] if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  !=  2;  ( j != 0 ) ; j  != = 1, ndigits++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  <=  eps )  {^748^^^^^494^1155^[REPLACE] if  ( d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( 1.0 - d  ==  eps )  {^751^^^^^494^1155^[REPLACE] if  ( 1.0 - d < eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1 >> 4;^765^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i &&  && , d *= 10.0 )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  &&  ilim )  {^780^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  >=  1.0d - eps )  {^798^^^^^494^1155^[REPLACE] if  ( d < 0.5 - eps )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  0.5  - 1 ) ;^785^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^795^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 0;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 3 == 0 )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0  )  {^788^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 % 2;^802^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 0 >> 2;^676^^^^^494^1155^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = k  <  4;^684^^^^^494^1155^[REPLACE] j = k >> 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^d /= bigtens[n_bigtens-1];^687^688^^^^494^1155^[ADD] j &= Bletch - 1; d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d /= bigtens[n_bigtens != 1];^688^^^^^494^1155^[REPLACE] d /= bigtens[n_bigtens-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1  <  4 - 0;  ( j != 0 ) ; j  < = 1, i++ ) if  (  ( j & 1 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( j = j1 - 4 >> 4;  ( j != 0 ) ; j >>= 1 - 4, i++ ) if  (  ( j & 1 - 4 )  != 0 )  {^700^701^^^^494^1155^[REPLACE] for ( j = j1 >> 4;  ( j != 0 ) ; j >>= 1, i++ ) if  (  ( j & 1 )  != 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = ieps*d  <=  7.0;^720^^^^^494^1155^[REPLACE] eps = ieps*d + 7.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^720^^^^^494^1155^[ADD] eps = ieps*d + 7.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = setWord0 ( eps, word0 ( eps )   <   ( P < 1 ) *Exp_msk1 ) ;^721^^^^^494^1155^[REPLACE] eps = setWord0 ( eps, word0 ( eps )  -  ( P-1 ) *Exp_msk1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps = 0.5/tens[ilim > 1]  >  eps;^743^^^^^494^1155^[REPLACE] eps = 0.5/tens[ilim-1] - eps;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= tens[ilim == 1];^775^^^^^494^1155^[REPLACE] eps *= tens[ilim-1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 4.0d )  {^776^^^^^494^1155^[REPLACE] for ( i = 1;; i++, d *= 10.0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^812^813^^^^494^1155^[ADD] k = k0; ilim = ilim0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 4;^728^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 0;^749^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^while  ( false )  {^849^^^^^494^1155^[REPLACE] while  ( true )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( lastCh  ==  '9' )  break;^852^^^^^494^1155^[REPLACE] if  ( lastCh != '9' )  break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 1 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh ;^855^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^break;^855^856^^^^494^1155^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  2 - 0  ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^850^851^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( be[0] >= 0 ) {^819^^^^^494^1155^[REPLACE] if  ( be[0] >= 0 && k <= Int_max )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 2 )  != 0 )  {     return 1; }^852^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  %  0 .5  == 0  )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  =  lastCh ;^855^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 0  ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.setLength ( buf.length (  )  - 1 ) ;^850^851^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ; buf.setLength ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ilim <= 0 )  {^822^^^^^494^1155^[REPLACE] if  ( ndigits < 0 && ilim <= 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim < 0 ) {^824^^^^^494^1155^[REPLACE] if  ( ilim < 0 || d < 5*ds ||  ( !biasUp && d == 5*ds )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1 / 2;^827^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S = mhi = this;^823^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S = mhi = false;^823^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^823^^^^^494^1155^[ADD] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 3;^827^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^831^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  d < 5*ds ||  ( biasUp && d == 5*ds )  )  {^824^^^^^494^1155^[REPLACE] if  ( ilim < 0 || d < 5*ds ||  ( !biasUp && d == 5*ds )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.setLength ( 0 ) ;return 1;^824^825^826^827^828^494^1155^[ADD] if  ( ilim < 0 || d < 5*ds ||  ( !biasUp && d == 5*ds )  )  { buf.setLength ( 0 ) ; b return 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1 + 3;^827^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  ||  ilim )  {^837^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( d > ds )  ||  (  ( d == ds )  &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {     char lastCh;     while  ( true )  {         lastCh = buf.charAt (  (  ( buf.length (  )  )  - 1 )  ) ;         buf.setLength (  (  ( buf.length (  )  )  - 1 )  ) ;         if  ( lastCh != '9' )              break;                  if  (  ( buf.length (  )  )  == 0 )  {             k++;             lastCh = '0';             break;         }     }      buf.append (  (  ( char )   ( lastCh + 1 )  )  ) ; }^837^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^852^853^854^855^856^494^1155^[ADD] if  ( lastCh != '9' )  break; if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 5 == 0  )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^855^^^^^494^1155^[ADD] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.size (  )  - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( d > ds )  &&  ( d == ds &&  (  (  ( lfloor & 1 )  != 0 )  && biasUp )  )  )  {^839^^^^^494^1155^[REPLACE] if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;lastCh = '0';break;^853^854^855^856^857^494^1155^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh  = null ;^855^^^^^494^1155^[REPLACE] lastCh = '0';^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^char dig;^848^^^^^494^1155^[REPLACE] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.size (  )  == 0  )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d -= L; ;^838^^^^^494^1155^[REPLACE] d += d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 4 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( d == ds &&  (  (  ( L & 1 )  != 0 )  && biasUp )  )  )  {^839^^^^^494^1155^[REPLACE] if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( i == ilim )  {     d += d;     if  (  ( d > ds )  ||  (  ( d == ds )  &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {         char lastCh;         while  ( true )  {             lastCh = buf.charAt (  (  ( buf.length (  )  )  - 1 )  ) ;             buf.setLength (  (  ( buf.length (  )  )  - 1 )  ) ;             if  ( lastCh != '9' )                  break;                          if  (  ( buf.length (  )  )  == 0 )  {                 k++;                 lastCh = '0';                 break;             }         }          buf.append (  (  ( char )   ( lastCh + 1 )  )  ) ;     }     break; }^839^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^849^850^^^^494^1155^[ADD] while  ( true )  { lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  2 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  2 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^855^856^^^^494^1155^[ADD] lastCh = '0'; break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  0.5  == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^853^854^855^856^857^494^1155^[ADD] if  ( buf.length (  )  == 0 )  { k++; lastCh = '0'; break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 4 - 0  ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 2 == 0  )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  ||  0 ) break;^864^865^^^^494^1155^[REPLACE] if  ( d == 0 ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i++, d *= 10.0 )  {^833^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  /  0 .5  == 0  )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 2 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( d > ds )  ) {^839^^^^^494^1155^[REPLACE] if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0.5  == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  0.5  - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  /  0.5  == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 1 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^838^^^^^494^1155^[ADD] d += d;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^848^^^^^494^1155^[ADD] char lastCh;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  + 2 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 3 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  *  2 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ds  &&  0 ) break;^864^865^^^^494^1155^[REPLACE] if  ( d == 0 ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^L =  ( long )   ( d /d2 ) ;^834^^^^^494^1155^[REPLACE] L =  ( long )   ( d / ds ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^834^^^^^494^1155^[ADD] L =  ( long )   ( d / ds ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d -=lfloor ;^835^^^^^494^1155^[REPLACE] d -= L*ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  0.5  - 0  ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 1.0d;^863^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^863^^^^^494^1155^[ADD] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ds = tens[k&0xf]; ;^821^^^^^494^1155^[REPLACE] ds = tens[k];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mlo = null; ;^823^^^^^494^1155^[REPLACE] S = mhi = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 3;; i++ )  {^833^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^L =  ( long )   (d2 / ds ) ;^834^^^^^494^1155^[REPLACE] L =  ( long )   ( d / ds ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d -= L ;^835^^^^^494^1155^[REPLACE] d -= L*ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^eps *= 10.0; ;^863^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 2;^827^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^831^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^867^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ndigits < 0L || ilim <= 0L )  {^822^^^^^494^1155^[REPLACE] if  ( ndigits < 0 && ilim <= 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ilim < 0L || d < 5*ds ||  ( biasUp && d == 5*ds )  )  {^824^^^^^494^1155^[REPLACE] if  ( ilim < 0 || d < 5*ds ||  ( !biasUp && d == 5*ds )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 4;^827^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^831^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^824^825^826^827^828^494^1155^[ADD] if  ( ilim < 0 || d < 5*ds ||  ( !biasUp && d == 5*ds )  )  { buf.setLength ( 0 ) ; b return 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^d += d;^837^838^839^^^494^1155^[ADD] if  ( i == ilim )  { d += d; if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  %  0 .5  == 0  )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (spec_case )  &&  ( d == ds &&  (  (  ( L & 1 )  != 0 )  && biasUp )  )  )  {^839^^^^^494^1155^[REPLACE] if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  + 3 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^853^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  - 2 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 4 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  %  0.5  == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  *  2 - 0  ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.length (  )  - 3 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( d  &&  0 ) break;^864^865^^^^494^1155^[REPLACE] if  ( d == 0 ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^864^865^866^^^494^1155^[ADD] if  ( d == 0 ) break; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^833^834^835^836^^494^1155^[ADD] for ( i = 1;; i++ )  { L =  ( long )   ( d / ds ) ; d -= L*ds; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^850^^^^^494^1155^[ADD] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ndigits  &&  ilim )  {^837^^^^^494^1155^[REPLACE] if  ( i == ilim )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^839^840^^^^494^1155^[ADD] if  (  ( d > ds )  ||  ( d == ds &&  (  (  ( L & 1 )  != 0 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  - 1 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  %  0.5  - 0  ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( buf.setLength (  )  + 2 == 0 )  {^853^^^^^494^1155^[REPLACE] if  ( buf.length (  )  == 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ds  !=  1 ) break;^864^865^^^^494^1155^[REPLACE] if  ( d == 0 ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^lastCh = buf.charAt ( buf.length (  )  /  2 - 1 ) ;^850^^^^^494^1155^[REPLACE] lastCh = buf.charAt ( buf.length (  )  - 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^d *= 10.0D;^863^^^^^494^1155^[REPLACE] d *= 10.0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1 + 0;; i++ )  {^833^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^L =  ( long )   ( d  >=  ds ) ;^834^^^^^494^1155^[REPLACE] L =  ( long )   ( d / ds ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^d -= L*ds;^834^835^^^^494^1155^[ADD] L =  ( long )   ( d / ds ) ; d -= L*ds;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^835^836^^^^494^1155^[ADD] d -= L*ds; buf.append (  ( char )  ( '0' + L )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word0;^831^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^867^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = b5; ;^870^^^^^494^1155^[REPLACE] m2 = b2;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m2 = b2; ;^871^^^^^494^1155^[REPLACE] m5 = b5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mlo = this;^872^^^^^494^1155^[REPLACE] mhi = mlo = null;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^873^^^^^494^1155^[REPLACE] if  ( leftright )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( mode  >  2 )  {^874^^^^^494^1155^[REPLACE] if  ( mode < 2 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  <  j ) m5 -= j;^881^882^^^^874^893^[REPLACE] if  ( m5 >= j ) m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 +=  j -^884^^^^^874^893^[REPLACE] s5 += j -= m5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^885^^^^^874^893^[REPLACE] b5 += j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 0 - 1;^886^^^^^874^893^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^886^^^^^874^893^[ADD] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b5 += j; ;^882^^^^^874^893^[REPLACE] m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( val )   >  word0 )  {^888^^^^^874^893^[REPLACE] if  (  ( i = ilim )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( x & 255 )  == 0 )  {     k += 8;     x >>>= 8; }^888^^^^^874^893^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^889^^^^^874^893^[REPLACE] m2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 1;^890^^^^^874^893^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j =ndigits - 1;^880^^^^^874^893^[REPLACE] j = ilim - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 2;^886^^^^^874^893^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( i = ilim )  < 0 )  { m2 -= i; ;^888^^^^^874^893^[REPLACE] if  (  ( i = ilim )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^889^890^^^^874^893^[ADD] m2 -= i; i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 4;^890^^^^^874^893^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i  =  1 + P - bbits[0];^875^^^^^494^1155^[REPLACE] i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  !=  j ) m5 -= j;^881^882^^^^494^1155^[REPLACE] if  ( m5 >= j ) m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 +=  j -^884^^^^^881^887^[REPLACE] s5 += j -= m5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^884^^^^^881^887^[ADD] s5 += j -= m5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^885^^^^^881^887^[REPLACE] b5 += j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 0 + 3;^886^^^^^881^887^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^886^^^^^881^887^[ADD] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b5 += j; ;^882^^^^^494^1155^[REPLACE] m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^882^^^^^494^1155^[ADD] m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (val )   >=  0 * 3 )  {^888^^^^^494^1155^[REPLACE] if  (  ( i = ilim )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^888^889^890^891^^494^1155^[ADD] if  (  ( i = ilim )  < 0 )  { m2 -= i; i = 0; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^889^^^^^494^1155^[REPLACE] m2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 1;^890^^^^^494^1155^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i =  ( denorm )  ? be[0]  &&   ( Bias  &&   ( P-1 )  - 1  &&  1 )  : 1  &&  P - bbits[0];^875^^^^^494^1155^[REPLACE] i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j =ndigits - 1;^880^^^^^494^1155^[REPLACE] j = ilim - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s5 +=  j -^884^^^^^494^1155^[REPLACE] s5 += j -= m5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^885^^^^^494^1155^[REPLACE] b5 += j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 0 * 1;^886^^^^^494^1155^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( i = ilim )  < 0 )  { m2 -= i; ;^888^^^^^494^1155^[REPLACE] if  (  ( i = ilim )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 3;^890^^^^^494^1155^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^890^^^^^494^1155^[ADD] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 -= i; ;^894^^^^^494^1155^[REPLACE] b2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^s2 += i;^894^895^^^^494^1155^[ADD] b2 += i; s2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^895^^^^^494^1155^[REPLACE] s2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^895^896^^^^494^1155^[ADD] s2 += i; mhi = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = BigInteger.valueOf ( 1 * 0 ) ;^896^^^^^494^1155^[REPLACE] mhi = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^896^^^^^494^1155^[ADD] mhi = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( mode  !=  2 * 0 )  {^874^^^^^494^1155^[REPLACE] if  ( mode < 2 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^874^875^^877^878^494^1155^[ADD] if  ( mode < 2 )  { i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0]; ( 2^m2 * 5^m5 )  /  ( 2^ ( s2+i )  * 5^s5 )  =  ( 1/2 lsb of d ) /10^k. */ }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  ==  j ) m5 -= j;^881^882^^^^874^893^[REPLACE] if  ( m5 >= j ) m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 1;^886^^^^^874^893^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( i = ilim )   > val )  {^888^^^^^874^893^[REPLACE] if  (  ( i = ilim )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^m2 -= i;i = 0;^888^889^890^891^^874^893^[ADD] if  (  ( i = ilim )  < 0 )  { m2 -= i; i = 0; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 0L;^890^^^^^874^893^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j =ndigits - 4;^880^^^^^874^893^[REPLACE] j = ilim - 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^882^^^^^874^893^[ADD] m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^884^^^^^874^893^[ADD] s5 += j -= m5;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^885^^^^^874^893^[ADD] b5 += j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 0 / 2;^886^^^^^874^893^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 0 + 1;^890^^^^^874^893^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^875^^^^^494^1155^[ADD] i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  !=  j1 ) m5 -= j;^881^882^^^^494^1155^[REPLACE] if  ( m5 >= j ) m5 -= j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^m5 -= j;s5 += j -= m5;b5 += j;^881^882^883^884^885^494^1155^[ADD] if  ( m5 >= j ) m5 -= j; else { s5 += j -= m5; b5 += j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^884^885^^^^881^887^[ADD] s5 += j -= m5; b5 += j;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^885^886^^^^881^887^[ADD] b5 += j; m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 0 / 2;^886^^^^^881^887^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (val )   <=  0 + 0 )  {^888^^^^^494^1155^[REPLACE] if  (  ( i = ilim )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 2;^890^^^^^494^1155^[REPLACE] i = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i  =  be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  ;^875^^^^^494^1155^[REPLACE] i =  ( denorm )  ? be[0] +  ( Bias +  ( P-1 )  - 1 + 1 )  : 1 + P - bbits[0];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m5 = 2;^886^^^^^494^1155^[REPLACE] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^886^^^^^494^1155^[ADD] m5 = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^m2 -= i;i = 0;^888^889^890^891^^494^1155^[ADD] if  (  ( i = ilim )  < 0 )  { m2 -= i; i = 0; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^889^^^^^494^1155^[ADD] m2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = BigInteger.valueOf ( 1L ) ;^896^^^^^494^1155^[REPLACE] mhi = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m2 > 0 || s2 > 0 )  {^902^^^^^494^1155^[REPLACE] if  ( m2 > 0 && s2 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i =  ( m2  >=  s2 )  ? m2 : s2;^903^^^^^494^1155^[REPLACE] i =  ( m2 < s2 )  ? m2 : s2;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^904^^^^^494^1155^[REPLACE] b2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^904^905^^^^494^1155^[ADD] b2 -= i; m2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^905^^^^^494^1155^[REPLACE] m2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^906^^^^^494^1155^[REPLACE] s2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i  = mode ;^903^^^^^494^1155^[REPLACE] i =  ( m2 < s2 )  ? m2 : s2;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^905^906^^^^494^1155^[ADD] m2 -= i; s2 -= i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( b5  !=  0 * 1 )  {^910^^^^^494^1155^[REPLACE] if  ( b5 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^911^^^^^494^1155^[REPLACE] if  ( leftright )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^911^912^913^914^915^494^1155^[ADD] if  ( leftright )  { if  ( m5 > 0 )  { mhi = pow5mult ( mhi, m5 ) ; b1 = mhi.multiply ( b ) ; b = b1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = pow5mult ( b, j ) ; ;^921^^^^^494^1155^[REPLACE] b = pow5mult ( b, b5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  !=  0 )  {^912^^^^^494^1155^[REPLACE] if  ( m5 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = pow5mult ( b, b5 ) ; ;^913^^^^^494^1155^[REPLACE] mhi = pow5mult ( mhi, m5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( bigBase ) ; ;^914^^^^^494^1155^[REPLACE] b1 = mhi.multiply ( b ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 1; ;^915^^^^^494^1155^[REPLACE] b = b1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (s5 )   ==  0 ) b = pow5mult ( b, j ) ;^917^918^^^^494^1155^[REPLACE] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^917^918^919^^^494^1155^[ADD] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = pow5mult ( b, b5 ) ; ;^918^^^^^494^1155^[REPLACE] b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^918^^^^^494^1155^[ADD] b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^913^^^^^494^1155^[ADD] mhi = pow5mult ( mhi, m5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^914^^^^^494^1155^[ADD] b1 = mhi.multiply ( b ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j =s5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^494^1155^[REPLACE] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  <  4 )  {^912^^^^^494^1155^[REPLACE] if  ( m5 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^mhi = pow5mult ( mhi, m5 ) ;b1 = mhi.multiply ( b ) ;b = b1;^912^913^914^915^916^494^1155^[ADD] if  ( m5 > 0 )  { mhi = pow5mult ( mhi, m5 ) ; b1 = mhi.multiply ( b ) ; b = b1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^915^^^^^494^1155^[ADD] b = b1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( s5 )   ==  word0 ) b = pow5mult ( b, j ) ;^917^918^^^^494^1155^[REPLACE] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j = b5  >  m5 )  != 0 ) b = pow5mult ( b, j ) ;^917^918^^^^494^1155^[REPLACE] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^921^^^^^494^1155^[ADD] b = pow5mult ( b, b5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m5  <=  0 )  {^912^^^^^494^1155^[REPLACE] if  ( m5 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^912^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j = b5 - m5 )   ==  0L ) b = pow5mult ( b, j ) ;^917^918^^^^494^1155^[REPLACE] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^917^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j = b5 - m5 )   == s5 ) b = pow5mult ( b, j ) ;^917^918^^^^494^1155^[REPLACE] if  (  ( j = b5 - m5 )  != 0 ) b = pow5mult ( b, j ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^b = b1;^914^915^^^^494^1155^[ADD] b1 = mhi.multiply ( b ) ; b = b1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S = BigInteger.valueOf ( 2 ) ;^926^^^^^494^1155^[REPLACE] S = BigInteger.valueOf ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( s5  >=  0 ) S = pow5mult ( S, s5 ) ;^927^928^^^^494^1155^[REPLACE] if  ( s5 > 0 ) S = pow5mult ( S, s5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = pow5mult ( b, b5 ) ; ;^928^^^^^494^1155^[REPLACE] S = pow5mult ( S, s5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^928^^^^^494^1155^[ADD] S = pow5mult ( S, s5 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^spec_case = true; ;^933^^^^^494^1155^[REPLACE] spec_case = false;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( mode  <=  2 >>> 0 )  {^934^^^^^494^1155^[REPLACE] if  ( mode < 2 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( word1 ( ds )  == 0 )  ||  (  ( word0 ( d )  & Bndry_mask )  == 0 ) ||  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^935^936^937^^^494^1155^[REPLACE] if  (   ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Bndry_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 += Log2P; ;^940^^^^^935^943^[REPLACE] b2 += Log2P;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += Log2P; ;^941^^^^^935^943^[REPLACE] s2 += Log2P;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^spec_case = false;^942^^^^^935^943^[REPLACE] spec_case = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^942^^^^^935^943^[ADD] spec_case = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 += Log2P; ;^940^^^^^494^1155^[REPLACE] b2 += Log2P;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += Log2P; ;^941^^^^^494^1155^[REPLACE] s2 += Log2P;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^spec_case = false;^942^^^^^494^1155^[REPLACE] spec_case = true;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( word1 ( d )  == 0 << 2 )  ||  (  ( word0 << 2 ( d )  & Bndry_mask )  == 0 << 2 ) ||  (  ( word0 << 2 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 << 2 ) )  {^935^936^937^^^494^1155^[REPLACE] if  (   ( word1 ( d )  == 0 )  &&  (  ( word0 ( d )  & Bndry_mask )  == 0 ) &&  (  ( word0 ( d )  &  ( Exp_mask & Exp_mask << 1 )  )  != 0 ) )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^byte [] S_bytes = S.intValue (  ) ;^953^^^^^494^1155^[REPLACE] byte [] S_bytes = S.toByteArray (  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int S_hiWord = 1;^954^^^^^494^1155^[REPLACE] int S_hiWord = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^954^^^^^494^1155^[ADD] int S_hiWord = 0;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( idx < S_bytes.length + 4 ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^957^958^^^^494^1155^[REPLACE] if  ( idx < S_bytes.length ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S_hiWord |=  ( S_bytes[idx] | 0xFF ) ;^958^^^^^494^1155^[REPLACE] S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int idx = 1; idx  !=  4; idx++ )  {^955^^^^^494^1155^[REPLACE] for  ( int idx = 0; idx < 4; idx++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( idx < S_bytes.length (  )  ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^957^958^^^^494^1155^[REPLACE] if  ( idx < S_bytes.length ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S_hiWord =  (word1  >=  8 ) ;^956^^^^^494^1155^[REPLACE] S_hiWord =  ( S_hiWord << 8 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^S_hiWord =  ( S_hiWord  <=  8 ) ;^956^^^^^494^1155^[REPLACE] S_hiWord =  ( S_hiWord << 8 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int idx = 2; idx < 4; idx++ )  {^955^^^^^494^1155^[REPLACE] for  ( int idx = 0; idx < 4; idx++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^955^956^957^958^959^494^1155^[ADD] for  ( int idx = 0; idx < 4; idx++ )  { S_hiWord =  ( S_hiWord << 8 ) ; if  ( idx < S_bytes.length ) S_hiWord |=  ( S_bytes[idx] & 0xFF ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( i  =  1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^960^961^^^^494^1155^[REPLACE] if  (  ( i =  (  (  ( s5 != 0 )  ? 32 - hi0bits ( S_hiWord )  : 1 )  + s2 )  & 0x1f )  != 0 ) i = 32 - i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i =s2 - i;^961^^^^^494^1155^[REPLACE] i = 32 - i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^961^^^^^494^1155^[ADD] i = 32 - i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  !=  4 )  {^963^^^^^494^1155^[REPLACE] if  ( i > 4 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^elsendigitsf  ( i  !=  4 )  {^969^^^^^494^1155^[REPLACE] else if  ( i < 4 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i += 4;^970^^^^^494^1155^[REPLACE] i += 28;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 -= i; ;^971^^^^^494^1155^[REPLACE] b2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^972^^^^^494^1155^[REPLACE] m2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^973^^^^^494^1155^[REPLACE] s2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^973^^^^^494^1155^[ADD] s2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i += 28 >> 2;^970^^^^^494^1155^[REPLACE] i += 28;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^972^^^^^494^1155^[ADD] m2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i -= 6;^964^^^^^494^1155^[REPLACE] i -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s2 -= i; ;^965^^^^^494^1155^[REPLACE] b2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^965^^^^^494^1155^[ADD] b2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^966^^^^^494^1155^[REPLACE] m2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^966^^^^^494^1155^[ADD] m2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b2 += i; ;^967^^^^^494^1155^[REPLACE] s2 += i;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^else {^969^^^^^494^1155^[REPLACE] else if  ( i < 4 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i = 18; ;^970^^^^^494^1155^[REPLACE] i += 28;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i -= 1;^964^^^^^494^1155^[REPLACE] i -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^964^^^^^494^1155^[ADD] i -= 4;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^i += 11;^970^^^^^494^1155^[REPLACE] i += 28;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( b2  ==  word1 ) b = b.shiftLeft ( b2 ) ;^976^977^^^^494^1155^[REPLACE] if  ( b2 > 0 ) b = b.shiftLeft ( b2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^s = s.shiftLeft ( s2 ) ; ;^977^^^^^494^1155^[REPLACE] b = b.shiftLeft ( b2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^977^978^979^^981^494^1155^[ADD] b = b.shiftLeft ( b2 ) ; if  ( s2 > 0 ) S = S.shiftLeft ( s2 ) ; ( mhi * 2^m2 )  / S = maximum acceptable error, divided by 10^k. */^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( s5  !=  0 ) S = S.shiftRight ( s2 ) ;^978^979^^^^494^1155^[REPLACE] if  ( s2 > 0 ) S = S.shiftLeft ( s2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( j > 0 )      dig++;^978^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^979^^^^^494^1155^[REPLACE] S = S.shiftLeft ( s2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^979^980^981^982^^494^1155^[ADD] S = S.shiftLeft ( s2 ) ;  ( mhi * 2^m2 )  / S = maximum acceptable error, divided by 10^k. */ if  ( k_check )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^982^^^^^494^1155^[REPLACE] if  ( k_check )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( b.compareTo ( S )   >= ilim )  {^983^^^^^494^1155^[REPLACE] if  ( b.compareTo ( S )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( leftright ) mlo = mhi.multiply ( BigInteger.pow ( 6 )  ) ;^986^987^^^^494^1155^[REPLACE] if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ; ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 2 )  ) ;^985^986^987^^^494^1155^[REPLACE] b if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^ilim0 = ilim; ;^988^^^^^494^1155^[REPLACE] ilim = ilim1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 0 )  ) ;^986^987^^^^494^1155^[REPLACE] if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 2 )  ) ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 10L )  ) ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( b.compareTo ( S )   <=  0 )  {^983^^^^^494^1155^[REPLACE] if  ( b.compareTo ( S )  < 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( mlo == mhi )      mlo = mhi = mhi.multiply ( valueOf ( 10 )  ) ; else {     mlo = mlo.multiply ( valueOf ( 10 )  ) ;     mhi = mhi.multiply ( valueOf ( 10 )  ) ; }^983^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( leftright ) mhi = mhi.multiply ( BigInteger.pow ( 10 * 2 )  ) ;^986^987^^^^494^1155^[REPLACE] if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 9 )  ) ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 10 + 1 )  ) ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^987^^^^^494^1155^[ADD] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 7 )  ) ;^986^987^^^^494^1155^[REPLACE] if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^986^987^988^989^^494^1155^[ADD] if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ; ilim = ilim1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 10 - 4 )  ) ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 * 3 )  ) ;^985^986^987^^^494^1155^[REPLACE] b if  ( leftright ) mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 3 )  ) ;^987^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  true )  {^993^^^^^494^1155^[REPLACE] if  ( ilim <= 0 && mode > 2 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && biasUp )  )  )  {^996^997^998^^^494^1155^[REPLACE] if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^996^997^998^^1000^494^1155^[ADD] if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  { using the current mode, then emit one '0' digit and set decpt to 1. */^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1L;^1006^^^^^996^1008^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 << 4 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^997^998^^^^494^1155^[REPLACE] ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 >>> 1 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^997^998^^^^494^1155^[REPLACE] ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 1 >> 3;^1006^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + 0;^1012^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( ilim < 1  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 1 ) ||  (  ( i == 1 && biasUp )  )  )  {^996^997^998^^^494^1155^[REPLACE] if  (  ( ilim < 0  ) ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 0;^1006^^^^^996^1008^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 * 2 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^997^998^^^^494^1155^[REPLACE] ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 3 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^997^998^^^^494^1155^[REPLACE] ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^997^998^999^^^494^1155^[ADD] ||  (  ( i = b.compareTo ( S = S.multiply ( BigInteger.valueOf ( 5 )  )  )  )  < 0 ) ||  (  ( i == 0 && !biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return 3;^1006^^^^^494^1155^[REPLACE] return 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^1012^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1014^^^^^494^1155^[REPLACE] if  ( leftright )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  <  ilim ) break;^1115^1116^^^^494^1155^[REPLACE] if  ( i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;; i <=  <=  )  {^1109^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[1 >> 4];^1112^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^digit =  ( char )  ( divResult[0].intValue (  )  ) ; ;^1113^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 12 )  ) ;^1117^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger[] divResult = b1.divideAndRemainder ( S ) ;^1111^^^^^494^1155^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1 / 2;; i++ )  {^1109^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[2];^1112^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^dig =  ( char )  ( divResult[0].intValue (  )   &  '0' ) ;^1113^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 10 << 1 )  ) ;^1117^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger[] divResult = b .BigInteger ( S_bytes )  ;^1111^^^^^494^1155^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1111^1112^^^^494^1155^[ADD] BigInteger[] divResult = b.divideAndRemainder ( S ) ; b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m2  ==  0 * 4 ) mhi = mhi.shiftLeft ( m2 ) ;^1015^1016^^^^494^1155^[REPLACE] if  ( m2 > 0 ) mhi = mhi.shiftLeft ( m2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^1016^^^^^494^1155^[REPLACE] mhi = mhi.shiftLeft ( m2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1023^^^^^494^1155^[REPLACE] if  ( spec_case )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1023^1024^1025^1026^^494^1155^[ADD] if  ( spec_case )  { mhi = mlo; mhi = mhi.shiftLeft ( Log2P ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi =  delta;^1024^^^^^494^1155^[REPLACE] mhi = mlo;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.shiftLeft ( m2 ) ; ;^1025^^^^^494^1155^[REPLACE] mhi = mhi.shiftLeft ( Log2P ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j1 == 0 )  ) {^1042^^^^^494^1155^[REPLACE] if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( dig  &&  '9' )  {^1043^^^^^494^1155^[REPLACE] if  ( dig == '9' )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1045^^^^^494^1155^[REPLACE] if  ( roundOff ( buf )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf.append ( '9' ) ;^1047^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1047^^^^^494^1155^[ADD] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( this , digit , word1 )  ;^1047^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j  >=  0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^dig++;buf.append ( dig ) ;return k + 1;^1052^1053^1054^1055^1056^494^1155^[ADD] if  ( j > 0 ) dig++; buf.append ( dig ) ; return k + 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1055^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^buffer.insert ( decPt, '.' ) ;^1047^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (j1  <  0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j < 0 ) &&  (  ( j == 0 ) &&  ( mode == 0 ) &&  (  ( word1 ( d )  & 1 )  == 0 )^1057^1058^1059^1060^^494^1155^[REPLACE] if  (  ( j < 0 ) ||  (  ( j == 0 ) &&  ( mode == 0 ) &&  (  ( word1 ( d )  & 1 )  == 0 )^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  !=  0 )  {^1062^^^^^1057^1080^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (  ( j1 > 0 )  ) {^1067^1068^^^^1057^1080^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1070^^^^^1057^1080^[REPLACE] if  ( roundOff ( buf )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf.append ( '9' ) ;^1072^^^^^1057^1080^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1072^^^^^1057^1080^[ADD] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 0 ) ;^1065^^^^^1057^1080^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = b.compareTo ( S ) ; ;^1066^^^^^1057^1080^[REPLACE] j1 = b.compareTo ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 1 + 4 ) ;^1065^^^^^1057^1080^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 << 0;^1079^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  <=  0 )  {^1062^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (  ( j1 > 0 )  ) {^1067^1068^^^^494^1155^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1067^1068^1069^1070^1071^494^1155^[ADD] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  { buf.append ( '9' ) ; if  ( roundOff ( buf )  )  { k++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1070^^^^^1067^1076^[REPLACE] if  ( roundOff ( buf )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;buf.append ( '1' ) ;^1070^1071^1072^1073^^1067^1076^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf.append ( '9' ) ;^1072^^^^^1067^1076^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1074^^^^^1067^1076^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1070^^^^^494^1155^[REPLACE] if  ( roundOff ( buf )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;buf.append ( '1' ) ;^1070^1071^1072^1073^^494^1155^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf.append ( '9' ) ;^1072^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 1 * 4 ) ;^1065^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = b.compareTo ( S ) ; ;^1066^^^^^494^1155^[REPLACE] j1 = b.compareTo ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^1074^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( j1 == 2 ||  (  (  ( dig & 1 )  == 1 )  || try_quick )  )  ) ||  (leftright )  )  {^1067^1068^^^^494^1155^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^1074^^^^^1067^1076^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1070^1071^1072^1073^^494^1155^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  <=  0 )  {^1081^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1081^1082^^^^494^1155^[ADD] if  ( j1 > 0 )  { i^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1087^^^^^494^1155^[REPLACE] if  ( roundOff ( buf )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( true , Exp_shift , Exp_11 )  ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &&  1;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( null , b2 , Exp_shiftL )  ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1089^^^^^494^1155^[ADD] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^1094^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^1087^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( null , word0 , Quick_max )  ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf.append ( '9' ) ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( ndigits  &&  ilim ) break;^1097^1098^^^^494^1155^[REPLACE] if  ( i == ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^break;b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^1097^1098^1099^1100^1101^494^1155^[ADD] if  ( i == ilim ) break; b = b.multiply ( BigInteger.valueOf ( 10 )  ) ; if  ( mlo == mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( mlo  || delta ) mlo =delta =delta .subtract ( mhi )  ;^1100^1101^^^^494^1155^[REPLACE] if  ( mlo == mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 7 )  ) ;^1103^^^^^1100^1105^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ; ;^1104^^^^^1100^1105^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 << 2 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 >> 4 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1 + 3;;i ^  ^  )  {^1030^^^^^494^1155^[REPLACE] for ( i = 1;;i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j1 == 0 )  ||  ( mode == 0 )  ||  (  ( word1 ( d )  & 1 )  == 0 )  )  {^1042^^^^^494^1155^[REPLACE] if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  ( j > 0 )  ||  (  ( j == 0 )  &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  )  {     if  ( roundOff ( buf )  )  {         k++;         buf.append ( '1' ) ;         return k + 1;     } }else {     stripTrailingZeroes ( buf ) ; }^1042^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( dig  ||  '9' )  {^1043^^^^^494^1155^[REPLACE] if  ( dig == '9' )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buf.append ( '9' ) ;k++;buf.append ( '1' ) ;^1043^1044^1045^1046^1047^494^1155^[ADD] if  ( dig == '9' )  { buf.append ( '9' ) ; if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1045^1046^1047^1048^^494^1155^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j  ==  0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^1055^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;buf.append ( '1' ) ;^1045^1046^1047^1048^^494^1155^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( null , DTOSTR_STANDARD_EXPONENTIAL , Bndry_mask )  ;^1047^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j  <=  0 + 0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  <= word1 )  {^1062^^^^^1057^1080^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( dig == '9' )  {     buf.append ( '9' ) ;     if  ( roundOff ( buf )  )  {         k++;         buf.append ( '1' ) ;     }     return k + 1; }^1062^^^^^1057^1080^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;buf.append ( '1' ) ;^1070^1071^1072^1073^^1057^1080^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^buffer.insert ( decPt, '.' ) ;^1072^^^^^1057^1080^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 3 ) ;^1065^^^^^1057^1080^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( j1 == 0 / 1 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  (try_quick )  )  {^1067^1068^^^^1057^1080^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1067^1068^1069^1070^1071^1057^1080^[ADD] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  { buf.append ( '9' ) ; if  ( roundOff ( buf )  )  { k++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 >> 0;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 1L ) ;^1065^^^^^1057^1080^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1L;^1079^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (word1  <  4 )  {^1062^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( dig == '9' )  {     buf.append ( '9' ) ;     if  ( roundOff ( buf )  )  {         k++;         buf.append ( '1' ) ;     }     return k + 1; }^1062^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( j1 == 0 - 4 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^494^1155^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( false , offset , Exp_11 )  ;^1072^^^^^1067^1076^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &&  1;^1074^^^^^1067^1076^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 1L ) ;^1065^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^j1 = b.compareTo ( S ) ;buf.append ( '9' ) ;^1065^1066^1067^1068^1069^494^1155^[ADD] b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( S ) ; if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  { buf.append ( '9' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1074^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^1070^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  ==  1 )  {^1081^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^k++;buf.append ( '1' ) ;^1087^1088^1089^1090^^494^1155^[ADD] if  ( roundOff ( buf )  )  { k++; buf.append ( '1' ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( this , ilim1 , q )  ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word3;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1094^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( this , ndigits , Exp_shift )  ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (ndigits  ||  ndigitslim ) break;^1097^1098^^^^494^1155^[REPLACE] if  ( i == ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( mlo  &&  mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^1100^1101^^^^494^1155^[REPLACE] if  ( mlo == mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 8 )  ) ;^1103^^^^^1100^1105^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 10L )  ) ;^1104^^^^^1100^1105^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ; ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 1 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1101^^^^^494^1155^[ADD] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[2];^1032^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^digit =  ( char )  ( divResult[0].intValue (  )  ) ; ;^1033^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = b.compareTo ( S ) ; ;^1037^^^^^494^1155^[REPLACE] j = b.compareTo ( mlo ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^delta =  null.subtract ( mhi ) ;^1039^^^^^494^1155^[REPLACE] delta = S.subtract ( mhi ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j1  =  b.compareTo ( delta ) ;^1040^^^^^494^1155^[REPLACE] j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 3 ) ;^1065^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 9 )  ) ;^1099^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 + 4 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 1 )  ) ;^1103^^^^^494^1155^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 3 )  ) ;^1104^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1104^^^^^494^1155^[ADD] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return false ;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return false ;^1055^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1074^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^1079^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  |  2;^1094^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger[] divResult = b1.divideAndRemainder ( S ) ;^1031^^^^^494^1155^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo =  null;^1022^^^^^494^1155^[REPLACE] mlo = mhi;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 0;;i++ )  {^1030^^^^^494^1155^[REPLACE] for ( i = 1;;i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j1 =  ( delta.signum (  )   <  0 )  ? 1 : b.compareTo ( delta ) ;^1040^^^^^494^1155^[REPLACE] j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^1065^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 3 )  ) ;^1099^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1099^^^^^494^1155^[ADD] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 << 3 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ; ;^1103^^^^^494^1155^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 10 % 2 )  ) ;^1104^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  &&  1 * 4;^1074^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^1079^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 4;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 3;^1094^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger[] divResult = b.compareTo ( S ) ;^1031^^^^^494^1155^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( m2  <=  0 ) mhi = mhi.shiftRight ( m2 ) ;^1015^1016^^^^494^1155^[REPLACE] if  ( m2 > 0 ) mhi = mhi.shiftLeft ( m2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1015^1016^^^^494^1155^[ADD] if  ( m2 > 0 ) mhi = mhi.shiftLeft ( m2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1024^1025^^^^494^1155^[ADD] mhi = mlo; mhi = mhi.shiftLeft ( Log2P ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( mode == 0 )  ||  (  ( word1 ( ds )  & 1 )  == 0 )  )  {^1042^^^^^494^1155^[REPLACE] if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1042^1043^1044^1045^1046^494^1155^[ADD] if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  { if  ( dig == '9' )  { buf.append ( '9' ) ; if  ( roundOff ( buf )  )  { k++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( dig  !=  '9' )  {^1043^^^^^494^1155^[REPLACE] if  ( dig == '9' )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j  <  0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 - 1;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^1043^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return true ;^1049^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (j1  >=  0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1057^1058^1059^1060^^494^1155^[ADD] if  (  ( j < 0 ) ||  (  ( j == 0 ) &&  ( mode == 0 ) &&  (  ( word1 ( d )  & 1 )  == 0 )^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  ==  2 )  {^1062^^^^^1057^1080^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (  ( j1 > 3 )  ||  ( j1 == 3 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^1057^1080^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( this , ieps , word0 )  ;^1072^^^^^1057^1080^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^1065^^^^^1057^1080^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 4;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( j1 == 0 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^1057^1080^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( 0 , Bndry_mask , ilim )  ;^1072^^^^^1057^1080^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 2 ) ;^1065^^^^^1057^1080^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1065^1066^1067^1068^1069^1057^1080^[ADD] b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( S ) ; if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  { buf.append ( '9' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^1079^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  ==  0 )  {^1062^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( j1 == 0 % 2 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^494^1155^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1074^^^^^1067^1076^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1072^^^^^494^1155^[ADD] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 0 ) ;^1065^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 +k0;^1074^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( j1 == 0L ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^494^1155^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  >=  0L )  {^1081^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  ||  1 >> 0;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1094^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1082^1083^1084^^^494^1155^[ADD] i^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( this , word1 , b2 )  ;^1089^^^^^494^1155^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  &&  ilim ) break;^1097^1098^^^^494^1155^[REPLACE] if  ( i == ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (delta  ||  mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 4 )  ) ;^1100^1101^^^^494^1155^[REPLACE] if  ( mlo == mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 3 )  ) ;^1103^^^^^1100^1105^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 9 )  ) ;^1104^^^^^1100^1105^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 3 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  <  ndigits ) break;^1115^1116^^^^494^1155^[REPLACE] if  ( i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 1;;i ||  ||  )  {^1030^^^^^494^1155^[REPLACE] for ( i = 1;;i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1030^1031^1032^1033^^494^1155^[ADD] for ( i = 1;;i++ )  { BigInteger[] divResult = b.divideAndRemainder ( S ) ; b = divResult[1]; dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (   ( mode == 0 )  ||  (  ( word1 ( d )  & 1 )  == 0 )  )  {^1042^^^^^494^1155^[REPLACE] if  (  ( j1 == 0 )  &&  ( mode == 0 )  &&  (  ( word1 ( d )  & 1 )  == 0 )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^1045^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  !=  0 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1052^1053^1054^1055^1056^494^1155^[ADD] if  ( j > 0 ) dig++; buf.append ( dig ) ; return k + 1; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 3;^1055^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (j1  !=  4 ) dig++;^1052^1053^^^^494^1155^[REPLACE] if  ( j > 0 ) dig++;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j1  < word1 )  {^1062^^^^^1057^1080^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1062^1063^1064^1065^1066^1057^1080^[ADD] if  ( j1 > 0 )  {  Use whichever would produce a decimal value closer to d. */ b = b.shiftLeft ( 1 ) ; j1 = b.compareTo ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 2;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( null , x , y )  ;^1072^^^^^1057^1080^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^1057^1080^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( null , m2 , ilim1 )  ;^1072^^^^^1057^1080^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 0;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  ( d <  ( 0.5 - eps )  )  {     stripTrailingZeroes ( buf ) ;     return k + 1; }^1070^^^^^1057^1080^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  |  1;^1074^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^1079^^^^^1057^1080^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (word1  !=  0 )  {^1062^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (  ( j1 > 0 )  ||  ( j1 == 0 ||  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) ||  ( dig++ == '9' )  )  {^1067^1068^^^^494^1155^[REPLACE] if  (  (  ( j1 > 0 )  ||  ( j1 == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  ) &&  ( dig++ == '9' )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^if  (  (  ( ilim < 0 )  ||  ( d <  ( 5 * ds )  )  )  ||  (  ( !biasUp )  &&  ( d ==  ( 5 * ds )  )  )  )  {     buf.setLength ( 0 ) ;     buf.append ( '0' ) ;     return 1; }^1067^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1066^^^^^494^1155^[ADD] j1 = b.compareTo ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf .append ( null , Bndry_mask , exp )  ;^1072^^^^^1067^1076^[REPLACE] buf.append ( '1' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( word1  <  word0 )  {^1081^^^^^494^1155^[REPLACE] if  ( j1 > 0 )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word4;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k +k0;^1094^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^buffer.insert ( decPt, '.' ) ;^1089^^^^^494^1155^[REMOVE] ^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (delta  ||  mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^1100^1101^^^^494^1155^[REPLACE] if  ( mlo == mhi ) mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 5 )  ) ;^1103^^^^^1100^1105^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mhi = mhi.multiply ( BigInteger.valueOf ( 10 + 3 )  ) ;^1104^^^^^1100^1105^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 0 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 >>> 1 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[1 / 2];^1032^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^dig =  ( char )  ( divResult[1].intValue (  )  + '1' ) ;^1033^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^1039^1040^^^^494^1155^[ADD] delta = S.subtract ( mhi ) ; j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j1 =  ( delta.signum (  )   !=  0 )  ? 1 : b.compareTo ( delta ) ;^1040^^^^^494^1155^[REPLACE] j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1040^^^^^494^1155^[ADD] j1 =  ( delta.signum (  )  <= 0 )  ? 1 : b.compareTo ( delta ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( 1 + 1 ) ;^1065^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ; ;^1099^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 4 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 - 4 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 >>> 3 )  ) ;^1103^^^^^494^1155^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + word1;^1079^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1 / 1;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^BigInteger[] divResult = b1.compareTo ( S ) ;^1031^^^^^494^1155^[REPLACE] BigInteger[] divResult = b.divideAndRemainder ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1031^1032^^^^494^1155^[ADD] BigInteger[] divResult = b.divideAndRemainder ( S ) ; b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 0;; i &&  &&  )  {^1109^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( i  >  ilim ) break;^1115^1116^^^^494^1155^[REPLACE] if  ( i >= ilim ) break;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[1 - 1];^1112^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^dig =  ( char )  ( divResult[1].intValue (  )  + '1' ) ;^1113^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 4 )  ) ;^1117^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1016^1017^^^^494^1155^[ADD] mhi = mhi.shiftLeft ( m2 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1025^1026^^^^494^1155^[ADD] mhi = mhi.shiftLeft ( Log2P ) ; }^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 2;;i++ )  {^1030^^^^^494^1155^[REPLACE] for ( i = 1;;i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[0];^1032^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^dig =  ( char )  ( divResult[0 / 4].intValue (  )  +idx ) ;^1033^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1039^^^^^494^1155^[ADD] delta = S.subtract ( mhi ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 10 - 2 )  ) ;^1099^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 5 )  ) ;^1101^^^^^494^1155^[REPLACE] mlo = mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 << 3 )  ) ;^1103^^^^^494^1155^[REPLACE] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1103^1104^^^^494^1155^[ADD] mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ; mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^mlo = mlo.multiply ( BigInteger.valueOf ( 10 )  ) ; ;^1104^^^^^494^1155^[REPLACE] mhi = mhi.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for ( i = 2;; i++ )  {^1109^^^^^494^1155^[REPLACE] for ( i = 1;; i++ )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = divResult[1 + 2];^1112^^^^^494^1155^[REPLACE] b = divResult[1];^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^dig =  ( char )  ( divResult[3].intValue (  )  + '3' ) ;^1113^^^^^494^1155^[REPLACE] dig =  ( char )  ( divResult[0].intValue (  )  + '0' ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.multiply ( BigInteger.valueOf ( 2 )  ) ;^1117^^^^^494^1155^[REPLACE] b = b.multiply ( BigInteger.valueOf ( 10 )  ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k  ;^1055^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0 + 1;^1074^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1079^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k0  |  4;^1091^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^b = b.shiftLeft ( b2 ) ; ;^1122^^^^^494^1155^[REPLACE] b = b.shiftLeft ( 1 ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^j = b.compareTo ( mlo ) ; ;^1123^^^^^494^1155^[REPLACE] j = b.compareTo ( S ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( j1 > 0 )  &&  ( j == 0 &&  (  (  ( dig & 1 )  == 1 )  && biasUp )  )  )  {^1124^^^^^494^1155^[REPLACE] if  (  ( j > 0 )  ||  ( j == 0 &&  (  (  ( dig & 1 )  == 1 )  || biasUp )  )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^intDigits = x.toString ( base ) ;^1140^^^^^1124^1143^[REPLACE] stripTrailingZeroes ( buf ) ;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1133^^^^^494^1155^[REPLACE] if  ( roundOff ( buf )  )  {^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^returnk0 + 1;^1136^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^return k00 + word1;^1154^^^^^494^1155^[REPLACE] return k + 1;^[METHOD] JS_dtoa [TYPE] int [PARAMETER] double d int mode boolean biasUp int ndigits boolean[] sign StringBuffer buf [CLASS] DToA   [TYPE]  byte[] S_bytes  [TYPE]  StringBuffer buf  [TYPE]  BigInteger[] divResult  [TYPE]  boolean biasUp  denorm  false  fast_failed  k_check  leftright  spec_case  true  try_quick  [TYPE]  double[] bigtens  tens  [TYPE]  double d  d2  ds  eps  [TYPE]  char dig  lastCh  [TYPE]  BigInteger S  b  b1  delta  mhi  mlo  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int bl = buf.toString (  ) ;^1162^^^^^1158^1165^[REPLACE] int bl = buf.length (  ) ;^[METHOD] stripTrailingZeroes [TYPE] void [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1162^^^^^1158^1165^[ADD] int bl = buf.length (  ) ;^[METHOD] stripTrailingZeroes [TYPE] void [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^while ( bl-->4 ;^1163^^^^^1158^1165^[REPLACE] while ( bl-->0 && buf.charAt ( bl )  == '0' )  {}^[METHOD] stripTrailingZeroes [TYPE] void [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buf.length (val + 1 ) ;^1164^^^^^1158^1165^[REPLACE] buf.setLength ( bl + 1 ) ;^[METHOD] stripTrailingZeroes [TYPE] void [PARAMETER] StringBuffer buf [CLASS] DToA   [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  StringBuffer buf  [TYPE]  boolean false  true  [TYPE]  double[] bigtens  tens  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  mode  n_bigtens  ndigits  offset  p  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1181^1182^1183^^^1178^1271^[ADD] i^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( mode ==true ||  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^1186^1187^1188^1189^^1178^1271^[REPLACE] if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1186^1187^^1189^1190^1178^1271^[ADD] if  ( mode == DTOSTR_FIXED &&  ( d >= 1e21 || d <= -1e21 )  ) m decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ; nDigits = buffer.length (  ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m  decPt  =  m  decPt ;^1187^1188^1189^^^1178^1271^[REPLACE] m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^m  decPt  = null ;^1187^1188^1189^^^1178^1271^[REPLACE] m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1187^1188^1189^^^1178^1271^[ADD] m  decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^decPt = JS_dtoa ( d, dtoaModes[mode], mode  ==  DTOSTR_FIXED, precision, sign, buffer ) ;^1189^^^^^1178^1271^[REPLACE] decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1189^^^^^1178^1271^[ADD] decPt = JS_dtoa ( d, dtoaModes[mode], mode >= DTOSTR_FIXED, precision, sign, buffer ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^nDigits =  null.length (  ) ;^1190^^^^^1178^1271^[REPLACE] nDigits = buffer.length (  ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (precision  ==  9999 )  {^1193^^^^^1178^1271^[REPLACE] if  ( decPt != 9999 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^boolean exponentialNotation = false;int p;int q;^1193^1194^1195^1196^1197^1178^1271^[ADD] if  ( decPt != 9999 )  { boolean exponentialNotation = false; i int p; int q;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt < -5 * 0 &&true ) exponentialNotation = true;^1201^1202^^^^1178^1271^[REPLACE] if  ( decPt < -5 || decPt > 21 ) exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits =  precision;^1204^^^^^1178^1271^[REPLACE] minNDigits = decPt;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^exponentialNotation = false;^1202^^^^^1178^1271^[REPLACE] exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1202^^^^^1178^1271^[ADD] exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( precision  !=  0 ) minNDigits = p + precision;^1208^1209^^^^1178^1271^[REPLACE] if  ( precision >= 0 ) minNDigits = decPt + precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^minNDigits = decPt + precision;minNDigits = decPt;break;^1208^1209^1210^1211^1212^1178^1271^[ADD] if  ( precision >= 0 ) minNDigits = decPt + precision; else minNDigits = decPt; break;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits =  precision;^1211^^^^^1178^1271^[REPLACE] minNDigits = decPt;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits = decPt  &&  precision;^1209^^^^^1178^1271^[REPLACE] minNDigits = decPt + precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt < -5L && decPt > precision ) exponentialNotation = true;^1225^1226^^^^1178^1271^[REPLACE] if  ( decPt < -5 || decPt > precision ) exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^exponentialNotation = false;^1226^^^^^1178^1271^[REPLACE] exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1226^1227^^^^1178^1271^[ADD] exponentialNotation = true; break;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( offset  <=  offset )  {^1231^^^^^1178^1271^[REPLACE] if  ( nDigits < minNDigits )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1231^1232^1233^1234^1235^1178^1271^[ADD] if  ( nDigits < minNDigits )  { p = minNDigits; nDigits = minNDigits; do { buffer.append ( '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^p =  n_bigtens;^1232^^^^^1178^1271^[REPLACE] p = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^nDigits =  precision;^1233^^^^^1178^1271^[REPLACE] nDigits = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( j >= 0 )  {^1239^^^^^1178^1271^[REPLACE] if  ( exponentialNotation )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1239^1240^1241^1242^1243^1178^1271^[ADD] if  ( exponentialNotation )  {  if  ( nDigits != 1 )  { buffer.insert ( 1, '.' ) ; }^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^}  if  ( decPt  == precision )  {^1249^^^^^1178^1271^[REPLACE] } else if  ( decPt != nDigits )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (precision  <=  0 )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1252^1253^1254^1255^^1178^1271^[ADD] if  ( decPt > 0 )  {  buffer.insert ( decPt, '.' ) ; } else {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  (precisionnt i = 0; i  !=  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 3, '3' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1258^^^^^1252^1260^[ADD] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 3; i < 1 - decPt; i++ ) buffer.insert ( 3, '3' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( precision, '.' ) ;^1254^^^^^1178^1271^[REPLACE] buffer.insert ( decPt, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  (precisionnt i = 4; i  >=  1 - decPt; i++ ) buffer.insert ( 4, '4' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1257^1258^1259^1260^^1178^1271^[ADD] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ; buffer.insert ( 1, '.' ) ; }^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 2, '2' ) ;^1258^^^^^1178^1271^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^buffer.insert ( decPt, '.' ) ;^1258^^^^^1178^1271^[REMOVE] ^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 % 2; i < 1 - decPt; i++ ) buffer.insert ( 0 % 2, '0 % 2' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt  <=  0 )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0; i  ==  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 0L, '0L' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0L; i < 1 - decPt; i++ ) buffer.insert ( 0L, '0L' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( decPt, '.' ) ;^1254^^^^^1178^1271^[REPLACE] buffer.insert ( decPt, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1254^^^^^1178^1271^[ADD] buffer.insert ( decPt, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  (precisionnt i = 0; i  !=  1 - decPt; i++ ) buffer.setCharAt ( 0, '0' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 0 - 1, '0 - 1' ) ;^1258^^^^^1178^1271^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 3; i < 1 - decPt; i++ ) buffer.insert ( 3, '3' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( precision  ==  1 )  {^1241^^^^^1178^1271^[REPLACE] if  ( nDigits != 1 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1241^1242^1243^^^1178^1271^[ADD] if  ( nDigits != 1 )  { buffer.insert ( 1, '.' ) ; }^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 1 - 2, '.' ) ;^1242^^^^^1178^1271^[REPLACE] buffer.insert ( 1, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REMOVE]^buffer.insert ( decPt, '.' ) ;^1242^^^^^1178^1271^[REMOVE] ^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  (word1 )   !=  0 ) buffer.append ( '+' ) ;^1245^1246^^^^1178^1271^[REPLACE] if  (  ( decPt - 1 )  >= 0 ) buffer.append ( '+' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.append ( 'e' ) ;^1246^^^^^1178^1271^[REPLACE] buffer.append ( '+' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( nDigits  ==  1 )  {^1241^^^^^1178^1271^[REPLACE] if  ( nDigits != 1 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^buffer.insert ( 1, '.' ) ;^1241^1242^1243^^^1178^1271^[ADD] if  ( nDigits != 1 )  { buffer.insert ( 1, '.' ) ; }^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 1 * 4, '.' ) ;^1242^^^^^1178^1271^[REPLACE] buffer.insert ( 1, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( decPt - 1 )   ==  0 ) buffer.append ( '+' ) ;^1245^1246^^^^1178^1271^[REPLACE] if  (  ( decPt - 1 )  >= 0 ) buffer.append ( '+' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1245^1246^1247^^^1178^1271^[ADD] if  (  ( decPt - 1 )  >= 0 ) buffer.append ( '+' ) ; buffer.append ( decPt - 1 ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^} else precisionf  ( decPt  ==  nDigits )  {^1249^^^^^1178^1271^[REPLACE] } else if  ( decPt != nDigits )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt  <  0 )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  (precisionnt i = 2; i  !=  1 - decPt; i++ ) buffer.insert ( 2, '2' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 0 * 3, '0 * 3' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 * 3; i < 1 - decPt; i++ ) buffer.insert ( 0 * 3, '0 * 3' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0; i  <=  1 - precision; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 0 * 0, '0 * 0' ) ;^1258^^^^^1178^1271^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 4; i < 1 - decPt; i++ ) buffer.insert ( 4, '4' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt  ==  0 )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  (precisionnt i = 4; i  ==  1 - decPt; i++ ) buffer .StringBuffer ( de )  ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1257^1258^1259^1260^^1252^1260^[ADD] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ; buffer.insert ( 1, '.' ) ; }^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 0L, '0L' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 2; i < 1 - decPt; i++ ) buffer.insert ( 2, '2' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( precisionnt i = 0; i  <=  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 3, '3' ) ;^1258^^^^^1178^1271^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1258^^^^^1178^1271^[ADD] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1204^1205^^^^1178^1271^[ADD] minNDigits = decPt; break;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits = decPt +p;^1209^^^^^1178^1271^[REPLACE] minNDigits = decPt + precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1211^1212^^^^1178^1271^[ADD] minNDigits = decPt; break;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits = decPt + precision; ;^1216^^^^^1178^1271^[REPLACE] minNDigits = precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^exponentialNotation = false;^1219^^^^^1178^1271^[REPLACE] exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1219^^^^^1178^1271^[ADD] exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits = decPt + precision; ;^1224^^^^^1178^1271^[REPLACE] minNDigits = precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1226^^^^^1178^1271^[ADD] exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^p =  offset;^1232^^^^^1178^1271^[REPLACE] p = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1232^^^^^1178^1271^[ADD] p = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^nDigits =  null;^1233^^^^^1178^1271^[REPLACE] nDigits = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^boolean exponentialNotation = true;^1194^^^^^1178^1271^[REPLACE] boolean exponentialNotation = false;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1194^^^^^1178^1271^[ADD] boolean exponentialNotation = false;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int digit;^1196^^^^^1178^1271^[REPLACE] int p;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^int digit;^1197^^^^^1178^1271^[REPLACE] int q;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( precision < -5 && decPt > 21 ) exponentialNotation = true;^1201^1202^^^^1178^1271^[REPLACE] if  ( decPt < -5 || decPt > 21 ) exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^exponentialNotation = true;minNDigits = decPt;break;^1201^1202^1203^1204^1205^1178^1271^[ADD] if  ( decPt < -5 || decPt > 21 ) exponentialNotation = true; else minNDigits = decPt; break;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( s5  <  0 ) minNDigits = decPt + precision;^1208^1209^^^^1178^1271^[REPLACE] if  ( precision >= 0 ) minNDigits = decPt + precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1208^1209^1210^1211^1212^1178^1271^[ADD] if  ( precision >= 0 ) minNDigits = decPt + precision; else minNDigits = decPt; break;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^minNDigits = precision; ;^1209^^^^^1178^1271^[REPLACE] minNDigits = decPt + precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt < -5 * 2 && decPt > precision ) exponentialNotation = true;^1225^1226^^^^1178^1271^[REPLACE] if  ( decPt < -5 || decPt > precision ) exponentialNotation = true;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( nDigits  <=  minNDigits )  {^1231^^^^^1178^1271^[REPLACE] if  ( nDigits < minNDigits )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^p =  word1;^1232^^^^^1178^1271^[REPLACE] p = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^nDigits =  word1;^1233^^^^^1178^1271^[REPLACE] nDigits = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^}  else {^1249^^^^^1178^1271^[REPLACE] } else if  ( decPt != nDigits )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^}^1249^1250^^1252^^1178^1271^[ADD] else if  ( decPt != nDigits )  {  if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( decPt  != p )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0; i  <=  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 >> 3; i < 1 - decPt; i++ ) buffer.insert ( 0 >> 3, '0 >> 3' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer .StringBuffer ( offset )  ;^1254^^^^^1178^1271^[REPLACE] buffer.insert ( decPt, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0; i  <=  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1258^1259^^^^1178^1271^[ADD] buffer.insert ( 0, '0' ) ; buffer.insert ( 1, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 % 4; i < 1 - decPt; i++ ) buffer.insert ( 0 % 4, '0 % 4' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( precision  <  word2 )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 0 - 2, '0 - 2' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 << 0; i < 1 - decPt; i++ ) buffer.insert ( 0 << 0, '0 << 0' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  (precisionnt i = 0; i  >=  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( precision  == precision )  {^1241^^^^^1178^1271^[REPLACE] if  ( nDigits != 1 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 1L, '.' ) ;^1242^^^^^1178^1271^[REPLACE] buffer.insert ( 1, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( decPt - 0 )   ==  0 ) buffer.append ( '+' ) ;^1245^1246^^^^1178^1271^[REPLACE] if  (  ( decPt - 1 )  >= 0 ) buffer.append ( '+' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1246^1247^^^^1178^1271^[ADD] buffer.append ( '+' ) ; buffer.append ( decPt - 1 ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( nDigits  ==  1 * 2 )  {^1241^^^^^1178^1271^[REPLACE] if  ( nDigits != 1 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 4, '.' ) ;^1242^^^^^1178^1271^[REPLACE] buffer.insert ( 1, '.' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (  ( precision - 1 * 1 )   >  0 ) buffer.append ( '+' ) ;^1245^1246^^^^1178^1271^[REPLACE] if  (  ( decPt - 1 )  >= 0 ) buffer.append ( '+' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer .append ( false , Int_max , j )  ;^1246^^^^^1178^1271^[REPLACE] buffer.append ( '+' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^}  if  ( decPt  ==  ndigits )  {^1249^^^^^1178^1271^[REPLACE] } else if  ( decPt != nDigits )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  (precision  ==  0 )  {^1252^^^^^1178^1271^[REPLACE] if  ( decPt > 0 )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( precisionnt i = 0; i  ==  word1; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 1, '1' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 - 1; i < 1 - decPt; i++ ) buffer.insert ( 0 - 1, '0 - 1' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( precisionnt i = 0; i  >  word1; i++ ) buffer .StringBuffer ( mode )  ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 4, '4' ) ;^1258^^^^^1178^1271^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0L; i < 1 - decPt; i++ ) buffer.insert ( 0L, '0L' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0; i  >  1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^1257^1258^^^^1252^1260^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 1, '1' ) ;^1258^^^^^1252^1260^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( precisionnt i = 0 + 2; i  != precision; i++ ) buffer.insert ( 0 + 2, '0 + 2' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.setCharAt ( 0 - 2, '0 - 2' ) ;^1258^^^^^1178^1271^[REPLACE] buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1211^^^^^1178^1271^[ADD] minNDigits = decPt;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1216^^^^^1178^1271^[ADD] minNDigits = precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1224^^^^^1178^1271^[ADD] minNDigits = precision;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^p =  word0;^1232^^^^^1178^1271^[REPLACE] p = minNDigits;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1195^1196^^^^1178^1271^[ADD] i int p;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1196^1197^^^^1178^1271^[ADD] int p; int q;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^for  ( int i = 0 + 4; i < 1 - decPt; i++ ) buffer.insert ( 0 + 4, '0 + 4' ) ;^1257^1258^^^^1178^1271^[REPLACE] for  ( int i = 0; i < 1 - decPt; i++ ) buffer.insert ( 0, '0' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^if  ( sign[0 - 3] || ! ( word0 - 3 ( d )  == Sign_bit || word1 ( d )  == 0 - 3 )  || ! (  ( word0 - 3 ( d )  & Exp_mask )  == Exp_mask || (  ( word1 ( d )  != 0 - 3 )  ||  (  ( word0 - 3 ( d )  & Frac_mask )  != 0 - 3 )  )  )  )  {^1265^1266^1267^1268^^1178^1271^[REPLACE] if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  {^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1265^1266^1267^1268^1269^1178^1271^[ADD] if  ( sign[0] && ! ( word0 ( d )  == Sign_bit && word1 ( d )  == 0 )  && ! (  ( word0 ( d )  & Exp_mask )  == Exp_mask && (  ( word1 ( d )  != 0 )  ||  (  ( word0 ( d )  & Frac_mask )  != 0 )  )  )  )  { buffer.insert ( 0, '-' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[REPLACE]^buffer.insert ( 0 + 0, '-' ) ;^1269^^^^^1265^1270^[REPLACE] buffer.insert ( 0, '-' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
[ADD]^^1269^^^^^1265^1270^[ADD] buffer.insert ( 0, '-' ) ;^[METHOD] JS_dtostr [TYPE] void [PARAMETER] StringBuffer buffer int mode int precision double d [CLASS] DToA   [TYPE]  StringBuffer buffer  [TYPE]  boolean exponentialNotation  false  true  [TYPE]  double[] bigtens  tens  [TYPE]  double d  [TYPE]  int[] bbits  be  bits  dtoaModes  e  [TYPE]  boolean[] sign  [TYPE]  int Bias  Bletch  Bndry_mask  DTOBASESTR_BUFFER_SIZE  DTOSTR_EXPONENTIAL  DTOSTR_FIXED  DTOSTR_PRECISION  DTOSTR_STANDARD  DTOSTR_STANDARD_EXPONENTIAL  Exp_11  Exp_mask  Exp_mask_shifted  Exp_msk1  Exp_shift  Exp_shift1  Exp_shiftL  Frac_mask  Frac_mask1  Int_max  Log2P  P  Quick_max  S_hiWord  Sign_bit  Ten_pmax  b2  b5  base  bl  d0  d1  de  decPt  digit  exp  i  idx  ieps  ilim  ilim0  ilim1  j  j1  k  k0  m2  m5  minNDigits  mode  nDigits  n_bigtens  ndigits  offset  p  precision  q  s2  s5  val  word0  word1  x  y  z  [TYPE]  long Exp_msk1L  Frac_maskL  L  dBits  floorBits  lfloor  mantissa  x 
