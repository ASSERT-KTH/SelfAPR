[REPLACE]^static final DiagnosticType UNMATCHED_START_MARKER ;^33^34^^^^33^34^[REPLACE] static final DiagnosticType UNMATCHED_START_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_START_MARKER", "Unmatched {0}" ) ;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^static final DiagnosticType UNMATCHED_END_MARKER ;^36^37^^^^36^37^[REPLACE] static final DiagnosticType UNMATCHED_END_MARKER = DiagnosticType.warning ( "JSC_UNMATCHED_END_MARKER", "Unmatched {1} - {0} not in the same block" ) ;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^long  sourceName;^41^^^^^^^[REPLACE] final String sourceName;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^Node node;^44^^^^^^^[REPLACE] final Node node;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^private final  byte  endMarkerName;^69^^^^^^^[REPLACE] private final String endMarkerName;^ [CLASS] CreateSyntheticBlocks StartMarker Callback  
[REPLACE]^this.sourceName =  null;^56^^^^^54^60^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^node =  ancestorBlockChild;^57^^^^^54^60^[REPLACE] node = n;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^this.ancestorBlock = ancestorBlock; ;^58^^^^^54^60^[REPLACE] this.ancestorBlockChild = ancestorBlockChild;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^ancestorBlock = ancestor; ;^59^^^^^54^60^[REPLACE] this.ancestorBlock = ancestorBlock;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[ADD]^^59^^^^^54^60^[ADD] this.ancestorBlock = ancestorBlock;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^this.compiler =  null;^78^^^^^76^82^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String startMarkerName String endMarkerName [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^this.endMarkerName = endMarkerName; ;^79^^^^^76^82^[REPLACE] this.startMarkerName = startMarkerName;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String startMarkerName String endMarkerName [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^this.startMarkerName = startMarkerName; ;^80^^^^^76^82^[REPLACE] this.endMarkerName = endMarkerName;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String startMarkerName String endMarkerName [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^startMarkerStack =  new Callback (  )  ;^81^^^^^76^82^[REPLACE] startMarkerStack = new ArrayDeque<StartMarker> (  ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String startMarkerName String endMarkerName [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  boolean false  true  [TYPE]  Deque startMarkerStack  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node 
[REPLACE]^NodeTraversal.traverse ( compiler, node, new Callback (  )  ) ;^86^^^^^85^92^[REPLACE] NodeTraversal.traverse ( compiler, root, new Callback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  externs  n  node  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack 
[REPLACE]^for  ( StartMarker startMarker : startMarkerStack )  { compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node,^88^^^^^85^92^[REPLACE] for  ( StartMarker startMarker : startMarkerStack )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  externs  n  node  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack 
[ADD]^^88^89^90^91^^85^92^[ADD] for  ( StartMarker startMarker : startMarkerStack )  { compiler.report ( JSError.make ( startMarker.sourceName, startMarker.node, UNMATCHED_START_MARKER, startMarkerName )  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestorBlock  ancestorBlockChild  externs  n  node  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack 
[REPLACE]^if  ( removedNode.getType (  )  != Token.NAME ) {^97^^^^^96^158^[REPLACE] if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^101^^^^^96^158^[REPLACE] if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT ) {^108^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor; ;^109^^^^^96^158^[REPLACE] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^109^^^^^96^158^[ADD] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^ancestorBlock = ancestor; ;^112^^^^^96^158^[REPLACE] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^112^^^^^96^158^[ADD] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = ancestor.getType (  ) ;^104^^^^^96^158^[REPLACE] Node ancestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlock = this;^105^^^^^96^158^[REPLACE] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = ancestor.getType (  ) ;^106^^^^^96^158^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^106^107^108^109^110^96^158^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = root.getType (  ) ;^107^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  (  type == Token.BLOCK )  {^108^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^108^109^110^111^^96^158^[ADD] if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlockChild = removedNode;^104^^^^^96^158^[REPLACE] Node ancestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlock = false;^105^^^^^96^158^[REPLACE] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^^107^^^^^96^158^[ADD] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( !endMarkerName.equals ( removedNode.getString (  )  )  )  {^119^^^^^96^158^[REPLACE] if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^123^^^^^96^158^[REPLACE] if  ( startMarkerStack.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^StartMarker startMarker = startMarkerStack .push ( this )  ;^129^^^^^96^158^[REPLACE] StartMarker startMarker = startMarkerStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node endMarkerAncestorBlockChild = removedNode;^131^^^^^96^158^[REPLACE] Node endMarkerAncestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT ) {^134^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( ancestor  ==  startMarker.ancestorBlock )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^if  ( ancestor  == removedNode )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor; ;^143^^^^^96^158^[REPLACE] endMarkerAncestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = ancestor.getType (  ) ;^132^^^^^96^158^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^int type = node.getString (  ) ;^133^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node removedNode = null;^146^^^^^96^158^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[ADD]^block.setIsSyntheticBlock ( true ) ;^146^147^^^^96^158^[ADD] Node block = new Node ( Token.BLOCK ) ; block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^block.setIsSyntheticBlock ( false ) ;^147^^^^^96^158^[REPLACE] block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^startMarker.ancestorBlock .removeChildAfter ( endMarkerAncestorBlockChild )  ;^148^149^^^^96^158^[REPLACE] startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node removedNode = false;^150^^^^^96^158^[REPLACE] Node removedNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^removedNode =  null.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^96^158^[REPLACE] removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^compiler.report (  ) ;^157^^^^^96^158^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CreateSyntheticBlocks StartMarker Callback   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node node;^44^^^^^^^[REPLACE] final Node node;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StartMarker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^Node ancestorBlock;^52^^^^^^^[REPLACE] final Node ancestorBlock;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StartMarker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType UNMATCHED_END_MARKER  UNMATCHED_START_MARKER  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  externs  n  node  parent  removedNode  root  [TYPE]  StartMarker startMarker  [TYPE]  String endMarkerName  sourceName  startMarkerName  [TYPE]  Deque startMarkerStack  [TYPE]  int type 
[REPLACE]^this.sourceName =  null;^56^^^^^54^60^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] StartMarker   [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node  [TYPE]  String sourceName  [TYPE]  boolean false  true 
[REPLACE]^node =  ancestorBlockChild;^57^^^^^54^60^[REPLACE] node = n;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] StartMarker   [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node  [TYPE]  String sourceName  [TYPE]  boolean false  true 
[ADD]^^57^58^^^^54^60^[ADD] node = n; this.ancestorBlockChild = ancestorBlockChild;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] StartMarker   [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node  [TYPE]  String sourceName  [TYPE]  boolean false  true 
[REPLACE]^this.ancestorBlock = ancestorBlock; ;^58^^^^^54^60^[REPLACE] this.ancestorBlockChild = ancestorBlockChild;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] StartMarker   [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node  [TYPE]  String sourceName  [TYPE]  boolean false  true 
[REPLACE]^this.ancestorBlockChild = ancestorBlockChild; ;^59^^^^^54^60^[REPLACE] this.ancestorBlock = ancestorBlock;^[METHOD] <init> [TYPE] Node) [PARAMETER] String sourceName Node n Node ancestorBlockChild Node ancestorBlock [CLASS] StartMarker   [TYPE]  Node ancestorBlock  ancestorBlockChild  n  node  [TYPE]  String sourceName  [TYPE]  boolean false  true 
[REPLACE]^if  (  parent.getType (  )  != Token.CALL )  {^97^^^^^96^158^[REPLACE] if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^97^98^99^^^96^158^[ADD] if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^101^^^^^96^158^[REPLACE] if  ( startMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT ) {^108^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor; ;^109^^^^^96^158^[REPLACE] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^ancestorBlock = ancestor; ;^112^^^^^96^158^[REPLACE] ancestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node ancestorBlockChild = removedNode;^104^^^^^96^158^[REPLACE] Node ancestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node ancestorBlock = this;^105^^^^^96^158^[REPLACE] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = ancestor.getType (  ) ;^106^^^^^96^158^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = removedNode.getType (  ) ;^107^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^ancestorBlock = ancestor;break;^108^109^110^111^^96^158^[ADD] if  ( type == Token.SCRIPT || type == Token.BLOCK )  { ancestorBlock = ancestor; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^109^^^^^96^158^[ADD] ancestorBlock = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node ancestorBlock = true;^105^^^^^96^158^[REPLACE] Node ancestorBlock = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = removedNode.getString (  ) ;^107^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( !endMarkerName.equals ( removedNode.getString (  )  )  )  {^119^^^^^96^158^[REPLACE] if  ( !endMarkerName.equals ( n.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( n.getType (  )  != Token.NAME || parent.getType (  )  != Token.CALL )  {^123^^^^^96^158^[REPLACE] if  ( startMarkerStack.isEmpty (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^123^124^125^126^127^96^158^[ADD] if  ( startMarkerStack.isEmpty (  )  )  { compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = ancestor.getType (  ) ;^129^^^^^96^158^[REPLACE] StartMarker startMarker = startMarkerStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node endMarkerAncestorBlockChild = parent;^131^^^^^96^158^[REPLACE] Node endMarkerAncestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^131^^^^^96^158^[ADD] Node endMarkerAncestorBlockChild = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( type == Token.SCRIPT && type == Token.BLOCK )  {^134^^^^^96^158^[REPLACE] if  ( type == Token.SCRIPT || type == Token.BLOCK )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( removedNode  == removedNode )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^if  ( ancestor  ==  startMarker.ancestorBlock )  {^135^^^^^96^158^[REPLACE] if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^135^136^137^138^139^96^158^[ADD] if  ( ancestor != startMarker.ancestorBlock )  {  compiler.report ( JSError.make ( t, n, UNMATCHED_END_MARKER, startMarkerName, endMarkerName )  ) ; return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^ancestorBlockChild = ancestor; ;^143^^^^^96^158^[REPLACE] endMarkerAncestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^143^^^^^96^158^[ADD] endMarkerAncestorBlockChild = ancestor;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = ancestor.getType (  ) ;^132^^^^^96^158^[REPLACE] for  ( Node ancestor : n.getAncestors (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^132^133^134^135^^96^158^[ADD] for  ( Node ancestor : n.getAncestors (  )  )  { int type = ancestor.getType (  ) ; if  ( type == Token.SCRIPT || type == Token.BLOCK )  { if  ( ancestor != startMarker.ancestorBlock )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^int type = ancestor.getString (  ) ;^133^^^^^96^158^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = null;^146^^^^^96^158^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^block.setIsSyntheticBlock ( false ) ;^147^^^^^96^158^[REPLACE] block.setIsSyntheticBlock ( true ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^startMarker.ancestorBlock.addChildAfter ( removedNode, startMarker.ancestorBlockChild ) ;^148^149^^^^96^158^[REPLACE] startMarker.ancestorBlock.addChildAfter ( block, startMarker.ancestorBlockChild ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^Node removedNode = true;^150^^^^^96^158^[REPLACE] Node removedNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^150^^^^^96^158^[ADD] Node removedNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^removedNode =  null.ancestorBlock.removeChildAfter ( block ) ;^153^^^^^96^158^[REPLACE] removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[ADD]^^153^^^^^96^158^[ADD] removedNode = startMarker.ancestorBlock.removeChildAfter ( block ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
[REPLACE]^compiler.report (  ) ;^157^^^^^96^158^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Callback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancestor  ancestorBlock  ancestorBlockChild  block  endMarkerAncestorBlockChild  n  parent  removedNode  [TYPE]  StartMarker startMarker  [TYPE]  int type 
