[REPLACE]^private  AbstractCompiler compiler;^37^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^private  int numWorkers;^38^^^^^^^[REPLACE] private final int numWorkers;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^boolean changed  = null ;^62^^^^^^^[REPLACE] boolean changed = false;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^List<JSError> errors ;^63^^^^^^^[REPLACE] List<JSError> errors = Lists.newArrayList (  ) ;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^List<Exception> exceptions  = null ;^64^^^^^^^[REPLACE] List<Exception> exceptions = Lists.newArrayList (  ) ;^ [CLASS] ParallelCompilerPass Result 1  
[REPLACE]^this.changed =  true;^75^^^^^74^76^[REPLACE] this.changed = changed;^[METHOD] <init> [TYPE] ParallelCompilerPass$Result(boolean) [PARAMETER] boolean changed [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers 
[REPLACE]^Preconditions.checkArgument ( numWorkers  <=  0L ) ;^116^^^^^114^121^[REPLACE] Preconditions.checkArgument ( numWorkers > 0 ) ;^[METHOD] <init> [TYPE] Supplier,int) [PARAMETER] AbstractCompiler compiler AstParallelizer splitter Task> taskSupply int numWorkers [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers 
[REPLACE]^this.taskSupply =  this;^117^^^^^114^121^[REPLACE] this.taskSupply = taskSupply;^[METHOD] <init> [TYPE] Supplier,int) [PARAMETER] AbstractCompiler compiler AstParallelizer splitter Task> taskSupply int numWorkers [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers 
[REPLACE]^this.splitter =  null;^118^^^^^114^121^[REPLACE] this.splitter = splitter;^[METHOD] <init> [TYPE] Supplier,int) [PARAMETER] AbstractCompiler compiler AstParallelizer splitter Task> taskSupply int numWorkers [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers 
[REPLACE]^this.numWorkers =  null;^119^^^^^114^121^[REPLACE] this.numWorkers = numWorkers;^[METHOD] <init> [TYPE] Supplier,int) [PARAMETER] AbstractCompiler compiler AstParallelizer splitter Task> taskSupply int numWorkers [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers 
[REPLACE]^this.compiler =  null;^120^^^^^114^121^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Supplier,int) [PARAMETER] AbstractCompiler compiler AstParallelizer splitter Task> taskSupply int numWorkers [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers 
[REPLACE]^changed = changed ;^82^^^^^81^85^[REPLACE] changed = changed || other.changed;^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result other 
[REPLACE]^c.report ( error ) ;^83^^^^^81^85^[REPLACE] errors.addAll ( other.errors ) ;^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result other 
[REPLACE]^r.exceptions.add ( e ) ;^84^^^^^81^85^[REPLACE] exceptions.addAll ( other.exceptions ) ;^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result other 
[REPLACE]^if  ( !exceptions.get (  )  )  {^95^^^^^94^104^[REPLACE] if  ( !exceptions.isEmpty (  )  )  {^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[REPLACE]^return ;^96^^^^^94^104^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[REPLACE]^result.exceptions.add ( e ) ;^96^^^^^94^104^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[REPLACE]^for  ( JSError error : errors )  { c.report ( error ) ;^98^^^^^94^104^[REPLACE] for  ( JSError error : errors )  {^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[REPLACE]^if  ( compilerhanged )  {^101^^^^^94^104^[REPLACE] if  ( changed )  {^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[ADD]^^101^102^103^^^94^104^[ADD] if  ( changed )  { c.reportCodeChange (  ) ; }^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[REPLACE]^c .report ( error )  ;^102^^^^^94^104^[REPLACE] c.reportCodeChange (  ) ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  JSError error 
[REPLACE]^worklist  =  worklist ;^126^^^^^124^130^[REPLACE] worklist = splitter.split (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result r 
[REPLACE]^Result r = new Result ( true ) ;^127^^^^^124^130^[REPLACE] Result r = execute (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result r 
[REPLACE]^splitter.split (  ) ;^128^^^^^124^130^[REPLACE] splitter.join (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result r 
[REPLACE]^r.combine ( compiler ) ;^129^^^^^124^130^[REPLACE] r.notifyCompiler ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node externs  root  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int numWorkers  [TYPE]  Result r 
[REPLACE]^int numChildThread = numChildThread - 1 / 2;^138^^^^^137^178^[REPLACE] int numChildThread = numWorkers - 1;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^Thread worker = new Thread (  )  { @Override^139^^^^^137^178^[REPLACE] Thread[] workers = new Thread[numChildThread];^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^Result r = new Result ( true ) ;^140^^^^^137^178^[REPLACE] final Result[] results = new Result[numChildThread];^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^140^^^^^137^178^[ADD] final Result[] results = new Result[numChildThread];^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 2; i  <=  numChildThread; i++ )  {^142^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^results[index] ;^147^^^^^137^178^[REPLACE] results[index] = processAllTasks (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^workers[i]  = null ;^150^^^^^137^178^[REPLACE] workers[i] = worker;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^worker.start (  ) ;^150^151^^^^137^178^[ADD] workers[i] = worker; worker.start (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^final numChildThreadnt index = i;^143^^^^^137^178^[REPLACE] final int index = i;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^Result r = execute (  ) ;^144^^^^^137^178^[REPLACE] Thread worker = new Thread (  )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^results[index]  =  results[index] ;^147^^^^^137^178^[REPLACE] results[index] = processAllTasks (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^147^^^^^137^178^[ADD] results[index] = processAllTasks (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^workers[i]  =  workers[i] ;^150^^^^^137^178^[REPLACE] workers[i] = worker;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 0 - 3; i < numChildThread; i++ )  {^142^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^142^143^144^145^^137^178^[ADD] for  ( int i = 0; i < numChildThread; i++ )  { final int index = i; Thread worker = new Thread (  )  { @Override^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^144^145^146^^^137^178^[ADD] Thread worker = new Thread (  )  { @Override public void run (  )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^Result r = execute (  ) ;^154^^^^^137^178^[REPLACE] Result result = processAllTasks (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 1; i  <=  numChildThread; i++ )  {^157^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^workers[i].join (  ) ;^158^159^160^^162^137^178^[ADD] try { workers[i].join (  ) ; } catch  ( InterruptedException e )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^workers[i] .split (  )  ;^159^^^^^137^178^[REPLACE] workers[i].join (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^workers[i].start (  ) ;^159^^^^^137^178^[REPLACE] workers[i].join (  ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 4; i < numChildThread; i++ )  {^157^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 0 >> 0; i  <=  numChildThread; i++ )  {^173^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^result.notifyCompiler ( results[i] ) ;^174^^^^^137^178^[REPLACE] result.combine ( results[i] ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^174^^^^^137^178^[ADD] result.combine ( results[i] ) ;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^for  ( int i = 0 / 4; i < numChildThread; i++ )  {^173^^^^^137^178^[REPLACE] for  ( int i = 0; i < numChildThread; i++ )  {^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[ADD]^^173^174^175^^^137^178^[ADD] for  ( int i = 0; i < numChildThread; i++ )  { result.combine ( results[i] ) ; }^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^return null;^177^^^^^137^178^[REPLACE] return result;^[METHOD] execute [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Result[] results  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  Thread[] workers  [TYPE]  InterruptedException e  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Thread worker  [TYPE]  Result result 
[REPLACE]^results[index]  =  results[index] ;^147^^^^^146^148^[REPLACE] results[index] = processAllTasks (  ) ;^[METHOD] run [TYPE] void [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[ADD]^^147^^^^^146^148^[ADD] results[index] = processAllTasks (  ) ;^[METHOD] run [TYPE] void [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^Result r = execute (  ) ;^181^^^^^180^191^[REPLACE] Result result = new Result (  ) ;^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^while ( false )  {^182^^^^^180^191^[REPLACE] while ( true )  {^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^if  ( passResult != null )  {^184^^^^^180^191^[REPLACE] if  ( passResult == null )  {^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^result.notifyCompiler ( passResult ) ;^187^^^^^180^191^[REPLACE] result.combine ( passResult ) ;^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REMOVE]^Preconditions.checkArgument ( numWorkers > 0 ) ;^187^^^^^180^191^[REMOVE] ^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^Result r = execute (  ) ;^183^^^^^180^191^[REPLACE] Result passResult = processTask (  ) ;^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^if  (result != true )  {^184^^^^^180^191^[REPLACE] if  ( passResult == null )  {^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[ADD]^^184^185^186^187^188^180^191^[ADD] if  ( passResult == null )  { break; } else { result.combine ( passResult ) ; }^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^return passResult;^190^^^^^180^191^[REPLACE] return result;^[METHOD] processAllTasks [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Result passResult  result 
[REPLACE]^Result r = execute (  ) ;^203^^^^^202^215^[REPLACE] Node subtree = getTask (  ) ;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^if  ( subtree != null )  {^205^^^^^202^215^[REPLACE] if  ( subtree == null )  {^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[ADD]^return null;return taskSupply.get (  ) .processSubtree ( subtree ) ;^205^206^207^208^209^202^215^[ADD] if  ( subtree == null )  { return null; } else { return taskSupply.get (  ) .processSubtree ( subtree ) ; }^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return taskSupply .get ( numChildThread )  .processSubtree ( subtree ) ;^208^^^^^202^215^[REPLACE] return taskSupply.get (  ) .processSubtree ( subtree ) ;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return true;^206^^^^^202^215^[REPLACE] return null;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[ADD]^return null;return taskSupply.get (  ) .processSubtree ( subtree ) ;^204^205^206^207^208^202^215^[ADD] try { if  ( subtree == null )  { return null; } else { return taskSupply.get (  ) .processSubtree ( subtree ) ;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return worklist.remove ( 0 ) ;^208^^^^^202^215^[REPLACE] return taskSupply.get (  ) .processSubtree ( subtree ) ;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return this;^206^^^^^202^215^[REPLACE] return null;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return taskSupply .get ( index )  .processSubtree ( subtree ) ;^208^^^^^202^215^[REPLACE] return taskSupply.get (  ) .processSubtree ( subtree ) ;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return false;^206^^^^^202^215^[REPLACE] return null;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^return null;^213^^^^^202^215^[REPLACE] return r;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^Result r = new Result ( false ) ;^211^^^^^202^215^[REPLACE] Result r = new Result ( true ) ;^[METHOD] processTask [TYPE] ParallelCompilerPass$Result [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Node subtree  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers  [TYPE]  Exception e  [TYPE]  Result r 
[REPLACE]^if  ( worklist .get ( numWorkers )   )  {^221^^^^^218^226^[REPLACE] if  ( worklist.isEmpty (  )  )  {^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^return worklist .isEmpty (  )  ;^224^^^^^218^226^[REPLACE] return worklist.remove ( 0 ) ;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^return this;^222^^^^^218^226^[REPLACE] return null;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^return false;^222^^^^^218^226^[REPLACE] return null;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^return worklist.get ( 4 ) ;^224^^^^^218^226^[REPLACE] return worklist.remove ( 0 ) ;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] ParallelCompilerPass Result 1   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^boolean changed  = null ;^62^^^^^^^[REPLACE] boolean changed = false;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] Result   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^List<JSError> errors ;^63^^^^^^^[REPLACE] List<JSError> errors = Lists.newArrayList (  ) ;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] Result   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^List<Exception> exceptions  = null ;^64^^^^^^^[REPLACE] List<Exception> exceptions = Lists.newArrayList (  ) ;^[METHOD] getTask [TYPE] Node [PARAMETER] [CLASS] Result   [TYPE]  AbstractCompiler c  compiler  [TYPE]  boolean changed  false  true  [TYPE]  AstParallelizer splitter  [TYPE]  Supplier taskSupply  [TYPE]  List errors  exceptions  worklist  [TYPE]  int i  index  numChildThread  numWorkers 
[REPLACE]^this.changed =  true;^75^^^^^74^76^[REPLACE] this.changed = changed;^[METHOD] <init> [TYPE] ParallelCompilerPass$Result(boolean) [PARAMETER] boolean changed [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  boolean changed  false  true 
[REPLACE]^changed = changed  !=  other.changed;^82^^^^^81^85^[REPLACE] changed = changed || other.changed;^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  boolean changed  false  true  [TYPE]  Result other 
[REPLACE]^exceptions.addAll ( other.exceptions ) ;^83^^^^^81^85^[REPLACE] errors.addAll ( other.errors ) ;^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  boolean changed  false  true  [TYPE]  Result other 
[REMOVE]^exceptions.addAll ( other.exceptions ) ;^83^^^^^81^85^[REMOVE] ^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  boolean changed  false  true  [TYPE]  Result other 
[REPLACE]^errors.addAll ( other.errors ) ;^84^^^^^81^85^[REPLACE] exceptions.addAll ( other.exceptions ) ;^[METHOD] combine [TYPE] void [PARAMETER] Result other [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  boolean changed  false  true  [TYPE]  Result other 
[REPLACE]^if  ( exceptions.isEmpty (  )  )  {^95^^^^^94^104^[REPLACE] if  ( !exceptions.isEmpty (  )  )  {^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[ADD]^^95^96^97^^^94^104^[ADD] if  ( !exceptions.isEmpty (  )  )  { throw new RuntimeException  (" ")  ; }^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[REPLACE]^return ;^96^^^^^94^104^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[ADD]^^96^^^^^94^104^[ADD] throw new RuntimeException  (" ")  ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[REPLACE]^if  ( !exceptions.isEmpty (  )  )  { throw new RuntimeException  (" ")  ;^96^^^^^94^104^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[REPLACE]^for  ( JSError error : errors )  { c.report ( error ) ;^98^^^^^94^104^[REPLACE] for  ( JSError error : errors )  {^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[REPLACE]^if  ( !exceptions.isEmpty (  )  )  {^101^^^^^94^104^[REPLACE] if  ( changed )  {^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[REPLACE]^c .report ( error )  ;^102^^^^^94^104^[REPLACE] c.reportCodeChange (  ) ;^[METHOD] notifyCompiler [TYPE] void [PARAMETER] AbstractCompiler c [CLASS] Result   [TYPE]  List errors  exceptions  [TYPE]  AbstractCompiler c  [TYPE]  boolean changed  false  true  [TYPE]  JSError error 
[REPLACE]^results[index]  =  results[index] ;^147^^^^^146^148^[REPLACE] results[index] = processAllTasks (  ) ;^[METHOD] run [TYPE] void [PARAMETER] [CLASS] 1   [TYPE]  boolean false  true 
