[REPLACE]^private  final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^32^33^^^^32^33^[REPLACE] private static final Pattern TEST_FUNCTIONS_NAME_PATTERN = Pattern.compile ( "^ ( ?:setUpPage|setUp|tearDown|tearDownPage|test.* ) $" ) ;^ [CLASS] ExportTestFunctions ExportTestFunctionsNodes  
[REPLACE]^private final  char  exportSymbolFunction;^36^^^^^^^[REPLACE] private final String exportSymbolFunction;^ [CLASS] ExportTestFunctions ExportTestFunctionsNodes  
[REPLACE]^compiler   ;^46^^^^^43^49^[REPLACE] Preconditions.checkNotNull ( compiler ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^this.compiler =  null;^47^^^^^43^49^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^this.exportSymbolFunction =  null;^48^^^^^43^49^[REPLACE] this.exportSymbolFunction = exportSymbolFunction;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String exportSymbolFunction [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  [TYPE]  boolean false  true 
[REPLACE]^if  (  parent.getType (  )  != Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^55^56^^^^54^62^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^55^56^57^58^59^54^62^[ADD] if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  { String functionName = NodeUtil.getFunctionName ( n, parent ) ; if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( isTestFunction ( n, functionName )  || t.inGlobalScope (  )  )  {^58^^^^^54^62^[REPLACE] if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^exportTestFunction ( exportSymbolFunction, n, parent ) ;^59^^^^^54^62^[REPLACE] exportTestFunction ( functionName, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^59^^^^^54^62^[ADD] exportTestFunction ( functionName, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^57^^^^^54^62^[REPLACE] String functionName = NodeUtil.getFunctionName ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^exportTestFunction ( functionName, n, parent ) ;^58^59^60^^^54^62^[ADD] if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REMOVE]^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ;^59^^^^^54^62^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^66^^^^^65^67^[REPLACE] NodeTraversal.traverse ( compiler, root, new ExportTestFunctionsNodes (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, scriptNode, testFunctionName )  ) ;^73^74^^^^70^83^[REPLACE] Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[ADD]^exportSymbolFunction, node, testFunctionName )  ) ;call.addChildToBack ( Node.newString ( testFunctionName )  ) ;testFunctionName, node, testFunctionName )  ) ;^73^74^75^76^77^70^83^[ADD] Node call = new Node ( Token.CALL, NodeUtil.newQualifiedNameNode ( exportSymbolFunction, node, testFunctionName )  ) ; call.addChildToBack ( Node.newString ( testFunctionName )  ) ; call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^call.addChildToBack ( Node.newString ( functionName )  ) ;^75^^^^^70^83^[REPLACE] call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[ADD]^^75^^^^^70^83^[ADD] call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^call.addChildToBack (   testFunctionName    ) ;^75^^^^^70^83^[REPLACE] call.addChildToBack ( Node.newString ( testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^call .addChildAfter ( scriptNode , call )  ;^76^77^^^^70^83^[REPLACE] call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^call.addChildToBack ( NodeUtil .getFunctionName ( node , node )   ) ;^76^77^^^^70^83^[REPLACE] call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[ADD]^^76^77^^79^^70^83^[ADD] call.addChildToBack ( NodeUtil.newQualifiedNameNode ( testFunctionName, node, testFunctionName )  ) ; Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^Node expression = new Node ( Token.EXPR_RESULT, scriptNode ) ;^79^^^^^70^83^[REPLACE] Node expression = new Node ( Token.EXPR_RESULT, call ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^scriptNode.addChildAfter ( expression, scriptNode ) ;^81^^^^^70^83^[REPLACE] scriptNode.addChildAfter ( expression, node ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^scriptNode.addChildAfter ( expression, node ) ;^82^^^^^70^83^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] exportTestFunction [TYPE] void [PARAMETER] String testFunctionName Node node Node scriptNode [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node call  expression  node  scriptNode 
[REPLACE]^return true ;^95^96^^^^94^97^[REPLACE] return ! ( functionName == null || !TEST_FUNCTIONS_NAME_PATTERN.matcher ( functionName ) .matches (  )  ) ;^[METHOD] isTestFunction [TYPE] boolean [PARAMETER] Node n String functionName [CLASS] ExportTestFunctions ExportTestFunctionsNodes   [TYPE]  Pattern TEST_FUNCTIONS_NAME_PATTERN  [TYPE]  AbstractCompiler compiler  [TYPE]  String exportSymbolFunction  functionName  testFunctionName  [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^if  ( parent != null ) {^55^56^^^^54^62^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.SCRIPT && n.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctionsNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String functionName 
[REPLACE]^if  ( true (  )  )  {^58^^^^^54^62^[REPLACE] if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctionsNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String functionName 
[REPLACE]^if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  { exportTestFunction ( functionName, n, parent ) ;^59^^^^^54^62^[REPLACE] exportTestFunction ( functionName, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctionsNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String functionName 
[REPLACE]^if  ( isTestFunction ( n, functionName )  || t.inGlobalScope (  )  )  {^58^^^^^54^62^[REPLACE] if  ( isTestFunction ( n, functionName )  && t.inGlobalScope (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctionsNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String functionName 
[REPLACE]^exportTestFunction ( functionName, n, n ) ;^59^^^^^54^62^[REPLACE] exportTestFunction ( functionName, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ExportTestFunctionsNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  String functionName 
