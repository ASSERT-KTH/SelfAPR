[REPLACE]^private  Map<Var, ReferenceCollection> referenceMap = Maps.newHashMap (  ) ;^52^53^^^^52^53^[REPLACE] private final Map<Var, ReferenceCollection> referenceMap = Maps.newHashMap (  ) ;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private final Deque<BasicBlock> blockStack ;^58^^^^^^^[REPLACE] private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock> (  ) ;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private  Behavior behavior;^63^^^^^^^[REPLACE] private final Behavior behavior;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private  Predicate<Var> varFilter;^73^^^^^^^[REPLACE] private final Predicate<Var> varFilter;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^static Behavior DO_NOTHING_BEHAVIOR  = null ;^216^^^^^216^220^[REPLACE] static Behavior DO_NOTHING_BEHAVIOR = new Behavior (  )  {^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^List<Reference> references  = null ;^228^^^^^^^[REPLACE] List<Reference> references = Lists.newArrayList (  ) ;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private static final Set<Integer> DECLARATION_PARENTS  = null ;^368^369^^^^368^369^[REPLACE] private static final Set<Integer> DECLARATION_PARENTS = ImmutableSet.of ( Token.VAR, Token.FUNCTION, Token.CATCH ) ;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private  Node parent;^372^^^^^^^[REPLACE] private final Node parent;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private  BasicBlock basicBlock;^374^^^^^^^[REPLACE] private final BasicBlock basicBlock;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^private  String sourceName;^376^^^^^^^[REPLACE] private final String sourceName;^ [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock  
[REPLACE]^this ( compiler, DO_NOTHING_BEHAVIOR, Predicates.<Var>alwaysTrue (  )  ) ;^79^^^^^78^80^[REPLACE] this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$Behavior) [PARAMETER] AbstractCompiler compiler Behavior behavior [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Node n = t.getScope (  ) .getRootNode (  ) ;^79^^^^^78^80^[REPLACE] this ( compiler, behavior, Predicates.<Var>alwaysTrue (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$Behavior) [PARAMETER] AbstractCompiler compiler Behavior behavior [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.compiler =  null;^90^^^^^88^93^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] AbstractCompiler compiler Behavior behavior Var> varFilter [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^90^^^^^88^93^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] AbstractCompiler compiler Behavior behavior Var> varFilter [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.behavior =  DO_NOTHING_BEHAVIOR;^91^^^^^88^93^[REPLACE] this.behavior = behavior;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] AbstractCompiler compiler Behavior behavior Var> varFilter [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.varFilter =  null;^92^^^^^88^93^[REPLACE] this.varFilter = varFilter;^[METHOD] <init> [TYPE] Predicate) [PARAMETER] AbstractCompiler compiler Behavior behavior Var> varFilter [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this ( nameNode, nameNode, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^[REPLACE] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^380^381^^^^378^382^[ADD] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this ( nameNode, parent, parent.getString (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^[REPLACE] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getSourceName (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^[REPLACE] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^t .getScope (  )   ) ;^381^^^^^378^382^[REPLACE] t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.nameNode =  parent;^394^^^^^392^400^[REPLACE] this.nameNode = nameNode;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.parent =  nameNode;^395^^^^^392^400^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.grandparent =  parent;^396^^^^^392^400^[REPLACE] this.grandparent = grandparent;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.basicBlock =  parent;^397^^^^^392^400^[REPLACE] this.basicBlock = basicBlock;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^397^^^^^392^400^[ADD] this.basicBlock = basicBlock;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.scope =  null;^398^^^^^392^400^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.sourceName =  null;^399^^^^^392^400^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.parent =  basicBlock;^502^^^^^501^506^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] BasicBlock parent Node root [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^502^^^^^501^506^[ADD] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] BasicBlock parent Node root [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^this.isHoisted =  NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^505^^^^^501^506^[REPLACE] this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] BasicBlock parent Node root [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node grandparent  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, this ) ;^100^^^^^99^101^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return referenceMap .put ( v , null )  ;^107^^^^^106^108^[REPLACE] return referenceMap.get ( v ) ;^[METHOD] getReferenceCollection [TYPE] ReferenceCollectingCallback$ReferenceCollection [PARAMETER] Var v [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Var v  [TYPE]  Node externs  grandparent  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( n.getType (  )   !=  Token.NAME )  {^115^^^^^114^126^[REPLACE] if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( v == null ) {^117^^^^^114^126^[REPLACE] if  ( v != null && varFilter.apply ( v )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^117^118^119^120^^114^126^[ADD] if  ( v != null && varFilter.apply ( v )  )  { addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^addReference ( t, v, new Reference ( n, root, t, blockStack .pop (  )   )  ) ;^118^119^^^^114^126^[REPLACE] addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^new Reference ( n, parent, t, blockStack.pop (  )  )  ) ;^119^^^^^114^126^[REPLACE] new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Var v = t.getSourceName (  ) .getVar ( n.getString (  )  ) ;^116^^^^^114^126^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  (  varFilter.apply ( v )  )  {^117^^^^^114^126^[REPLACE] if  ( v != null && varFilter.apply ( v )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^addReference ( t, v, nameNodeew Reference ( n, parent, t, blockStack.pop (  )  )  ) ;^118^119^^^^114^126^[REPLACE] addReference ( t, v, new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^new Reference ( n, parent, t, blockStack .pop (  )   )  ) ;^119^^^^^114^126^[REPLACE] new Reference ( n, parent, t, blockStack.peek (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Var v = t .getSourceName (  )  .getVar ( n.getString (  )  ) ;^116^^^^^114^126^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^116^^^^^114^126^[ADD] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( isBlockBoundary ( n, root )  )  {^123^^^^^114^126^[REPLACE] if  ( isBlockBoundary ( n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^blockStack.pop (  ) ;^123^124^125^^^114^126^[ADD] if  ( isBlockBoundary ( n, parent )  )  { blockStack.pop (  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^blockStack.peek (  ) ;^124^^^^^114^126^[REPLACE] blockStack.pop (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Node n = t .getSourceName (  )  .getRootNode (  ) ;^132^^^^^131^135^[REPLACE] Node n = t.getScope (  ) .getRootNode (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^BasicBlock parent = blockStack.isEmpty (  )  ? true : blockStack .pop (  )  ;^133^^^^^131^135^[REPLACE] BasicBlock parent = blockStack.isEmpty (  )  ? null : blockStack.peek (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^blockStack.push ( new BasicBlock ( basicBlock, n )  ) ;^134^^^^^131^135^[REPLACE] blockStack.push ( new BasicBlock ( parent, n )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^blockStack.peek (  ) ;^141^^^^^140^143^[REPLACE] blockStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^behavior .afterExitScope ( t , true )  ;^142^^^^^140^143^[REPLACE] behavior.afterExitScope ( t, referenceMap ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( isBlockBoundary ( nameNode, parent )  )  {^151^^^^^148^155^[REPLACE] if  ( isBlockBoundary ( n, parent )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^blockStack.push ( parentew BasicBlock ( blockStack.pop (  ) , n )  ) ;^152^^^^^148^155^[REPLACE] blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^blockStack.push ( new BasicBlock ( blockStack.pop (  ) , n )  ) ;^152^^^^^148^155^[REPLACE] blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^152^^^^^148^155^[ADD] blockStack.push ( new BasicBlock ( blockStack.peek (  ) , n )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^154^^^^^148^155^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( parent == null )  {^161^^^^^160^190^[REPLACE] if  ( parent != null )  {^[METHOD] isBlockBoundary [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^177^^^^^160^190^[REPLACE] return true;^[METHOD] isBlockBoundary [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return n  ;^184^^^^^160^190^[REPLACE] return n != parent.getFirstChild (  ) ;^[METHOD] isBlockBoundary [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return parent.getType (  )  == Token.VAR;^189^^^^^160^190^[REPLACE] return n.getType (  )  == Token.CASE;^[METHOD] isBlockBoundary [TYPE] boolean [PARAMETER] Node n Node parent [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^ReferenceCollection referenceInfo = referenceMap .put ( v , referenceInfo )  ;^194^^^^^192^202^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] addReference [TYPE] void [PARAMETER] NodeTraversal t Var v Reference reference [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference reference  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^194^^^^^192^202^[ADD] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] addReference [TYPE] void [PARAMETER] NodeTraversal t Var v Reference reference [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference reference  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( referenceInfo != true )  {^195^^^^^192^202^[REPLACE] if  ( referenceInfo == null )  {^[METHOD] addReference [TYPE] void [PARAMETER] NodeTraversal t Var v Reference reference [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference reference  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^referenceInfo =  new BasicBlock ( blockStack.peek (  ) , n )  ;^196^^^^^192^202^[REPLACE] referenceInfo = new ReferenceCollection (  ) ;^[METHOD] addReference [TYPE] void [PARAMETER] NodeTraversal t Var v Reference reference [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference reference  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^referenceInfo .add ( null )  ;^201^^^^^192^202^[REPLACE] referenceInfo.add ( reference, t, v ) ;^[METHOD] addReference [TYPE] void [PARAMETER] NodeTraversal t Var v Reference reference [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference reference  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^references .add ( reference , t , v )  ;^231^^^^^230^232^[REPLACE] references.add ( reference ) ;^[METHOD] add [TYPE] void [PARAMETER] Reference reference NodeTraversal t Var v [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Var v  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0; i < size; i++ )  { Reference ref = references.get ( i ) ;^244^^^^^243^266^[REPLACE] int size = references.size (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if (size  !=  0 ) {^245^^^^^243^266^[REPLACE] if  ( size == 0 )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^245^246^247^^^243^266^[ADD] if  ( size == 0 )  { return false; }^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^246^^^^^243^266^[REPLACE] return false;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference maybeDecl = references.get ( index-1 ) ;^251^^^^^243^266^[REPLACE] Reference init = getInitializingReference (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( init != null )  {^252^^^^^243^266^[REPLACE] if  ( init == null )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^252^253^254^^^243^266^[ADD] if  ( init == null )  { return false; }^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^253^^^^^243^266^[REPLACE] return false;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Preconditions.checkState ( references.get ( 3 ) .isDeclaration (  )  ) ;^256^^^^^243^266^[REPLACE] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Preconditions.checkState ( references.add ( 2 ) .isDeclaration (  )  ) ;^256^^^^^243^266^[REPLACE] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^BasicBlock initBlock = init .getNameNode (  )  ;^257^^^^^243^266^[REPLACE] BasicBlock initBlock = init.getBasicBlock (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^[REPLACE] if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^261^^^^^243^266^[REPLACE] return false;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for (int i = 1; i  >=  size; i++) {^258^^^^^243^266^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( !initBlock.provablyExecutesBefore ( references.add ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^[REPLACE] if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^258^^^^^243^266^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^265^^^^^243^266^[REPLACE] return true;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference init  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference maybeInit = references.add ( index ) ;^276^^^^^275^284^[REPLACE] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( maybeInit.isVarDeclaration (  )  )  {^277^^^^^275^284^[REPLACE] if  ( maybeInit.isInitializingDeclaration (  )  )  {^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REMOVE]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^277^^^^^275^284^[REMOVE] ^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^281^^^^^275^284^[REPLACE] return true;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^283^^^^^275^284^[REPLACE] return false;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( index < references.size (  )  /  2 && index > 0 )  {^293^^^^^292^304^[REPLACE] if  ( index < references.size (  )  && index > 0 )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^Reference maybeDecl = references.get ( index-1 ) ;Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ;Reference maybeInit = references.get ( index ) ;^293^294^295^296^297^292^304^[ADD] if  ( index < references.size (  )  && index > 0 )  { Reference maybeDecl = references.get ( index-1 ) ; if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( n.getType (  )  == Token.NAME )  {^295^^^^^292^304^[REPLACE] if  ( maybeDecl.isVarDeclaration (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^295^296^297^298^299^292^304^[ADD] if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ; if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( maybeDecl.isSimpleAssignmentToName (  )  )  {^298^^^^^292^304^[REPLACE] if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REMOVE]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^298^^^^^292^304^[REMOVE] ^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^299^^^^^292^304^[REPLACE] return true;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference maybeInit = references.add ( index ) ;^297^^^^^292^304^[REPLACE] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^return true;^298^299^300^^^292^304^[ADD] if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference maybeDecl = references.get ( index > 1 ) ;^294^^^^^292^304^[REPLACE] Reference maybeDecl = references.get ( index-1 ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^294^^^^^292^304^[ADD] Reference maybeDecl = references.get ( index-1 ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^297^^^^^292^304^[ADD] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( maybeDecl .isDeclaration (  )   )  {^295^^^^^292^304^[REPLACE] if  ( maybeDecl.isVarDeclaration (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( maybeInit.isDeclaration (  )  )  {^298^^^^^292^304^[REPLACE] if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference maybeInit = references .put ( null , true )  ;^297^^^^^292^304^[REPLACE] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( maybeDecl .isDeclaration (  )   )  {^298^^^^^292^304^[REPLACE] if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference maybeDecl = references.get ( index > 0 ) ;^294^^^^^292^304^[REPLACE] Reference maybeDecl = references.get ( index-1 ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^303^^^^^292^304^[REPLACE] return false;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference maybeDecl  maybeInit  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int index  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( isInitializingDeclarationAt ( 0 - 3 )  )  {^314^^^^^313^320^[REPLACE] if  ( isInitializingDeclarationAt ( 0 )  )  {^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^}  else {^316^^^^^313^320^[REPLACE] } else if  ( isInitializingAssignmentAt ( 1 )  )  {^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^}   return references.get ( 1 ) ;^316^317^318^^^313^320^[ADD] else if  ( isInitializingAssignmentAt ( 1 )  )  { return references.get ( 1 ) ; }^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.add ( 1 ) ;^317^^^^^313^320^[REPLACE] return references.get ( 1 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.add ( 1 % 2 ) ;^317^^^^^313^320^[REPLACE] return references.get ( 1 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.add ( 0 ) ;^315^^^^^313^320^[REPLACE] return references.get ( 0 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^}  if  ( isInitializingAssignmentAt ( 1 + 4 )  )  {^316^^^^^313^320^[REPLACE] } else if  ( isInitializingAssignmentAt ( 1 )  )  {^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.get ( 1 ) ;^315^^^^^313^320^[REPLACE] return references.get ( 0 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^319^^^^^313^320^[REPLACE] return null;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0; i < size; i++ )  { Reference ref = references.get ( i ) ;^326^^^^^325^333^[REPLACE] int size = references.size (  ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( isInitializingDeclarationAt ( i )  && isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^[REPLACE] if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^328^329^330^^^325^333^[ADD] if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  { return references.get ( i ) ; }^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.get ( 1 ) ;^329^^^^^325^333^[REPLACE] return references.get ( i ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for (int i = 0; i  >  size; i++) {^327^^^^^325^333^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  (  isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^[REPLACE] if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references .put ( true , this )  ;^329^^^^^325^333^[REPLACE] return references.get ( i ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.add ( i ) ;^329^^^^^325^333^[REPLACE] return references.get ( i ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^327^^^^^325^333^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^332^^^^^325^333^[REPLACE] return null;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^boolean assigned = true;^339^^^^^338^352^[REPLACE] boolean assigned = false;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0; i < size; i++ )  { Reference ref = references.get ( i ) ;^340^^^^^338^352^[REPLACE] int size = references.size (  ) ;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( ref.isLvalue (  )  && ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^[REPLACE] if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( !true )  {^344^^^^^338^352^[REPLACE] if  ( !assigned )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^347^^^^^338^352^[REPLACE] return false;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^assigned = false;^345^^^^^338^352^[REPLACE] assigned = true;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^345^^^^^338^352^[ADD] assigned = true;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for (int i = 0; i  <=  size; i++) {^341^^^^^338^352^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( ref.isLvalue (  )  ) {^343^^^^^338^352^[REPLACE] if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^assigned = true;return false;^344^345^346^347^348^338^352^[ADD] if  ( !assigned )  { assigned = true; } else { return false; }^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Reference ref = references.get ( size ) ;^342^^^^^338^352^[REPLACE] Reference ref = references.get ( i ) ;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^341^^^^^338^352^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^341^342^343^344^345^338^352^[ADD] for  ( int i = 0; i < size; i++ )  { Reference ref = references.get ( i ) ; if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { if  ( !assigned )  { assigned = true;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^342^^^^^338^352^[ADD] Reference ref = references.get ( i ) ;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^351^^^^^338^352^[REPLACE] return assigned;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Reference ref  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int i  size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( int i = 0; i < size; i++ )  { Reference ref = references.get ( i ) ;^355^^^^^354^360^[REPLACE] int size = references.size (  ) ;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if (size > 0 ) {^356^^^^^354^360^[REPLACE] if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false;^357^^^^^354^360^[REPLACE] return true;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^359^^^^^354^360^[REPLACE] return false;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int size  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return new Reference ( nameNode.getFirstChild (  ) , func, func.getString (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^[REPLACE] return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] newBleedingFunction [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] NodeTraversal t BasicBlock basicBlock Node func [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  NodeTraversal t  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  ;^403^404^405^^^402^406^[REPLACE] return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[METHOD] isDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return parent.getType (  )   ||  Token.VAR;^409^^^^^408^410^[REPLACE] return parent.getType (  )  == Token.VAR;^[METHOD] isVarDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return NodeUtil.isAssignmentOp ( parent ) ;^413^^^^^412^414^[REPLACE] return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[METHOD] isHoistedFunction [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return isDeclaration (  )  && ( parent .getString (  )   != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^422^423^^^^419^424^[REPLACE] return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[METHOD] isInitializingDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return NodeUtil.isAssignmentOp ( getNameNode (  )  ) ;^431^^^^^430^432^[REPLACE] return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[METHOD] getAssignedValue [TYPE] Node [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return references.get ( 1 ) ;^435^^^^^434^436^[REPLACE] return basicBlock;^[METHOD] getBasicBlock [TYPE] ReferenceCollectingCallback$BasicBlock [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return basicBlock;^439^^^^^438^440^[REPLACE] return parent;^[METHOD] getParent [TYPE] Node [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return basicBlock;^443^^^^^442^444^[REPLACE] return nameNode;^[METHOD] getNameNode [TYPE] Node [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return basicBlock;^447^^^^^446^448^[REPLACE] return grandparent;^[METHOD] getGrandparent [TYPE] Node [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^Node parent = parent.getString (  ) ;^451^^^^^450^456^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( root.getType (  )   &&  Token.VAR )  {^452^^^^^450^456^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^452^453^454^^^450^456^[ADD] if  ( parent.getType (  )  == Token.VAR )  { return isLhsOfForInExpression ( parent ) ; }^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return isLhsOfForInExpression ( n ) ;^453^^^^^450^456^[REPLACE] return isLhsOfForInExpression ( parent ) ;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^returnameNode NodeUtil.isForIn ( parent )  ;^455^^^^^450^456^[REPLACE] return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true ;^459^460^^^^458^461^[REPLACE] return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[METHOD] isSimpleAssignmentToName [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^int parentType = parent.getString (  ) ;^464^^^^^463^471^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] isLvalue [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int parentType  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[ADD]^^464^^^^^463^471^[ADD] int parentType = parent.getType (  ) ;^[METHOD] isLvalue [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int parentType  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return false ;^465^466^467^468^^463^471^[REPLACE] return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[METHOD] isLvalue [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  int parentType  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return basicBlock;^474^^^^^473^475^[REPLACE] return scope;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return basicBlock;^478^^^^^477^479^[REPLACE] return sourceName;^[METHOD] getSourceName [TYPE] String [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return basicBlock;^509^^^^^508^510^[REPLACE] return parent;^[METHOD] getParent [TYPE] ReferenceCollectingCallback$BasicBlock [PARAMETER] [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  initBlock  parent  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^BasicBlock initBlock = init.getBasicBlock (  ) ;^519^^^^^516^529^[REPLACE] BasicBlock currentBlock;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( thatBlock.isHoisted )  {^523^^^^^516^529^[REPLACE] if  ( currentBlock.isHoisted )  {^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return true;^524^^^^^516^529^[REPLACE] return false;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( currentBlock = thatBlock; currentBlock != null && currentBlock != this;^520^^^^^516^529^[REPLACE] for  ( currentBlock = thatBlock;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^if  ( parent.isHoisted )  {^523^^^^^516^529^[REPLACE] if  ( currentBlock.isHoisted )  {^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^for  ( currentBlock =  parent;^520^^^^^516^529^[REPLACE] for  ( currentBlock = thatBlock;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^currentBlock =  thatBlock.getParent (  )  )  {^522^^^^^516^529^[REPLACE] currentBlock = currentBlock.getParent (  )  )  {^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^return currentBlock  ||  this;^528^^^^^516^529^[REPLACE] return currentBlock == this;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] ReferenceCollectingCallback 1 ReferenceCollection Reference BasicBlock   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  Node externs  func  grandparent  n  nameNode  parent  root  [TYPE]  BasicBlock basicBlock  currentBlock  initBlock  parent  thatBlock  [TYPE]  String sourceName  [TYPE]  Deque blockStack  [TYPE]  Predicate varFilter  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean assigned  false  isHoisted  true  [TYPE]  Scope scope  [TYPE]  List references  [TYPE]  Behavior DO_NOTHING_BEHAVIOR  behavior  [TYPE]  Map referenceMap 
[REPLACE]^List<Reference> references  = null ;^228^^^^^^^[REPLACE] List<Reference> references = Lists.newArrayList (  ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] ReferenceCollection   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Map referenceMap 
[REPLACE]^references.get ( reference ) ;^231^^^^^230^232^[REPLACE] references.add ( reference ) ;^[METHOD] add [TYPE] void [PARAMETER] Reference reference NodeTraversal t Var v [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Var v 
[ADD]^^231^^^^^230^232^[ADD] references.add ( reference ) ;^[METHOD] add [TYPE] void [PARAMETER] Reference reference NodeTraversal t Var v [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Var v 
[REPLACE]^Reference ref = references.get ( i ) ;^244^^^^^243^266^[REPLACE] int size = references.size (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^if (size  &&  0) {^245^^^^^243^266^[REPLACE] if  ( size == 0 )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[ADD]^return false;^245^246^247^^^243^266^[ADD] if  ( size == 0 )  { return false; }^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^return true;^246^^^^^243^266^[REPLACE] return false;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^Reference ref = references.get ( i ) ;^251^^^^^243^266^[REPLACE] Reference init = getInitializingReference (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^if  ( init != null )  {^252^^^^^243^266^[REPLACE] if  ( init == null )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^return true;^253^^^^^243^266^[REPLACE] return false;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^Preconditions.checkState ( references.get ( 0 - 0 ) .isDeclaration (  )  ) ;^256^^^^^243^266^[REPLACE] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[ADD]^^256^257^^^^243^266^[ADD] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ; BasicBlock initBlock = init.getBasicBlock (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^Preconditions.checkState ( references.get ( 0L ) .isDeclaration (  )  ) ;^256^^^^^243^266^[REPLACE] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[ADD]^BasicBlock initBlock = init.getBasicBlock (  ) ;^256^257^^^^243^266^[ADD] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ; BasicBlock initBlock = init.getBasicBlock (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^Preconditions.checkState ( references.get ( 0 * 3 ) .isDeclaration (  )  ) ;^256^^^^^243^266^[REPLACE] Preconditions.checkState ( references.get ( 0 ) .isDeclaration (  )  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^BasicBlock initBlock = init.isLvalue (  ) ;^257^^^^^243^266^[REPLACE] BasicBlock initBlock = init.getBasicBlock (  ) ;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^if  ( initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^[REPLACE] if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^return true;^261^^^^^243^266^[REPLACE] return false;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^for (int i = 1; i  >  size; i++) {^258^^^^^243^266^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[ADD]^^258^259^260^261^262^243^266^[ADD] for  ( int i = 1; i < size; i++ )  { if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  { return false; }^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^if  ( !initBlock.provablyExecutesBefore ( references.get ( size ) .getBasicBlock (  )  )  )  {^259^260^^^^243^266^[REPLACE] if  ( !initBlock.provablyExecutesBefore ( references.get ( i ) .getBasicBlock (  )  )  )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^258^^^^^243^266^[REPLACE] for  ( int i = 1; i < size; i++ )  {^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^return false;^265^^^^^243^266^[REPLACE] return true;^[METHOD] isWellDefined [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  BasicBlock initBlock  [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int i  size  [TYPE]  Reference init 
[REPLACE]^Reference maybeDecl = references.get ( index-1 ) ;^276^^^^^275^284^[REPLACE] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeInit 
[REPLACE]^if  ( maybeInit.isVarDeclaration (  )  )  {^277^^^^^275^284^[REPLACE] if  ( maybeInit.isInitializingDeclaration (  )  )  {^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeInit 
[ADD]^^277^278^^^281^275^284^[ADD] if  ( maybeInit.isInitializingDeclaration (  )  )  {  return true;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeInit 
[REPLACE]^return false;^281^^^^^275^284^[REPLACE] return true;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeInit 
[REPLACE]^return true;^283^^^^^275^284^[REPLACE] return false;^[METHOD] isInitializingDeclarationAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeInit 
[REPLACE]^if  ( index < references.size (  )  *  0.5  && index > 0 )  {^293^^^^^292^304^[REPLACE] if  ( index < references.size (  )  && index > 0 )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[ADD]^^293^294^295^296^297^292^304^[ADD] if  ( index < references.size (  )  && index > 0 )  { Reference maybeDecl = references.get ( index-1 ) ; if  ( maybeDecl.isVarDeclaration (  )  )  { Preconditions.checkState ( !maybeDecl.isInitializingDeclaration (  )  ) ; Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^if  ( maybeInit.isVarDeclaration (  )  )  {^295^^^^^292^304^[REPLACE] if  ( maybeDecl.isVarDeclaration (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^if  ( maybeInit.isDeclaration (  )  )  {^298^^^^^292^304^[REPLACE] if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^return false;^299^^^^^292^304^[REPLACE] return true;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^Reference maybeDecl = references.get ( index-1 ) ;^297^^^^^292^304^[REPLACE] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^if  ( maybeDecl.isSimpleAssignmentToName (  )  )  {^298^^^^^292^304^[REPLACE] if  ( maybeInit.isSimpleAssignmentToName (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[ADD]^return true;^298^299^300^^^292^304^[ADD] if  ( maybeInit.isSimpleAssignmentToName (  )  )  { return true; }^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^Reference maybeDecl = references.get ( index == 1 ) ;^294^^^^^292^304^[REPLACE] Reference maybeDecl = references.get ( index-1 ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^if  ( isInitializingDeclarationAt ( 0 )  )  {^295^^^^^292^304^[REPLACE] if  ( maybeDecl.isVarDeclaration (  )  )  {^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[ADD]^^297^^^^^292^304^[ADD] Reference maybeInit = references.get ( index ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REMOVE]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^298^^^^^292^304^[REMOVE] ^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^Reference maybeDecl = references.get ( index & 1 ) ;^294^^^^^292^304^[REPLACE] Reference maybeDecl = references.get ( index-1 ) ;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^return true;^303^^^^^292^304^[REPLACE] return false;^[METHOD] isInitializingAssignmentAt [TYPE] boolean [PARAMETER] int index [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true  [TYPE]  int index  [TYPE]  Reference maybeDecl  maybeInit 
[REPLACE]^if  ( isInitializingDeclarationAt ( 0 - 0 )  )  {^314^^^^^313^320^[REPLACE] if  ( isInitializingDeclarationAt ( 0 )  )  {^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REMOVE]^if  ( isInitializingAssignmentAt ( 1 )  )  {     return references.get ( 1 ) ; }^314^^^^^313^320^[REMOVE] ^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^} else if  ( isInitializingAssignmentAt ( 4 )  )  {^316^^^^^313^320^[REPLACE] } else if  ( isInitializingAssignmentAt ( 1 )  )  {^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 4 ) ;^317^^^^^313^320^[REPLACE] return references.get ( 1 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 0 ) ;^317^^^^^313^320^[REPLACE] return references.get ( 1 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 1 ) ;^315^^^^^313^320^[REPLACE] return references.get ( 0 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^}  else {^316^^^^^313^320^[REPLACE] } else if  ( isInitializingAssignmentAt ( 1 )  )  {^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 1 % 0 ) ;^317^^^^^313^320^[REPLACE] return references.get ( 1 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 0L ) ;^315^^^^^313^320^[REPLACE] return references.get ( 0 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 1 * 1 ) ;^317^^^^^313^320^[REPLACE] return references.get ( 1 ) ;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^return false;^319^^^^^313^320^[REPLACE] return null;^[METHOD] getInitializingReference [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean false  true 
[REPLACE]^Reference ref = references.get ( i ) ;^326^^^^^325^333^[REPLACE] int size = references.size (  ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^if  ( isInitializingDeclarationAt ( i )  ) {^328^^^^^325^333^[REPLACE] if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( 0 ) ;^329^^^^^325^333^[REPLACE] return references.get ( i ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^for (int i = 2; i  >  i; i++) {^327^^^^^325^333^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^if  ( sizesInitializingDeclarationAt ( i )  && isInitializingAssignmentAt ( i )  )  {^328^^^^^325^333^[REPLACE] if  ( isInitializingDeclarationAt ( i )  || isInitializingAssignmentAt ( i )  )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^return references.get ( size ) ;^329^^^^^325^333^[REPLACE] return references.get ( i ) ;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^327^^^^^325^333^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^return true;^332^^^^^325^333^[REPLACE] return null;^[METHOD] getInitializingReferenceForConstants [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int i  size  [TYPE]  boolean false  true 
[REPLACE]^boolean assigned = true;^339^^^^^338^352^[REPLACE] boolean assigned = false;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^Reference ref = references.get ( i ) ;^340^^^^^338^352^[REPLACE] int size = references.size (  ) ;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^if  ( ref.isLvalue (  )  ) {^343^^^^^338^352^[REPLACE] if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^if  ( !true )  {^344^^^^^338^352^[REPLACE] if  ( !assigned )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[ADD]^assigned = true;return false;^344^345^346^347^348^338^352^[ADD] if  ( !assigned )  { assigned = true; } else { return false; }^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^return true;^347^^^^^338^352^[REPLACE] return false;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^assigned = false;^345^^^^^338^352^[REPLACE] assigned = true;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^for (int i = 0 ; i  >=  size; i++) {^341^^^^^338^352^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[ADD]^^341^342^343^344^345^338^352^[ADD] for  ( int i = 0; i < size; i++ )  { Reference ref = references.get ( i ) ; if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  { if  ( !assigned )  { assigned = true;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^if  ( ref.isLvalue (  )  && ref.isInitializingDeclaration (  )  )  {^343^^^^^338^352^[REPLACE] if  ( ref.isLvalue (  )  || ref.isInitializingDeclaration (  )  )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^if  ( assigned )  {^344^^^^^338^352^[REPLACE] if  ( !assigned )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^Reference ref = references.get ( size ) ;^342^^^^^338^352^[REPLACE] Reference ref = references.get ( i ) ;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[ADD]^^345^^^^^338^352^[ADD] assigned = true;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^for  ( int i = 0 ; i < size; i++ )  {^341^^^^^338^352^[REPLACE] for  ( int i = 0; i < size; i++ )  {^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^return true;^351^^^^^338^352^[REPLACE] return assigned;^[METHOD] isAssignedOnce [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  boolean assigned  false  true  [TYPE]  int i  size  [TYPE]  Reference ref 
[REPLACE]^Reference ref = references.get ( i ) ;^355^^^^^354^360^[REPLACE] int size = references.size (  ) ;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^if (  references.get(0).isInitializingDeclaration()) {^356^^^^^354^360^[REPLACE] if  ( size > 0 && references.get ( 0 ) .isInitializingDeclaration (  )  )  {^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^return false;^357^^^^^354^360^[REPLACE] return true;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^return true;^359^^^^^354^360^[REPLACE] return false;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] ReferenceCollection   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^private static final Set<Integer> DECLARATION_PARENTS  = null ;^368^369^^^^368^369^[REPLACE] private static final Set<Integer> DECLARATION_PARENTS = ImmutableSet.of ( Token.VAR, Token.FUNCTION, Token.CATCH ) ;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^private  Node parent;^372^^^^^^^[REPLACE] private final Node parent;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^private  Node grandparent;^373^^^^^^^[REPLACE] private final Node grandparent;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^private  Scope scope;^375^^^^^^^[REPLACE] private final Scope scope;^[METHOD] firstReferenceIsAssigningDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  List references  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^this ( nameNode, parent, parent.getType (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^[REPLACE] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[REPLACE]^this ( nameNode, nameNode, parent.getType (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^[REPLACE] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[ADD]^^380^381^^^^378^382^[ADD] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[REPLACE]^this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getSourceName (  ) , t.getSourceName (  )  ) ;^380^381^^^^378^382^[REPLACE] this ( nameNode, parent, parent.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[REPLACE]^t .getScope (  )   ) ;^381^^^^^378^382^[REPLACE] t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[ADD]^^381^^^^^378^382^[ADD] t.getSourceName (  )  ) ;^[METHOD] <init> [TYPE] ReferenceCollectingCallback$BasicBlock) [PARAMETER] Node nameNode Node parent NodeTraversal t BasicBlock basicBlock [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[REPLACE]^this.nameNode =  parent;^394^^^^^392^400^[REPLACE] this.nameNode = nameNode;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[REPLACE]^this.parent =  nameNode;^395^^^^^392^400^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[REPLACE]^this.grandparent =  parent;^396^^^^^392^400^[REPLACE] this.grandparent = grandparent;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[REPLACE]^this.basicBlock =  null;^397^^^^^392^400^[REPLACE] this.basicBlock = basicBlock;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[REPLACE]^this.scope =  null;^398^^^^^392^400^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[ADD]^this.sourceName = sourceName;^398^399^^^^392^400^[ADD] this.scope = scope; this.sourceName = sourceName;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[REPLACE]^this.sourceName =  null;^399^^^^^392^400^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] String) [PARAMETER] Node nameNode Node parent Node grandparent BasicBlock basicBlock Scope scope String sourceName [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node grandparent  nameNode  parent 
[REPLACE]^return new Reference ( func.getFirstChild (  ) , func, func.getType (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^388^389^^^^386^390^[REPLACE] return new Reference ( func.getFirstChild (  ) , func, func.getParent (  ) , basicBlock, t.getScope (  ) , t.getSourceName (  )  ) ;^[METHOD] newBleedingFunction [TYPE] ReferenceCollectingCallback$Reference [PARAMETER] NodeTraversal t BasicBlock basicBlock Node func [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node func  grandparent  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName 
[REPLACE]^return true ;^403^404^405^^^402^406^[REPLACE] return DECLARATION_PARENTS.contains ( parent.getType (  )  )  || parent.getType (  )  == Token.LP && grandparent.getType (  )  == Token.FUNCTION;^[METHOD] isDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return parent .getParent (  )   == Token.VAR;^409^^^^^408^410^[REPLACE] return parent.getType (  )  == Token.VAR;^[METHOD] isVarDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return NodeUtil .isAssignmentOp ( grandparent )  ;^413^^^^^412^414^[REPLACE] return NodeUtil.isHoistedFunctionDeclaration ( parent ) ;^[METHOD] isHoistedFunction [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || name      != null ) ;^422^423^^^^419^424^[REPLACE] return isDeclaration (  )  && ( parent.getType (  )  != Token.VAR || nameNode.getFirstChild (  )  != null ) ;^[METHOD] isInitializingDeclaration [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return NodeUtil.isAssignmentOp ( getNameNode (  )  ) ;^431^^^^^430^432^[REPLACE] return NodeUtil.getAssignedValue ( getNameNode (  )  ) ;^[METHOD] getAssignedValue [TYPE] Node [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return parent;^435^^^^^434^436^[REPLACE] return basicBlock;^[METHOD] getBasicBlock [TYPE] ReferenceCollectingCallback$BasicBlock [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return basicBlock;^439^^^^^438^440^[REPLACE] return parent;^[METHOD] getParent [TYPE] Node [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return basicBlock;^443^^^^^442^444^[REPLACE] return nameNode;^[METHOD] getNameNode [TYPE] Node [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^return basicBlock;^447^^^^^446^448^[REPLACE] return grandparent;^[METHOD] getGrandparent [TYPE] Node [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  nameNode  parent 
[REPLACE]^Node parent = parent.getParent (  ) ;^451^^^^^450^456^[REPLACE] Node parent = n.getParent (  ) ;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[ADD]^^451^^^^^450^456^[ADD] Node parent = n.getParent (  ) ;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^if  ( nameNode.getType (  )   !=  Token.VAR )  {^452^^^^^450^456^[REPLACE] if  ( parent.getType (  )  == Token.VAR )  {^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^return isLhsOfForInExpression ( nameNode ) ;^453^^^^^450^456^[REPLACE] return isLhsOfForInExpression ( parent ) ;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^return NodeUtil.isAssignmentOp ( parent )  && parent.getFirstChild (  )  == n;^455^^^^^450^456^[REPLACE] return NodeUtil.isForIn ( parent )  && parent.getFirstChild (  )  == n;^[METHOD] isLhsOfForInExpression [TYPE] boolean [PARAMETER] Node n [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^return parent.getType (  )  ;^459^460^^^^458^461^[REPLACE] return parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == nameNode;^[METHOD] isSimpleAssignmentToName [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^int parentType = parent .getParent (  )  ;^464^^^^^463^471^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] isLvalue [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName  [TYPE]  int parentType 
[ADD]^^464^^^^^463^471^[ADD] int parentType = parent.getType (  ) ;^[METHOD] isLvalue [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName  [TYPE]  int parentType 
[REPLACE]^return  ( parentType != Token.VAR || name      != false ) || parentType ;^465^466^467^468^^463^471^[REPLACE] return  ( parentType == Token.VAR && nameNode.getFirstChild (  )  != null ) || parentType == Token.INC || parentType == Token.DEC ||  ( NodeUtil.isAssignmentOp ( parent )^[METHOD] isLvalue [TYPE] boolean [PARAMETER] [CLASS] Reference   [TYPE]  Set DECLARATION_PARENTS  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent  [TYPE]  BasicBlock basicBlock  [TYPE]  String sourceName  [TYPE]  int parentType 
[REPLACE]^return basicBlock;^474^^^^^473^475^[REPLACE] return scope;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^return basicBlock;^478^^^^^477^479^[REPLACE] return sourceName;^[METHOD] getSourceName [TYPE] String [PARAMETER] [CLASS] Reference   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^private  BasicBlock parent;^488^^^^^^^[REPLACE] private final BasicBlock parent;^[METHOD] getSourceName [TYPE] String [PARAMETER] [CLASS] BasicBlock   [TYPE]  BasicBlock basicBlock  [TYPE]  Set DECLARATION_PARENTS  [TYPE]  String sourceName  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Node func  grandparent  n  nameNode  parent 
[REPLACE]^this.parent =  null;^502^^^^^501^506^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] BasicBlock parent Node root [CLASS] BasicBlock   [TYPE]  BasicBlock parent  [TYPE]  boolean false  isHoisted  true  [TYPE]  Node root 
[REPLACE]^this.isHoisted =  NodeUtil.isHoistedFunctionDeclaration ( null ) ;^505^^^^^501^506^[REPLACE] this.isHoisted = NodeUtil.isHoistedFunctionDeclaration ( root ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] BasicBlock parent Node root [CLASS] BasicBlock   [TYPE]  BasicBlock parent  [TYPE]  boolean false  isHoisted  true  [TYPE]  Node root 
[REPLACE]^return false;^509^^^^^508^510^[REPLACE] return parent;^[METHOD] getParent [TYPE] ReferenceCollectingCallback$BasicBlock [PARAMETER] [CLASS] BasicBlock   [TYPE]  BasicBlock parent  [TYPE]  boolean false  isHoisted  true 
[ADD]^^519^520^^^^516^529^[ADD] BasicBlock currentBlock; for  ( currentBlock = thatBlock;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[REPLACE]^if  ( thatBlock.isHoisted )  {^523^^^^^516^529^[REPLACE] if  ( currentBlock.isHoisted )  {^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[REPLACE]^return true;^524^^^^^516^529^[REPLACE] return false;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[REPLACE]^for  ( parent = thatBlock;^520^^^^^516^529^[REPLACE] for  ( currentBlock = thatBlock;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[ADD]^^523^524^525^^^516^529^[ADD] if  ( currentBlock.isHoisted )  { return false; }^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[REPLACE]^for  ( currentBlock =  null;^520^^^^^516^529^[REPLACE] for  ( currentBlock = thatBlock;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[REPLACE]^currentBlock =  thatBlock.getParent (  )  )  {^522^^^^^516^529^[REPLACE] currentBlock = currentBlock.getParent (  )  )  {^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
[REPLACE]^returnthatBlock  &&  this;^528^^^^^516^529^[REPLACE] return currentBlock == this;^[METHOD] provablyExecutesBefore [TYPE] boolean [PARAMETER] BasicBlock thatBlock [CLASS] BasicBlock   [TYPE]  BasicBlock currentBlock  parent  thatBlock  [TYPE]  boolean false  isHoisted  true 
