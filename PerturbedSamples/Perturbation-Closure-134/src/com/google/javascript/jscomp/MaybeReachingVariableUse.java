[REPLACE]^private  Scope jsScope;^47^^^^^^^[REPLACE] private final Scope jsScope;^ [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  
[REPLACE]^private  Set<Var> escaped;^48^^^^^^^[REPLACE] private final Set<Var> escaped;^ [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  
[REPLACE]^Multimap<Var, Node> mayUseMap;^85^^^^^^^[REPLACE] final Multimap<Var, Node> mayUseMap;^ [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp  
[REPLACE]^super ( 0, new ReachingUsesJoinOp (  )  ) ;^52^^^^^50^59^[REPLACE] super ( cfg, new ReachingUsesJoinOp (  )  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  AbstractCompiler compiler  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^this.jsScope =  null;^53^^^^^50^59^[REPLACE] this.jsScope = jsScope;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  AbstractCompiler compiler  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^this.escaped  =  this.escaped ;^54^^^^^50^59^[REPLACE] this.escaped = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  AbstractCompiler compiler  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ControlFlowGraph cfg 
[ADD]^^54^^^^^50^59^[ADD] this.escaped = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  AbstractCompiler compiler  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^computeMayUse ( c, cfgNode, output, conditional ) ;^58^^^^^50^59^[REPLACE] computeEscaped ( jsScope, escaped, compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  AbstractCompiler compiler  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^mayUseMap = HashMultimap.create ( other.mayUseMap ) ; ;^88^^^^^87^89^[REPLACE] mayUseMap = HashMultimap.create (  ) ;^[METHOD] <init> [TYPE] MaybeReachingVariableUse$ReachingUses() [PARAMETER] [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope 
[REPLACE]^mayUseMap = HashMultimap.create (  ) ; ;^97^^^^^96^98^[REPLACE] mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[METHOD] <init> [TYPE] MaybeReachingVariableUse$ReachingUses) [PARAMETER] ReachingUses other [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses other 
[REPLACE]^return   (  ( ReachingUses )  other ) .mayUseMap.hashCode ( this.mayUseMap ) ;^102^103^^^^101^104^[REPLACE] return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Object other  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope 
[REPLACE]^return false;^108^^^^^107^109^[REPLACE] return mayUseMap.hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope 
[REPLACE]^ReachingUses output = new ReachingUses ( input ) ;^122^^^^^121^127^[REPLACE] ReachingUses result = new ReachingUses (  ) ;^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  List from  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses result  uses 
[REPLACE]^for  ( ReachingUses uses : from )  { result.mayUseMap.putAll ( uses.mayUseMap ) ;^123^^^^^121^127^[REPLACE] for  ( ReachingUses uses : from )  {^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  List from  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses result  uses 
[REPLACE]^return uses;^126^^^^^121^127^[REPLACE] return result;^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  List from  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses result  uses 
[REPLACE]^return true;^132^^^^^131^133^[REPLACE] return false;^[METHOD] isForward [TYPE] boolean [PARAMETER] [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope 
[REPLACE]^return  new ReachingUsesJoinOp (  )  ;^137^^^^^136^138^[REPLACE] return new ReachingUses (  ) ;^[METHOD] createEntryLattice [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope 
[REPLACE]^return  new ReachingUsesJoinOp (  )  ;^142^^^^^141^143^[REPLACE] return new ReachingUses (  ) ;^[METHOD] createInitialEstimateLattice [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope 
[REPLACE]^ReachingUses output = new ReachingUses ( output ) ;^147^^^^^146^150^[REPLACE] ReachingUses output = new ReachingUses ( input ) ;^[METHOD] flowThrough [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] Node n ReachingUses input [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses input  output  [TYPE]  Node n 
[REPLACE]^computeMayUse ( n, n, output, true ) ;^148^^^^^146^150^[REPLACE] computeMayUse ( n, n, output, false ) ;^[METHOD] flowThrough [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] Node n ReachingUses input [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses input  output  [TYPE]  Node n 
[ADD]^return output;^148^149^^^^146^150^[ADD] computeMayUse ( n, n, output, false ) ; return output;^[METHOD] flowThrough [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] Node n ReachingUses input [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses input  output  [TYPE]  Node n 
[REPLACE]^return input;^149^^^^^146^150^[REPLACE] return output;^[METHOD] flowThrough [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] Node n ReachingUses input [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses input  output  [TYPE]  Node n 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^172^^^^^153^237^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isVar ( rhs )  )  {^179^^^^^172^186^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^lhs = lhs.getLastChild (  ) ;^179^180^181^^^172^186^[ADD] if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs =  null.getLastChild (  ) ;^180^^^^^172^186^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  ) {^182^^^^^172^186^[REPLACE] if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^183^^^^^172^186^[REPLACE] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getType (  ) , output ) ;^183^^^^^172^186^[REPLACE] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^180^^^^^172^186^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^172^186^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^178^^^^^172^186^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^computeMayUse ( NodeUtil .isForIn ( cfgNode )  , cfgNode, output, conditional ) ;^173^174^^^^153^237^[REPLACE] computeMayUse ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^NodeUtil.isForIn ( n ) , cfgNode, output, conditional ) ;^174^^^^^153^237^[REPLACE] NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isVar ( rhs )  )  {^179^^^^^153^237^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^180^^^^^153^237^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^180^^^^^153^237^[ADD] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  && conditional )  {^182^^^^^153^237^[REPLACE] if  ( NodeUtil.isName ( lhs )  && !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( name.getString (  ) , output ) ;^183^^^^^153^237^[REPLACE] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^183^^^^^153^237^[REPLACE] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^183^^^^^153^237^[ADD] removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !NodeUtil.isForIn ( n )  )  {^205^^^^^153^237^[REPLACE] if  ( varName.hasChildren (  )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ;removeFromUseIfLocal ( varName.getString (  ) , output ) ;^205^206^207^208^209^153^237^[ADD] if  ( varName.hasChildren (  )  )  { computeMayUse ( varName.getFirstChild (  ) , cfgNode, output, conditional ) ; if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( conditional )  {^207^^^^^153^237^[REPLACE] if  ( !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^207^208^209^^^153^237^[ADD] if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getType (  ) , output ) ;^208^^^^^153^237^[REPLACE] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^208^^^^^153^237^[ADD] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( rhs.getString (  ) , output ) ;^208^^^^^153^237^[REPLACE] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^207^208^209^^^153^237^[ADD] if  ( !conditional )  { removeFromUseIfLocal ( varName.getString (  ) , output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( varName.getType (  ) , output ) ;^208^^^^^153^237^[REPLACE] removeFromUseIfLocal ( varName.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REMOVE]^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^208^^^^^153^237^[REMOVE] ^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  (  NodeUtil.isName ( n.getFirstChild (  )  )  )  {^214^^^^^153^237^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^Node name = n.getFirstChild (  ) ;removeFromUseIfLocal ( name.getString (  ) , output ) ;^214^215^216^217^218^153^237^[ADD] if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  { Node name = n.getFirstChild (  ) ; if  ( !conditional )  { removeFromUseIfLocal ( name.getString (  ) , output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c = n.getLastChild (  ) ; c == null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^computeMayUse ( cfgNode, cfgNode, output, conditional ) ;^233^^^^^214^235^[REPLACE] computeMayUse ( c, cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c =  varName.getLastChild (  ) ; c !^232^^^^^214^235^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^214^235^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^232^233^234^^^214^235^[ADD] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  { computeMayUse ( c, cfgNode, output, conditional ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !true )  {^216^^^^^153^237^[REPLACE] if  ( !conditional )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^216^217^218^^^153^237^[ADD] if  ( !conditional )  { removeFromUseIfLocal ( name.getString (  ) , output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( varName.getString (  ) , output ) ;^217^^^^^153^237^[REPLACE] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^217^^^^^153^237^[ADD] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^removeFromUseIfLocal ( varName .getLastChild (  )  , output ) ;^217^^^^^153^237^[REPLACE] removeFromUseIfLocal ( name.getString (  ) , output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REMOVE]^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^217^^^^^153^237^[REMOVE] ^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !NodeUtil.isAssign ( varName )  )  {^221^^^^^153^237^[REPLACE] if  ( !NodeUtil.isAssign ( n )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^221^222^223^^^153^237^[ADD] if  ( !NodeUtil.isAssign ( n )  )  { addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^addToUseIfLocal ( varName.getString (  ) , cfgNode, output ) ;^222^^^^^153^237^[REPLACE] addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^222^^^^^153^237^[ADD] addToUseIfLocal ( name.getString (  ) , cfgNode, output ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node varNameame = n.getFirstChild (  ) ;^215^^^^^153^237^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^if  ( !NodeUtil.isForIn ( n )  )  {^221^^^^^153^237^[REPLACE] if  ( !NodeUtil.isAssign ( n )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REMOVE]^removeFromUseIfLocal ( lhs.getString (  ) , output ) ;^222^^^^^153^237^[REMOVE] ^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c = n.getLastChild (  ) ; c == true; c = n.getChildBefore ( c )  )  {^232^^^^^153^237^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^computeMayUse ( c, varName, output, conditional ) ;^233^^^^^153^237^[REPLACE] computeMayUse ( c, cfgNode, output, conditional ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c =  varName.getLastChild (  ) ; c !^232^^^^^153^237^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[ADD]^^232^233^234^^^153^237^[ADD] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  { computeMayUse ( c, cfgNode, output, conditional ) ; }^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^158^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^162^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^169^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^187^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^193^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^199^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^return false;^211^^^^^153^237^[REPLACE] return;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node lhs = varName.getFirstChild (  ) ;^177^^^^^153^237^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^178^^^^^153^237^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Node varName = varName.getLastChild (  ) ;^202^^^^^153^237^[REPLACE] Node varName = n.getFirstChild (  ) ;^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^for  ( Node c = varName.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^232^^^^^153^237^[REPLACE] for  ( Node c = n.getLastChild (  ) ; c != null; c = n.getChildBefore ( c )  )  {^[METHOD] computeMayUse [TYPE] void [PARAMETER] Node n Node cfgNode ReachingUses output boolean conditional [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses output  [TYPE]  Node c  cfgNode  lhs  n  name  rhs  varName 
[REPLACE]^Var var = js  name   ;^245^^^^^244^252^[REPLACE] Var var = jsScope.getVar ( name ) ;^[METHOD] addToUseIfLocal [TYPE] void [PARAMETER] String name Node node ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^if  ( var != null || var.scope != jsScope )  {^246^^^^^244^252^[REPLACE] if  ( var == null || var.scope != jsScope )  {^[METHOD] addToUseIfLocal [TYPE] void [PARAMETER] String name Node node ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^return false;^247^^^^^244^252^[REPLACE] return;^[METHOD] addToUseIfLocal [TYPE] void [PARAMETER] String name Node node ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^if  ( !NodeUtil.isForIn ( n )  )  {^249^^^^^244^252^[REPLACE] if  ( !escaped.contains ( var )  )  {^[METHOD] addToUseIfLocal [TYPE] void [PARAMETER] String name Node node ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^result.mayUseMap.putAll ( uses.mayUseMap ) ;^250^^^^^244^252^[REPLACE] use.mayUseMap.put ( var, node ) ;^[METHOD] addToUseIfLocal [TYPE] void [PARAMETER] String name Node node ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  String name 
[REPLACE]^Var var = js  name   ;^260^^^^^259^267^[REPLACE] Var var = jsScope.getVar ( name ) ;^[METHOD] removeFromUseIfLocal [TYPE] void [PARAMETER] String name ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  String name 
[REPLACE]^if  ( var != null || var.scope != jsScope )  {^261^^^^^259^267^[REPLACE] if  ( var == null || var.scope != jsScope )  {^[METHOD] removeFromUseIfLocal [TYPE] void [PARAMETER] String name ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  String name 
[REPLACE]^return false;^262^^^^^259^267^[REPLACE] return;^[METHOD] removeFromUseIfLocal [TYPE] void [PARAMETER] String name ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  String name 
[REPLACE]^if  ( escaped.contains ( var )  )  {^264^^^^^259^267^[REPLACE] if  ( !escaped.contains ( var )  )  {^[METHOD] removeFromUseIfLocal [TYPE] void [PARAMETER] String name ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  String name 
[ADD]^use.mayUseMap.removeAll ( var ) ;^264^265^266^^^259^267^[ADD] if  ( !escaped.contains ( var )  )  { use.mayUseMap.removeAll ( var ) ; }^[METHOD] removeFromUseIfLocal [TYPE] void [PARAMETER] String name ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  String name 
[REPLACE]^use.mayUseMap.equals ( var ) ;^265^^^^^259^267^[REPLACE] use.mayUseMap.removeAll ( var ) ;^[METHOD] removeFromUseIfLocal [TYPE] void [PARAMETER] String name ReachingUses use [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  ReachingUses use  [TYPE]  Var var  [TYPE]  String name 
[REPLACE]^Node rhs = lhs.getNext (  ) ;^280^^^^^279^284^[REPLACE] GraphNode<Node, Branch> n = getCfg (  ) .getNode ( defNode ) ;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
[REPLACE]^Preconditions.checkState ( this ) ;^281^^^^^279^284^[REPLACE] Preconditions.checkNotNull ( n ) ;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
[REPLACE]^FlowState<ReachingUses> state = this.getAnnotation (  ) ;^282^^^^^279^284^[REPLACE] FlowState<ReachingUses> state = n.getAnnotation (  ) ;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
[ADD]^^282^283^^^^279^284^[ADD] FlowState<ReachingUses> state = n.getAnnotation (  ) ; return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
[REPLACE]^return state.getNodeOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^283^^^^^279^284^[REPLACE] return state.getOut (  ) .mayUseMap.get ( jsScope.getVar ( name )  ) ;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] MaybeReachingVariableUse ReachingUses ReachingUsesJoinOp   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
[REPLACE]^Multimap<Var, Node> mayUseMap;^85^^^^^^^[REPLACE] final Multimap<Var, Node> mayUseMap;^[METHOD] getUses [TYPE] Collection [PARAMETER] String name Node defNode [CLASS] ReachingUses   [TYPE]  Multimap mayUseMap  [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node defNode  [TYPE]  GraphNode n  [TYPE]  String name 
[REPLACE]^mayUseMap = HashMultimap.create ( other.mayUseMap ) ; ;^88^^^^^87^89^[REPLACE] mayUseMap = HashMultimap.create (  ) ;^[METHOD] <init> [TYPE] MaybeReachingVariableUse$ReachingUses() [PARAMETER] [CLASS] ReachingUses   [TYPE]  Multimap mayUseMap  [TYPE]  boolean false  true 
[REPLACE]^mayUseMap = HashMultimap.create (  ) ; ;^97^^^^^96^98^[REPLACE] mayUseMap = HashMultimap.create ( other.mayUseMap ) ;^[METHOD] <init> [TYPE] MaybeReachingVariableUse$ReachingUses) [PARAMETER] ReachingUses other [CLASS] ReachingUses   [TYPE]  Multimap mayUseMap  [TYPE]  ReachingUses other  [TYPE]  boolean false  true 
[REPLACE]^return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.hashCode ( this.mayUseMap ) ;^102^103^^^^101^104^[REPLACE] return  ( other instanceof ReachingUses )  && (  ( ReachingUses )  other ) .mayUseMap.equals ( this.mayUseMap ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] ReachingUses   [TYPE]  Multimap mayUseMap  [TYPE]  Object other  [TYPE]  boolean false  true 
[REPLACE]^return mayUseMap .hashCode (  )  ;^108^^^^^107^109^[REPLACE] return mayUseMap.hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] ReachingUses   [TYPE]  Multimap mayUseMap  [TYPE]  boolean false  true 
[REPLACE]^for  ( ReachingUses uses : from )  { result.mayUseMap.putAll ( uses.mayUseMap ) ;^122^^^^^121^127^[REPLACE] ReachingUses result = new ReachingUses (  ) ;^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] ReachingUsesJoinOp   [TYPE]  boolean false  true  [TYPE]  ReachingUses result  uses  [TYPE]  List from 
[REPLACE]^for  ( ReachingUses uses : from )  { result.mayUseMap.putAll ( uses.mayUseMap ) ;^123^^^^^121^127^[REPLACE] for  ( ReachingUses uses : from )  {^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] ReachingUsesJoinOp   [TYPE]  boolean false  true  [TYPE]  ReachingUses result  uses  [TYPE]  List from 
[ADD]^^123^124^125^^^121^127^[ADD] for  ( ReachingUses uses : from )  { result.mayUseMap.putAll ( uses.mayUseMap ) ; }^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] ReachingUsesJoinOp   [TYPE]  boolean false  true  [TYPE]  ReachingUses result  uses  [TYPE]  List from 
[REPLACE]^return uses;^126^^^^^121^127^[REPLACE] return result;^[METHOD] apply [TYPE] MaybeReachingVariableUse$ReachingUses [PARAMETER] ReachingUses> from [CLASS] ReachingUsesJoinOp   [TYPE]  boolean false  true  [TYPE]  ReachingUses result  uses  [TYPE]  List from 
