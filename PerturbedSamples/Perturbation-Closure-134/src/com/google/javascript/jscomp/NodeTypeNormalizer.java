[REPLACE]^this ( true ) ;^32^^^^^31^33^[REPLACE] this ( false ) ;^[METHOD] <init> [TYPE] NodeTypeNormalizer() [PARAMETER] [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  true 
[REPLACE]^this.assertOnChange =  true;^36^^^^^35^37^[REPLACE] this.assertOnChange = forbidChanges;^[METHOD] <init> [TYPE] NodeTypeNormalizer(boolean) [PARAMETER] boolean forbidChanges [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true 
[REPLACE]^if  ( c.getType (  )  != Token.EMPTY )  {^40^^^^^39^43^[REPLACE] if  ( assertOnChange )  {^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true 
[ADD]^^40^41^42^^^39^43^[ADD] if  ( assertOnChange )  { Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ; }^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true 
[REPLACE]^Preconditions .checkState (  )  ;^41^^^^^39^43^[REPLACE] Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^[METHOD] reportChange [TYPE] void [PARAMETER] [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true 
[REPLACE]^normalizeJsDocAnnotations ( root ) ;^47^^^^^46^49^[REPLACE] normalizeNodeTypes ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node externs  root 
[REPLACE]^normalizeJsDocAnnotations ( child ) ;^48^^^^^46^49^[REPLACE] normalizeJsDocAnnotations ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node externs  root 
[REPLACE]^if  ( n.getType (  )   ||  Token.OBJECTLIT )  {^69^^^^^68^84^[REPLACE] if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if  ( key.getJSDocInfo (  )  != null ) {^73^74^^^^68^84^[REPLACE] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[ADD]^^73^74^75^76^^68^84^[ADD] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  { value.setJSDocInfo ( key.getJSDocInfo (  )  ) ; }^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^value.setJSDocInfo ( key .setJSDocInfo (  )   ) ;^75^^^^^68^84^[REPLACE] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^value.setJSDocInfo ( key.setJSDocInfo (  )  ) ;^75^^^^^68^84^[REPLACE] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^70^^^^^68^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if  (  key.getNext (  ) .getType (  )  != Token.FUNCTION )  {^73^74^^^^68^84^[REPLACE] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[ADD]^^75^^^^^68^84^[ADD] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^Node value = key.getParent (  ) ;^72^^^^^68^84^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[ADD]^^72^^^^^68^84^[ADD] Node value = key.getNext (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^key !=  null; null^71^^^^^68^84^[REPLACE] key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^for  ( Node key = n.getType (  ) ;^70^^^^^68^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^Node value = key .getParent (  )  ;^72^^^^^68^84^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  != Token.FUNCTION )  {^73^74^^^^68^84^[REPLACE] if  ( key.getJSDocInfo (  )  != null && key.getNext (  ) .getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^value.setWasEmptyNode ( key.getJSDocInfo (  )  ) ;^75^^^^^68^84^[REPLACE] value.setJSDocInfo ( key.getJSDocInfo (  )  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REMOVE]^normalizeJsDocAnnotations ( root ) ;^75^^^^^68^84^[REMOVE] ^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^80^^^^^68^84^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^normalizeJsDocAnnotations ( root ) ;^82^^^^^68^84^[REPLACE] normalizeJsDocAnnotations ( child ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^child !=  null; null^81^^^^^68^84^[REPLACE] child != null; child = child.getNext (  )  )  {^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^for  ( Node child = n.getType (  ) ;^80^^^^^68^84^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[ADD]^^80^81^82^83^^68^84^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { normalizeJsDocAnnotations ( child ) ; }^[METHOD] normalizeJsDocAnnotations [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  key  n  value 
[REPLACE]^if  ( n.getType (  )   &&  Token.EXPR_VOID )  {^90^^^^^89^111^[REPLACE] if  ( n.getType (  )  == Token.EXPR_VOID )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^n.setWasEmptyNode ( Token.EXPR_RESULT ) ;^91^^^^^89^111^[REPLACE] n.setType ( Token.EXPR_RESULT ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^normalizeJsDocAnnotations ( root ) ;^92^^^^^89^111^[REPLACE] reportChange (  ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^if  ( n.getType (  )   &&  Token.FUNCTION )  {^97^^^^^89^111^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[ADD]^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^97^98^99^^^89^111^[ADD] if  ( n.getType (  )  == Token.FUNCTION )  { Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ; }^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  != null ) ;^98^^^^^89^111^[REPLACE] Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REMOVE]^Preconditions.checkState ( false, "normalizeNodeType constraints violated" ) ;^98^^^^^89^111^[REMOVE] ^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^Preconditions.checkState ( n.setWasEmptyNode ( Node.FUNCTION_PROP )  == null ) ;^98^^^^^89^111^[REPLACE] Preconditions.checkState ( n.getProp ( Node.FUNCTION_PROP )  == null ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^normalizeJsDocAnnotations ( root ) ;^101^^^^^89^111^[REPLACE] normalizeBlocks ( n ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REMOVE]^normalizeJsDocAnnotations ( root ) ;^101^^^^^89^111^[REMOVE] ^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^103^^^^^89^111^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[ADD]^^103^104^^^107^89^111^[ADD] for  ( Node child = n.getFirstChild (  ) ; child != null; child = child.getNext (  )  )  { Preconditions.checkState ( child.getParent (  )  == n ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^Preconditions.checkState ( child.getParent (  )   !=  n ) ;^107^^^^^89^111^[REPLACE] Preconditions.checkState ( child.getParent (  )  == n ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^Preconditions.checkState ( child .getNext (  )   == n ) ;^107^^^^^89^111^[REPLACE] Preconditions.checkState ( child.getParent (  )  == n ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^normalizeJsDocAnnotations ( root ) ;^109^^^^^89^111^[REPLACE] normalizeNodeTypes ( child ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^child !=  null; null^104^^^^^89^111^[REPLACE] child != null; child = child.getNext (  )  )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[ADD]^^104^105^106^^^89^111^[ADD] child != null; child = child.getNext (  )  )  {^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^for  ( Node child = n.getType (  ) ;^103^^^^^89^111^[REPLACE] for  ( Node child = n.getFirstChild (  ) ;^[METHOD] normalizeNodeTypes [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node child  n 
[REPLACE]^if  ( NodeUtil.isControlStructure ( n ) || n.getType (  )  != Token.LABEL || n.getType (  )  != Token.SWITCH )  {^117^118^119^^^116^135^[REPLACE] if  ( NodeUtil.isControlStructure ( n ) && n.getType (  )  != Token.LABEL && n.getType (  )  != Token.SWITCH )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  || c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^[REPLACE] if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  ( c.getType (  )   ==  Token.EMPTY )  {^125^^^^^116^135^[REPLACE] if  ( c.getType (  )  != Token.EMPTY )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock.setWasEmptyNode ( false ) ;^128^^^^^116^135^[REPLACE] newBlock.setWasEmptyNode ( true ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock.setWasEmptyNode ( c ) ;^126^^^^^116^135^[REPLACE] newBlock.addChildrenToFront ( c ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^126^^^^^116^135^[ADD] newBlock.addChildrenToFront ( c ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^c =  n;^130^^^^^116^135^[REPLACE] c = newBlock;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^Node value = key.getNext (  ) ;^123^^^^^116^135^[REPLACE] Node newBlock = new Node ( Token.BLOCK ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^newBlock.addChildrenToFront ( c ) ;newBlock.setWasEmptyNode ( true ) ;^125^126^127^128^129^116^135^[ADD] if  ( c.getType (  )  != Token.EMPTY )  { newBlock.addChildrenToFront ( c ) ; } else { newBlock.setWasEmptyNode ( true ) ; }^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^120^121^122^123^124^116^135^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  { Node newBlock = new Node ( Token.BLOCK ) ; n.replaceChild ( c, newBlock ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^128^^^^^116^135^[ADD] newBlock.setWasEmptyNode ( true ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( EXPR_VOID )  )  {     n.setType ( Token.EXPR_RESULT ) ;     reportChange (  ) ; }^125^^^^^116^135^[REMOVE] ^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock .getParent (  )  ;^126^^^^^116^135^[REPLACE] newBlock.addChildrenToFront ( c ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; newBlock !^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c = newBlock.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  (  c.getType (  )  != Token.BLOCK )  {^121^122^^^^116^135^[REPLACE] if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^130^131^^^^116^135^[ADD] c = newBlock; reportChange (  ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^123^124^^^^116^135^[ADD] Node newBlock = new Node ( Token.BLOCK ) ; n.replaceChild ( c, newBlock ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^newBlock.addChildrenToFront ( false ) ;^128^^^^^116^135^[REPLACE] newBlock.setWasEmptyNode ( true ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == this ; c = c.getNext (  )  )  {^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  ) {^121^122^^^^116^135^[REPLACE] if  ( NodeUtil.isControlStructureCodeBlock ( n,c )  && c.getType (  )  != Token.BLOCK )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^^130^^^^^116^135^[ADD] c = newBlock;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[REPLACE]^for  ( Node c = newBlock.getType (  ) ; c != null; c = c.getNext (  )  )  {^120^^^^^116^135^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
[ADD]^n.replaceChild ( c, newBlock ) ;^123^124^^^^116^135^[ADD] Node newBlock = new Node ( Token.BLOCK ) ; n.replaceChild ( c, newBlock ) ;^[METHOD] normalizeBlocks [TYPE] void [PARAMETER] Node n [CLASS] NodeTypeNormalizer   [TYPE]  boolean assertOnChange  false  forbidChanges  true  [TYPE]  Node c  n  newBlock 
