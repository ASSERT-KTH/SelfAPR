[REPLACE]^private  AbstractCompiler compiler;^66^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^Node parent;^77^^^^^^^[REPLACE] final Node parent;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^private  List<Collapse> collapses = Lists.newArrayList (  ) ;^88^^^^^^^[REPLACE] private final List<Collapse> collapses = Lists.newArrayList (  ) ;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^private final Set<Node> nodesToCollapse ;^95^^^^^^^[REPLACE] private final Set<Node> nodesToCollapse = Sets.newHashSet (  ) ;^ [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses  
[REPLACE]^this.firstVarNode =  null;^80^^^^^79^82^[REPLACE] this.firstVarNode = firstVarNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node firstVarNode Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node firstVarNode  parent 
[ADD]^^80^^^^^79^82^[ADD] this.firstVarNode = firstVarNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node firstVarNode Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node firstVarNode  parent 
[REPLACE]^this.parent =  firstVarNode;^81^^^^^79^82^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node firstVarNode Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node firstVarNode  parent 
[REPLACE]^this.compiler =  null;^98^^^^^97^99^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node firstVarNode  parent 
[REPLACE]^collapses.isEmpty (  ) ;^102^^^^^101^112^[REPLACE] collapses.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REPLACE]^Node next = expr.getNext (  ) ;^103^^^^^101^112^[REPLACE] nodesToCollapse.clear (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^105^106^107^^^101^112^[REPLACE] NodeTraversal.traverse ( compiler, root, new CombinedCompilerPass ( compiler, new ExploitAssigns (  ) , new GatherCollapses (  )  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REPLACE]^if  ( collapses.isEmpty (  )  )  {^108^^^^^101^112^[REPLACE] if  ( !collapses.isEmpty (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REPLACE]^nodesToCollapse.clear (  ) ;^109^^^^^101^112^[REPLACE] applyCollapses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REPLACE]^t.getCompiler (  ) .reportCodeChange (  ) ;^110^^^^^101^112^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REMOVE]^t.getCompiler (  ) .reportCodeChange (  ) ;^110^^^^^101^112^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node externs  firstVarNode  parent  root 
[REPLACE]^if  ( !NodeUtil.isExprAssign ( firstVarNode )  )  {^117^^^^^116^122^[REPLACE] if  ( !NodeUtil.isExprAssign ( expr )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent  externs  firstVarNode  parent  root 
[REPLACE]^return false;^118^^^^^116^122^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent  externs  firstVarNode  parent  root 
[REPLACE]^collapseAssign ( t, expr.getFirstChild (  ) , expr, root ) ;^121^^^^^116^122^[REPLACE] collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent  externs  firstVarNode  parent  root 
[REMOVE]^Node next = expr.getNext (  ) ;^121^^^^^116^122^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent  externs  firstVarNode  parent  root 
[REPLACE]^collapseAssign ( t, firstVarNode.getString (  ) , expr, exprParent ) ;^121^^^^^116^122^[REPLACE] collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent  externs  firstVarNode  parent  root 
[ADD]^^121^^^^^116^122^[ADD] collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent  externs  firstVarNode  parent  root 
[REPLACE]^Node leftValue = firstVarNode.getFirstChild (  ) ;^129^^^^^127^141^[REPLACE] Node leftValue = assign.getFirstChild (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[ADD]^^129^^^^^127^141^[ADD] Node leftValue = assign.getFirstChild (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^Node rightValue = root.getNext (  ) ;^130^^^^^127^141^[REPLACE] Node rightValue = leftValue.getNext (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^if  ( isCollapsibleValue ( leftValue, false )  ) {^131^132^^^^127^141^[REPLACE] if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^} else if  ( isCollapsibleValue ( rightValue, true )  || collapseAssignEqualTo ( leftValue, exprParent, rightValue )  )  {^134^135^^^^127^141^[REPLACE] } else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[ADD]^}   t.getCompiler (  ) .reportCodeChange (  ) ;^134^135^136^137^^127^141^[ADD] else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ; } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^}  else {^137^^^^^127^141^[REPLACE] } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[ADD]^}   collapseAssign ( t, rightValue, expr, exprParent ) ;^137^138^139^140^^127^141^[ADD] else if  ( rightValue.getType (  )  == Token.ASSIGN )  {  collapseAssign ( t, rightValue, expr, exprParent ) ; }^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^collapseAssign ( t, root, expr, exprParent ) ;^139^^^^^127^141^[REPLACE] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REMOVE]^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^139^^^^^127^141^[REMOVE] ^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^t .traverse ( compiler , leftValue , this )  .reportCodeChange (  ) ;^136^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^136^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^}  if  ( rightValue.getType (  )   &&  Token.ASSIGN )  {^137^^^^^127^141^[REPLACE] } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^collapseAssign ( t, rightValue, expr, root ) ;^139^^^^^127^141^[REPLACE] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^t .traverse ( compiler , externs , null )  .reportCodeChange (  ) ;^133^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^t .traverse ( compiler , assign , this )  .reportCodeChange (  ) ;^133^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^}  if  ( isCollapsibleValue ( rightValue, true )  ) {^134^135^^^^127^141^[REPLACE] } else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^}  if  ( rightValue.getType (  )   ||  Token.ASSIGN )  {^137^^^^^127^141^[REPLACE] } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^139^^^^^127^141^[REPLACE] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^t .traverse ( compiler , firstVarNode , null )  .reportCodeChange (  ) ;^136^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[ADD]^^136^^^^^127^141^[ADD] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^collapseAssign ( t, rightValue, leftValue, exprParent ) ;^139^^^^^127^141^[REPLACE] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[ADD]^^139^^^^^127^141^[ADD] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root 
[REPLACE]^return   value.getFirstChild (  ) .getType (  )  ;^164^^^^^157^176^[REPLACE] return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  isLValue  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value 
[REPLACE]^return false;^172^^^^^157^176^[REPLACE] return true;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  isLValue  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value 
[REPLACE]^return true;^175^^^^^157^176^[REPLACE] return false;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  isLValue  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftValue  parent  rightValue  root  value 
[REPLACE]^Node assign = next.getString (  ) ;^195^^^^^194^296^[REPLACE] Node assign = expr.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node parent = value;^196^^^^^194^296^[REPLACE] Node parent = exprParent;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node next = next .getParent (  )  ;^197^^^^^194^296^[REPLACE] Node next = expr.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^while  ( next == null )  {^198^^^^^194^296^[REPLACE] while  ( next != null )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^198^199^200^^^194^296^[ADD] while  ( next != null )  { switch  ( next.getType (  )  )  { case Token.AND:^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( next.getString (  ) .hasChildren (  )  )  {^212^^^^^194^296^[REPLACE] if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next = parent.getFirstChild (  ) ; ;^213^^^^^194^296^[REPLACE] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^213^^^^^194^296^[ADD] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent = next.getFirstChild (  ) ; ;^214^^^^^194^296^[REPLACE] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^} else if  ( isCollapsibleValue ( rightValue, false )  &&^221^^^^^194^296^[REPLACE] if  ( next.isQualifiedName (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^231^^^^^223^238^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;^237^^^^^223^238^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( root, assign )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^231^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;^237^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^String rootName = next.getQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( value.isQualifiedName (  )  || nextName.equals ( value .isQualifiedName (  )   )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( root, assign )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REMOVE]^if  ( name.equals ( node.getString (  )  )  )  {     return true; }^230^^^^^223^238^[REMOVE] ^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^return false;^230^231^232^^^194^296^[ADD] if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( value.getType (  )   &&  next.getType (  )  )  {^247^^^^^194^296^[REPLACE] if  ( value.getType (  )  == next.getType (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && next.isEquivalentTo ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^251^^^^^248^252^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^251^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return false;^260^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  ( next.removeChild (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && next.isEquivalentTo ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^278^279^280^^^194^296^[REPLACE] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^286^^^^^278^287^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  rightValue;^282^^^^^278^287^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next =  root.getNext (  ) ;^283^^^^^278^287^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^283^^^^^278^287^[ADD] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  rightValue;^207^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent = next.getFirstChild (  ) ; ;^208^^^^^194^296^[REPLACE] next = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  root;^282^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^282^283^^^^194^296^[ADD] parent = next; next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next =  value.getNext (  ) ;^283^^^^^194^296^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^217^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^240^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^262^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^286^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^291^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^String nextName = next.isQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^222^223^224^^^194^296^[ADD] String nextName = next.getQualifiedName (  ) ; if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node leftSide = root .removeChild ( rightValue )  ;^277^^^^^194^296^[REPLACE] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^277^^^^^194^296^[ADD] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( root.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^194^296^[REPLACE] if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^parent = next.getFirstChild (  ) ;next = parent.getFirstChild (  ) ;break;^212^213^214^215^216^194^296^[ADD] if  ( next.getFirstChild (  ) .hasChildren (  )  )  { parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ; break; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^213^214^^^^194^296^[ADD] parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^String nextName = next.getQualifiedName (  ) ;^221^222^223^224^^194^296^[ADD] if  ( next.isQualifiedName (  )  )  { String nextName = next.getQualifiedName (  ) ; if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^223^224^^^^194^296^[ADD] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( value.isQualifiedName (  )  ) {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( value.getType (  )   ||  next.getType (  )  )  {^247^^^^^194^296^[REPLACE] if  ( value.getType (  )  == next.getType (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  ( next.getType (  )  == Token.STRING ) {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  (  next.getType (  )  == Token.NUMBER )  && next.isEquivalentTo ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^248^249^250^251^252^194^296^[ADD] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^278^279^280^^282^194^296^[ADD] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  { parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  root;^282^^^^^278^287^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next =  value.getNext (  ) ;^283^^^^^278^287^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  root;^207^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[ADD]^^208^209^^^^194^296^[ADD] next = next.getFirstChild (  ) ; break;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^parent =  null;^282^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^next =  null.getNext (  ) ;^283^^^^^194^296^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^String rootName = next.isQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^Node leftSide = root.getFirstChild (  ) ;^277^^^^^194^296^[REPLACE] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^return true;^295^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String nextName  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  next  parent  rightValue  root  value 
[REPLACE]^if  ( parent.getType (  )   !=  Token.NAME )  {^306^^^^^304^318^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return false;^307^^^^^304^318^[REPLACE] return true;^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   ||  Token.GETPROP ) ;^309^^^^^304^318^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Preconditions.checkArgument ( value.getType (  )  == Token.GETPROP ) ;^309^^^^^304^318^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.GETPROP ) ;^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Node name = value.getString (  ) ;^311^^^^^304^318^[REPLACE] Node name = node.getFirstChild (  ) ;^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( name.getType (  )  == Token.NAME ) {^312^313^^^^304^318^[REPLACE] if  ( name.getType (  )  == Token.NAME && isNameAssignedTo ( name.getString (  ) , replacement )  )  {^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return true;^314^^^^^304^318^[REPLACE] return false;^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return false;^317^^^^^304^318^[REPLACE] return true;^[METHOD] isSafeReplacement [TYPE] boolean [PARAMETER] Node node Node replacement [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^} else if  ( isCollapsibleValue ( rightValue, false )  &&^325^^^^^323^340^[REPLACE] if  ( isNameAssignedTo ( name, c )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[ADD]^^325^326^327^^^323^340^[ADD] if  ( isNameAssignedTo ( name, c )  )  { return true; }^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return false;^326^^^^^323^340^[REPLACE] return true;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^for  ( Node c = node.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^324^^^^^323^340^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[ADD]^^324^325^326^327^^323^340^[ADD] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( isNameAssignedTo ( name, c )  )  { return true; }^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^for  ( Node c =  node.getFirstChild (  ) ; replacement !^324^^^^^323^340^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^for  ( Node c = value.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^324^^^^^323^340^[REPLACE] for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^330^^^^^323^340^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( value.removeChild (  )  == Token.ASSIGN || parent.getFirstChild (  )  == node )  {^332^^^^^323^340^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( name.equals ( node .getParent (  )   )  )  {^333^^^^^323^340^[REPLACE] if  ( name.equals ( node.getString (  )  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return false;^334^^^^^323^340^[REPLACE] return true;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( name.equals ( value.getString (  )  )  )  {^333^^^^^323^340^[REPLACE] if  ( name.equals ( node.getString (  )  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REMOVE]^if  ( ! ( isSafeReplacement ( next, assign )  )  )  {     return false; }^333^^^^^323^340^[REMOVE] ^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Node parent = rightValue.getNext (  ) ;^331^^^^^323^340^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[ADD]^^331^^^^^323^340^[ADD] Node parent = node.getParent (  ) ;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( parent.getType (  )  == Token.ASSIGN || parent.getFirstChild (  )  == value )  {^332^^^^^323^340^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[ADD]^^332^333^334^335^^323^340^[ADD] if  ( parent.getType (  )  == Token.ASSIGN && parent.getFirstChild (  )  == node )  { if  ( name.equals ( node.getString (  )  )  )  { return true; }^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( name.equals ( node.getParent (  )  )  )  {^333^^^^^323^340^[REPLACE] if  ( name.equals ( node.getString (  )  )  )  {^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^Node parent = root.getParent (  ) ;^331^^^^^323^340^[REPLACE] Node parent = node.getParent (  ) ;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^return true;^339^^^^^323^340^[REPLACE] return false;^[METHOD] isNameAssignedTo [TYPE] boolean [PARAMETER] String name Node node [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  name  next  node  parent  replacement  rightValue  root  value 
[REPLACE]^if  ( n.removeChild (  )   ==  Token.VAR )  return;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( parent.getType (  )  == Token.IF )  return;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( nodesToCollapse.add ( n )  )  return;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^354^355^^^358^349^378^[ADD] if  ( nodesToCollapse.contains ( n )  )  return;  if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( parent.getType (  )  == Token.IF )  return;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( parent.getType (  )   !=  Token.IF )  return;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( n.getType (  )  != Token.VAR )  return;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node varNode = varNode;^360^^^^^349^378^[REPLACE] Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^360^^^^^349^378^[ADD] Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^n =  null.getNext (  ) ;^363^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^363^^^^^349^378^[ADD] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^boolean hasNodesToCollapse = true;^365^^^^^349^378^[REPLACE] boolean hasNodesToCollapse = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^365^^^^^349^378^[ADD] boolean hasNodesToCollapse = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^while  ( n != null ;^366^^^^^349^378^[REPLACE] while  ( n != null && n.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^366^367^^^^349^378^[ADD] while  ( n != null && n.getType (  )  == Token.VAR )  { nodesToCollapse.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^hasNodesToCollapse = false;^368^^^^^349^378^[REPLACE] hasNodesToCollapse = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^n =  varNode.getNext (  ) ;^370^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^if  ( true )  {^373^^^^^349^378^[REPLACE] if  ( hasNodesToCollapse )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^nodesToCollapse.contains ( varNode ) ;^374^^^^^349^378^[REPLACE] nodesToCollapse.add ( varNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^collapses.add ( new Collapse ( varNode, value )  ) ;^375^^^^^349^378^[REPLACE] collapses.add ( new Collapse ( varNode, parent )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  c  expr  exprParent  externs  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^while  ( first.getNext (  )  != null ;^384^385^^^^381^392^[REPLACE] while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  {^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node next = collapse.parent.removeChildAfter ( varNode ) ;^386^^^^^381^392^[REPLACE] Node next = collapse.parent.removeChildAfter ( first ) ;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^for  ( Collapse collapse : collapses )  { Node first = collapse.firstVarNode;^382^^^^^381^392^[REPLACE] for  ( Collapse collapse : collapses )  {^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[ADD]^^382^383^384^385^386^381^392^[ADD] for  ( Collapse collapse : collapses )  { Node first = collapse.firstVarNode; while  ( first.getNext (  )  != null && first.getNext (  ) .getType (  )  == Token.VAR )  { Node next = collapse.parent.removeChildAfter ( first ) ;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^for  ( Collapse collapse : collapses )  { Node first = collapse.firstVarNode;^383^^^^^381^392^[REPLACE] Node first = collapse.firstVarNode;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node next = collapse.parent.removeChild ( first ) ;^386^^^^^381^392^[REPLACE] Node next = collapse.parent.removeChildAfter ( first ) ;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] CollapseVariableDeclarations Collapse ExploitAssigns GatherCollapses   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^Node parent;^77^^^^^^^[REPLACE] final Node parent;^[METHOD] applyCollapses [TYPE] void [PARAMETER] [CLASS] Collapse   [TYPE]  Collapse collapse  [TYPE]  AbstractCompiler compiler  [TYPE]  List collapses  [TYPE]  Set nodesToCollapse  [TYPE]  boolean false  true  [TYPE]  Node assign  c  expr  exprParent  externs  first  firstVarNode  leftSide  leftValue  n  name  next  node  parent  replacement  rightValue  root  value  varNode 
[REPLACE]^this.firstVarNode =  parent;^80^^^^^79^82^[REPLACE] this.firstVarNode = firstVarNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node firstVarNode Node parent [CLASS] Collapse   [TYPE]  Node firstVarNode  parent  [TYPE]  boolean false  true 
[REPLACE]^this.parent =  firstVarNode;^81^^^^^79^82^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node firstVarNode Node parent [CLASS] Collapse   [TYPE]  Node firstVarNode  parent  [TYPE]  boolean false  true 
[REPLACE]^if  ( !  exprParent    )  {^117^^^^^116^122^[REPLACE] if  ( !NodeUtil.isExprAssign ( expr )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent 
[REPLACE]^return false;^118^^^^^116^122^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent 
[REPLACE]^collapseAssign ( t, expr.getNext (  ) , expr, exprParent ) ;^121^^^^^116^122^[REPLACE] collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent 
[REPLACE]^collapseAssign ( t, exprParent.getFirstChild (  ) , expr, exprParent ) ;^121^^^^^116^122^[REPLACE] collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent 
[ADD]^^121^^^^^116^122^[ADD] collapseAssign ( t, expr.getFirstChild (  ) , expr, exprParent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expr  exprParent 
[REPLACE]^Node leftValue = exprParent.getFirstChild (  ) ;^129^^^^^127^141^[REPLACE] Node leftValue = assign.getFirstChild (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^Node rightValue = rightValue.getNext (  ) ;^130^^^^^127^141^[REPLACE] Node rightValue = leftValue.getNext (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^if  (  collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^131^132^^^^127^141^[REPLACE] if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^}  if  (  collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^134^135^^^^127^141^[REPLACE] } else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^}  else {^137^^^^^127^141^[REPLACE] } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[ADD]^}   collapseAssign ( t, rightValue, expr, exprParent ) ;^137^138^139^140^^127^141^[ADD] else if  ( rightValue.getType (  )  == Token.ASSIGN )  {  collapseAssign ( t, rightValue, expr, exprParent ) ; }^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^collapseAssign ( t, rightValue, expr, leftValue ) ;^139^^^^^127^141^[REPLACE] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[ADD]^^139^^^^^127^141^[ADD] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^136^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[ADD]^^136^^^^^127^141^[ADD] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^if  ( isCollapsibleValue ( leftValue, true )  && collapseAssignEqualTo ( expr, exprParent, leftValue )  )  {^139^^^^^127^141^[REPLACE] collapseAssign ( t, rightValue, expr, exprParent ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REMOVE]^} else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^139^^^^^127^141^[REMOVE] ^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^collapseAssignEqualTo ( expr, exprParent, leftValue )  )  { t.getCompiler (  ) .reportCodeChange (  ) ;^133^^^^^127^141^[REPLACE] t.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^} else if  ( isCollapsibleValue ( rightValue, false )  || collapseAssignEqualTo ( leftValue, exprParent, rightValue )  )  {^134^135^^^^127^141^[REPLACE] } else if  ( isCollapsibleValue ( rightValue, false )  && collapseAssignEqualTo ( expr, exprParent, rightValue )  )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^}  if  ( rightValue.removeChild (  )   !=  Token.ASSIGN )  {^137^^^^^127^141^[REPLACE] } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^}  if  ( rightValue.removeChild (  )   ||  Token.ASSIGN )  {^137^^^^^127^141^[REPLACE] } else if  ( rightValue.getType (  )  == Token.ASSIGN )  {^[METHOD] collapseAssign [TYPE] void [PARAMETER] NodeTraversal t Node assign Node expr Node exprParent [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assign  expr  exprParent  leftValue  rightValue 
[REPLACE]^return !true ;^164^^^^^157^176^[REPLACE] return !isLValue || value.getFirstChild (  ) .getType (  )  == Token.THIS;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] ExploitAssigns   [TYPE]  boolean false  isLValue  true  [TYPE]  Node value 
[REPLACE]^return false;^172^^^^^157^176^[REPLACE] return true;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] ExploitAssigns   [TYPE]  boolean false  isLValue  true  [TYPE]  Node value 
[REPLACE]^return true;^175^^^^^157^176^[REPLACE] return false;^[METHOD] isCollapsibleValue [TYPE] boolean [PARAMETER] Node value boolean isLValue [CLASS] ExploitAssigns   [TYPE]  boolean false  isLValue  true  [TYPE]  Node value 
[REPLACE]^Node assign = next.getFirstChild (  ) ;^195^^^^^194^296^[REPLACE] Node assign = expr.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^195^^^^^194^296^[ADD] Node assign = expr.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node parent = value;^196^^^^^194^296^[REPLACE] Node parent = exprParent;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node next = next.getNext (  ) ;^197^^^^^194^296^[REPLACE] Node next = expr.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^while  ( parent == false )  {^198^^^^^194^296^[REPLACE] while  ( next != null )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( leftSide.getFirstChild (  ) .hasChildren (  )  )  {^212^^^^^194^296^[REPLACE] if  ( next.getFirstChild (  ) .hasChildren (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^next = parent.getFirstChild (  ) ; ;^213^^^^^194^296^[REPLACE] parent = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent = next.getFirstChild (  ) ; ;^214^^^^^194^296^[REPLACE] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^} else if  ( isCollapsibleValue ( rightValue, false )  &&^221^^^^^194^296^[REPLACE] if  ( next.isQualifiedName (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^221^222^223^224^^194^296^[ADD] if  ( next.isQualifiedName (  )  )  { String nextName = next.getQualifiedName (  ) ; if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.isQualifiedName (  )  ) {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^230^231^232^^^223^238^[ADD] if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^231^^^^^223^238^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;^237^^^^^223^238^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REMOVE]^if  ( ! ( isExprAssign ( expr )  )  )  {     return ; }^230^^^^^194^296^[REMOVE] ^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^231^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;^237^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^String parentName = next.getQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.isQualifiedName (  )  || nextName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REMOVE]^if  ( next.isQualifiedName (  )  )  {     String nextName = next.getQualifiedName (  ) ;     if  (  ( value.isQualifiedName (  )  )  &&  ( nextName.equals ( value.getQualifiedName (  )  )  )  )  {         if  ( ! ( isSafeReplacement ( next, assign )  )  )  {             return false;         }         exprParent.removeChild ( expr ) ;         expr.removeChild ( assign ) ;         parent.replaceChild ( next, assign ) ;         return true;     } }^223^^^^^194^296^[REMOVE] ^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( isSafeReplacement ( next, assign )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( next, leftSide )  )  {^230^^^^^194^296^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.removeChild (  )   &&  next.getType (  )  )  {^247^^^^^194^296^[REPLACE] if  ( value.getType (  )  == next.getType (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  (  next.getType (  )  == Token.NUMBER )  && next.isEquivalentTo ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^251^^^^^248^252^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^251^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return false;^260^^^^^194^296^[REPLACE] return true;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  (  ( parent.getType (  )  == Token.STRING ) {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( leftSide.getType (  )  == Token.NAME ) {^278^279^280^^^194^296^[REPLACE] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^278^279^280^^282^194^296^[ADD] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  { parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^286^^^^^278^287^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  leftSide;^282^^^^^278^287^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^next =  value.getNext (  ) ;^283^^^^^278^287^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  null;^207^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent = next.getFirstChild (  ) ; ;^208^^^^^194^296^[REPLACE] next = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^214^^^^^194^296^[ADD] next = parent.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  leftSide;^282^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^next =  value.getNext (  ) ;^283^^^^^194^296^[REPLACE] next = leftSide.getNext (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^217^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^240^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^262^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^286^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^291^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node leftSide = parent.getFirstChild (  ) ;^277^^^^^194^296^[REPLACE] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^277^^^^^194^296^[ADD] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^212^213^214^215^216^194^296^[ADD] if  ( next.getFirstChild (  ) .hasChildren (  )  )  { parent = next.getFirstChild (  ) ; next = parent.getFirstChild (  ) ; break; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( !isSafeReplacement ( parent, assign )  )  {^230^^^^^223^238^[REPLACE] if  ( !isSafeReplacement ( next, assign )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^return false;^230^231^232^^^194^296^[ADD] if  ( !isSafeReplacement ( next, assign )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^String parentName = next .isQualifiedName (  )  ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.isQualifiedName (  )  || parentName.equals ( value.getQualifiedName (  )  )  )  {^223^224^^^^194^296^[REPLACE] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^223^224^^^^194^296^[ADD] if  ( value.isQualifiedName (  )  && nextName.equals ( value.getQualifiedName (  )  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( value.getType (  )   ||  next.getType (  )  )  {^247^^^^^194^296^[REPLACE] if  ( value.getType (  )  == next.getType (  )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  (  ( next .getNext (  )   == Token.STRING || next^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^^248^249^250^251^252^194^296^[ADD] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  { return false; }^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  (  next.getType (  )  == Token.NUMBER )  && next.removeChild ( value )  )  {^248^249^250^^^194^296^[REPLACE] if  (  ( next.getType (  )  == Token.STRING || next.getType (  )  == Token.NUMBER )  && !next.isEquivalentTo ( value )  )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( leftSide .getNext (  )   == Token.NAME && leftSide^278^279^280^^^194^296^[REPLACE] if  ( leftSide.getType (  )  == Token.NAME || leftSide.getType (  )  == Token.GETPROP && leftSide.getFirstChild (  ) .getType (  )  == Token.THIS )  {^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^parent =  leftSide;^207^^^^^194^296^[REPLACE] parent = next;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[ADD]^break;^208^209^^^^194^296^[ADD] next = next.getFirstChild (  ) ; break;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^String nextName = next.isQualifiedName (  ) ;^222^^^^^194^296^[REPLACE] String nextName = next.getQualifiedName (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^Node leftSide = parent .removeChild ( value )  ;^277^^^^^194^296^[REPLACE] Node leftSide = next.getFirstChild (  ) ;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^return true;^295^^^^^194^296^[REPLACE] return false;^[METHOD] collapseAssignEqualTo [TYPE] boolean [PARAMETER] Node expr Node exprParent Node value [CLASS] ExploitAssigns   [TYPE]  boolean false  true  [TYPE]  Node assign  expr  exprParent  leftSide  next  parent  value  [TYPE]  String nextName 
[REPLACE]^if  ( varNode.getType (  )   ==  Token.VAR )  return;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( parent.getType (  )  == Token.IF )  return;^351^^^^^349^378^[REPLACE] if  ( n.getType (  )  != Token.VAR )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( varNodeodesToCollapse.add ( n )  )  return;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[ADD]^^354^355^^^358^349^378^[ADD] if  ( nodesToCollapse.contains ( n )  )  return;  if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( parent.getType (  )  == Token.IF )  return;^354^^^^^349^378^[REPLACE] if  ( nodesToCollapse.contains ( n )  )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( var       !=  Token.IF )  return;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REMOVE]^if  ( nodesToCollapse.contains ( n )  )      return ;^358^^^^^349^378^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( n.getType (  )  != Token.VAR )  return;^358^^^^^349^378^[REPLACE] if  ( parent.getType (  )  == Token.IF )  return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^Node varNode = varNode;^360^^^^^349^378^[REPLACE] Node varNode = n;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^n =  varNode.getNext (  ) ;^363^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^boolean hasNodesToCollapse = true;^365^^^^^349^378^[REPLACE] boolean hasNodesToCollapse = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[ADD]^^365^^^^^349^378^[ADD] boolean hasNodesToCollapse = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^while  ( n != null ;^366^^^^^349^378^[REPLACE] while  ( n != null && n.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^hasNodesToCollapse = false;^368^^^^^349^378^[REPLACE] hasNodesToCollapse = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^n =  varNode.getNext (  ) ;^370^^^^^349^378^[REPLACE] n = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^if  ( true )  {^373^^^^^349^378^[REPLACE] if  ( hasNodesToCollapse )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[ADD]^nodesToCollapse.add ( varNode ) ;collapses.add ( new Collapse ( varNode, parent )  ) ;^373^374^375^376^^349^378^[ADD] if  ( hasNodesToCollapse )  { nodesToCollapse.add ( varNode ) ; collapses.add ( new Collapse ( varNode, parent )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^nodesToCollapse.add ( parent ) ;^374^^^^^349^378^[REPLACE] nodesToCollapse.add ( varNode ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
[REPLACE]^collapses.add ( new Collapse ( n, parent )  ) ;^375^^^^^349^378^[REPLACE] collapses.add ( new Collapse ( varNode, parent )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherCollapses   [TYPE]  boolean false  hasNodesToCollapse  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  varNode 
