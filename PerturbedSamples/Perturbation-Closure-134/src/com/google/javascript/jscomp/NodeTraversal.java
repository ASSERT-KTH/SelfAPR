[REPLACE]^public  final DiagnosticType NODE_TRAVERSAL_ERROR = DiagnosticType.error ( "JSC_NODE_TRAVERSAL_ERROR", "{0}" ) ;^47^48^^^^47^48^[REPLACE] public static final DiagnosticType NODE_TRAVERSAL_ERROR = DiagnosticType.error ( "JSC_NODE_TRAVERSAL_ERROR", "{0}" ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private final Deque<Scope> scopes  = null ;^55^^^^^^^[REPLACE] private final Deque<Scope> scopes = new ArrayDeque<Scope> (  ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private  Deque<Node> scopeRoots = new ArrayDeque<Node> (  ) ;^61^^^^^^^[REPLACE] private final Deque<Node> scopeRoots = new ArrayDeque<Node> (  ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^Deque<ControlFlowGraph<Node>> cfgs ;^70^^^^^^^[REPLACE] Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>> (  ) ;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private  char  sourceName;^73^^^^^^^[REPLACE] private String sourceName;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private  Set<Integer> nodeTypes;^168^^^^^^^[REPLACE] private final Set<Integer> nodeTypes;^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^private static  String MISSING_SOURCE = "[source unknown]";^288^^^^^^^[REPLACE] private static final String MISSING_SOURCE = "[source unknown]";^ [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback  
[REPLACE]^this ( nodeTypes, false ) ;^176^^^^^175^177^[REPLACE] this ( nodeTypes, true ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] Integer> nodeTypes [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^176^^^^^175^177^[ADD] this ( nodeTypes, true ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] Integer> nodeTypes [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.nodeTypes =  null;^186^^^^^184^188^[REPLACE] this.nodeTypes = nodeTypes;^[METHOD] <init> [TYPE] Set,boolean) [PARAMETER] Integer> nodeTypes boolean include [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.include =  null;^187^^^^^184^188^[REPLACE] this.include = include;^[METHOD] <init> [TYPE] Set,boolean) [PARAMETER] Integer> nodeTypes boolean include [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^while  ( it.hasNext (  )  )  { scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^200^^^^^199^201^[REPLACE] this ( compiler, cb, new SyntacticScopeCreator ( compiler )  ) ;^[METHOD] <init> [TYPE] NodeTraversal$Callback) [PARAMETER] AbstractCompiler compiler Callback cb [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.callback =  callback;^209^^^^^207^216^[REPLACE] this.callback = cb;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( ! callback instanceof ScopedCallback )  {^210^^^^^207^216^[REPLACE] if  ( cb instanceof ScopedCallback )  {^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.scopeCallback =   ( ScopedCallback )  cb;^211^^^^^207^216^[REPLACE] this.scopeCallback =  ( ScopedCallback )  cb;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^211^^^^^207^216^[ADD] this.scopeCallback =  ( ScopedCallback )  cb;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.compiler =  null;^213^^^^^207^216^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^sourceName = ""; ;^214^^^^^207^216^[REPLACE] this.sourceName = "";^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.scopeCreator =  null;^215^^^^^207^216^[REPLACE] this.scopeCreator = scopeCreator;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^215^^^^^207^216^[ADD] this.scopeCreator = scopeCreator;^[METHOD] <init> [TYPE] ScopeCreator) [PARAMETER] AbstractCompiler compiler Callback cb ScopeCreator scopeCreator [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return false;^131^^^^^129^132^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return curNode ;^144^145^^^^140^146^[REPLACE] return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return parent == null || NodeUtil.isFunctionAnonymous ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^157^158^^^^155^159^[REPLACE] return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return true  &&  nodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^[REPLACE] return include == nodeTypes.contains ( n.getType (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node next = child.getNext (  ) ;^221^^^^^218^235^[REPLACE] String message = unexpectedException.getMessage (  ) ;^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^if  ( sourceName.isEmpty (  )  )  {^226^^^^^218^235^[REPLACE] if  ( !sourceName.isEmpty (  )  )  {^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode != null ?^227^228^229^230^^218^235^[REPLACE] message = unexpectedException.getMessage (  )  + "\n" + formatNodeContext ( "Node", curNode )  + ( curNode == null ?^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^compiler.getSourceLine ( message, unexpectedException ) ;^234^^^^^218^235^[REPLACE] compiler.throwInternalError ( message, unexpectedException ) ;^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REMOVE]^throwUnexpectedException  (" ")  ;^234^^^^^218^235^[REMOVE] ^[METHOD] throwUnexpectedException [TYPE] void [PARAMETER] Exception unexpectedException [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^if  ( parent != null )  {^238^^^^^237^243^[REPLACE] if  ( n == null )  {^[METHOD] formatNodeContext [TYPE] String [PARAMETER] String label Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^return "  " + label + ": NULL";^238^239^240^^^237^243^[ADD] if  ( n == null )  { return "  " + label + ": NULL"; }^[METHOD] formatNodeContext [TYPE] String [PARAMETER] String label Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return "  "  ;^239^^^^^237^243^[REPLACE] return "  " + label + ": NULL";^[METHOD] formatNodeContext [TYPE] String [PARAMETER] String label Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return "  " + label +sourceName;^239^^^^^237^243^[REPLACE] return "  " + label + ": NULL";^[METHOD] formatNodeContext [TYPE] String [PARAMETER] String label Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return "  "  ;^241^242^^^^237^243^[REPLACE] return "  " + label + " ( " + n.toString ( false, false, false )  + " ) : " + formatNodePosition ( n ) ;^[METHOD] formatNodeContext [TYPE] String [PARAMETER] String label Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^sourceName = "";curNode = root;pushScope ( root ) ;traverseBranch ( root, null ) ;^249^250^251^252^253^248^258^[ADD] try { sourceName = ""; curNode = root; pushScope ( root ) ; traverseBranch ( root, null ) ;^[METHOD] traverse [TYPE] void [PARAMETER] Node root [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^this.sourceName = ""; ;^250^^^^^248^258^[REPLACE] sourceName = "";^[METHOD] traverse [TYPE] void [PARAMETER] Node root [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^250^^^^^248^258^[ADD] sourceName = "";^[METHOD] traverse [TYPE] void [PARAMETER] Node root [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^curNode = scopeRoot; ;^251^^^^^248^258^[REPLACE] curNode = root;^[METHOD] traverse [TYPE] void [PARAMETER] Node root [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^250^251^^^^248^258^[ADD] sourceName = ""; curNode = root;^[METHOD] traverse [TYPE] void [PARAMETER] Node root [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^255^256^^^^248^258^[ADD] catch  ( Exception unexpectedException )  { throwUnexpectedException  (" ")  ;^[METHOD] traverse [TYPE] void [PARAMETER] Node root [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^traverseRoots (   roots    ) ;^261^^^^^260^262^[REPLACE] traverseRoots ( Lists.newArrayList ( roots )  ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER]  roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  Node[] roots  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( false.isEmpty (  )  )  {^265^^^^^264^286^[REPLACE] if  ( roots.isEmpty (  )  )  {^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^return line;^266^^^^^264^286^[REPLACE] return;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;Preconditions.checkState ( scopeRoot != null ) ;sourceName = "";^269^270^271^^273^264^286^[ADD] try { Node scopeRoot = roots.get ( 0 ) .getParent (  ) ; Preconditions.checkState ( scopeRoot != null ) ; sourceName = "";^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^this.sourceName = ""; ;^273^^^^^264^286^[REPLACE] sourceName = "";^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^curNode = root; ;^274^^^^^264^286^[REPLACE] curNode = scopeRoot;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^Node scopeRoot = 0 .isEmpty (  )^270^^^^^264^286^[REPLACE] Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^Preconditions.checkState ( scopeRoot != null ) ;^270^271^^^^264^286^[ADD] Node scopeRoot = roots.get ( 0 ) .getParent (  ) ; Preconditions.checkState ( scopeRoot != null ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^final Node body = args.getNext (  ) ;^277^^^^^264^286^[REPLACE] for  ( Node root : roots )  {^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[ADD]^^277^278^279^280^^264^286^[ADD] for  ( Node root : roots )  { Preconditions.checkState ( root.getParent (  )  == scopeRoot ) ; traverseBranch ( root, scopeRoot ) ; }^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^Node scopeRoot = roots.get ( 1 )  .getLineno (  )  ;^270^^^^^264^286^[REPLACE] Node scopeRoot = roots.get ( 0 ) .getParent (  ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER] Node> roots [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  Exception unexpectedException 
[REPLACE]^if  (parent != this )  {^291^^^^^290^303^[REPLACE] if  ( n == null )  {^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^returnsrc + "\n";^292^^^^^290^303^[REPLACE] return MISSING_SOURCE + "\n";^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^int lineNumber = parent .getParent (  )  ;^295^^^^^290^303^[REPLACE] int lineNumber = n.getLineno (  ) ;^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^int columnNumber = n.getParent (  ) ;^296^^^^^290^303^[REPLACE] int columnNumber = n.getCharno (  ) ;^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[ADD]^^296^^^^^290^303^[ADD] int columnNumber = n.getCharno (  ) ;^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^String src = compiler.getSourceLine ( sourceName, columnNumber ) ;^297^^^^^290^303^[REPLACE] String src = compiler.getSourceLine ( sourceName, lineNumber ) ;^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^if  ( src != null )  {^298^^^^^290^303^[REPLACE] if  ( src == null )  {^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[ADD]^src = MISSING_SOURCE;^298^299^300^^^290^303^[ADD] if  ( src == null )  { src = MISSING_SOURCE; }^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^src  = null ;^299^^^^^290^303^[REPLACE] src = MISSING_SOURCE;^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^src ;^299^^^^^290^303^[REPLACE] src = MISSING_SOURCE;^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^return sourceName + ":" + lineNumber + ":" + columnNumber +message + src +message;^301^302^^^^290^303^[REPLACE] return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" + src + "\n";^[METHOD] formatNodePosition [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int columnNumber  lineNumber 
[REPLACE]^Preconditions.checkState ( s .getRootNode (  )   ) ;^311^^^^^310^318^[REPLACE] Preconditions.checkState ( s.isGlobal (  )  ) ;^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^this.sourceName = ""; ;^313^^^^^310^318^[REPLACE] sourceName = "";^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^curNode = scopeRoot; ;^314^^^^^310^318^[REPLACE] curNode = root;^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^pushScope ( n ) ;^315^^^^^310^318^[REPLACE] pushScope ( s ) ;^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( root, true ) ;^316^^^^^310^318^[REPLACE] traverseBranch ( root, null ) ;^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^+ formatNodePosition ( n ) ;^317^^^^^310^318^[REPLACE] popScope (  ) ;^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^317^^^^^310^318^[ADD] popScope (  ) ;^[METHOD] traverseWithScope [TYPE] void [PARAMETER] Node root Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node n = s.isGlobal (  ) ;^325^^^^^324^342^[REPLACE] Node n = s.getRootNode (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( n.getType (  )   ||  Token.FUNCTION )  {^326^^^^^324^342^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseWithScope ( parent, s ) ;^340^^^^^324^342^[REPLACE] traverseWithScope ( n, s ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^sourceName =  getSourceName ( parent ) ;^329^^^^^324^342^[REPLACE] sourceName = getSourceName ( n ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^curNode = node; ;^330^^^^^324^342^[REPLACE] curNode = n;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^330^^^^^324^342^[ADD] curNode = n;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node args = parent.getFirstChild (  ) .getNext (  ) ;^333^^^^^324^342^[REPLACE] Node args = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^333^334^^^^324^342^[ADD] Node args = n.getFirstChild (  ) .getNext (  ) ; Node body = args.getNext (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node body = scopeRoot.getNext (  ) ;^334^^^^^324^342^[REPLACE] Node body = args.getNext (  ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^334^335^^^^324^342^[ADD] Node body = args.getNext (  ) ; traverseBranch ( args, n ) ;^[METHOD] traverseAtScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkNotNull ( scopeRoot ) ;^355^^^^^354^364^[REPLACE] Preconditions.checkNotNull ( parent ) ;^[METHOD] traverseInnerNode [TYPE] void [PARAMETER] Node node Node parent Scope refinedScope [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope refinedScope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( refinedScope == this && getScope (  )  != refinedScope )  {^356^^^^^354^364^[REPLACE] if  ( refinedScope != null && getScope (  )  != refinedScope )  {^[METHOD] traverseInnerNode [TYPE] void [PARAMETER] Node node Node parent Scope refinedScope [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope refinedScope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( node, scopeRoot ) ;^362^^^^^354^364^[REPLACE] traverseBranch ( node, parent ) ;^[METHOD] traverseInnerNode [TYPE] void [PARAMETER] Node node Node parent Scope refinedScope [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope refinedScope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^curNode = root; ;^357^^^^^354^364^[REPLACE] curNode = node;^[METHOD] traverseInnerNode [TYPE] void [PARAMETER] Node node Node parent Scope refinedScope [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  Scope refinedScope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return line;^372^^^^^369^373^[REPLACE] return  ( Compiler )  compiler;^[METHOD] getCompiler [TYPE] Compiler [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node n = s.getRootNode (  ) ;^380^^^^^379^389^[REPLACE] Node cur = curNode;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[ADD]^^380^^^^^379^389^[ADD] Node cur = curNode;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^while  (scopeRoot == true )  {^381^^^^^379^389^[REPLACE] while  ( cur != null )  {^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^if  ( line  > 0 )  {^383^^^^^379^389^[REPLACE] if  ( line >=0 )  {^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^return curNode;^384^^^^^379^389^[REPLACE] return line;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^cur =  scopeRoot.getParent (  ) ;^386^^^^^379^389^[REPLACE] cur = cur.getParent (  ) ;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^int line = cur.getParent (  ) ;^382^^^^^379^389^[REPLACE] int line = cur.getLineno (  ) ;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^if  ( line  != 4 )  {^383^^^^^379^389^[REPLACE] if  ( line >=0 )  {^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[ADD]^return line;^383^384^385^^^379^389^[ADD] if  ( line >=0 )  { return line; }^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^cur =  null.getParent (  ) ;^386^^^^^379^389^[REPLACE] cur = cur.getParent (  ) ;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^return 1;^388^^^^^379^389^[REPLACE] return 0;^[METHOD] getLineNumber [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int line 
[REPLACE]^return line;^397^^^^^396^398^[REPLACE] return sourceName;^[METHOD] getSourceName [TYPE] String [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return compiler.report ( sourceName ) ;^404^^^^^403^405^[REPLACE] return compiler.getInput ( sourceName ) ;^[METHOD] getInput [TYPE] CompilerInput [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node next = child.getNext (  ) ;^411^^^^^410^413^[REPLACE] CompilerInput input = getInput (  ) ;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return   false ;^412^^^^^410^413^[REPLACE] return input == null ? null : input.getModule (  ) ;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return line;^417^^^^^416^418^[REPLACE] return curNode;^[METHOD] getCurrentNode [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node next = child.getNext (  ) ;^425^^^^^423^427^[REPLACE] NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[METHOD] traverse [TYPE] void [PARAMETER] AbstractCompiler compiler Node root Callback cb [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^t .traverse ( compiler , args , callback )  ;^426^^^^^423^427^[REPLACE] t.traverse ( root ) ;^[METHOD] traverse [TYPE] void [PARAMETER] AbstractCompiler compiler Node root Callback cb [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Node next = child.getNext (  ) ;^434^^^^^432^436^[REPLACE] NodeTraversal t = new NodeTraversal ( compiler, cb ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER] AbstractCompiler compiler Node> roots Callback cb [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^t .traverseRoots ( compiler , null , callback )  ;^435^^^^^432^436^[REPLACE] t.traverseRoots ( roots ) ;^[METHOD] traverseRoots [TYPE] void [PARAMETER] AbstractCompiler compiler Node> roots Callback cb [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  cur  curNode  n  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  List roots  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^int type = parent.getNext (  ) ;^443^^^^^442^478^[REPLACE] int type = n.getType (  ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^if  ( type  !=  Token.SCRIPT )  {^444^^^^^442^478^[REPLACE] if  ( type == Token.SCRIPT )  {^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^sourceName =  getSourceName ( parent ) ;^445^^^^^442^478^[REPLACE] sourceName = getSourceName ( n ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^curNode = node; ;^448^^^^^442^478^[REPLACE] curNode = n;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[ADD]^^448^^^^^442^478^[ADD] curNode = n;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^if  ( !callback.shouldTraverse ( this, node, parent )  )  return;^449^^^^^442^478^[REPLACE] if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^if  ( !callback.shouldTraverse ( null, n, parent )  )  return;^449^^^^^442^478^[REPLACE] if  ( !callback.shouldTraverse ( this, n, parent )  )  return;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^for  ( Node scopeRoot = n.getFirstChild (  ) ; child == null;  )  {^466^^^^^442^478^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^child =  scopeRoot;^471^^^^^442^478^[REPLACE] child = next;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[ADD]^^471^^^^^442^478^[ADD] child = next;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^Node next = scopeRoot.getNext (  ) ;^469^^^^^442^478^[REPLACE] Node next = child.getNext (  ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^for  ( Node child = parent.getFirstChild (  ) ; child != null;  )  {^466^^^^^442^478^[REPLACE] for  ( Node child = n.getFirstChild (  ) ; child != null;  )  {^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^curNode = node; ;^476^^^^^442^478^[REPLACE] curNode = n;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^callback.shouldTraverse ( this, n, parent ) ;^477^^^^^442^478^[REPLACE] callback.visit ( this, n, parent ) ;^[METHOD] traverseBranch [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  int type 
[REPLACE]^Preconditions.checkState ( parent.getChildCount (  )   &&  3 ) ;^484^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( parent.getChildCount (  )  == 3 ) ;^484^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getChildCount (  )  == 3 ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( n.getType (  )   ||  Token.FUNCTION ) ;^485^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( parent.getType (  )  == Token.FUNCTION ) ;^485^^^^^483^516^[REPLACE] Preconditions.checkState ( n.getType (  )  == Token.FUNCTION ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^final Node fnName = parent.getFirstChild (  ) ;^487^^^^^483^516^[REPLACE] final Node fnName = n.getFirstChild (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^487^^^^^483^516^[ADD] final Node fnName = n.getFirstChild (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^boolean anonymous = parent != nodeull || NodeUtil.isFunctionAnonymous ( n ) ;^489^^^^^483^516^[REPLACE] boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^489^^^^^483^516^[ADD] boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous ( n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( anonymous )  {^491^^^^^483^516^[REPLACE] if  ( !anonymous )  {^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( fnName, parent ) ;^493^^^^^483^516^[REPLACE] traverseBranch ( fnName, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^curNode = node; ;^496^^^^^483^516^[REPLACE] curNode = n;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^496^^^^^483^516^[ADD] curNode = n;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^pushScope ( parent ) ;^497^^^^^483^516^[REPLACE] pushScope ( n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( !anonymous )  {^499^^^^^483^516^[REPLACE] if  ( anonymous )  {^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( fnName, parent ) ;^501^^^^^483^516^[REPLACE] traverseBranch ( fnName, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^final Node args = node.getNext (  ) ;^504^^^^^483^516^[REPLACE] final Node args = fnName.getNext (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^final Node body = scopeRoot .getParent (  )  ;^505^^^^^483^516^[REPLACE] final Node body = args.getNext (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( args, parent ) ;^508^^^^^483^516^[REPLACE] traverseBranch ( args, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( body.getNext (  )  != null  |  body.getType (  )  == Token.BLOCK ) ;^511^512^^^^483^516^[REPLACE] Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( scopeRoot.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^511^512^^^^483^516^[REPLACE] Preconditions.checkState ( body.getNext (  )  == null && body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^body .getParent (  )   == Token.BLOCK ) ;^512^^^^^483^516^[REPLACE] body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^512^^^^^483^516^[ADD] body.getType (  )  == Token.BLOCK ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^traverseBranch ( scopeRoot, n ) ;^513^^^^^483^516^[REPLACE] traverseBranch ( body, n ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^+ formatNodePosition ( n ) ;^515^^^^^483^516^[REPLACE] popScope (  ) ;^[METHOD] traverseFunction [TYPE] void [PARAMETER] Node n Node parent [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( scopes.size (  )  /  0  + scopeRoots.size (  )  /  0  < 0  )  {^521^^^^^520^530^[REPLACE] if  ( scopes.size (  )  + scopeRoots.size (  )  < 2 )  {^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( roots.isEmpty (  )  )  {^524^^^^^520^530^[REPLACE] if  ( scopeRoots.isEmpty (  )  )  {^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopeRoots.pop (  ) ;^527^^^^^520^530^[REPLACE] return scopeRoots.peek (  ) ;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopes.pop (  ) .getRootNode (  ) ;^525^^^^^520^530^[REPLACE] return scopes.peek (  ) .getRootNode (  ) ;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return ! ( scopes.isEmpty (  )  && scopeRoots.isEmpty (  )  ) ;^525^^^^^520^530^[REPLACE] return scopes.peek (  ) .getRootNode (  ) ;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopeRoots .push ( node )  ;^527^^^^^520^530^[REPLACE] return scopeRoots.peek (  ) ;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return this;^522^^^^^520^530^[REPLACE] return null;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return true;^522^^^^^520^530^[REPLACE] return null;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopes.peek (  )  .isGlobal (  )  ;^525^^^^^520^530^[REPLACE] return scopes.peek (  ) .getRootNode (  ) ;^[METHOD] getEnclosingFunction [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState ( curNode == null ) ;^534^^^^^533^540^[REPLACE] Preconditions.checkState ( curNode != null ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Node node [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopeRoots.push ( scopeRoot ) ;^535^^^^^533^540^[REPLACE] scopeRoots.push ( node ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Node node [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^cfgs.push ( this ) ;^536^^^^^533^540^[REPLACE] cfgs.push ( null ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Node node [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( scopeCallback == null )  {^537^^^^^533^540^[REPLACE] if  ( scopeCallback != null )  {^[METHOD] pushScope [TYPE] void [PARAMETER] Node node [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopeCallback.exitScope ( this ) ;^538^^^^^533^540^[REPLACE] scopeCallback.enterScope ( this ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Node node [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Preconditions.checkState (scopeRoot == null ) ;^544^^^^^543^550^[REPLACE] Preconditions.checkState ( curNode != null ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^544^545^^^^543^550^[ADD] Preconditions.checkState ( curNode != null ) ; scopes.push ( s ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^+ formatNodePosition ( n ) ;^545^^^^^543^550^[REPLACE] scopes.push ( s ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^cfgs.push ( this ) ;^546^^^^^543^550^[REPLACE] cfgs.push ( null ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^546^^^^^543^550^[ADD] cfgs.push ( null ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( scopeCallback == null )  {^547^^^^^543^550^[REPLACE] if  ( scopeCallback != null )  {^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopeCallback.exitScope ( this ) ;^548^^^^^543^550^[REPLACE] scopeCallback.enterScope ( this ) ;^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REMOVE]^popScope (  ) ;^548^^^^^543^550^[REMOVE] ^[METHOD] pushScope [TYPE] void [PARAMETER] Scope s [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope s  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( scopeCallback == false )  {^554^^^^^553^563^[REPLACE] if  ( scopeCallback != null )  {^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopeCallback.enterScope ( this ) ;^555^^^^^553^563^[REPLACE] scopeCallback.exitScope ( this ) ;^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( roots.isEmpty (  )  )  {^557^^^^^553^563^[REPLACE] if  ( scopeRoots.isEmpty (  )  )  {^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopeRoots .peek (  )  ;^560^^^^^553^563^[REPLACE] scopeRoots.pop (  ) ;^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopes .peek (  )  ;^558^^^^^553^563^[REPLACE] scopes.pop (  ) ;^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^cfgs.peek (  ) ;^562^^^^^553^563^[REPLACE] cfgs.pop (  ) ;^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^562^^^^^553^563^[ADD] cfgs.pop (  ) ;^[METHOD] popScope [TYPE] void [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Scope scope = scopes.isEmpty (  )  ? true : scopes.peek (  ) ;^567^^^^^566^580^[REPLACE] Scope scope = scopes.isEmpty (  )  ? null : scopes.peek (  ) ;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( roots.isEmpty (  )  )  {^568^^^^^566^580^[REPLACE] if  ( scopeRoots.isEmpty (  )  )  {^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return line;^569^^^^^566^580^[REPLACE] return scope;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^Iterator<Node> it = scopeRoots .clear (  )  ;^572^^^^^566^580^[REPLACE] Iterator<Node> it = scopeRoots.descendingIterator (  ) ;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^while  ( null.hasNext (  )  )  {^573^^^^^566^580^[REPLACE] while  ( it.hasNext (  )  )  {^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^^573^574^^^^566^580^[ADD] while  ( it.hasNext (  )  )  { scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scope =  scopeCreator.createScope ( null.next (  ) , scope ) ;^574^^^^^566^580^[REPLACE] scope = scopeCreator.createScope ( it.next (  ) , scope ) ;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^scopeRoots.peek (  ) ;^577^^^^^566^580^[REPLACE] scopeRoots.clear (  ) ;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return line;^579^^^^^566^580^[REPLACE] return scope;^[METHOD] getScope [TYPE] Scope [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  Iterator it  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( cfgs.peek (  )  != null )  {^584^^^^^583^591^[REPLACE] if  ( cfgs.peek (  )  == null )  {^[METHOD] getControlFlowGraph [TYPE] ControlFlowGraph [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[ADD]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;cfa.process ( null, getScopeRoot (  )  ) ;cfgs.pop (  ) ;cfgs.push ( cfa.getCfg (  )  ) ;^584^585^586^587^588^583^591^[ADD] if  ( cfgs.peek (  )  == null )  { ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ; cfa.process ( null, getScopeRoot (  )  ) ; cfgs.pop (  ) ; cfgs.push ( cfa.getCfg (  )  ) ;^[METHOD] getControlFlowGraph [TYPE] ControlFlowGraph [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, true ) ;^585^^^^^583^591^[REPLACE] ControlFlowAnalysis cfa = new ControlFlowAnalysis ( compiler, false ) ;^[METHOD] getControlFlowGraph [TYPE] ControlFlowGraph [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return cfgs.pop (  ) ;^590^^^^^583^591^[REPLACE] return cfgs.peek (  ) ;^[METHOD] getControlFlowGraph [TYPE] ControlFlowGraph [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  ControlFlowAnalysis cfa  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^if  ( roots.isEmpty (  )  )  {^595^^^^^594^600^[REPLACE] if  ( scopeRoots.isEmpty (  )  )  {^[METHOD] getScopeRoot [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopeRoots .push ( fnName )  ;^598^^^^^594^600^[REPLACE] return scopeRoots.peek (  ) ;^[METHOD] getScopeRoot [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopes.pop (  ) .getRootNode (  ) ;^596^^^^^594^600^[REPLACE] return scopes.peek (  ) .getRootNode (  ) ;^[METHOD] getScopeRoot [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return ! ( scopes.isEmpty (  )  && scopeRoots.isEmpty (  )  ) ;^596^^^^^594^600^[REPLACE] return scopes.peek (  ) .getRootNode (  ) ;^[METHOD] getScopeRoot [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopeRoots .push ( n )  ;^598^^^^^594^600^[REPLACE] return scopeRoots.peek (  ) ;^[METHOD] getScopeRoot [TYPE] Node [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return false ;^606^^^^^605^607^[REPLACE] return getScopeDepth (  )  <= 1;^[METHOD] inGlobalScope [TYPE] boolean [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return scopes.push (  )  + scopeRoots.size (  )  + 1;^610^^^^^609^611^[REPLACE] return scopes.size (  )  + scopeRoots.size (  ) ;^[METHOD] getScopeDepth [TYPE] int [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return ! ( scopes.push (  )  && scopeRoots.isEmpty (  )  ) ;^614^^^^^613^615^[REPLACE] return ! ( scopes.isEmpty (  )  && scopeRoots.isEmpty (  )  ) ;^[METHOD] hasScope [TYPE] boolean [PARAMETER] [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^JSError error = JSError.make ( getSourceName (  ) , parent, diagnosticType, arguments ) ;^620^^^^^618^622^[REPLACE] JSError error = JSError.make ( getSourceName (  ) , n, diagnosticType, arguments ) ;^[METHOD] report [TYPE] void [PARAMETER] Node n DiagnosticType diagnosticType  arguments [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  diagnosticType  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  String[] arguments  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  JSError error 
[REPLACE]^compiler.getInput ( error ) ;^621^^^^^618^622^[REPLACE] compiler.report ( error ) ;^[METHOD] report [TYPE] void [PARAMETER] Node n DiagnosticType diagnosticType  arguments [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  diagnosticType  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  String[] arguments  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  JSError error 
[ADD]^^621^^^^^618^622^[ADD] compiler.report ( error ) ;^[METHOD] report [TYPE] void [PARAMETER] Node n DiagnosticType diagnosticType  arguments [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  diagnosticType  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  sourceName  src  [TYPE]  String[] arguments  [TYPE]  Deque cfgs  scopeRoots  scopes  [TYPE]  JSError error 
[REPLACE]^String parentame =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^625^^^^^624^627^[REPLACE] String name =  ( String )  n.getProp ( Node.SOURCENAME_PROP ) ;^[METHOD] getSourceName [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  diagnosticType  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  name  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return true ;^626^^^^^624^627^[REPLACE] return name == null ? "" : name;^[METHOD] getSourceName [TYPE] String [PARAMETER] Node n [CLASS] NodeTraversal AbstractPostOrderCallback AbstractShallowCallback AbstractShallowStatementCallback AbstractNodeTypePruningCallback   [TYPE]  ScopedCallback scopeCallback  [TYPE]  AbstractCompiler compiler  [TYPE]  Callback callback  cb  [TYPE]  Set nodeTypes  [TYPE]  boolean anonymous  false  include  true  [TYPE]  DiagnosticType NODE_TRAVERSAL_ERROR  diagnosticType  [TYPE]  Node args  body  child  cur  curNode  fnName  n  next  node  parent  root  scopeRoot  [TYPE]  ScopeCreator scopeCreator  [TYPE]  String MISSING_SOURCE  label  message  name  sourceName  src  [TYPE]  Deque cfgs  scopeRoots  scopes 
[REPLACE]^return false;^131^^^^^129^132^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractPostOrderCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^return parent ;^144^145^^^^140^146^[REPLACE] return parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractShallowCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^return n == null || NodeUtil.isControlStructure ( parent ) || NodeUtil .isControlStructure ( n )  ;^157^158^^^^155^159^[REPLACE] return parent == null || NodeUtil.isControlStructure ( parent ) || NodeUtil.isStatementBlock ( parent ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractShallowStatementCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^private  Set<Integer> nodeTypes;^168^^^^^^^[REPLACE] private final Set<Integer> nodeTypes;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractNodeTypePruningCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^this ( nodeTypes, false ) ;^176^^^^^175^177^[REPLACE] this ( nodeTypes, true ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] Integer> nodeTypes [CLASS] AbstractNodeTypePruningCallback   [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true 
[REPLACE]^this.nodeTypes =  false;^186^^^^^184^188^[REPLACE] this.nodeTypes = nodeTypes;^[METHOD] <init> [TYPE] Set,boolean) [PARAMETER] Integer> nodeTypes boolean include [CLASS] AbstractNodeTypePruningCallback   [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true 
[REPLACE]^this.include =  true;^187^^^^^184^188^[REPLACE] this.include = include;^[METHOD] <init> [TYPE] Set,boolean) [PARAMETER] Integer> nodeTypes boolean include [CLASS] AbstractNodeTypePruningCallback   [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true 
[REPLACE]^return include  ||  nodeTypes.contains ( n.getType (  )  ) ;^192^^^^^190^193^[REPLACE] return include == nodeTypes.contains ( n.getType (  )  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] AbstractNodeTypePruningCallback   [TYPE]  Set nodeTypes  [TYPE]  boolean false  include  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
