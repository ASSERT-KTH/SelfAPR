[REPLACE]^private   long  TMP_JSDOC_PROP = Node.LAST_PROP + 3;^85^^^^^^^[REPLACE] private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private final  boolean  sourceName;^88^^^^^^^[REPLACE] private final String sourceName;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private  ErrorReporter errorReporter;^91^^^^^^^[REPLACE] private final ErrorReporter errorReporter;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private  TransformDispatcher transformDispatcher;^92^^^^^^^[REPLACE] private final TransformDispatcher transformDispatcher;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^private  Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strict" ) ;^95^^^^^^^[REPLACE] private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet ( "use strict" ) ;^ [CLASS] IRFactory TransformDispatcher  
[REPLACE]^this.sourceString =  sourceName;^101^^^^^97^107^[REPLACE] this.sourceString = sourceString;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[REPLACE]^this.sourceName =  sourceString;^102^^^^^97^107^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[ADD]^this.registry = config.registry;^102^103^^^^97^107^[ADD] this.sourceName = sourceName; this.registry = config.registry;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[REPLACE]^this.registry =  null.registry;^103^^^^^97^107^[REPLACE] this.registry = config.registry;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[ADD]^^103^104^^^^97^107^[ADD] this.registry = config.registry; this.config = config;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[REPLACE]^this.config =  null;^104^^^^^97^107^[REPLACE] this.config = config;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[REPLACE]^this.errorReporter =  null;^105^^^^^97^107^[REPLACE] this.errorReporter = errorReporter;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[REPLACE]^this.transformDispatcher  =  this.transformDispatcher ;^106^^^^^97^107^[REPLACE] this.transformDispatcher = new TransformDispatcher (  ) ;^[METHOD] <init> [TYPE] ErrorReporter) [PARAMETER] String sourceString String sourceName Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP 
[REPLACE]^IRFactory irFactory = new IRFactory ( sourceName, node.getSourceName (  ) , config, errorReporter ) ;^113^114^^^^112^156^[REPLACE] IRFactory irFactory = new IRFactory ( sourceString, node.getSourceName (  ) , config, errorReporter ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node irNode = irFactory.justTransform ( node ) ;^115^^^^^112^156^[REPLACE] Node irNode = irFactory.transform ( node ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = irNode .getJSDocInfo (  )  ;^118^119^^^^112^156^[REPLACE] Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = irNode.getJsDocBuilderForNode (  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo fileOverviewInfo = true;^124^^^^^112^156^[REPLACE] JSDocInfo fileOverviewInfo = null;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( node.getComments (  )  == null )  {^125^^^^^112^156^[REPLACE] if  ( node.getComments (  )  != null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( comment.getCommentType (  )  == JSDOC || ( comment.getLineno (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^127^128^129^130^^112^156^[REPLACE] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^127^128^129^130^131^112^156^[ADD] if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  || comment.getValue (  ) .contains ( "@license" )  )  )  { JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) ,^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( info != null && fileOverviewInfo != null )  {^134^^^^^127^137^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^fileOverviewInfo = info;^134^135^136^^^127^137^[ADD] if  ( info != null && fileOverviewInfo == null )  { fileOverviewInfo = info; }^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo =  null;^135^^^^^127^137^[REPLACE] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^135^^^^^127^137^[ADD] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment .getCommentType (  )  , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^127^137^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  fileOverviewInfo != false )  {^134^^^^^112^156^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo =  null;^135^^^^^112^156^[REPLACE] fileOverviewInfo = info;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (info == null )  {^143^^^^^112^156^[REPLACE] if  ( fileOverviewInfo != null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  ( irNode.getProp (  )  == null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^112^156^[REPLACE] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo .hasEnumParameterType (  )   ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode.getString (  ) .getLicense (  )  ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REMOVE]^comment.getValue (  ) .contains ( "@license" )  )  )  { JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) ,^146^^^^^144^147^[REMOVE] ^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  ( irNode.getJSDocInfo (  )  == false )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != false )  )  {^144^145^^^^112^156^[REPLACE] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .contains (  )  ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^comments =  null.getComments (  ) .toArray ( comments ) ;^152^^^^^112^156^[REPLACE] comments = node.getComments (  ) .toArray ( comments ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^126^^^^^112^156^[REPLACE] for  ( Comment comment : node.getComments (  )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment .getLineno (  )  , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^131^132^133^^^112^156^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^131^132^133^^^112^156^[ADD] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Comment[] comments = new Comment[node.getComments (  ) .contains (  ) ];^151^^^^^112^156^[REPLACE] Comment[] comments = new Comment[node.getComments (  ) .size (  ) ];^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.transform ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, info ) ;^131^132^133^^^127^137^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^131^132^133^^^127^137^[ADD] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  fileOverviewInfo != null )  {^134^^^^^112^156^[REPLACE] if  ( info != null && fileOverviewInfo == null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  ( fileOverviewInfo == true )  {^143^^^^^112^156^[REPLACE] if  ( fileOverviewInfo != null )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^if  (  ( irNode.getJSDocInfo (  )  == null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^144^145^^^^112^156^[REPLACE] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode .setJSDocInfo ( info )  .getLicense (  )  ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^144^145^146^147^^112^156^[ADD] if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  { fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ; }^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  )  .getLineno (  )   ) ;^146^^^^^144^147^[REPLACE] fileOverviewInfo.setLicense ( irNode.getJSDocInfo (  ) .getLicense (  )  ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^152^^^^^112^156^[ADD] comments = node.getComments (  ) .toArray ( comments ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[ADD]^^126^127^128^129^^112^156^[ADD] for  ( Comment comment : node.getComments (  )  )  { if  ( comment.getCommentType (  )  == JSDOC && ( comment.getValue (  ) .contains ( "@fileoverview" )  || comment.getValue (  ) .contains ( "@preserve" )  ||^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , this, fileOverviewInfo ) ;^131^132^133^^^112^156^[REPLACE] JSDocInfo info = irFactory.parseJSDocInfo ( comment.getValue (  ) , comment.getLineno (  ) , comment.getAbsolutePosition (  ) , fileLevelJsDocBuilder, fileOverviewInfo ) ;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^return node;^155^^^^^112^156^[REPLACE] return irNode;^[METHOD] transformTree [TYPE] Node [PARAMETER] AstRoot node String sourceString Config config ErrorReporter errorReporter [CLASS] IRFactory TransformDispatcher   [TYPE]  Comment comment  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  Config config  [TYPE]  IRFactory irFactory  [TYPE]  Node irNode  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String sourceName  sourceString  [TYPE]  JSDocInfo fileOverviewInfo  info  [TYPE]  int TMP_JSDOC_PROP  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  AstRoot node 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^159^^^^^158^180^[REPLACE] Node irNode = justTransform ( node ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( irNode.getType (  )  == Token.FUNCTION || irNode.getFirstChild (  ) .contains (  )  != -1 )  {^161^162^^^^158^180^[REPLACE] if  ( irNode.getType (  )  == Token.FUNCTION && irNode.getFirstChild (  ) .getLineno (  )  != -1 )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( irNode.getLineno (  )   !=  -1 - 1 )  {^166^^^^^158^180^[REPLACE] if  ( irNode.getLineno (  )  == -1 )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[ADD]^^166^167^^^170^158^180^[ADD] if  ( irNode.getLineno (  )  == -1 )  {  int lineno = node.getLineno (  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int lineno = node .getCommentType (  )  ;^170^^^^^158^180^[REPLACE] int lineno = node.getLineno (  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int charno = position2charno ( node.getLineno (  )  ) ;^172^^^^^158^180^[REPLACE] int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[ADD]^^172^^^^^158^180^[ADD] int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int lineno = node.getType (  ) ;^170^^^^^158^180^[REPLACE] int lineno = node.getLineno (  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setLineno ( irNode.removeFirstChild (  ) .getLineno (  )  ) ;^163^^^^^158^180^[REPLACE] irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setLineno ( irNode .removeFirstChild (  )  .getLineno (  )  ) ;^163^^^^^158^180^[REPLACE] irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setLineno ( irNode.getFirstChild (  ) .getLineno (  )  ) ;^164^^^^^158^180^[REPLACE] irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.setCharno ( irNode.removeFirstChild (  ) .getCharno (  )  ) ;^164^^^^^158^180^[REPLACE] irNode.setCharno ( irNode.getFirstChild (  ) .getCharno (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( irNode .getCommentType (  )    ||  -3 )  {^166^^^^^158^180^[REPLACE] if  ( irNode.getLineno (  )  == -1 )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[ADD]^^170^171^^^^158^180^[ADD] int lineno = node.getLineno (  ) ; irNode.setLineno ( lineno ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^int charno = position2charno ( node .getCommentType (  )   ) ;^172^^^^^158^180^[REPLACE] int charno = position2charno ( node.getAbsolutePosition (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[ADD]^^172^173^^^^158^180^[ADD] int charno = position2charno ( node.getAbsolutePosition (  )  ) ; irNode.setCharno ( charno ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( node.getJsDoc (  )  == this )  {^176^^^^^158^180^[REPLACE] if  ( node.getJsDoc (  )  != null )  {^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.putProp ( TMP_JSDOC_PROP, node .getType (  )   ) ;^177^^^^^158^180^[REPLACE] irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^irNode.putProp ( TMP_JSDOC_PROP, node.getType (  )  ) ;^177^^^^^158^180^[REPLACE] irNode.putProp ( TMP_JSDOC_PROP, node.getJsDoc (  )  ) ;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^return node;^179^^^^^158^180^[REPLACE] return irNode;^[METHOD] transform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node irNode  [TYPE]  String sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  lineno  [TYPE]  AstNode node 
[REPLACE]^if  ( ci >= comments.length (  )  )  {^194^^^^^193^234^[REPLACE] if  ( ci >= comments.length )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^return lineno;^196^^^^^193^234^[REPLACE] return ci;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^while  ( comments[ci].getCommentType (  )  != JSDOC ;^204^205^^^^193^234^[REPLACE] while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^Preconditions.checkState ( lineno < comments.length (  )  ) ;^207^^^^^204^208^[REPLACE] Preconditions.checkState ( ci < comments.length ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^207^^^^^204^208^[ADD] Preconditions.checkState ( ci < comments.length ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.putProp ( TMP_JSDOC_PROP )  == false )  {^200^^^^^193^234^[REPLACE] if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^200^201^^^204^193^234^[ADD] if  ( node.getProp ( TMP_JSDOC_PROP )  != null )  { String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ; while  ( comments[ci].getCommentType (  )  != JSDOC ||^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^while  ( comments[ci].getCommentType (  )  != JSDOC && !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^204^205^^^^193^234^[REPLACE] while  ( comments[ci].getCommentType (  )  != JSDOC || !comments[ci].getValue (  ) .equals ( jsDoc )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^Preconditions.checkState ( ci < comments.length - 4 ) ;^207^^^^^204^208^[REPLACE] Preconditions.checkState ( ci < comments.length ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( info == null && info.hasEnumParameterType (  )  )  {^213^^^^^193^234^[REPLACE] if  ( info != null && info.hasEnumParameterType (  )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^213^214^215^216^^193^234^[ADD] if  ( info != null && info.hasEnumParameterType (  )  )  { if  ( node.getType (  )  == Token.NAME )  { registry.identifyEnumName ( node.getString (  )  ) ; } else if  ( node.getType (  )  == Token.VAR &&^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.getType (  )   !=  Token.NAME )  {^214^^^^^193^234^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  else {^216^217^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^}   registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^216^217^218^219^220^193^234^[ADD] else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  else {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^}   registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^219^220^221^^^193^234^[ADD] else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.removeFirstChild (  ) .getQualifiedName (  )  ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  ) .equals (  )  ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node .removeFirstChild (  )  .getQualifiedName (  )  ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  ) .contains (  )  ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.removeFirstChild (  ) .getString (  )  ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getProp (  )   !=  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.newString (  )  ) ;^215^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )   ||  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^220^221^^^^193^234^[ADD] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  )  .newString (  )   ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^218^219^220^221^^216^221^[ADD] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ; } else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )   !=  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^}^219^220^221^^^193^234^[ADD] else if  ( node.getType (  )  == Token.ASSIGN )  { registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ; }^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )  == Token.VAR ) {^216^217^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node .removeFirstChild (  )  .getString (  )  ) ;^218^^^^^216^221^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  ( node.getType (  )   !=  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^215^216^217^218^^193^234^[ADD] registry.identifyEnumName ( node.getString (  )  ) ; } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  { registry.identifyEnumName ( node.getFirstChild (  ) .getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node.getFirstChild (  )  .getLicense (  )   ) ;^220^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^String jsDoc =  ( String )  node .putProp ( charno )  ;^201^^^^^193^234^[REPLACE] String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLicense (  ) , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^193^234^[REPLACE] JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  (  node.getChildCount (  )  == 1 )  {^216^217^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^}  if  ( node.getType (  )  == Token.VAR || node.getChildCount (  )  == 1 )  {^216^217^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.VAR && node.getChildCount (  )  == 1 )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  ( node.getType (  )   &&  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^214^^^^^193^234^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^registry.identifyEnumName ( node .newString (  )   ) ;^215^^^^^193^234^[REPLACE] registry.identifyEnumName ( node.getString (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^} else if  ( node.getProp (  )   ||  Token.ASSIGN )  {^219^^^^^193^234^[REPLACE] } else if  ( node.getType (  )  == Token.ASSIGN )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^String jsDoc =  ( String )  node.putProp ( TMP_JSDOC_PROP ) ;^201^^^^^193^234^[REPLACE] String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^201^^^^^193^234^[ADD] String jsDoc =  ( String )  node.getProp ( TMP_JSDOC_PROP ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^JSDocInfo info = parseJSDocInfo ( sourceString, comments[ci] .getCommentType (  )  , comments[ci].getAbsolutePosition (  )  ) ;^210^211^^^^193^234^[REPLACE] JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[ADD]^^210^211^^^^193^234^[ADD] JSDocInfo info = parseJSDocInfo ( jsDoc, comments[ci].getLineno (  ) , comments[ci].getAbsolutePosition (  )  ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^ci =  parseAllJsDocInfo ( null, comments, ci ) ;^230^^^^^193^234^[REPLACE] ci = parseAllJsDocInfo ( child, comments, ci ) ;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^229^^^^^193^234^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^return Token.NAME;^233^^^^^193^234^[REPLACE] return ci;^[METHOD] parseAllJsDocInfo [TYPE] int [PARAMETER] Node node Comment[] comments int ci [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Comment[] comments  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo info  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno 
[REPLACE]^return parseJSDocInfo ( comment, lineno, position, false, false ) ;^237^^^^^236^238^[REPLACE] return parseJSDocInfo ( comment, lineno, position, null, null ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  position 
[REPLACE]^int numOpeningChars = 3L;^263^^^^^259^280^[REPLACE] int numOpeningChars = 3;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring (lineno ) , lineno,^264^265^266^267^^259^280^[REPLACE] JsDocInfoParser jsdocParser = new JsDocInfoParser ( new JsDocTokenStream ( comment.substring ( numOpeningChars ) , lineno,^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^jsdocParser.setFileOverviewJSDocInfo ( fileLevelJsDocBuilder ) ;^272^^^^^259^280^[REPLACE] jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[ADD]^^272^273^^^^259^280^[ADD] jsdocParser.setFileLevelJsDocBuilder ( fileLevelJsDocBuilder ) ; jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^jsdocParser .getFileOverviewJSDocInfo (  )  ;^273^^^^^259^280^[REPLACE] jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[ADD]^^273^^^^^259^280^[ADD] jsdocParser.setFileOverviewJSDocInfo ( fileOverviewInfo ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^jsdocParser .retrieveAndResetParsedJSDocInfo (  )  ;^274^^^^^259^280^[REPLACE] jsdocParser.parse (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[ADD]^^274^^^^^259^280^[ADD] jsdocParser.parse (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^if  ( fileLevelJsDocBuilder == null )  {^275^^^^^259^280^[REPLACE] if  ( fileLevelJsDocBuilder != null )  {^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[ADD]^^275^276^277^278^279^259^280^[ADD] if  ( fileLevelJsDocBuilder != null )  { return jsdocParser.getFileOverviewJSDocInfo (  ) ; } else { return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ; }^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^return jsdocParser .setFileOverviewJSDocInfo ( fileOverviewInfo )  ;^278^^^^^259^280^[REPLACE] return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^return jsdocParser.retrieveAndResetParsedJSDocInfo (  ) ;^276^^^^^259^280^[REPLACE] return jsdocParser.getFileOverviewJSDocInfo (  ) ;^[METHOD] parseJSDocInfo [TYPE] JSDocInfo [PARAMETER] String comment int lineno int position FileLevelJsDocBuilder fileLevelJsDocBuilder JSDocInfo fileOverviewInfo [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  JsDocInfoParser jsdocParser  [TYPE]  Config config  [TYPE]  FileLevelJsDocBuilder fileLevelJsDocBuilder  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  JSDocInfo fileOverviewInfo  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineno  numOpeningChars  position 
[REPLACE]^int lineIndex = sourceString.lastIndexOf ( '\n', numOpeningChars ) ;^283^^^^^282^290^[REPLACE] int lineIndex = sourceString.lastIndexOf ( '\n', position ) ;^[METHOD] position2charno [TYPE] int [PARAMETER] int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^if  ( numOpeningChars  &&  -1 )  {^284^^^^^282^290^[REPLACE] if  ( lineIndex == -1 )  {^[METHOD] position2charno [TYPE] int [PARAMETER] int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[ADD]^return position;return position - lineIndex - 1;^284^285^286^^288^282^290^[ADD] if  ( lineIndex == -1 )  { return position; } else { return position - lineIndex - 1;^[METHOD] position2charno [TYPE] int [PARAMETER] int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^returnlineno - 1;^288^^^^^282^290^[REPLACE] return position - lineIndex - 1;^[METHOD] position2charno [TYPE] int [PARAMETER] int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^return numOpeningChars;^285^^^^^282^290^[REPLACE] return position;^[METHOD] position2charno [TYPE] int [PARAMETER] int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^return position - 1;^288^^^^^282^290^[REPLACE] return position - lineIndex - 1;^[METHOD] position2charno [TYPE] int [PARAMETER] int position [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^return transformDispatcher.processScope ( node ) ;^293^^^^^292^294^[REPLACE] return transformDispatcher.process ( node ) ;^[METHOD] justTransform [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode node 
[REPLACE]^Node nodeode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^[REPLACE] Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  n  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^300^^^^^297^304^[REPLACE] for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : n )  {^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  n  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[ADD]^^300^301^302^^^297^304^[ADD] for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : n )  { node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  n  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^return n;^303^^^^^297^304^[REPLACE] return node;^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  n  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^316^^^^^315^323^[REPLACE] Node ret = transform ( n ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^if  ( ret.getType (  )   !=  Token.STRING )  {^317^^^^^315^323^[REPLACE] if  ( ret.getType (  )  == Token.STRING )  {^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[ADD]^ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;ret.setType ( Token.STRING ) ;^317^318^319^320^321^315^323^[ADD] if  ( ret.getType (  )  == Token.STRING )  { ret.putBooleanProp ( Node.QUOTED_PROP, true ) ; } else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^}  if  ( ret.getType (  )   !=  Token.NAME )  {^319^^^^^315^323^[REPLACE] } else if  ( ret.getType (  )  == Token.NAME )  {^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^ret.setLineno ( Token.STRING ) ;^320^^^^^315^323^[REPLACE] ret.setType ( Token.STRING ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[ADD]^^320^^^^^315^323^[ADD] ret.setType ( Token.STRING ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^ret .putProp ( position )  ;^318^^^^^315^323^[REPLACE] ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^}  else {^319^^^^^315^323^[REPLACE] } else if  ( ret.getType (  )  == Token.NAME )  {^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^return new Node ( Token.FOR,^322^^^^^315^323^[REPLACE] return ret;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node ret  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  lineIndex  lineno  numOpeningChars  position  [TYPE]  AstNode n 
[REPLACE]^if  ( literalNode .getElements (  )   )  {^327^^^^^326^356^[REPLACE] if  ( literalNode.isDestructuring (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return processInfixExpression ( propertyNode ) ;^328^^^^^326^356^[REPLACE] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^328^^^^^326^356^[ADD] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node node = new Node ( Token.BREAK ) ;^331^^^^^326^356^[REPLACE] Node node = new Node ( Token.ARRAYLIT ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int skipCount = 4;^332^^^^^326^356^[REPLACE] int skipCount = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( c.getType (  )   &&  Token.EMPTY )  {^335^^^^^326^356^[REPLACE] if  ( c.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^335^336^337^^^326^356^[ADD] if  ( c.getType (  )  == Token.EMPTY )  { skipCount++; }^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^333^^^^^326^356^[REPLACE] for  ( AstNode child : literalNode.getElements (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^334^^^^^326^356^[REPLACE] Node c = transform ( child ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  (position  >=  1 )  {^341^^^^^326^356^[REPLACE] if  ( skipCount > 0 )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.getProp (  )   &&  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j]  =  skipIndexes[j] ;^348^^^^^326^356^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^342^^^^^326^356^[REPLACE] int[] skipIndexes = new int[skipCount];^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^342^343^^^^326^356^[ADD] int[] skipIndexes = new int[skipCount]; int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int i = 0 + 3;^343^^^^^326^356^[REPLACE] int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^343^^^^^326^356^[ADD] int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int j = 1;^344^^^^^326^356^[REPLACE] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^345^^^^^326^356^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^345^346^347^348^349^326^356^[ADD] for  ( Node child : node.children (  )  )  { if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.getType (  )   !=  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j]  = null ;^348^^^^^326^356^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int j = 2;^344^^^^^326^356^[REPLACE] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^344^^^^^326^356^[ADD] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return irNode;^355^^^^^326^356^[REPLACE] return node;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  ArrayLiteral literalNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return processInfixExpression ( propertyNode ) ;^360^^^^^359^361^[REPLACE] return processInfixExpression ( assignmentNode ) ;^[METHOD] processAssignment [TYPE] Node [PARAMETER] Assignment assignmentNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Assignment assignmentNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^365^^^^^364^371^[REPLACE] Node node = new ScriptOrFnNode ( Token.SCRIPT ) ;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstRoot rootNode 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^366^^^^^364^371^[REPLACE] for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode )  {^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstRoot rootNode 
[REPLACE]^parseDirectives ( bodyNode ) ;^369^^^^^364^371^[REPLACE] parseDirectives ( node ) ;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstRoot rootNode 
[REPLACE]^return irNode;^370^^^^^364^371^[REPLACE] return node;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node child  node  [TYPE]  String comment  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount  [TYPE]  AstRoot rootNode 
[REPLACE]^Set<String> directives = false;^384^^^^^382^397^[REPLACE] Set<String> directives = null;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[ADD]^^385^386^^^^382^397^[ADD] while  ( isDirective ( node.getFirstChild (  )  )  )  { String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^if  ( directives != null )  {^387^^^^^382^397^[REPLACE] if  ( directives == null )  {^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^directives.add ( sourceName ) ;^390^^^^^382^397^[REPLACE] directives.add ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^directives =  Sets.newHashSet ( sourceString ) ;^388^^^^^382^397^[REPLACE] directives = Sets.newHashSet ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^String directive = node.removeFirstChild (  ) .getFirstChild (  ) .contains (  ) ;^386^^^^^382^397^[REPLACE] String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^directives.contains ( directive ) ;^390^^^^^382^397^[REPLACE] directives.add ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^directives =  Sets.newHashSet ( null ) ;^388^^^^^382^397^[REPLACE] directives = Sets.newHashSet ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^String directive = node.removeFirstChild (  ) .contains (  ) .getString (  ) ;^386^^^^^382^397^[REPLACE] String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^if  ( directives == null )  {^394^^^^^382^397^[REPLACE] if  ( directives != null )  {^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^node.setLineno ( null ) ;^395^^^^^382^397^[REPLACE] node.setDirectives ( directives ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  numOpeningChars  position  skipCount 
[REPLACE]^if  ( n != null )  return false;^400^^^^^399^406^[REPLACE] if  ( n == null )  return false;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( n == null )  return true;^400^^^^^399^406^[REPLACE] if  ( n == null )  return false;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^int nType = n.setType (  ) ;^402^^^^^399^406^[REPLACE] int nType = n.getType (  ) ;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .contains (  )  ) ;^403^404^405^^^399^406^[REPLACE] return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return processGeneric ( scopeNode ) ;^410^^^^^409^411^[REPLACE] return processGeneric ( blockNode ) ;^[METHOD] processBlock [TYPE] Node [PARAMETER] Block blockNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Block blockNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^415^^^^^414^420^[REPLACE] Node node = new Node ( Token.BREAK ) ;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[ADD]^^415^^^^^414^420^[ADD] Node node = new Node ( Token.BREAK ) ;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( statementNode.getBreakLabel (  )  == null )  {^416^^^^^414^420^[REPLACE] if  ( statementNode.getBreakLabel (  )  != null )  {^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^417^^^^^414^420^[REPLACE] node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[ADD]^^417^418^^^^414^420^[ADD] node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ; }^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^419^^^^^414^420^[REPLACE] return node;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^AstNode catchVar = clauseNode.getLineno (  ) ;^424^^^^^423^440^[REPLACE] AstNode catchVar = clauseNode.getVarName (  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^425^^^^^423^440^[REPLACE] Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^if  ( clauseNode.getCatchCondition (  )  == null )  {^426^^^^^423^440^[REPLACE] if  ( clauseNode.getCatchCondition (  )  != null )  {^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^429^^^^^423^440^[REPLACE] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^int clauseAbsolutePosition = position2charno ( catchVar .getCommentType (  )   ) ;^433^434^^^^423^440^[REPLACE] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getVarName (  )  )  ) ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[ADD]^^429^^^^^423^440^[ADD] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^int clauseAbsolutePosition = position2charno ( catchVar.getLineno (  )  ) ;^433^434^^^^423^440^[REPLACE] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getLineno (  )  )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^node.addChildToBack ( transform ( clauseNode .getLineno (  )   )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^return catchCondition;^439^^^^^423^440^[REPLACE] return node;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node catchCondition  node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  CatchClause clauseNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode catchVar 
[REPLACE]^return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTestExpression (  )  ) ,^444^445^446^447^^443^449^[REPLACE] return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[METHOD] processConditionalExpression [TYPE] Node [PARAMETER] ConditionalExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  ConditionalExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^453^^^^^452^458^[REPLACE] Node node = new Node ( Token.CONTINUE ) ;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[REPLACE]^if  ( statementNode.getLabel (  )  == null )  {^454^^^^^452^458^[REPLACE] if  ( statementNode.getLabel (  )  != null )  {^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[ADD]^node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;^454^455^456^^^452^458^[ADD] if  ( statementNode.getLabel (  )  != null )  { node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^455^^^^^452^458^[REPLACE] node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[ADD]^^455^456^^^^452^458^[ADD] node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[REMOVE]^if  (  ( irNode.getJSDocInfo (  )  != null )  && ( irNode.getJSDocInfo (  ) .getLicense (  )  != null )  )  {^455^^^^^452^458^[REMOVE] ^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[REPLACE]^return irNode;^457^^^^^452^458^[REPLACE] return node;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ContinueStatement statementNode 
[REPLACE]^return new Node ( Token.DO, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^[REPLACE] return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[METHOD] processDoLoop [TYPE] Node [PARAMETER] DoLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  DoLoop loopNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getTarget (  )  )  ) ;^470^471^472^473^^469^474^[REPLACE] return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[METHOD] processElementGet [TYPE] Node [PARAMETER] ElementGet getNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  ElementGet getNode 
[REPLACE]^Node node = new Node ( Token.IF ) ;^478^^^^^477^480^[REPLACE] Node node = new Node ( Token.EMPTY ) ;^[METHOD] processEmptyExpression [TYPE] Node [PARAMETER] EmptyExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  EmptyExpression exprNode 
[REPLACE]^return irNode;^479^^^^^477^480^[REPLACE] return node;^[METHOD] processEmptyExpression [TYPE] Node [PARAMETER] EmptyExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  EmptyExpression exprNode 
[REPLACE]^Node node = new Node ( transformTokenType ( statementNode.getExpression (  )  )  ) ;^484^^^^^483^487^[REPLACE] Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^485^^^^^483^487^[REPLACE] node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[ADD]^^485^486^487^^^483^487^[ADD] node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ; return node; }^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getType (  )  )  ) ;^485^^^^^483^487^[REPLACE] node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^486^^^^^483^487^[REPLACE] return node;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return  Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratednew Node ( DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  )   ) ,^491^492^493^494^^490^496^[REPLACE] return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[METHOD] processForInLoop [TYPE] Node [PARAMETER] ForInLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ForInLoop loopNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getBody (  )  ) ,^500^501^502^503^^499^507^[REPLACE] Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) , transform ( loopNode.getCondition (  )  ) ,^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.setCharno ( transform ( loopNode.getBody (  )  )  ) ;^505^^^^^499^507^[REPLACE] node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^505^^^^^499^507^[REPLACE] node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REMOVE]^registry.identifyEnumName ( node.getFirstChild (  ) .getQualifiedName (  )  ) ;^505^^^^^499^507^[REMOVE] ^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( loopNode.getCondition (  )  )  ) ;^505^^^^^499^507^[REPLACE] node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^506^^^^^499^507^[REPLACE] return node;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  lineIndex  lineno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getType (  )  )  ) ;^511^512^^^^510^521^[REPLACE] Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^513^^^^^510^521^[REPLACE] for  ( AstNode child : callNode.getArguments (  )  )  {^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^int leftParamPos = callNode .getCommentType (  )    !=  callNode.getLp (  ) ;^517^^^^^510^521^[REPLACE] int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^517^518^^^^510^521^[ADD] int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ; node.setLineno ( callNode.getLineno (  )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^node.setLineno ( callNode.getType (  )  ) ;^518^^^^^510^521^[REPLACE] node.setLineno ( callNode.getLineno (  )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^518^519^^^^510^521^[ADD] node.setLineno ( callNode.getLineno (  )  ) ; node.setCharno ( position2charno ( leftParamPos )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^node.setLineno ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^[REPLACE] node.setCharno ( position2charno ( leftParamPos )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^node.setCharno ( position2charno ( skipCount )  ) ;^519^^^^^510^521^[REPLACE] node.setCharno ( position2charno ( leftParamPos )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[ADD]^^519^^^^^510^521^[ADD] node.setCharno ( position2charno ( leftParamPos )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return irNode;^520^^^^^510^521^[REPLACE] return node;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  FunctionCall callNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Name name = functionNode .getSourceName (  )  ;^525^^^^^524^575^[REPLACE] Name name = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Boolean isUnnamedFunction = true;^526^^^^^524^575^[REPLACE] Boolean isUnnamedFunction = false;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^if  (fnName != true )  {^527^^^^^524^575^[REPLACE] if  ( name == null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^name =  new FunctionNode ( name.getIdentifier (  )  )  ;^528^^^^^524^575^[REPLACE] name = new Name (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^isUnnamedFunction = false;^530^^^^^524^575^[REPLACE] isUnnamedFunction = true;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getLineno (  )  ) ;^532^533^^^^524^575^[REPLACE] Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^532^533^^^^524^575^[ADD] Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.putProp ( Node.SOURCENAME_PROP, functionNode .getComments (  )   ) ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.putProp ( Node.SOURCENAME_PROP, functionNode.getFunctionName (  )  ) ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node newName = transform ( fnName ) ;^535^^^^^524^575^[REPLACE] Node newName = transform ( name ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^535^536^^^539^524^575^[ADD] Node newName = transform ( name ) ; if  ( isUnnamedFunction )  { newName.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^if  ( node.getJsDoc (  )  != null )  {^536^^^^^524^575^[REPLACE] if  ( isUnnamedFunction )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^int lpColumn = functionNode.getAbsolutePosition (  )   !=  functionNode.getLp (  ) ;^543^544^^^^524^575^[REPLACE] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^int lpColumn = functionNode.getAbsolutePosition (  )   <=  functionNode.getLp (  ) ;^543^544^^^^524^575^[REPLACE] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node .getChildCount (  )  ;^548^^^^^524^575^[REPLACE] node.addChildToBack ( newName ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^548^^^^^524^575^[ADD] node.addChildToBack ( newName ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^549^^^^^524^575^[REPLACE] Node lp = new Node ( Token.LP ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^549^^^^^524^575^[ADD] Node lp = new Node ( Token.LP ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Name fnName = functionNode.getSourceName (  ) ;^556^^^^^524^575^[REPLACE] Name fnName = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^556^^^^^524^575^[ADD] Name fnName = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^if  ( fnName == null )  {^557^^^^^524^575^[REPLACE] if  ( fnName != null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setLineno ( functionNode.getLp (  )  ) ;^560^^^^^557^561^[REPLACE] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^560^^^^^557^561^[ADD] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^524^575^[REPLACE] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[ADD]^^558^^^^^524^575^[ADD] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^int lparenCharno = functionNode.getLp (  )   !=  functionNode.getAbsolutePosition (  ) ;^562^563^^^^524^575^[REPLACE] int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp .setLineno (  )  ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^lp.setCharno ( position2charno ( skipCount )  ) ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^566^^^^^524^575^[REPLACE] for  ( AstNode param : functionNode.getParams (  )  )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.removeChild ( lp ) ;^569^^^^^524^575^[REPLACE] node.addChildToBack ( lp ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node bodyNode = transform ( functionNode.getLp (  )  ) ;^571^^^^^524^575^[REPLACE] Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^parseDirectives ( node ) ;^572^^^^^524^575^[REPLACE] parseDirectives ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^node.removeChild ( bodyNode ) ;^573^^^^^524^575^[REPLACE] node.addChildToBack ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^return newName;^574^^^^^524^575^[REPLACE] return node;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] IRFactory TransformDispatcher   [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  Config config  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name fnName  name  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  boolean false  true  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  Boolean isUnnamedFunction  [TYPE]  AstNode param 
[REPLACE]^Node node = new Node ( Token.FOR,^579^^^^^578^586^[REPLACE] Node node = new Node ( Token.IF ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^580^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode .getBody (  )   )  ) ;^580^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^581^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^581^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode .getElsePart (  )   )  ) ;^581^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( statementNode.getElsePart (  )  == null )  {^582^^^^^578^586^[REPLACE] if  ( statementNode.getElsePart (  )  != null )  {^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^582^583^584^^^578^586^[ADD] if  ( statementNode.getElsePart (  )  != null )  { node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^583^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^583^584^^^^578^586^[ADD] node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ; }^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^583^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^585^^^^^578^586^[REPLACE] return node;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getLeft (  )  )  ) ;^590^591^592^593^^589^603^[REPLACE] Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^n.setLineno ( exprNode .getCommentType (  )   ) ;^596^^^^^589^603^[REPLACE] n.setLineno ( exprNode.getLineno (  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   >=  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^[REPLACE] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   &&  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^[REPLACE] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^n.setCharno ( position2charno ( exprNode .getCommentType (  )   + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^[REPLACE] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^601^^^^^589^603^[REPLACE] exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return Token.NAME;^602^^^^^589^603^[REPLACE] return n;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  InfixExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return new Node ( transformTokenType ( literalNode .setType (  )   )  ) ;^607^^^^^606^608^[REPLACE] return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;^[METHOD] processKeywordLiteral [TYPE] Node [PARAMETER] KeywordLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  KeywordLiteral literalNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^612^^^^^611^613^[REPLACE] return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[METHOD] processLabel [TYPE] Node [PARAMETER] Label labelNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Label labelNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^617^^^^^616^630^[REPLACE] Node node = new Node ( Token.LABEL ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node prev = false;^618^^^^^616^630^[REPLACE] Node prev = null;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^619^^^^^616^630^[REPLACE] Node cur = node;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( prev == null )  {^621^^^^^616^630^[REPLACE] if  ( prev != null )  {^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^621^622^623^^^616^630^[ADD] if  ( prev != null )  { prev.addChildToBack ( cur ) ; }^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^prev.removeChild ( cur ) ;^622^^^^^616^630^[REPLACE] prev.addChildToBack ( cur ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REMOVE]^node.addChildToBack ( block ) ;^622^^^^^616^630^[REMOVE] ^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^prev =  null;^625^^^^^616^630^[REPLACE] prev = cur;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node = new Node ( Token.DEFAULT ) ; ;^626^^^^^616^630^[REPLACE] cur = new Node ( Token.LABEL ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^620^^^^^616^630^[REPLACE] for  ( Label label : statementNode.getLabels (  )  )  {^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^prev.setCharno ( transform ( statementNode.getStatement (  )  )  ) ;^628^^^^^616^630^[REPLACE] prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^prev.addChildToBack ( transform ( statementNode .getLabels (  )   )  ) ;^628^^^^^616^630^[REPLACE] prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^628^629^630^^^616^630^[ADD] prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ; return node; }^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^prev.addChildToBack ( transform ( statementNode.getLabels (  )  )  ) ;^628^^^^^616^630^[REPLACE] prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^629^^^^^616^630^[REPLACE] return node;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node cur  node  prev  [TYPE]  Label label  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return Node.newString ( Token.NAME, nameNode.getLineno (  )  ) ;^634^^^^^633^635^[REPLACE] return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[METHOD] processName [TYPE] Node [PARAMETER] Name nameNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  Name nameNode 
[REPLACE]^return new Node ( Token.FOR,^639^^^^^638^640^[REPLACE] return processFunctionCall ( exprNode ) ;^[METHOD] processNewExpression [TYPE] Node [PARAMETER] NewExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  NewExpression exprNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^644^^^^^643^646^[REPLACE] Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[METHOD] processNumberLiteral [TYPE] Node [PARAMETER] NumberLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node newNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  NumberLiteral literalNode 
[REPLACE]^return new Node ( Token.FOR,^645^^^^^643^646^[REPLACE] return newNode;^[METHOD] processNumberLiteral [TYPE] Node [PARAMETER] NumberLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node newNode  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  NumberLiteral literalNode 
[REPLACE]^if  ( literalNode.getElements (  )  )  {^650^^^^^649^660^[REPLACE] if  ( literalNode.isDestructuring (  )  )  {^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return processInfixExpression ( propertyNode ) ;^651^^^^^649^660^[REPLACE] reportDestructuringAssign ( literalNode ) ;^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.ARRAYLIT ) ;^654^^^^^649^660^[REPLACE] Node node = new Node ( Token.OBJECTLIT ) ;^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^655^^^^^649^660^[REPLACE] for  ( ObjectProperty el : literalNode.getElements (  )  )  {^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^655^656^657^658^^649^660^[ADD] for  ( ObjectProperty el : literalNode.getElements (  )  )  { node.addChildToBack ( transformAsString ( el.getLeft (  )  )  ) ; node.addChildToBack ( transform ( el.getRight (  )  )  ) ; }^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^659^^^^^649^660^[REPLACE] return node;^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return processInfixExpression ( assignmentNode ) ;^664^^^^^663^665^[REPLACE] return processInfixExpression ( propertyNode ) ;^[METHOD] processObjectProperty [TYPE] Node [PARAMETER] ObjectProperty propertyNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ObjectProperty propertyNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^669^^^^^668^672^[REPLACE] Node node = transform ( exprNode.getExpression (  )  ) ;^[METHOD] processParenthesizedExpression [TYPE] Node [PARAMETER] ParenthesizedExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ParenthesizedExpression exprNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.removeProp ( TMP_JSDOC_PROP ) ;^670^^^^^668^672^[REPLACE] node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[METHOD] processParenthesizedExpression [TYPE] Node [PARAMETER] ParenthesizedExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ParenthesizedExpression exprNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^671^^^^^668^672^[REPLACE] return node;^[METHOD] processParenthesizedExpression [TYPE] Node [PARAMETER] ParenthesizedExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  ParenthesizedExpression exprNode  [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getTarget (  )  )  ) ;^676^677^678^679^^675^680^[REPLACE] return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[METHOD] processPropertyGet [TYPE] Node [PARAMETER] PropertyGet getNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  PropertyGet getNode  [TYPE]  Config config  [TYPE]  String comment  directive  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node literalStringNode = Node .getString (  )  ;^684^^^^^683^696^[REPLACE] Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^literalStringNode.setLineno ( literalNode.getValue (  )  ) ;^686^^^^^683^696^[REPLACE] literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^686^^^^^683^696^[ADD] literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.REGEXP, node ) ;^687^^^^^683^696^[REPLACE] Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^String flags = literalNode.getValue (  ) ;^688^^^^^683^696^[REPLACE] String flags = literalNode.getFlags (  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( flags == null && true (  )  )  {^689^^^^^683^696^[REPLACE] if  ( flags != null && !flags.isEmpty (  )  )  {^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^689^690^^692^693^683^696^[ADD] if  ( flags != null && !flags.isEmpty (  )  )  { Node flagsNode = Node.newString ( flags ) ; flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node sourceStringNode = Node.putProp ( flags ) ;^690^^^^^683^696^[REPLACE] Node flagsNode = Node.newString ( flags ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node sourceStringNode = Node.newString ( flags ) ;^690^^^^^683^696^[REPLACE] Node flagsNode = Node.newString ( flags ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^690^^^^^683^696^[ADD] Node flagsNode = Node.newString ( flags ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return literalStringNode;^695^^^^^683^696^[REPLACE] return node;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^700^^^^^699^705^[REPLACE] Node node = new Node ( Token.RETURN ) ;^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( statementNode.getReturnValue (  )  == null )  {^701^^^^^699^705^[REPLACE] if  ( statementNode.getReturnValue (  )  != null )  {^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^701^702^703^^^699^705^[ADD] if  ( statementNode.getReturnValue (  )  != null )  { node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^702^^^^^699^705^[REPLACE] node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^704^^^^^699^705^[REPLACE] return node;^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return processGeneric ( blockNode ) ;^709^^^^^708^710^[REPLACE] return processGeneric ( scopeNode ) ;^[METHOD] processScope [TYPE] Node [PARAMETER] Scope scopeNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Scope scopeNode  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node n = Node.getProp ( literalNode.getValue (  )  ) ;^714^^^^^713^716^[REPLACE] Node n = Node.newString ( literalNode.getValue (  )  ) ;^[METHOD] processStringLiteral [TYPE] Node [PARAMETER] StringLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  StringLiteral literalNode  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return Token.NAME;^715^^^^^713^716^[REPLACE] return n;^[METHOD] processStringLiteral [TYPE] Node [PARAMETER] StringLiteral literalNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  StringLiteral literalNode  [TYPE]  Config config  [TYPE]  Node n  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node cur = node;^720^^^^^719^738^[REPLACE] Node node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^720^^^^^719^738^[ADD] Node node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^if  ( caseNode.getLineno (  )  )  {^721^^^^^719^738^[REPLACE] if  ( caseNode.isDefault (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^node =  new Node ( Token.CASE, transform ( null )  ) ;^725^^^^^719^738^[REPLACE] node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^AstNode expr = caseNode .getType (  )  ;^724^^^^^719^738^[REPLACE] AstNode expr = caseNode.getExpression (  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^724^725^^^^719^738^[ADD] AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^cur = new Node ( Token.LABEL ) ; ;^722^^^^^719^738^[REPLACE] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^722^^^^^719^738^[ADD] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^725^726^^^^719^738^[ADD] node = new Node ( Token.CASE, transform ( expr )  ) ; }^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^AstNode expr = caseNode.getLineno (  ) ;^724^^^^^719^738^[REPLACE] AstNode expr = caseNode.getExpression (  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^727^^^^^719^738^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, false ) ;^728^^^^^719^738^[REPLACE] block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block .getLineno (  )  ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.setLineno ( caseNode.getExpression (  )  ) ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^729^730^^^^719^738^[ADD] block.setLineno ( caseNode.getLineno (  )  ) ; block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.setCharno ( position2charno ( caseNode.getExpression (  )  )  ) ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^block.setCharno ( position2charno ( caseNode .getCommentType (  )   )  ) ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[ADD]^^730^^^^^719^738^[ADD] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^if  ( caseNode.getStatements (  )  == null )  {^731^^^^^719^738^[REPLACE] if  ( caseNode.getStatements (  )  != null )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^732^^^^^719^738^[REPLACE] for  ( AstNode child : caseNode.getStatements (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^node .getChildCount (  )  ;^736^^^^^719^738^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^return block;^737^^^^^719^738^[REPLACE] return node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchCase caseNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child  expr 
[REPLACE]^Node node = new Node ( Token.SWITCH, transform ( statementNode.getCases (  )  )  ) ;^742^743^^^^741^748^[REPLACE] Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processSwitchStatement [TYPE] Node [PARAMETER] SwitchStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchStatement statementNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^744^^^^^741^748^[REPLACE] for  ( AstNode child : statementNode.getCases (  )  )  {^[METHOD] processSwitchStatement [TYPE] Node [PARAMETER] SwitchStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchStatement statementNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return irNode;^747^^^^^741^748^[REPLACE] return node;^[METHOD] processSwitchStatement [TYPE] Node [PARAMETER] SwitchStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  SwitchStatement statementNode  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode child 
[REPLACE]^return new Node ( Token.FOR,^752^753^^^^751^754^[REPLACE] return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processThrowStatement [TYPE] Node [PARAMETER] ThrowStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  ThrowStatement statementNode  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.TRY, transform ( statementNode.getFinallyBlock (  )  )  ) ;^758^^^^^757^786^[REPLACE] Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^759^^^^^757^786^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^boolean lineSet = true;^760^^^^^757^786^[REPLACE] boolean lineSet = false;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^^760^^^^^757^786^[ADD] boolean lineSet = false;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( lineSet  &&  false )  {^765^^^^^757^786^[REPLACE] if  ( lineSet == false )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^lineSet = false;^767^^^^^757^786^[REPLACE] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^^767^^^^^757^786^[ADD] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^762^^^^^757^786^[REPLACE] for  ( CatchClause cc : statementNode.getCatchClauses (  )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^node.removeChild ( block ) ;^771^^^^^757^786^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^AstNode finallyBlock = statementNode.getTryBlock (  ) ;^773^^^^^757^786^[REPLACE] AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( finallyBlock == null )  {^774^^^^^757^786^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^node.addChildToBack ( transform ( finallyBlock )  ) ;^774^775^776^^^757^786^[ADD] if  ( finallyBlock != null )  { node.addChildToBack ( transform ( finallyBlock )  ) ; }^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^node .getChildCount (  )  ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^node.addChildToBack ( block ) ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  (   ( finallyBlock != null )  )  {^781^^^^^757^786^[REPLACE] if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^block.setLineno ( finallyBlock.getLineno (  )  ) ;^781^782^783^^^757^786^[ADD] if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  { block.setLineno ( finallyBlock.getLineno (  )  ) ; }^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^block.setLineno ( finallyBlock.getType (  )  ) ;^782^^^^^757^786^[REPLACE] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^block.setLineno ( finallyBlock .getCommentType (  )   ) ;^782^^^^^757^786^[REPLACE] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[ADD]^^782^^^^^757^786^[ADD] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^return block;^785^^^^^757^786^[REPLACE] return node;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Config config  [TYPE]  Node block  node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  CatchClause cc  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode finallyBlock 
[REPLACE]^Node node = new Node ( transformTokenType ( exprNode.getOperand (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^790^791^^^^789^796^[REPLACE] Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( exprNode.getType (  )  )  {^792^^^^^789^796^[REPLACE] if  ( exprNode.isPostfix (  )  )  {^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.putBooleanProp ( Node.INCRDECR_PROP, false ) ;^793^^^^^789^796^[REPLACE] node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^795^^^^^789^796^[REPLACE] return node;^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^800^^^^^799^805^[REPLACE] Node node = new Node ( Token.VAR ) ;^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer child  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^801^^^^^799^805^[REPLACE] for  ( VariableInitializer child : declarationNode.getVariables (  )  )  {^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer child  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^801^802^803^^^799^805^[ADD] for  ( VariableInitializer child : declarationNode.getVariables (  )  )  { node.addChildToBack ( transform ( child )  ) ; }^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer child  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^804^^^^^799^805^[REPLACE] return node;^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer child  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^Node node = transform ( initializerNode.getInitializer (  )  ) ;^809^^^^^808^815^[REPLACE] Node node = transform ( initializerNode.getTarget (  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^if  ( initializerNode.getInitializer (  )  == null )  {^810^^^^^808^815^[REPLACE] if  ( initializerNode.getInitializer (  )  != null )  {^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^810^811^812^813^^808^815^[ADD] if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( block ) ;^811^^^^^808^815^[REPLACE] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[ADD]^^811^812^813^^^808^815^[ADD] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( initializerNode .getCondition (  )   )  ) ;^811^^^^^808^815^[REPLACE] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.addChildToBack ( transform ( initializerNode.getTarget (  )  )  ) ;^811^^^^^808^815^[REPLACE] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.setLineno ( node .getCommentType (  )   ) ;^812^^^^^808^815^[REPLACE] node.setLineno ( node.getLineno (  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^node.setLineno ( node.setLineno (  )  ) ;^812^^^^^808^815^[REPLACE] node.setLineno ( node.getLineno (  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return irNode;^814^^^^^808^815^[REPLACE] return node;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  Node node  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  VariableInitializer initializerNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode .getLineno (  )   )  ) ;^819^820^821^822^^818^823^[REPLACE] return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processWhileLoop [TYPE] Node [PARAMETER] WhileLoop loopNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  WhileLoop loopNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^return new Node ( Token.WITH, transform ( statementNode .getType (  )   ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^[REPLACE] return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processWithStatement [TYPE] Node [PARAMETER] WithStatement statementNode [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  WithStatement statementNode  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount 
[REPLACE]^errorReporter.error ( "Unsupported syntax: "  ||  com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^835^836^837^838^^834^842^[REPLACE] errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getLineno (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^837^838^839^840^^834^842^[REPLACE] com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^node.getLineno (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^838^839^840^^^834^842^[REPLACE] node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^node.getType (  ) , "", 0 ) ;^840^^^^^834^842^[REPLACE] node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^return new Node ( Token.FOR,^841^^^^^834^842^[REPLACE] return new Node ( Token.EMPTY ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node .getCommentType (  )  , "", 0 ) ;^845^846^847^848^^844^849^[REPLACE] errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] reportDestructuringAssign [TYPE] void [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^node.getType (  ) , "", 0 ) ;^848^^^^^844^849^[REPLACE] node.getLineno (  ) , "", 0 ) ;^[METHOD] reportDestructuringAssign [TYPE] void [PARAMETER] AstNode node [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  [TYPE]  AstNode node 
[REPLACE]^return Token.DELPROP;^855^^^^^852^1164^[REPLACE] return Token.ERROR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^857^^^^^852^1164^[REPLACE] return Token.EOF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.COLON;^859^^^^^852^1164^[REPLACE] return Token.EOL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LEAVEWITH;^861^^^^^852^1164^[REPLACE] return Token.ENTERWITH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ENTERWITH;^863^^^^^852^1164^[REPLACE] return Token.LEAVEWITH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF;^865^^^^^852^1164^[REPLACE] return Token.RETURN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.COLON;^867^^^^^852^1164^[REPLACE] return Token.GOTO;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^869^^^^^852^1164^[REPLACE] return Token.IFEQ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^871^^^^^852^1164^[REPLACE] return Token.IFNE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^873^^^^^852^1164^[REPLACE] return Token.SETNAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.BITNOT;^875^^^^^852^1164^[REPLACE] return Token.BITOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.BITNOT;^877^^^^^852^1164^[REPLACE] return Token.BITXOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.AND;^879^^^^^852^1164^[REPLACE] return Token.BITAND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^881^^^^^852^1164^[REPLACE] return Token.EQ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^883^^^^^852^1164^[REPLACE] return Token.NE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^885^^^^^852^1164^[REPLACE] return Token.LT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^887^^^^^852^1164^[REPLACE] return Token.LE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^889^^^^^852^1164^[REPLACE] return Token.GT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^891^^^^^852^1164^[REPLACE] return Token.GE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^893^^^^^852^1164^[REPLACE] return Token.LSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^895^^^^^852^1164^[REPLACE] return Token.RSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^897^^^^^852^1164^[REPLACE] return Token.URSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^899^^^^^852^1164^[REPLACE] return Token.ADD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^901^^^^^852^1164^[REPLACE] return Token.SUB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^903^^^^^852^1164^[REPLACE] return Token.MUL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^905^^^^^852^1164^[REPLACE] return Token.DIV;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^907^^^^^852^1164^[REPLACE] return Token.MOD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^909^^^^^852^1164^[REPLACE] return Token.NOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NOT;^911^^^^^852^1164^[REPLACE] return Token.BITNOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^913^^^^^852^1164^[REPLACE] return Token.POS;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^915^^^^^852^1164^[REPLACE] return Token.NEG;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^917^^^^^852^1164^[REPLACE] return Token.NEW;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.DEL_REF;^919^^^^^852^1164^[REPLACE] return Token.DELPROP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.EOF;^921^^^^^852^1164^[REPLACE] return Token.TYPEOF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.DELPROP;^923^^^^^852^1164^[REPLACE] return Token.GETPROP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF_OP;^925^^^^^852^1164^[REPLACE] return Token.SETPROP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF;^927^^^^^852^1164^[REPLACE] return Token.GETELEM;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SETNAME;^929^^^^^852^1164^[REPLACE] return Token.SETELEM;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^931^^^^^852^1164^[REPLACE] return Token.CALL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^933^^^^^852^1164^[REPLACE] return Token.NAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^935^^^^^852^1164^[REPLACE] return Token.NUMBER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SCRIPT;^937^^^^^852^1164^[REPLACE] return Token.STRING;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^939^^^^^852^1164^[REPLACE] return Token.NULL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^941^^^^^852^1164^[REPLACE] return Token.THIS;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^943^^^^^852^1164^[REPLACE] return Token.FALSE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^945^^^^^852^1164^[REPLACE] return Token.TRUE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^947^^^^^852^1164^[REPLACE] return Token.SHEQ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^949^^^^^852^1164^[REPLACE] return Token.SHNE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^951^^^^^852^1164^[REPLACE] return Token.REGEXP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^953^^^^^852^1164^[REPLACE] return Token.BINDNAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^955^^^^^852^1164^[REPLACE] return Token.THROW;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.DELPROP;^957^^^^^852^1164^[REPLACE] return Token.RETHROW;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^959^^^^^852^1164^[REPLACE] return Token.IN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^961^^^^^852^1164^[REPLACE] return Token.INSTANCEOF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LOCAL_BLOCK;^963^^^^^852^1164^[REPLACE] return Token.LOCAL_LOAD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SETNAME;^965^^^^^852^1164^[REPLACE] return Token.GETVAR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SETNAME;^967^^^^^852^1164^[REPLACE] return Token.SETVAR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^969^^^^^852^1164^[REPLACE] return Token.CATCH_SCOPE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ENUM_INIT_VALUES;^971^^^^^852^1164^[REPLACE] return Token.ENUM_INIT_KEYS;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ENUM_INIT_KEYS;^973^^^^^852^1164^[REPLACE] return Token.ENUM_INIT_VALUES;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ENUM_ID;^975^^^^^852^1164^[REPLACE] return Token.ENUM_NEXT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ENUM_NEXT;^977^^^^^852^1164^[REPLACE] return Token.ENUM_ID;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.THIS;^979^^^^^852^1164^[REPLACE] return Token.THISFN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.EXPR_RESULT;^981^^^^^852^1164^[REPLACE] return Token.RETURN_RESULT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^983^^^^^852^1164^[REPLACE] return Token.ARRAYLIT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^985^^^^^852^1164^[REPLACE] return Token.OBJECTLIT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF_OP;^987^^^^^852^1164^[REPLACE] return Token.GET_REF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF_OP;^989^^^^^852^1164^[REPLACE] return Token.SET_REF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.DELPROP;^991^^^^^852^1164^[REPLACE] return Token.DEL_REF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.CALL;^993^^^^^852^1164^[REPLACE] return Token.REF_CALL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^995^^^^^852^1164^[REPLACE] return Token.REF_SPECIAL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^997^^^^^852^1164^[REPLACE] return Token.DEFAULTNAMESPACE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ESCXMLATTR;^999^^^^^852^1164^[REPLACE] return Token.ESCXMLTEXT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.XMLATTR;^1001^^^^^852^1164^[REPLACE] return Token.ESCXMLATTR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.REF_NS_MEMBER;^1003^^^^^852^1164^[REPLACE] return Token.REF_MEMBER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.REF_NS_NAME;^1005^^^^^852^1164^[REPLACE] return Token.REF_NS_MEMBER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1007^^^^^852^1164^[REPLACE] return Token.REF_NAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.REF_NS_MEMBER;^1009^^^^^852^1164^[REPLACE] return Token.REF_NS_NAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^1011^^^^^852^1164^[REPLACE] return Token.TRY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1013^^^^^852^1164^[REPLACE] return Token.SEMI;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1015^^^^^852^1164^[REPLACE] return Token.LB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^1017^^^^^852^1164^[REPLACE] return Token.RB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1019^^^^^852^1164^[REPLACE] return Token.LC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^1021^^^^^852^1164^[REPLACE] return Token.RC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1023^^^^^852^1164^[REPLACE] return Token.LP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^1025^^^^^852^1164^[REPLACE] return Token.RP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.COLON;^1027^^^^^852^1164^[REPLACE] return Token.COMMA;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_MOD;^1029^^^^^852^1164^[REPLACE] return Token.ASSIGN;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_BITAND;^1031^^^^^852^1164^[REPLACE] return Token.ASSIGN_BITOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_BITAND;^1033^^^^^852^1164^[REPLACE] return Token.ASSIGN_BITXOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_MOD;^1035^^^^^852^1164^[REPLACE] return Token.ASSIGN_BITAND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN;^1037^^^^^852^1164^[REPLACE] return Token.ASSIGN_LSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN;^1039^^^^^852^1164^[REPLACE] return Token.ASSIGN_RSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_MOD;^1041^^^^^852^1164^[REPLACE] return Token.ASSIGN_URSH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_BITAND;^1043^^^^^852^1164^[REPLACE] return Token.ASSIGN_ADD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN;^1045^^^^^852^1164^[REPLACE] return Token.ASSIGN_SUB;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN;^1047^^^^^852^1164^[REPLACE] return Token.ASSIGN_MUL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_BITAND;^1049^^^^^852^1164^[REPLACE] return Token.ASSIGN_DIV;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.ASSIGN_BITAND;^1051^^^^^852^1164^[REPLACE] return Token.ASSIGN_MOD;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.COLON;^1053^^^^^852^1164^[REPLACE] return Token.HOOK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.EOL;^1055^^^^^852^1164^[REPLACE] return Token.COLON;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^1057^^^^^852^1164^[REPLACE] return Token.OR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1059^^^^^852^1164^[REPLACE] return Token.AND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^1061^^^^^852^1164^[REPLACE] return Token.INC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^1063^^^^^852^1164^[REPLACE] return Token.DEC;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1065^^^^^852^1164^[REPLACE] return Token.DOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1067^^^^^852^1164^[REPLACE] return Token.FUNCTION;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IMPORT;^1069^^^^^852^1164^[REPLACE] return Token.EXPORT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.EXPORT;^1071^^^^^852^1164^[REPLACE] return Token.IMPORT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^1073^^^^^852^1164^[REPLACE] return Token.IF;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1075^^^^^852^1164^[REPLACE] return Token.ELSE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.CATCH;^1077^^^^^852^1164^[REPLACE] return Token.SWITCH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1079^^^^^852^1164^[REPLACE] return Token.CASE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1081^^^^^852^1164^[REPLACE] return Token.DEFAULT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1083^^^^^852^1164^[REPLACE] return Token.WHILE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1085^^^^^852^1164^[REPLACE] return Token.DO;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^1087^^^^^852^1164^[REPLACE] return Token.FOR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.BLOCK;^1089^^^^^852^1164^[REPLACE] return Token.BREAK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1091^^^^^852^1164^[REPLACE] return Token.CONTINUE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1093^^^^^852^1164^[REPLACE] return Token.VAR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.GT;^1095^^^^^852^1164^[REPLACE] return Token.WITH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SWITCH;^1097^^^^^852^1164^[REPLACE] return Token.CATCH;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.CALL;^1099^^^^^852^1164^[REPLACE] return Token.FINALLY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.AND;^1101^^^^^852^1164^[REPLACE] return Token.VOID;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1103^^^^^852^1164^[REPLACE] return Token.RESERVED;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1105^^^^^852^1164^[REPLACE] return Token.EMPTY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.BREAK;^1107^^^^^852^1164^[REPLACE] return Token.BLOCK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1109^^^^^852^1164^[REPLACE] return Token.LABEL;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TRUE;^1111^^^^^852^1164^[REPLACE] return Token.TARGET;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.COLON;^1113^^^^^852^1164^[REPLACE] return Token.LOOP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1115^^^^^852^1164^[REPLACE] return Token.EXPR_VOID;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.RETURN_RESULT;^1117^^^^^852^1164^[REPLACE] return Token.EXPR_RESULT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LE;^1119^^^^^852^1164^[REPLACE] return Token.JSR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.STRING;^1121^^^^^852^1164^[REPLACE] return Token.SCRIPT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.TYPEOF;^1123^^^^^852^1164^[REPLACE] return Token.TYPEOFNAME;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1125^^^^^852^1164^[REPLACE] return Token.USE_STACK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF_OP;^1127^^^^^852^1164^[REPLACE] return Token.SETPROP_OP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF_OP;^1129^^^^^852^1164^[REPLACE] return Token.SETELEM_OP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.LOCAL_LOAD;^1131^^^^^852^1164^[REPLACE] return Token.LOCAL_BLOCK;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.SET_REF;^1133^^^^^852^1164^[REPLACE] return Token.SET_REF_OP;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.DOT;^1135^^^^^852^1164^[REPLACE] return Token.DOTDOT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1137^^^^^852^1164^[REPLACE] return Token.COLONCOLON;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.NAME;^1139^^^^^852^1164^[REPLACE] return Token.XML;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1141^^^^^852^1164^[REPLACE] return Token.DOTQUERY;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.XMLEND;^1143^^^^^852^1164^[REPLACE] return Token.XMLATTR;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.XML;^1145^^^^^852^1164^[REPLACE] return Token.XMLEND;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1147^^^^^852^1164^[REPLACE] return Token.TO_OBJECT;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1149^^^^^852^1164^[REPLACE] return Token.TO_DOUBLE;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^1151^^^^^852^1164^[REPLACE] return Token.GET;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.IFEQ;^1153^^^^^852^1164^[REPLACE] return Token.SET;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.COLON;^1155^^^^^852^1164^[REPLACE] return Token.CONST;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return Token.CONST;^1157^^^^^852^1164^[REPLACE] return Token.SETCONST;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return new Node ( Token.FOR,^1159^^^^^852^1164^[REPLACE] return Token.DEBUGGER;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^return ;^1163^^^^^852^1164^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^1163^^^^^852^1164^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[ADD]^^1163^^^^^852^1164^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] transformTokenType [TYPE] int [PARAMETER] int token [CLASS] IRFactory TransformDispatcher   [TYPE]  JSTypeRegistry registry  [TYPE]  ErrorReporter errorReporter  [TYPE]  Set ALLOWED_DIRECTIVES  directives  [TYPE]  boolean false  true  [TYPE]  Config config  [TYPE]  String comment  directive  flags  jsDoc  sourceName  sourceString  [TYPE]  TransformDispatcher transformDispatcher  [TYPE]  int TMP_JSDOC_PROP  charno  ci  clauseAbsolutePosition  i  j  leftParamPos  lineIndex  lineno  lpColumn  lparenCharno  nType  numOpeningChars  position  skipCount  token 
[REPLACE]^Node nodeode = new Node ( transformTokenType ( n.getType (  )  )  ) ;^299^^^^^297^304^[REPLACE] Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  n  node 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^300^^^^^297^304^[REPLACE] for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : n )  {^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  n  node 
[ADD]^^300^301^302^^^297^304^[ADD] for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : n )  { node.addChildToBack ( transform (  ( AstNode ) child )  ) ; }^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  n  node 
[REPLACE]^return n;^303^^^^^297^304^[REPLACE] return node;^[METHOD] processGeneric [TYPE] Node [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  n  node 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^316^^^^^315^323^[REPLACE] Node ret = transform ( n ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^if  ( ret.getType (  )   &&  Token.STRING )  {^317^^^^^315^323^[REPLACE] if  ( ret.getType (  )  == Token.STRING )  {^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^} else if  ( ret .setType (  )    ||  Token.NAME )  {^319^^^^^315^323^[REPLACE] } else if  ( ret.getType (  )  == Token.NAME )  {^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[ADD]^}^319^320^321^^^315^323^[ADD] else if  ( ret.getType (  )  == Token.NAME )  { ret.setType ( Token.STRING ) ; }^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^ret .getType (  )  ;^320^^^^^315^323^[REPLACE] ret.setType ( Token.STRING ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^ret.putBooleanProp ( Node.QUOTED_PROP, false ) ;^318^^^^^315^323^[REPLACE] ret.putBooleanProp ( Node.QUOTED_PROP, true ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^}  if  ( ret.getType (  )   !=  Token.NAME )  {^319^^^^^315^323^[REPLACE] } else if  ( ret.getType (  )  == Token.NAME )  {^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^ret.setCharno ( Token.STRING ) ;^320^^^^^315^323^[REPLACE] ret.setType ( Token.STRING ) ;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^return new Node ( Token.FOR,^322^^^^^315^323^[REPLACE] return ret;^[METHOD] transformAsString [TYPE] Node [PARAMETER] AstNode n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node ret  [TYPE]  AstNode n 
[REPLACE]^if  ( literalNode.getElements (  )  )  {^327^^^^^326^356^[REPLACE] if  ( literalNode.isDestructuring (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^parseDirectives ( node ) ;^328^^^^^326^356^[REPLACE] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^328^^^^^326^356^[ADD] reportDestructuringAssign ( literalNode ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node node = new Node ( Token.BREAK ) ;^331^^^^^326^356^[REPLACE] Node node = new Node ( Token.ARRAYLIT ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^int skipCount = 0;^331^332^^^^326^356^[ADD] Node node = new Node ( Token.ARRAYLIT ) ; int skipCount = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^int skipCount = 4;^332^^^^^326^356^[REPLACE] int skipCount = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^332^^^^^326^356^[ADD] int skipCount = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.setCharno (  )   !=  Token.EMPTY )  {^335^^^^^326^356^[REPLACE] if  ( c.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^333^^^^^326^356^[REPLACE] for  ( AstNode child : literalNode.getElements (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^334^^^^^326^356^[REPLACE] Node c = transform ( child ) ;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( i  <=  0 )  {^341^^^^^326^356^[REPLACE] if  ( skipCount > 0 )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( c.setCharno (  )   ||  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j]  =  skipIndexes[j] ;^348^^^^^326^356^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^348^^^^^326^356^[ADD] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^342^^^^^326^356^[REPLACE] int[] skipIndexes = new int[skipCount];^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^int i = 0;^342^343^^^^326^356^[ADD] int[] skipIndexes = new int[skipCount]; int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^int i = 0 + 2;^343^^^^^326^356^[REPLACE] int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^int j = 0L;^344^^^^^326^356^[REPLACE] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^345^^^^^326^356^[REPLACE] for  ( Node child : node.children (  )  )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^if  ( child.getType (  )   &&  Token.EMPTY )  {^346^^^^^326^356^[REPLACE] if  ( child.getType (  )  == Token.EMPTY )  {^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^node.removeChild ( child ) ;skipIndexes[j] = i;j++;^346^347^348^349^350^326^356^[ADD] if  ( child.getType (  )  == Token.EMPTY )  { node.removeChild ( child ) ; skipIndexes[j] = i; j++; }^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^skipIndexes[j] ;^348^^^^^326^356^[REPLACE] skipIndexes[j] = i;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^342^343^^^^326^356^[ADD] int[] skipIndexes = new int[skipCount]; int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^int i = 3;^343^^^^^326^356^[REPLACE] int i = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[ADD]^^344^^^^^326^356^[ADD] int j = 0;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^return new Node ( Token.FOR,^355^^^^^326^356^[REPLACE] return node;^[METHOD] processArrayLiteral [TYPE] Node [PARAMETER] ArrayLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node c  child  node  [TYPE]  int[] skipIndexes  [TYPE]  ArrayLiteral literalNode  [TYPE]  int i  j  skipCount  [TYPE]  AstNode child 
[REPLACE]^return processInfixExpression ( propertyNode ) ;^360^^^^^359^361^[REPLACE] return processInfixExpression ( assignmentNode ) ;^[METHOD] processAssignment [TYPE] Node [PARAMETER] Assignment assignmentNode [CLASS] TransformDispatcher   [TYPE]  Assignment assignmentNode  [TYPE]  boolean false  true 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^365^^^^^364^371^[REPLACE] Node node = new ScriptOrFnNode ( Token.SCRIPT ) ;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  node  [TYPE]  AstRoot rootNode 
[ADD]^^365^^^^^364^371^[ADD] Node node = new ScriptOrFnNode ( Token.SCRIPT ) ;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  node  [TYPE]  AstRoot rootNode 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^366^^^^^364^371^[REPLACE] for  ( com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode )  {^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  node  [TYPE]  AstRoot rootNode 
[REPLACE]^parseDirectives ( bodyNode ) ;^369^^^^^364^371^[REPLACE] parseDirectives ( node ) ;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  node  [TYPE]  AstRoot rootNode 
[REPLACE]^return new Node ( Token.FOR,^370^^^^^364^371^[REPLACE] return node;^[METHOD] processAstRoot [TYPE] Node [PARAMETER] AstRoot rootNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node child  node  [TYPE]  AstRoot rootNode 
[REPLACE]^Set<String> directives = false;^384^^^^^382^397^[REPLACE] Set<String> directives = null;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^if  ( directives != null )  {^387^^^^^382^397^[REPLACE] if  ( directives == null )  {^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^directives.contains ( directive ) ;^390^^^^^382^397^[REPLACE] directives.add ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^directives =  Sets.newHashSet ( null ) ;^388^^^^^382^397^[REPLACE] directives = Sets.newHashSet ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[ADD]^^388^^^^^382^397^[ADD] directives = Sets.newHashSet ( directive ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^String directive = node.removeFirstChild (  )  .removeFirstChild (  )  .getString (  ) ;^386^^^^^382^397^[REPLACE] String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^if  ( directives != this  )  {^387^^^^^382^397^[REPLACE] if  ( directives == null )  {^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^String directive = node.getFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^386^^^^^382^397^[REPLACE] String directive = node.removeFirstChild (  ) .getFirstChild (  ) .getString (  ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^if  ( directives == null )  {^394^^^^^382^397^[REPLACE] if  ( directives != null )  {^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^node.newString ( directives ) ;^395^^^^^382^397^[REPLACE] node.setDirectives ( directives ) ;^[METHOD] parseDirectives [TYPE] void [PARAMETER] Node node [CLASS] TransformDispatcher   [TYPE]  Set directives  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  String directive 
[REPLACE]^if  ( n != null )  return false;^400^^^^^399^406^[REPLACE] if  ( n == null )  return false;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  int nType 
[REPLACE]^if  ( n == null )  return true;^400^^^^^399^406^[REPLACE] if  ( n == null )  return false;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  int nType 
[REPLACE]^int nType = n .setType (  )  ;^402^^^^^399^406^[REPLACE] int nType = n.getType (  ) ;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  int nType 
[REPLACE]^return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.add ( n.getFirstChild (  ) .getString (  )  ) ;^403^404^405^^^399^406^[REPLACE] return  ( nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID )  && n.getFirstChild (  ) .getType (  )  == Token.STRING && ALLOWED_DIRECTIVES.contains ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] isDirective [TYPE] boolean [PARAMETER] Node n [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  int nType 
[REPLACE]^return processGeneric ( scopeNode ) ;^410^^^^^409^411^[REPLACE] return processGeneric ( blockNode ) ;^[METHOD] processBlock [TYPE] Node [PARAMETER] Block blockNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Block blockNode 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^415^^^^^414^420^[REPLACE] Node node = new Node ( Token.BREAK ) ;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^if  ( statementNode.getBreakLabel (  )  == null )  {^416^^^^^414^420^[REPLACE] if  ( statementNode.getBreakLabel (  )  != null )  {^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^417^^^^^414^420^[REPLACE] node.addChildToBack ( transform ( statementNode.getBreakLabel (  )  )  ) ;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR,^419^^^^^414^420^[REPLACE] return node;^[METHOD] processBreakStatement [TYPE] Node [PARAMETER] BreakStatement statementNode [CLASS] TransformDispatcher   [TYPE]  BreakStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^AstNode catchVar = clauseNode.getLineno (  ) ;^424^^^^^423^440^[REPLACE] AstNode catchVar = clauseNode.getVarName (  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^425^^^^^423^440^[REPLACE] Node node = new Node ( Token.CATCH, transform ( catchVar )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^if  ( clauseNode.getCatchCondition (  )  == true )  {^426^^^^^423^440^[REPLACE] if  ( clauseNode.getCatchCondition (  )  != null )  {^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^429^^^^^423^440^[REPLACE] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[ADD]^^429^^^^^423^440^[ADD] Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^int clauseAbsolutePosition = position2charno ( catchVar.getLineno (  )  ) ;^433^434^^^^423^440^[REPLACE] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[ADD]^^433^434^^^^423^440^[ADD] int clauseAbsolutePosition = position2charno ( catchVar.getAbsolutePosition (  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[ADD]^^427^428^429^^^423^440^[ADD] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ; } else { Node catchCondition = new Node ( Token.EMPTY ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getVarName (  )  )  ) ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node.addChildToBack ( transform ( clauseNode .getVarName (  )   )  ) ;^427^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getCatchCondition (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node .children (  )   ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getLineno (  )  )  ) ;^438^^^^^423^440^[REPLACE] node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^return catchCondition;^439^^^^^423^440^[REPLACE] return node;^[METHOD] processCatchClause [TYPE] Node [PARAMETER] CatchClause clauseNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node catchCondition  node  [TYPE]  CatchClause clauseNode  [TYPE]  AstNode catchVar  [TYPE]  int clauseAbsolutePosition 
[REPLACE]^return new Node ( Token.HOOK, transform ( exprNode.getTrueExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^444^445^446^447^^443^449^[REPLACE] return new Node ( Token.HOOK, transform ( exprNode.getTestExpression (  )  ) , transform ( exprNode.getTrueExpression (  )  ) ,^[METHOD] processConditionalExpression [TYPE] Node [PARAMETER] ConditionalExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ConditionalExpression exprNode 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^453^^^^^452^458^[REPLACE] Node node = new Node ( Token.CONTINUE ) ;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ContinueStatement statementNode 
[ADD]^^453^^^^^452^458^[ADD] Node node = new Node ( Token.CONTINUE ) ;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ContinueStatement statementNode 
[REPLACE]^if  ( statementNode.getLabel (  )  == null )  {^454^^^^^452^458^[REPLACE] if  ( statementNode.getLabel (  )  != null )  {^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ContinueStatement statementNode 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^455^^^^^452^458^[REPLACE] node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ContinueStatement statementNode 
[ADD]^^455^456^^^^452^458^[ADD] node.addChildToBack ( transform ( statementNode.getLabel (  )  )  ) ; }^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ContinueStatement statementNode 
[REPLACE]^return new Node ( Token.FOR,^457^^^^^452^458^[REPLACE] return node;^[METHOD] processContinueStatement [TYPE] Node [PARAMETER] ContinueStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ContinueStatement statementNode 
[REPLACE]^return new Node ( Token.DO, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^462^463^464^465^^461^466^[REPLACE] return new Node ( Token.DO, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getCondition (  )  )  ) ;^[METHOD] processDoLoop [TYPE] Node [PARAMETER] DoLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  DoLoop loopNode 
[REPLACE]^return new Node ( Token.GETELEM, transform ( getNode .getElement (  )   ) , transform ( getNode.getElement (  )  )  ) ;^470^471^472^473^^469^474^[REPLACE] return new Node ( Token.GETELEM, transform ( getNode.getTarget (  )  ) , transform ( getNode.getElement (  )  )  ) ;^[METHOD] processElementGet [TYPE] Node [PARAMETER] ElementGet getNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ElementGet getNode 
[REPLACE]^Node node = new Node ( Token.IF ) ;^478^^^^^477^480^[REPLACE] Node node = new Node ( Token.EMPTY ) ;^[METHOD] processEmptyExpression [TYPE] Node [PARAMETER] EmptyExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  EmptyExpression exprNode 
[REPLACE]^return new Node ( Token.FOR,^479^^^^^477^480^[REPLACE] return node;^[METHOD] processEmptyExpression [TYPE] Node [PARAMETER] EmptyExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  EmptyExpression exprNode 
[REPLACE]^Node node = new Node ( transformTokenType ( statementNode.getExpression (  )  )  ) ;^484^^^^^483^487^[REPLACE] Node node = new Node ( transformTokenType ( statementNode.getType (  )  )  ) ;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^485^^^^^483^487^[REPLACE] node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node 
[ADD]^^485^486^487^^^483^487^[ADD] node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ; return node; }^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode .getType (  )   )  ) ;^485^^^^^483^487^[REPLACE] node.addChildToBack ( transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR,^486^^^^^483^487^[REPLACE] return node;^[METHOD] processExpressionStatement [TYPE] Node [PARAMETER] ExpressionStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ExpressionStatement statementNode  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIterator (  )  ) ,^491^492^493^494^^490^496^[REPLACE] return new Node ( Token.FOR, transform ( loopNode.getIterator (  )  ) , transform ( loopNode.getIteratedObject (  )  ) ,^[METHOD] processForInLoop [TYPE] Node [PARAMETER] ForInLoop loopNode [CLASS] TransformDispatcher   [TYPE]  ForInLoop loopNode  [TYPE]  boolean false  true 
[ADD]^^500^501^502^^^499^507^[ADD] Node node = new Node ( Token.FOR, transform ( loopNode.getInitializer (  )  ) ,^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( clauseNode.getBody (  )  )  ) ;^505^^^^^499^507^[REPLACE] node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Node node 
[ADD]^^505^506^507^^^499^507^[ADD] node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ; return node; }^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( loopNode.getCondition (  )  )  ) ;^505^^^^^499^507^[REPLACE] node.addChildToBack ( transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR,^506^^^^^499^507^[REPLACE] return node;^[METHOD] processForLoop [TYPE] Node [PARAMETER] ForLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ForLoop loopNode  [TYPE]  Node node 
[REPLACE]^Node node = new Node ( transformTokenType ( callNode.getLp (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^511^512^^^^510^521^[REPLACE] Node node = new Node ( transformTokenType ( callNode.getType (  )  ) , transform ( callNode.getTarget (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^513^^^^^510^521^[REPLACE] for  ( AstNode child : callNode.getArguments (  )  )  {^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^int leftParamPos = callNode.getAbsolutePosition (  )   <  callNode.getLp (  ) ;^517^^^^^510^521^[REPLACE] int leftParamPos = callNode.getAbsolutePosition (  )  + callNode.getLp (  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^node.setLineno ( callNode.getType (  )  ) ;^518^^^^^510^521^[REPLACE] node.setLineno ( callNode.getLineno (  )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REMOVE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^518^^^^^510^521^[REMOVE] ^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^node.putProp ( position2charno ( leftParamPos )  ) ;^519^^^^^510^521^[REPLACE] node.setCharno ( position2charno ( leftParamPos )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REMOVE]^node.setLineno ( callNode.getLineno (  )  ) ;^519^^^^^510^521^[REMOVE] ^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^node.setLineno ( callNode.getLineno (  )  ) ;^519^^^^^510^521^[REPLACE] node.setCharno ( position2charno ( leftParamPos )  ) ;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^return new Node ( Token.FOR,^520^^^^^510^521^[REPLACE] return node;^[METHOD] processFunctionCall [TYPE] Node [PARAMETER] FunctionCall callNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  FunctionCall callNode  [TYPE]  AstNode child  [TYPE]  int leftParamPos 
[REPLACE]^Name name = functionNode .getSourceName (  )  ;^525^^^^^524^575^[REPLACE] Name name = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Boolean isUnnamedFunction = true;^526^^^^^524^575^[REPLACE] Boolean isUnnamedFunction = false;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^if  (fnName != null )  {^527^^^^^524^575^[REPLACE] if  ( name == null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^name =  new FunctionNode ( name.getIdentifier (  )  )  ;^528^^^^^524^575^[REPLACE] name = new Name (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^isUnnamedFunction = false;^530^^^^^524^575^[REPLACE] isUnnamedFunction = true;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^530^^^^^524^575^[ADD] isUnnamedFunction = true;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node node = new com.google.javascript.rhino.FunctionNode ( fnName.getIdentifier (  )  ) ;^532^533^^^^524^575^[REPLACE] Node node = new com.google.javascript.rhino.FunctionNode ( name.getIdentifier (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node .putProp ( this )  ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.putProp ( Node.SOURCENAME_PROP, functionNode .getFunctionName (  )   ) ;^534^^^^^524^575^[REPLACE] node.putProp ( Node.SOURCENAME_PROP, functionNode.getSourceName (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node newName = transform ( fnName ) ;^535^^^^^524^575^[REPLACE] Node newName = transform ( name ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^535^536^^^539^524^575^[ADD] Node newName = transform ( name ) ; if  ( isUnnamedFunction )  { newName.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^if  ( initializerNode.getInitializer (  )  != null )  {^536^^^^^524^575^[REPLACE] if  ( isUnnamedFunction )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^536^537^^539^^524^575^[ADD] if  ( isUnnamedFunction )  {  newName.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^int lpColumn = functionNode.getAbsolutePosition (  )   ^  functionNode .getType (  )  ;^543^544^^^^524^575^[REPLACE] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^543^544^^^^524^575^[ADD] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^int lpColumn = functionNode.getAbsolutePosition (  )   >=  functionNode.getLp (  ) ;^543^544^^^^524^575^[REPLACE] int lpColumn = functionNode.getAbsolutePosition (  )  + functionNode.getLp (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.addChildToBack ( bodyNode ) ;^548^^^^^524^575^[REPLACE] node.addChildToBack ( newName ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^549^^^^^524^575^[REPLACE] Node lp = new Node ( Token.LP ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Name fnName = functionNode.getSourceName (  ) ;^556^^^^^524^575^[REPLACE] Name fnName = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^556^^^^^524^575^[ADD] Name fnName = functionNode.getFunctionName (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^if  ( fnName == true )  {^557^^^^^524^575^[REPLACE] if  ( fnName != null )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setCharno ( functionNode.getLineno (  )  ) ;^560^^^^^557^561^[REPLACE] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setLineno ( functionNode .getType (  )   ) ;^560^^^^^557^561^[REPLACE] lp.setLineno ( functionNode.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setLineno ( name.getLineno (  )  ) ;^558^^^^^524^575^[REPLACE] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^558^^^^^524^575^[ADD] lp.setLineno ( fnName.getLineno (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^int lparenCharno = functionNode.getLp (  )   ||  functionNode.getAbsolutePosition (  ) ;^562^563^^^^524^575^[REPLACE] int lparenCharno = functionNode.getLp (  )  + functionNode.getAbsolutePosition (  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^lp.setCharno ( position2charno ( lpColumn )  ) ;^565^^^^^524^575^[REPLACE] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^565^^^^^524^575^[ADD] lp.setCharno ( position2charno ( lparenCharno )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^566^^^^^524^575^[REPLACE] for  ( AstNode param : functionNode.getParams (  )  )  {^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^566^567^568^^^524^575^[ADD] for  ( AstNode param : functionNode.getParams (  )  )  { lp.addChildToBack ( transform ( param )  ) ; }^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node.removeChild ( lp ) ;^569^^^^^524^575^[REPLACE] node.addChildToBack ( lp ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^569^^^^^524^575^[ADD] node.addChildToBack ( lp ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node bodyNode = transform ( functionNode.getLp (  )  ) ;^571^^^^^524^575^[REPLACE] Node bodyNode = transform ( functionNode.getBody (  )  ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^parseDirectives ( node ) ;^572^^^^^524^575^[REPLACE] parseDirectives ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[ADD]^^572^^^^^524^575^[ADD] parseDirectives ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^node .children (  )  ;^573^^^^^524^575^[REPLACE] node.addChildToBack ( bodyNode ) ;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^return newName;^574^^^^^524^575^[REPLACE] return node;^[METHOD] processFunctionNode [TYPE] Node [PARAMETER] FunctionNode functionNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node bodyNode  lp  newName  node  [TYPE]  FunctionNode functionNode  [TYPE]  Boolean isUnnamedFunction  [TYPE]  int lpColumn  lparenCharno  [TYPE]  AstNode param  [TYPE]  Name fnName  name 
[REPLACE]^Node node = new Node ( Token.FOR,^579^^^^^578^586^[REPLACE] Node node = new Node ( Token.IF ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^580^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REMOVE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^580^^^^^578^586^[REMOVE] ^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode .getBody (  )   )  ) ;^580^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getCondition (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^581^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REMOVE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^581^^^^^578^586^[REMOVE] ^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^581^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^if  ( statementNode.getElsePart (  )  == null )  {^582^^^^^578^586^[REPLACE] if  ( statementNode.getElsePart (  )  != null )  {^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^583^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^583^^^^^578^586^[REPLACE] node.addChildToBack ( transform ( statementNode.getElsePart (  )  )  ) ;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR,^585^^^^^578^586^[REPLACE] return node;^[METHOD] processIfStatement [TYPE] Node [PARAMETER] IfStatement statementNode [CLASS] TransformDispatcher   [TYPE]  IfStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getLeft (  )  )  ) ;^590^591^592^593^^589^603^[REPLACE] Node n =  new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getLeft (  )  ) , transform ( exprNode.getRight (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^n.setLineno ( exprNode .getType (  )   ) ;^596^^^^^589^603^[REPLACE] n.setLineno ( exprNode.getLineno (  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[ADD]^^596^^^^^589^603^[ADD] n.setLineno ( exprNode.getLineno (  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^n.setLineno ( exprNode.getLeft (  )  ) ;^596^^^^^589^603^[REPLACE] n.setLineno ( exprNode.getLineno (  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   &  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^[REPLACE] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )   ==  exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^[REPLACE] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[ADD]^^600^601^^^^589^603^[ADD] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^n.setCharno ( position2charno ( exprNode .getLineno (  )   + exprNode.getOperatorPosition (  )  )  ) ;^600^601^^^^589^603^[REPLACE] n.setCharno ( position2charno ( exprNode.getAbsolutePosition (  )  + exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^exprNode .getAbsolutePosition (  )   )  ) ;^601^^^^^589^603^[REPLACE] exprNode.getOperatorPosition (  )  )  ) ;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^return newNode;^602^^^^^589^603^[REPLACE] return n;^[METHOD] processInfixExpression [TYPE] Node [PARAMETER] InfixExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  InfixExpression exprNode 
[REPLACE]^return new Node ( Token.FOR,^607^^^^^606^608^[REPLACE] return new Node ( transformTokenType ( literalNode.getType (  )  )  ) ;^[METHOD] processKeywordLiteral [TYPE] Node [PARAMETER] KeywordLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  KeywordLiteral literalNode 
[REPLACE]^return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^612^^^^^611^613^[REPLACE] return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^[METHOD] processLabel [TYPE] Node [PARAMETER] Label labelNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Label labelNode 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^617^^^^^616^630^[REPLACE] Node node = new Node ( Token.LABEL ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^Node prev = this;^618^^^^^616^630^[REPLACE] Node prev = null;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^619^^^^^616^630^[REPLACE] Node cur = node;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^if  ( prev == this )  {^621^^^^^616^630^[REPLACE] if  ( prev != null )  {^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^prev .children (  )  ;^622^^^^^616^630^[REPLACE] prev.addChildToBack ( cur ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[ADD]^^622^^^^^616^630^[ADD] prev.addChildToBack ( cur ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^prev =  null;^625^^^^^616^630^[REPLACE] prev = cur;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^node = new Node ( Token.DEFAULT ) ; ;^626^^^^^616^630^[REPLACE] cur = new Node ( Token.LABEL ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^620^^^^^616^630^[REPLACE] for  ( Label label : statementNode.getLabels (  )  )  {^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^prev.addChildToBack ( transform ( statementNode.getLabels (  )  )  ) ;^628^^^^^616^630^[REPLACE] prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^628^^^^^616^630^[REPLACE] prev.addChildToBack ( transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^return new Node ( Token.FOR,^629^^^^^616^630^[REPLACE] return node;^[METHOD] processLabeledStatement [TYPE] Node [PARAMETER] LabeledStatement statementNode [CLASS] TransformDispatcher   [TYPE]  LabeledStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node cur  node  prev  [TYPE]  Label label 
[REPLACE]^return Node.newString ( Token.NAME, labelNode.getName (  )  ) ;^634^^^^^633^635^[REPLACE] return Node.newString ( Token.NAME, nameNode.getIdentifier (  )  ) ;^[METHOD] processName [TYPE] Node [PARAMETER] Name nameNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Name nameNode 
[REPLACE]^return new Node ( Token.FOR,^639^^^^^638^640^[REPLACE] return processFunctionCall ( exprNode ) ;^[METHOD] processNewExpression [TYPE] Node [PARAMETER] NewExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  NewExpression exprNode 
[REPLACE]^Node newNode = Node .newString (  )  ;^644^^^^^643^646^[REPLACE] Node newNode = Node.newNumber ( literalNode.getNumber (  )  ) ;^[METHOD] processNumberLiteral [TYPE] Node [PARAMETER] NumberLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node newNode  [TYPE]  NumberLiteral literalNode 
[REPLACE]^return new Node ( Token.FOR,^645^^^^^643^646^[REPLACE] return newNode;^[METHOD] processNumberLiteral [TYPE] Node [PARAMETER] NumberLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node newNode  [TYPE]  NumberLiteral literalNode 
[REPLACE]^if  ( literalNode .getElements (  )   )  {^650^^^^^649^660^[REPLACE] if  ( literalNode.isDestructuring (  )  )  {^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[ADD]^^650^651^652^^^649^660^[ADD] if  ( literalNode.isDestructuring (  )  )  { reportDestructuringAssign ( literalNode ) ; }^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^parseDirectives ( node ) ;^651^^^^^649^660^[REPLACE] reportDestructuringAssign ( literalNode ) ;^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^Node node = new Node ( Token.ARRAYLIT ) ;^654^^^^^649^660^[REPLACE] Node node = new Node ( Token.OBJECTLIT ) ;^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^655^^^^^649^660^[REPLACE] for  ( ObjectProperty el : literalNode.getElements (  )  )  {^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR,^659^^^^^649^660^[REPLACE] return node;^[METHOD] processObjectLiteral [TYPE] Node [PARAMETER] ObjectLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty el  [TYPE]  ObjectLiteral literalNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return processInfixExpression ( assignmentNode ) ;^664^^^^^663^665^[REPLACE] return processInfixExpression ( propertyNode ) ;^[METHOD] processObjectProperty [TYPE] Node [PARAMETER] ObjectProperty propertyNode [CLASS] TransformDispatcher   [TYPE]  ObjectProperty propertyNode  [TYPE]  boolean false  true 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^669^^^^^668^672^[REPLACE] Node node = transform ( exprNode.getExpression (  )  ) ;^[METHOD] processParenthesizedExpression [TYPE] Node [PARAMETER] ParenthesizedExpression exprNode [CLASS] TransformDispatcher   [TYPE]  ParenthesizedExpression exprNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^node .putProp ( null )  ;^670^^^^^668^672^[REPLACE] node.putProp ( Node.PARENTHESIZED_PROP, Boolean.TRUE ) ;^[METHOD] processParenthesizedExpression [TYPE] Node [PARAMETER] ParenthesizedExpression exprNode [CLASS] TransformDispatcher   [TYPE]  ParenthesizedExpression exprNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.FOR,^671^^^^^668^672^[REPLACE] return node;^[METHOD] processParenthesizedExpression [TYPE] Node [PARAMETER] ParenthesizedExpression exprNode [CLASS] TransformDispatcher   [TYPE]  ParenthesizedExpression exprNode  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return new Node ( Token.GETPROP, transform ( getNode.getProperty (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^676^677^678^679^^675^680^[REPLACE] return new Node ( Token.GETPROP, transform ( getNode.getTarget (  )  ) , transformAsString ( getNode.getProperty (  )  )  ) ;^[METHOD] processPropertyGet [TYPE] Node [PARAMETER] PropertyGet getNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  PropertyGet getNode 
[REPLACE]^Node literalStringNode = Node.newString ( literalNode.getFlags (  )  ) ;^684^^^^^683^696^[REPLACE] Node literalStringNode = Node.newString ( literalNode.getValue (  )  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^literalStringNode .getLineno (  )  ;^686^^^^^683^696^[REPLACE] literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^literalStringNode.setLineno ( literalNode.getValue (  )  ) ;^686^^^^^683^696^[REPLACE] literalStringNode.setLineno ( literalNode.getLineno (  )  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^Node node = new Node ( Token.REGEXP, node ) ;^687^^^^^683^696^[REPLACE] Node node = new Node ( Token.REGEXP, literalStringNode ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^String flags = literalNode.getValue (  ) ;^688^^^^^683^696^[REPLACE] String flags = literalNode.getFlags (  ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^if  (  !flags.isEmpty (  )  )  {^689^^^^^683^696^[REPLACE] if  ( flags != null && !flags.isEmpty (  )  )  {^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[ADD]^Node flagsNode = Node.newString ( flags ) ;flagsNode.setLineno ( literalNode.getLineno (  )  ) ;node.addChildToBack ( flagsNode ) ;^689^690^^692^693^683^696^[ADD] if  ( flags != null && !flags.isEmpty (  )  )  { Node flagsNode = Node.newString ( flags ) ; flagsNode.setLineno ( literalNode.getLineno (  )  ) ; node.addChildToBack ( flagsNode ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^Node flagsNode = Node.putProp ( flags ) ;^690^^^^^683^696^[REPLACE] Node flagsNode = Node.newString ( flags ) ;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^return literalStringNode;^695^^^^^683^696^[REPLACE] return node;^[METHOD] processRegExpLiteral [TYPE] Node [PARAMETER] RegExpLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node flagsNode  literalStringNode  node  [TYPE]  RegExpLiteral literalNode  [TYPE]  String flags 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^700^^^^^699^705^[REPLACE] Node node = new Node ( Token.RETURN ) ;^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode 
[REPLACE]^if  ( statementNode.getReturnValue (  )  == null )  {^701^^^^^699^705^[REPLACE] if  ( statementNode.getReturnValue (  )  != null )  {^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode 
[REPLACE]^node.addChildToBack ( transform ( statementNode.getThenPart (  )  )  ) ;^702^^^^^699^705^[REPLACE] node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ;^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode 
[ADD]^^702^703^^^^699^705^[ADD] node.addChildToBack ( transform ( statementNode.getReturnValue (  )  )  ) ; }^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode 
[REPLACE]^return new Node ( Token.FOR,^704^^^^^699^705^[REPLACE] return node;^[METHOD] processReturnStatement [TYPE] Node [PARAMETER] ReturnStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  ReturnStatement statementNode 
[REPLACE]^return processGeneric ( blockNode ) ;^709^^^^^708^710^[REPLACE] return processGeneric ( scopeNode ) ;^[METHOD] processScope [TYPE] Node [PARAMETER] Scope scopeNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Scope scopeNode 
[REPLACE]^Node n = Node.setCharno ( literalNode.getValue (  )  ) ;^714^^^^^713^716^[REPLACE] Node n = Node.newString ( literalNode.getValue (  )  ) ;^[METHOD] processStringLiteral [TYPE] Node [PARAMETER] StringLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  StringLiteral literalNode  [TYPE]  Node n 
[ADD]^^714^715^^^^713^716^[ADD] Node n = Node.newString ( literalNode.getValue (  )  ) ; return n;^[METHOD] processStringLiteral [TYPE] Node [PARAMETER] StringLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  StringLiteral literalNode  [TYPE]  Node n 
[REPLACE]^return newNode;^715^^^^^713^716^[REPLACE] return n;^[METHOD] processStringLiteral [TYPE] Node [PARAMETER] StringLiteral literalNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  StringLiteral literalNode  [TYPE]  Node n 
[REPLACE]^Node cur = node;^720^^^^^719^738^[REPLACE] Node node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^if  ( isUnnamedFunction )  {^721^^^^^719^738^[REPLACE] if  ( caseNode.isDefault (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^node = new Node ( Token.DEFAULT ) ;AstNode expr = caseNode.getExpression (  ) ;node = new Node ( Token.CASE, transform ( expr )  ) ;^721^722^723^724^725^719^738^[ADD] if  ( caseNode.isDefault (  )  )  { node = new Node ( Token.DEFAULT ) ; } else { AstNode expr = caseNode.getExpression (  ) ; node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node =  new Node ( Token.CASE, transform ( null )  ) ;^725^^^^^719^738^[REPLACE] node = new Node ( Token.CASE, transform ( expr )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^AstNode expr = caseNode.getLineno (  ) ;^724^^^^^719^738^[REPLACE] AstNode expr = caseNode.getExpression (  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^cur = new Node ( Token.LABEL ) ; ;^722^^^^^719^738^[REPLACE] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^^722^^^^^719^738^[ADD] node = new Node ( Token.DEFAULT ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^^725^726^^^^719^738^[ADD] node = new Node ( Token.CASE, transform ( expr )  ) ; }^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^727^^^^^719^738^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^727^728^^^^719^738^[ADD] Node block = new Node ( Token.BLOCK ) ; block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^block .putProp ( this )  ;^728^^^^^719^738^[REPLACE] block.putBooleanProp ( Node.SYNTHETIC_BLOCK_PROP, true ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^block.setLineno ( caseNode.getExpression (  )  ) ;^729^^^^^719^738^[REPLACE] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[ADD]^^729^^^^^719^738^[ADD] block.setLineno ( caseNode.getLineno (  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^block.setCharno ( position2charno ( caseNode.getExpression (  )  )  ) ;^730^^^^^719^738^[REPLACE] block.setCharno ( position2charno ( caseNode.getAbsolutePosition (  )  )  ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^if  ( caseNode.getStatements (  )  == null )  {^731^^^^^719^738^[REPLACE] if  ( caseNode.getStatements (  )  != null )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^732^^^^^719^738^[REPLACE] for  ( AstNode child : caseNode.getStatements (  )  )  {^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^node .children (  )  ;^736^^^^^719^738^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^return block;^737^^^^^719^738^[REPLACE] return node;^[METHOD] processSwitchCase [TYPE] Node [PARAMETER] SwitchCase caseNode [CLASS] TransformDispatcher   [TYPE]  SwitchCase caseNode  [TYPE]  boolean false  true  [TYPE]  Node block  node  [TYPE]  AstNode child  expr 
[REPLACE]^Node node = new Node ( Token.SWITCH, transform ( statementNode.getCases (  )  )  ) ;^742^743^^^^741^748^[REPLACE] Node node = new Node ( Token.SWITCH, transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processSwitchStatement [TYPE] Node [PARAMETER] SwitchStatement statementNode [CLASS] TransformDispatcher   [TYPE]  SwitchStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  AstNode child 
[REPLACE]^Node node = new Node ( transformTokenType ( n.getType (  )  )  ) ;^744^^^^^741^748^[REPLACE] for  ( AstNode child : statementNode.getCases (  )  )  {^[METHOD] processSwitchStatement [TYPE] Node [PARAMETER] SwitchStatement statementNode [CLASS] TransformDispatcher   [TYPE]  SwitchStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  AstNode child 
[REPLACE]^return new Node ( Token.FOR,^747^^^^^741^748^[REPLACE] return node;^[METHOD] processSwitchStatement [TYPE] Node [PARAMETER] SwitchStatement statementNode [CLASS] TransformDispatcher   [TYPE]  SwitchStatement statementNode  [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  AstNode child 
[REPLACE]^return new Node ( Token.FOR,^752^753^^^^751^754^[REPLACE] return new Node ( Token.THROW, transform ( statementNode.getExpression (  )  )  ) ;^[METHOD] processThrowStatement [TYPE] Node [PARAMETER] ThrowStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  ThrowStatement statementNode 
[REPLACE]^Node node = new Node ( Token.TRY, transform ( statementNode.getFinallyBlock (  )  )  ) ;^758^^^^^757^786^[REPLACE] Node node = new Node ( Token.TRY, transform ( statementNode.getTryBlock (  )  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^Node lp = new Node ( Token.LP ) ;^759^^^^^757^786^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^boolean lineSet = true;^760^^^^^757^786^[REPLACE] boolean lineSet = false;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^760^^^^^757^786^[ADD] boolean lineSet = false;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( lineSet  ||  false )  {^765^^^^^757^786^[REPLACE] if  ( lineSet == false )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^lineSet = false;^767^^^^^757^786^[REPLACE] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^767^^^^^757^786^[ADD] lineSet = true;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^762^^^^^757^786^[REPLACE] for  ( CatchClause cc : statementNode.getCatchClauses (  )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^node.removeChild ( block ) ;^771^^^^^757^786^[REPLACE] node.addChildToBack ( block ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[ADD]^^771^^^^^757^786^[ADD] node.addChildToBack ( block ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^AstNode finallyBlock = statementNode .getTryBlock (  )  ;^773^^^^^757^786^[REPLACE] AstNode finallyBlock = statementNode.getFinallyBlock (  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  ( finallyBlock == null )  {^774^^^^^757^786^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^node.setLineno ( callNode.getLineno (  )  ) ;^775^^^^^757^786^[REPLACE] node.addChildToBack ( transform ( finallyBlock )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REMOVE]^node.setLineno ( callNode.getLineno (  )  ) ;^775^^^^^757^786^[REMOVE] ^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^if  (   ( finallyBlock != null )  )  {^781^^^^^757^786^[REPLACE] if  (  ( lineSet == false )  &&  ( finallyBlock != null )  )  {^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^block.setLineno ( finallyBlock .getType (  )   ) ;^782^^^^^757^786^[REPLACE] block.setLineno ( finallyBlock.getLineno (  )  ) ;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^return block;^785^^^^^757^786^[REPLACE] return node;^[METHOD] processTryStatement [TYPE] Node [PARAMETER] TryStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  lineSet  true  [TYPE]  TryStatement statementNode  [TYPE]  Node block  node  [TYPE]  CatchClause cc  [TYPE]  AstNode finallyBlock 
[REPLACE]^Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getType (  )  )  ) ;^790^791^^^^789^796^[REPLACE] Node node = new Node ( transformTokenType ( exprNode.getType (  )  ) , transform ( exprNode.getOperand (  )  )  ) ;^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode 
[REPLACE]^if  ( isUnnamedFunction )  {^792^^^^^789^796^[REPLACE] if  ( exprNode.isPostfix (  )  )  {^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode 
[REPLACE]^node.putBooleanProp ( Node.INCRDECR_PROP, false ) ;^793^^^^^789^796^[REPLACE] node.putBooleanProp ( Node.INCRDECR_PROP, true ) ;^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode 
[REPLACE]^return new Node ( Token.FOR,^795^^^^^789^796^[REPLACE] return node;^[METHOD] processUnaryExpression [TYPE] Node [PARAMETER] UnaryExpression exprNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  UnaryExpression exprNode 
[REPLACE]^Node node = new Node ( Token.EMPTY ) ;^800^^^^^799^805^[REPLACE] Node node = new Node ( Token.VAR ) ;^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  VariableInitializer child 
[REPLACE]^Node n = Node.newString ( literalNode.getValue (  )  ) ;^801^^^^^799^805^[REPLACE] for  ( VariableInitializer child : declarationNode.getVariables (  )  )  {^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  VariableInitializer child 
[REPLACE]^return new Node ( Token.FOR,^804^^^^^799^805^[REPLACE] return node;^[METHOD] processVariableDeclaration [TYPE] Node [PARAMETER] VariableDeclaration declarationNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableDeclaration declarationNode  [TYPE]  VariableInitializer child 
[REPLACE]^Node node = transform ( initializerNode .getElement (  )   ) ;^809^^^^^808^815^[REPLACE] Node node = transform ( initializerNode.getTarget (  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[ADD]^^809^810^811^812^813^808^815^[ADD] Node node = transform ( initializerNode.getTarget (  )  ) ; if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^if  ( initializerNode.getInitializer (  )  == null )  {^810^^^^^808^815^[REPLACE] if  ( initializerNode.getInitializer (  )  != null )  {^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[ADD]^^810^811^812^813^^808^815^[ADD] if  ( initializerNode.getInitializer (  )  != null )  { node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ; node.setLineno ( node.getLineno (  )  ) ; }^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^transform ( exprNode.getFalseExpression (  )  )  ) ;^811^^^^^808^815^[REPLACE] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^node.addChildToBack ( transform ( initializerNode .getCondition (  )   )  ) ;^811^^^^^808^815^[REPLACE] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^node.addChildToBack ( transform ( initializerNode.getTarget (  )  )  ) ;^811^^^^^808^815^[REPLACE] node.addChildToBack ( transform ( initializerNode.getInitializer (  )  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^node.setLineno ( node.setLineno (  )  ) ;^812^^^^^808^815^[REPLACE] node.setLineno ( node.getLineno (  )  ) ;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^return new Node ( Token.FOR,^814^^^^^808^815^[REPLACE] return node;^[METHOD] processVariableInitializer [TYPE] Node [PARAMETER] VariableInitializer initializerNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  Node node  [TYPE]  VariableInitializer initializerNode 
[REPLACE]^return new Node ( Token.WHILE, transform ( loopNode.getBody (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^819^820^821^822^^818^823^[REPLACE] return new Node ( Token.WHILE, transform ( loopNode.getCondition (  )  ) , transform ( loopNode.getBody (  )  )  ) ;^[METHOD] processWhileLoop [TYPE] Node [PARAMETER] WhileLoop loopNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  WhileLoop loopNode 
[REPLACE]^return new Node ( Token.WITH, transform ( statementNode.getStatement (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^827^828^829^830^^826^831^[REPLACE] return new Node ( Token.WITH, transform ( statementNode.getExpression (  )  ) , transform ( statementNode.getStatement (  )  )  ) ;^[METHOD] processWithStatement [TYPE] Node [PARAMETER] WithStatement statementNode [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  WithStatement statementNode 
[REPLACE]^errorReporter.error (this + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^835^836^837^838^^834^842^[REPLACE] errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) ,^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^835^836^837^^^834^842^[ADD] errorReporter.error ( "Unsupported syntax: " + com.google.javascript.jscomp.mozilla.rhino.Token.typeToName (^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node .setType (  )   ) , sourceName, node.getLineno (  ) , "", 0 ) ;^837^838^839^840^^834^842^[REPLACE] com.google.javascript.jscomp.mozilla.rhino.Token.typeToName ( node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^node.getLineno (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^838^839^840^^^834^842^[REPLACE] node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^838^839^840^^^834^842^[ADD] node.getType (  )  ) , sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^node.getType (  ) , "", 0 ) ;^840^^^^^834^842^[REPLACE] node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[ADD]^^840^^^^^834^842^[ADD] node.getLineno (  ) , "", 0 ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^return new Node ( Token.FOR,^841^^^^^834^842^[REPLACE] return new Node ( Token.EMPTY ) ;^[METHOD] processIllegalToken [TYPE] Node [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getType (  ) , "", 0 ) ;^845^846^847^848^^844^849^[REPLACE] errorReporter.error ( "destructuring assignment forbidden", sourceName, node.getLineno (  ) , "", 0 ) ;^[METHOD] reportDestructuringAssign [TYPE] void [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
[REPLACE]^node .getType (  )  , "", 0 ) ;^848^^^^^844^849^[REPLACE] node.getLineno (  ) , "", 0 ) ;^[METHOD] reportDestructuringAssign [TYPE] void [PARAMETER] AstNode node [CLASS] TransformDispatcher   [TYPE]  boolean false  true  [TYPE]  AstNode node 
