[REPLACE]^private String sourceFile ;^44^^^^^^^[REPLACE] private String sourceFile = null;^ [CLASS] SourceInformationAnnotator  
[REPLACE]^this.sourceFile =  null;^47^^^^^46^48^[REPLACE] this.sourceFile = sourceFile;^[METHOD] <init> [TYPE] String) [PARAMETER] String sourceFile [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true 
[ADD]^^47^^^^^46^48^[ADD] this.sourceFile = sourceFile;^[METHOD] <init> [TYPE] String) [PARAMETER] String sourceFile [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true 
[REPLACE]^if  ( sourceFile == true )  {^53^^^^^51^84^[REPLACE] if  ( sourceFile != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^54^^^^^51^84^[REPLACE] n.putProp ( Node.SOURCEFILE_PROP, sourceFile ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( propNode.getType (  )   &&  Token.STRING )  {^61^^^^^51^84^[REPLACE] if  ( propNode.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n.putProp ( Node.ORIGINALNAME_PROP, propNode.getType (  )  ) ;^62^^^^^51^84^[REPLACE] n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^n.putProp ( Node.ORIGINALNAME_PROP, parent.getString (  )  ) ;^62^^^^^51^84^[REPLACE] n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^^62^^^^^51^84^[ADD] n.putProp ( Node.ORIGINALNAME_PROP, propNode.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^76^^^^^51^84^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^77^^^^^51^84^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REMOVE]^if  (  ( key.getType (  )  )  ==  ( STRING )  )  {     if  ( ! ( key.isQuotedString (  )  )  )  {         key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;     } }^77^^^^^51^84^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key.putProp ( Node.ORIGINALNAME_PROP, parent.getString (  )  ) ;^78^^^^^51^84^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key.putProp ( Node.ORIGINALNAME_PROP, parent.getType (  )  ) ;^78^^^^^51^84^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^^78^^^^^51^84^[ADD] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^for  ( Node key = n.getFirstChild (  ) ; key == null;^72^^^^^51^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( key.getType (  )   !=  Token.STRING )  {^76^^^^^72^81^[REPLACE] if  ( key.getType (  )  == Token.STRING )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( key.isQuotedString (  )  )  {^77^^^^^72^81^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key.putProp ( Node.ORIGINALNAME_PROP, parent.getString (  )  ) ;^78^^^^^72^81^[REPLACE] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^^78^^^^^72^81^[ADD] key.putProp ( Node.ORIGINALNAME_PROP, key.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^if  ( propNode.getType (  )  == Token.STRING )  {^77^^^^^72^81^[REPLACE] if  ( !key.isQuotedString (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^key =  parent.getNext (  ) .getNext (  )  )  {^73^^^^^51^84^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^^73^74^75^^^51^84^[ADD] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^Node propNode = propNode.getFirstChild (  ) .getNext (  ) ;^60^^^^^51^84^[REPLACE] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[ADD]^^60^^^^^51^84^[ADD] Node propNode = n.getFirstChild (  ) .getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
[REPLACE]^for  ( Node key = propNode.getFirstChild (  ) ; key != null;^72^^^^^51^84^[REPLACE] for  ( Node key = n.getFirstChild (  ) ; key != null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] SourceInformationAnnotator   [TYPE]  String sourceFile  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  parent  propNode 
