[REPLACE]^static final List<String> OPTIMAL_ORDER  = null ;^40^41^42^43^^40^48^[REPLACE] static final List<String> OPTIMAL_ORDER = ImmutableList.of ( "removeUnreachableCode", "removeUnusedVars", "foldConstants",^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^static final int MAX_LOOPS ;^50^^^^^^^[REPLACE] static final int MAX_LOOPS = 100;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^static final String OPTIMIZE_LOOP_ERROR ;^51^52^^^^51^52^[REPLACE] static final String OPTIMIZE_LOOP_ERROR = "Fixed point loop exceeded the maximum number of iterations.";^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private  final Logger logger = Logger.getLogger ( PhaseOptimizer.class.getName (  )  ) ;^54^55^^^^54^55^[REPLACE] private static final Logger logger = Logger.getLogger ( PhaseOptimizer.class.getName (  )  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private List<CompilerPass> passes ;^57^^^^^^^[REPLACE] private List<CompilerPass> passes = Lists.newArrayList (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private final CodeChangeHandler.RecentChange recentChange  = null ;^61^62^^^^61^62^[REPLACE] private final CodeChangeHandler.RecentChange recentChange = new CodeChangeHandler.RecentChange (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private boolean loopMutex ;^63^^^^^^^[REPLACE] private boolean loopMutex = false;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private Tracer currentTracer ;^64^^^^^^^[REPLACE] private Tracer currentTracer = null;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private String currentPassName ;^65^^^^^^^[REPLACE] private String currentPassName = null;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private PassFactory sanityCheck  = null ;^66^^^^^^^[REPLACE] private PassFactory sanityCheck = null;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private  boolean randomizeLoops = false;^70^^^^^^^[REPLACE] private static boolean randomizeLoops = false;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private static List<List<String>> loopsRun  = null ;^71^^^^^^^[REPLACE] private static List<List<String>> loopsRun = Lists.newArrayList (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private  AbstractCompiler myCompiler;^259^^^^^^^[REPLACE] private final AbstractCompiler myCompiler;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private final List<NamedPass> myPasses ;^289^^^^^^^[REPLACE] private final List<NamedPass> myPasses = Lists.newArrayList (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^private final Set<String> myNames ;^290^^^^^^^[REPLACE] private final Set<String> myNames = Sets.newHashSet (  ) ;^ [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal  
[REPLACE]^this.myCompiler = myCompiler; ;^74^^^^^73^77^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] PerformanceTracker) [PARAMETER] AbstractCompiler compiler PerformanceTracker tracker [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^this.tracker =  null;^75^^^^^73^77^[REPLACE] this.tracker = tracker;^[METHOD] <init> [TYPE] PerformanceTracker) [PARAMETER] AbstractCompiler compiler PerformanceTracker tracker [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^75^^^^^73^77^[ADD] this.tracker = tracker;^[METHOD] <init> [TYPE] PerformanceTracker) [PARAMETER] AbstractCompiler compiler PerformanceTracker tracker [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^76^^^^^73^77^[REPLACE] compiler.addChangeHandler ( recentChange ) ;^[METHOD] <init> [TYPE] PerformanceTracker) [PARAMETER] AbstractCompiler compiler PerformanceTracker tracker [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^this.name =  currentPassName;^242^^^^^241^243^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^super ( sanityCheck.getName (  )  ) ;^264^^^^^262^267^[REPLACE] super ( factory.getName (  )  ) ;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^this.compiler = compiler; ;^265^^^^^262^267^[REPLACE] this.myCompiler = myCompiler;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^this.factory =  sanityCheck;^266^^^^^262^267^[REPLACE] this.factory = factory;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^266^^^^^262^267^[ADD] this.factory = factory;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^randomizeLoops = false;^84^^^^^83^85^[REPLACE] randomizeLoops = true;^[METHOD] randomizeLoops [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^return;^92^^^^^91^93^[REPLACE] return loopsRun;^[METHOD] getLoopsRun [TYPE] List [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^loopsRun .removeAll ( 0 )  ;^99^^^^^98^100^[REPLACE] loopsRun.clear (  ) ;^[METHOD] clearLoopsRun [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REMOVE]^String name = factory.getName (  ) ;^99^^^^^98^100^[REMOVE] ^[METHOD] clearLoopsRun [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^Random random = new Random (  ) ;^115^^^^^114^135^[REPLACE] Loop currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^boolean isCurrentLoopPopulated = false;^115^116^^^^114^135^[ADD] Loop currentLoop = new LoopInternal (  ) ; boolean isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^boolean isCurrentLoopPopulated = true;^116^^^^^114^135^[REPLACE] boolean isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^116^^^^^114^135^[ADD] boolean isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( factory.getName (  )  )  {^118^^^^^114^135^[REPLACE] if  ( factory.isOneTimePass (  )  )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = false; ;^128^^^^^114^135^[REPLACE] isCurrentLoopPopulated = true;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( true )  {^119^^^^^114^135^[REPLACE] if  ( isCurrentLoopPopulated )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^currentLoop  =  currentLoop ;^122^^^^^114^135^[REPLACE] currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = true;^123^^^^^114^135^[REPLACE] isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^currentLoop ;^122^^^^^114^135^[REPLACE] currentLoop = new LoopInternal (  ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^122^123^^^^114^135^[ADD] currentLoop = new LoopInternal (  ) ; isCurrentLoopPopulated = false;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^isCurrentLoopPopulated = false;^128^^^^^114^135^[REPLACE] isCurrentLoopPopulated = true;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^for  ( PassFactory factory : factories )  { if  ( factory.isOneTimePass (  )  )  {^117^^^^^114^135^[REPLACE] for  ( PassFactory factory : factories )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( randomizeLoops )  {^132^^^^^114^135^[REPLACE] if  ( isCurrentLoopPopulated )  {^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^passes .addAll ( this )  ;^133^^^^^114^135^[REPLACE] passes.add ( currentLoop ) ;^[METHOD] consume [TYPE] void [PARAMETER] PassFactory> factories [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop currentLoop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^passes.add ( new PassFactoryDelegate ( compiler, sanityCheck )  ) ;^142^^^^^141^143^[REPLACE] passes.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[METHOD] addOneTimePass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^142^^^^^141^143^[ADD] passes.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[METHOD] addOneTimePass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^Loop currentLoop = new LoopInternal (  ) ;^151^^^^^150^154^[REPLACE] Loop loop = new LoopInternal (  ) ;^[METHOD] addFixedPointLoop [TYPE] PhaseOptimizer$Loop [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop loop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^endPass ( externs, root ) ;^152^^^^^150^154^[REPLACE] passes.add ( loop ) ;^[METHOD] addFixedPointLoop [TYPE] PhaseOptimizer$Loop [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop loop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^return;^153^^^^^150^154^[REPLACE] return loop;^[METHOD] addFixedPointLoop [TYPE] PhaseOptimizer$Loop [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Loop loop  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^this.sanityCheck =  factory;^160^^^^^159^161^[REPLACE] this.sanityCheck = sanityCheck;^[METHOD] setSanityCheck [TYPE] void [PARAMETER] PassFactory sanityCheck [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^169^^^^^166^173^[REPLACE] if  ( hasHaltingErrors (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^return loopsRun;^170^^^^^166^173^[REPLACE] return;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^167^^^^^166^173^[REPLACE] for  ( CompilerPass pass : passes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[ADD]^^167^168^169^170^171^166^173^[ADD] for  ( CompilerPass pass : passes )  { pass.process ( externs, root ) ; if  ( hasHaltingErrors (  )  )  { return; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^Preconditions.checkState ( currentTracer != null ;^179^^^^^178^182^[REPLACE] Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[METHOD] startPass [TYPE] void [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^179^^^^^178^182^[ADD] Preconditions.checkState ( currentTracer == null && currentPassName == null ) ;^[METHOD] startPass [TYPE] void [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^currentPassName = null; ;^180^^^^^178^182^[REPLACE] currentPassName = passName;^[METHOD] startPass [TYPE] void [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^currentTracer =  newTracer ( name ) ;^181^^^^^178^182^[REPLACE] currentTracer = newTracer ( passName ) ;^[METHOD] startPass [TYPE] void [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^181^^^^^178^182^[ADD] currentTracer = newTracer ( passName ) ;^[METHOD] startPass [TYPE] void [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^Preconditions.checkState ( currentTracer != null || currentPassName != null ) ;^188^^^^^187^201^[REPLACE] Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^Preconditions.checkState ( currentTracer != null && currentPassName != null ) ;^189^^^^^187^201^[REPLACE] stopTracer ( currentTracer, currentPassName ) ;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^Loop currentLoop = new LoopInternal (  ) ;^190^^^^^187^201^[REPLACE] String passToCheck = currentPassName;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^currentPassName = this;^191^^^^^187^201^[REPLACE] currentPassName = null;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^currentTracer = false;^192^^^^^187^201^[REPLACE] currentTracer = null;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[ADD]^maybeSanityCheck ( externs, root ) ;^194^195^196^^198^187^201^[ADD] try { maybeSanityCheck ( externs, root ) ; } catch  ( Exception e )  {^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^endPass ( externs, root ) ;^195^^^^^187^201^[REPLACE] maybeSanityCheck ( externs, root ) ;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^return ;^199^^^^^187^201^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] endPass [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  Exception e  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes 
[REPLACE]^if  (factory == false )  {^207^^^^^206^210^[REPLACE] if  ( sanityCheck != null )  {^[METHOD] maybeSanityCheck [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^endPass ( externs, root ) ;^208^^^^^206^210^[REPLACE] sanityCheck.create ( compiler ) .process ( externs, root ) ;^[METHOD] maybeSanityCheck [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REMOVE]^endPass ( externs, root ) ;^208^^^^^206^210^[REMOVE] ^[METHOD] maybeSanityCheck [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^return new Tracer ( "JSCompiler", comment ) ;^213^^^^^212^214^[REPLACE] return compiler.hasHaltingErrors (  ) ;^[METHOD] hasHaltingErrors [TYPE] boolean [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^String comment  =  " on recently changed AST" ;^220^221^^^^219^226^[REPLACE] String comment = passName + ( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^[METHOD] newTracer [TYPE] Tracer [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^220^221^^^^219^226^[ADD] String comment = passName + ( recentChange.hasCodeChanged (  )  ? " on recently changed AST" : "" ) ;^[METHOD] newTracer [TYPE] Tracer [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^if  ( tracker == null )  {^222^^^^^219^226^[REPLACE] if  ( tracker != null )  {^[METHOD] newTracer [TYPE] Tracer [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^222^223^224^^^219^226^[ADD] if  ( tracker != null )  { tracker.recordPassStart ( passName ) ; }^[METHOD] newTracer [TYPE] Tracer [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^tracker .recordPassStop ( passName , true )  ;^223^^^^^219^226^[REPLACE] tracker.recordPassStart ( passName ) ;^[METHOD] newTracer [TYPE] Tracer [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^return new Tracer ( "JSCompiler", passToCheck ) ;^225^^^^^219^226^[REPLACE] return new Tracer ( "JSCompiler", comment ) ;^[METHOD] newTracer [TYPE] Tracer [PARAMETER] String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^long result = currentTracer.stop (  ) ;^229^^^^^228^233^[REPLACE] long result = t.stop (  ) ;^[METHOD] stopTracer [TYPE] void [PARAMETER] Tracer t String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  long result 
[REPLACE]^if  ( tracker == false )  {^230^^^^^228^233^[REPLACE] if  ( tracker != null )  {^[METHOD] stopTracer [TYPE] void [PARAMETER] Tracer t String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  long result 
[REPLACE]^endPass ( externs, root ) ;^231^^^^^228^233^[REPLACE] tracker.recordPassStop ( passName, result ) ;^[METHOD] stopTracer [TYPE] void [PARAMETER] Tracer t String passName [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  [TYPE]  long result 
[REPLACE]^long result = t.stop (  ) ;^246^^^^^245^250^[REPLACE] logger.info ( name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^endPass ( externs, root ) ;^247^^^^^245^250^[REPLACE] startPass ( name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^247^^^^^245^250^[ADD] startPass ( name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^endPass ( externs, root ) ;^248^^^^^245^250^[REPLACE] processInternal ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^sanityCheck.create ( compiler ) .process ( externs, root ) ;^249^^^^^245^250^[REPLACE] endPass ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^endPass ( externs, root ) ;^271^^^^^270^272^[REPLACE] factory.create ( myCompiler ) .process ( externs, root ) ;^[METHOD] processInternal [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^factory .getName (  )  .process ( externs, root ) ;^271^^^^^270^272^[REPLACE] factory.create ( myCompiler ) .process ( externs, root ) ;^[METHOD] processInternal [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[ADD]^^271^^^^^270^272^[ADD] factory.create ( myCompiler ) .process ( externs, root ) ;^[METHOD] processInternal [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^String name = sanityCheck.getName (  ) ;^294^^^^^293^300^[REPLACE] String name = factory.getName (  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^Preconditions.checkArgument ( myNames.add ( passToCheck ) , "Already a pass with name '" + name +passToCheck ) ;^295^296^297^^^293^300^[REPLACE] Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^!myNames.contains ( passToCheck ) , "Already a pass with name '" + name + "' in this loop" ) ;^296^297^^^^293^300^[REPLACE] !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^myNames.contains ( sanityCheck.getName (  )  ) ;^298^^^^^293^300^[REPLACE] myNames.add ( factory.getName (  )  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^myNames.add ( factory.isOneTimePass (  )  ) ;^298^^^^^293^300^[REPLACE] myNames.add ( factory.getName (  )  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^myPasses.remove ( new PassFactoryDelegate ( compiler, factory )  ) ;^299^^^^^293^300^[REPLACE] myPasses.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^306^^^^^305^311^[REPLACE] List<String> order = Lists.newArrayList (  ) ;^[METHOD] getPassOrder [TYPE] List [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^307^^^^^305^311^[REPLACE] for  ( NamedPass pass : myPasses )  {^[METHOD] getPassOrder [TYPE] List [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^return this;^310^^^^^305^311^[REPLACE] return order;^[METHOD] getPassOrder [TYPE] List [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS 
[REPLACE]^Preconditions .checkState (  )  ;^314^^^^^313^348^[REPLACE] Preconditions.checkState ( !loopMutex, "Nested loops are forbidden" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^loopMutex = false;^315^^^^^313^348^[REPLACE] loopMutex = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^316^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^addOneTimePass ( factory ) ;^319^^^^^316^320^[REPLACE] optimizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^319^^^^^316^320^[ADD] optimizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^optimizePasses (  ) ;^317^^^^^313^348^[REPLACE] randomizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if  ( count++  <=  MAX_LOOPS )  {^327^^^^^313^348^[REPLACE] if  ( count++ > MAX_LOOPS )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, false ) ;^328^^^^^313^348^[REPLACE] compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^335^^^^^313^348^[REPLACE] if  ( hasHaltingErrors (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^342^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^342^343^344^^^313^348^[ADD] if  ( randomizeLoops )  { loopsRun.add ( getPassOrder (  )  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^loopsRun.remove ( getPassOrder (  )  ) ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REMOVE]^myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^343^^^^^313^348^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^optimizePasses (  ) ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^int count = 0;^322^323^^325^326^313^348^[ADD] try {  int count = 0; out: do {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^if  ( count++  ==  count )  {^327^^^^^313^348^[REPLACE] if  ( count++ > MAX_LOOPS )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, this ) ;^328^^^^^313^348^[REPLACE] compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[ADD]^^343^^^^^313^348^[ADD] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^int count = 3;^325^^^^^313^348^[REPLACE] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^333^^^^^313^348^[REPLACE] for  ( CompilerPass pass : myPasses )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^loopMutex = true;^346^^^^^313^348^[REPLACE] loopMutex = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^int count = 4;^325^^^^^313^348^[REPLACE] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  Node externs  root  [TYPE]  PerformanceTracker tracker  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count  [TYPE]  CompilerPass pass  [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  myPasses  order  passes 
[REPLACE]^List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^352^^^^^351^359^[REPLACE] List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[ADD]^^352^^^^^351^359^[ADD] List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^Loop currentLoop = new LoopInternal (  ) ;^353^^^^^351^359^[REPLACE] Random random = new Random (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[ADD]^^353^^^^^351^359^[ADD] Random random = new Random (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^while  ( myPasses.length (  )  > 0 )  {^354^^^^^351^359^[REPLACE] while  ( myPasses.size (  )  > 0 )  {^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.clear (  )  )  )  ) ;^355^356^^^^351^359^[REPLACE] mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.remove ( random.nextInt ( myPasses .remove ( MAX_LOOPS )   )  )  ) ;^356^^^^^351^359^[REPLACE] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.remove ( random.nextInt ( myPasses .remove ( count )   )  )  ) ;^356^^^^^351^359^[REPLACE] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.remove ( random.nextInt ( myPasses.clear (  )  )  )  ) ;^356^^^^^351^359^[REPLACE] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.removeAll ( 1 ) ;^358^^^^^351^359^[REPLACE] myPasses.addAll ( mixedupPasses ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Random random  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^369^^^^^362^381^[REPLACE] List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[ADD]^^369^^^^^362^381^[ADD] List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^if  ( sanityCheck != null )  {^372^^^^^362^381^[REPLACE] if  ( pass.name.equals ( passName )  )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^optimalPasses.remove ( pass ) ;^373^^^^^362^381^[REPLACE] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^for  ( String passName : OPTIMAL_ORDER )  { for  ( NamedPass pass : myPasses )  {^370^^^^^362^381^[REPLACE] for  ( String passName : OPTIMAL_ORDER )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^371^^^^^362^381^[REPLACE] for  ( NamedPass pass : myPasses )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.addAll ( false ) ;^379^^^^^362^381^[REPLACE] myPasses.removeAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^myPasses.addAll ( null ) ;^380^^^^^362^381^[REPLACE] myPasses.addAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] PhaseOptimizer NamedPass PassFactoryDelegate Loop LoopInternal   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^private final  boolean  name;^239^^^^^^^[REPLACE] private final String name;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] NamedPass   [TYPE]  AbstractCompiler compiler  myCompiler  [TYPE]  RecentChange recentChange  [TYPE]  boolean false  isCurrentLoopPopulated  loopMutex  randomizeLoops  true  [TYPE]  Set myNames  [TYPE]  Tracer currentTracer  t  [TYPE]  PerformanceTracker tracker  [TYPE]  NamedPass pass  [TYPE]  List OPTIMAL_ORDER  factories  loopsRun  mixedupPasses  myPasses  optimalPasses  order  passes  [TYPE]  String OPTIMIZE_LOOP_ERROR  comment  currentPassName  name  passName  passToCheck  [TYPE]  Logger logger  [TYPE]  PassFactory factory  sanityCheck  [TYPE]  int MAX_LOOPS  count 
[REPLACE]^this.name =  null;^242^^^^^241^243^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] NamedPass   [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^^242^^^^^241^243^[ADD] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] String name [CLASS] NamedPass   [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^startPass ( name ) ;^246^^^^^245^250^[REPLACE] logger.info ( name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^endPass ( externs, root ) ;^247^^^^^245^250^[REPLACE] startPass ( name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[ADD]^^247^^^^^245^250^[ADD] startPass ( name ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^endPass ( externs, root ) ;^248^^^^^245^250^[REPLACE] processInternal ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[ADD]^^248^249^^^^245^250^[ADD] processInternal ( externs, root ) ; endPass ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^processInternal ( externs, root ) ;^249^^^^^245^250^[REPLACE] endPass ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[ADD]^^249^^^^^245^250^[ADD] endPass ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NamedPass   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^private  PassFactory factory;^260^^^^^^^[REPLACE] private final PassFactory factory;^[METHOD] processInternal [TYPE] void [PARAMETER] Node externs Node root [CLASS] PassFactoryDelegate   [TYPE]  String name  [TYPE]  Node externs  root  [TYPE]  boolean false  true 
[REPLACE]^factory.create ( myCompiler ) .process ( externs, root ) ;^264^^^^^262^267^[REPLACE] super ( factory.getName (  )  ) ;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PassFactoryDelegate   [TYPE]  PassFactory factory  [TYPE]  AbstractCompiler myCompiler  [TYPE]  boolean false  true 
[REPLACE]^super ( factory .create ( myCompiler )   ) ;^264^^^^^262^267^[REPLACE] super ( factory.getName (  )  ) ;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PassFactoryDelegate   [TYPE]  PassFactory factory  [TYPE]  AbstractCompiler myCompiler  [TYPE]  boolean false  true 
[REPLACE]^this.myCompiler =  null;^265^^^^^262^267^[REPLACE] this.myCompiler = myCompiler;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PassFactoryDelegate   [TYPE]  PassFactory factory  [TYPE]  AbstractCompiler myCompiler  [TYPE]  boolean false  true 
[REPLACE]^this.factory =  null;^266^^^^^262^267^[REPLACE] this.factory = factory;^[METHOD] <init> [TYPE] PassFactory) [PARAMETER] AbstractCompiler myCompiler PassFactory factory [CLASS] PassFactoryDelegate   [TYPE]  PassFactory factory  [TYPE]  AbstractCompiler myCompiler  [TYPE]  boolean false  true 
[REPLACE]^super ( factory.getName (  )  ) ;^271^^^^^270^272^[REPLACE] factory.create ( myCompiler ) .process ( externs, root ) ;^[METHOD] processInternal [TYPE] void [PARAMETER] Node externs Node root [CLASS] PassFactoryDelegate   [TYPE]  AbstractCompiler myCompiler  [TYPE]  boolean false  true  [TYPE]  PassFactory factory  [TYPE]  Node externs  root 
[REPLACE]^private  List<NamedPass> myPasses = Lists.newArrayList (  ) ;^289^^^^^^^[REPLACE] private final List<NamedPass> myPasses = Lists.newArrayList (  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^private final Set<String> myNames  = null ;^290^^^^^^^[REPLACE] private final Set<String> myNames = Sets.newHashSet (  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^List<String> order = Lists.newArrayList (  ) ;^294^^^^^293^300^[REPLACE] String name = factory.getName (  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  List myPasses  [TYPE]  Set myNames  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^Preconditions.checkArgument ( myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^295^296^297^^^293^300^[REPLACE] Preconditions.checkArgument ( !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  List myPasses  [TYPE]  Set myNames  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^!myNames.add ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^296^297^^^^293^300^[REPLACE] !myNames.contains ( name ) , "Already a pass with name '" + name + "' in this loop" ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  List myPasses  [TYPE]  Set myNames  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^myNames.contains ( factory.getName (  )  ) ;^298^^^^^293^300^[REPLACE] myNames.add ( factory.getName (  )  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  List myPasses  [TYPE]  Set myNames  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^298^^^^^293^300^[REPLACE] myNames.add ( factory.getName (  )  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  List myPasses  [TYPE]  Set myNames  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^myPasses .contains ( null )  ;^299^^^^^293^300^[REPLACE] myPasses.add ( new PassFactoryDelegate ( compiler, factory )  ) ;^[METHOD] addLoopedPass [TYPE] void [PARAMETER] PassFactory factory [CLASS] LoopInternal   [TYPE]  List myPasses  [TYPE]  Set myNames  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  PassFactory factory 
[REPLACE]^List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^306^^^^^305^311^[REPLACE] List<String> order = Lists.newArrayList (  ) ;^[METHOD] getPassOrder [TYPE] List [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^307^^^^^305^311^[REPLACE] for  ( NamedPass pass : myPasses )  {^[METHOD] getPassOrder [TYPE] List [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true 
[REPLACE]^return this;^310^^^^^305^311^[REPLACE] return order;^[METHOD] getPassOrder [TYPE] List [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( !myNames.contains ( name ) ,^314^^^^^313^348^[REPLACE] Preconditions.checkState ( !loopMutex, "Nested loops are forbidden" ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^314^315^316^317^^313^348^[ADD] Preconditions.checkState ( !loopMutex, "Nested loops are forbidden" ) ; loopMutex = true; if  ( randomizeLoops )  { randomizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^loopMutex = false;^315^^^^^313^348^[REPLACE] loopMutex = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^316^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^316^317^318^319^320^313^348^[ADD] if  ( randomizeLoops )  { randomizePasses (  ) ; } else { optimizePasses (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^order.add ( pass.name ) ;^319^^^^^316^320^[REPLACE] optimizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^order.add ( pass.name ) ;^317^^^^^313^348^[REPLACE] randomizePasses (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  ( count++  <  MAX_LOOPS )  {^327^^^^^313^348^[REPLACE] if  ( count++ > MAX_LOOPS )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REMOVE]^if  ( randomizeLoops )  {     add ( getPassOrder (  )  ) ; }^327^^^^^313^348^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, this ) ;^328^^^^^313^348^[REPLACE] compiler.throwInternalError ( OPTIMIZE_LOOP_ERROR, null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^335^^^^^313^348^[REPLACE] if  ( hasHaltingErrors (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  ( pass.name.equals ( passName )  )  {^342^^^^^313^348^[REPLACE] if  ( randomizeLoops )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^342^343^344^^^313^348^[ADD] if  ( randomizeLoops )  { loopsRun.add ( getPassOrder (  )  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^loopsRun .contains ( true )  ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^order.add ( pass.name ) ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^int count = 0;^322^323^^325^326^313^348^[ADD] try {  int count = 0; out: do {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^if  ( count++  !=  count )  {^327^^^^^313^348^[REPLACE] if  ( count++ > MAX_LOOPS )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^loopsRun .contains ( this )  ;^343^^^^^313^348^[REPLACE] loopsRun.add ( getPassOrder (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^int count = 0 - 0;^325^^^^^313^348^[REPLACE] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^333^^^^^313^348^[REPLACE] for  ( CompilerPass pass : myPasses )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^333^334^335^336^337^313^348^[ADD] for  ( CompilerPass pass : myPasses )  { pass.process ( externs, root ) ; if  ( hasHaltingErrors (  )  )  { break out; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^loopMutex = true;^346^^^^^313^348^[REPLACE] loopMutex = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[ADD]^^346^^^^^313^348^[ADD] loopMutex = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^int count = 3;^325^^^^^313^348^[REPLACE] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LoopInternal   [TYPE]  List myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  int count  [TYPE]  Node externs  root  [TYPE]  CompilerPass pass 
[REPLACE]^List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^352^^^^^351^359^[REPLACE] List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[ADD]^^352^^^^^351^359^[ADD] List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^List<String> order = Lists.newArrayList (  ) ;^353^^^^^351^359^[REPLACE] Random random = new Random (  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^while  ( myPasses.length (  )  > 0 )  {^354^^^^^351^359^[REPLACE] while  ( myPasses.size (  )  > 0 )  {^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[ADD]^^354^355^356^^^351^359^[ADD] while  ( myPasses.size (  )  > 0 )  { mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^mixedupPasses.add ( myPasses.add ( random.nextInt ( myPasses.size (  )  )  )  ) ;^355^356^^^^351^359^[REPLACE] mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[ADD]^^355^356^^^^351^359^[ADD] mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^myPasses.remove ( random.nextInt ( myPasses .remove ( this )   )  )  ) ;^356^^^^^351^359^[REPLACE] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[ADD]^^356^^^^^351^359^[ADD] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^mixedupPasses.add ( myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^356^^^^^351^359^[REPLACE] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^myPasses.remove ( random.nextInt ( myPasses .remove ( false )   )  )  ) ;^356^^^^^351^359^[REPLACE] myPasses.remove ( random.nextInt ( myPasses.size (  )  )  )  ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^myPasses.addAll ( null ) ;^358^^^^^351^359^[REPLACE] myPasses.addAll ( mixedupPasses ) ;^[METHOD] randomizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  List mixedupPasses  myPasses  order  [TYPE]  Set myNames  [TYPE]  boolean false  true  [TYPE]  Random random 
[REPLACE]^List<NamedPass> mixedupPasses = Lists.newArrayList (  ) ;^369^^^^^362^381^[REPLACE] List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[ADD]^^369^^^^^362^381^[ADD] List<NamedPass> optimalPasses = Lists.newArrayList (  ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^if  ( randomizeLoops )  {^372^^^^^362^381^[REPLACE] if  ( pass.name.equals ( passName )  )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^optimalPasses .contains ( null )  ;^373^^^^^362^381^[REPLACE] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[ADD]^^373^^^^^362^381^[ADD] optimalPasses.add ( pass ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^for  ( String passName : OPTIMAL_ORDER )  { for  ( NamedPass pass : myPasses )  {^370^^^^^362^381^[REPLACE] for  ( String passName : OPTIMAL_ORDER )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^for  ( NamedPass pass : myPasses )  { order.add ( pass.name ) ;^371^^^^^362^381^[REPLACE] for  ( NamedPass pass : myPasses )  {^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^myPasses.removeAll ( 0 ) ;^379^^^^^362^381^[REPLACE] myPasses.removeAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
[REPLACE]^myPasses.addAll ( false ) ;^380^^^^^362^381^[REPLACE] myPasses.addAll ( optimalPasses ) ;^[METHOD] optimizePasses [TYPE] void [PARAMETER] [CLASS] LoopInternal   [TYPE]  NamedPass pass  [TYPE]  List mixedupPasses  myPasses  optimalPasses  order  [TYPE]  Set myNames  [TYPE]  String passName  [TYPE]  boolean false  true 
