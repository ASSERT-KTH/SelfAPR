[REPLACE]^AbstractCompiler compiler;^39^^^^^^^[REPLACE] final AbstractCompiler compiler;^ [CLASS] IgnoreCajaProperties Traversal  
[REPLACE]^this.compiler =  null;^45^^^^^44^47^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  int counter  [TYPE]  boolean false  true 
[REPLACE]^this.counter = 0 - 0;^46^^^^^44^47^[REPLACE] this.counter = 0;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  int counter  [TYPE]  boolean false  true 
[REPLACE]^key.getFirstChild (  ) .cloneNode (  ) , tmp.cloneTree (  )  )  ) ,^51^^^^^50^52^[REPLACE] NodeTraversal.traverse ( compiler, root, new Traversal (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  int counter  [TYPE]  Node externs  root 
[REMOVE]^Node.newString ( "___$" )  )  )  ) , ifBody )  ) ;^51^^^^^50^52^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  int counter  [TYPE]  Node externs  root 
[REPLACE]^if  ( n.getType (  )  == Token.FOR ) {^58^^^^^56^130^[REPLACE] if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( parent.getType (  )   !=  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^70^108^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, parent, new Node (^80^81^82^83^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, key, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node body = parent.getLastChild (  ) ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^n.removeChild ( body ) ;^59^60^^^^56^130^[ADD] Node body = n.getLastChild (  ) ; n.removeChild ( body ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = n .getLastChild (  )  ;^61^^^^^56^130^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^61^62^^^^56^130^[ADD] Node key = n.getFirstChild (  ) ; n.removeChild ( key ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node .getLastChild (  )  ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node ifBody;^66^^^^^56^130^[REPLACE] Node assignment;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node assignment;^67^^^^^56^130^[REPLACE] Node ifBody;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( key.getType (  )   !=  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^70^71^^^^56^130^[ADD] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^80^81^82^83^84^56^130^[ADD] ifBody = new Node ( Token.BLOCK, key, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^99^100^101^102^103^56^130^[ADD] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node body = parent.getFirstChild (  ) ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = parent.getFirstChild (  ) ;^61^^^^^56^130^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node.newString ( Token.NAME, true + counter++ ) ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^66^^^^^56^130^[ADD] Node assignment;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] IgnoreCajaProperties Traversal   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  int counter  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( n.getType (  )  == Token.FOR ) {^58^^^^^56^130^[REPLACE] if  ( n.getType (  )  == Token.FOR && n.getChildCount (  )  == 3 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( key.getType (  )   ||  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^70^108^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, parent, new Node (^80^81^82^83^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, key, new Node (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^80^81^82^83^84^56^130^[ADD] ifBody = new Node ( Token.BLOCK, key, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^ifBody =  new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^99^100^101^102^^56^130^[REPLACE] ifBody = new Node ( Token.BLOCK, new Node ( Token.EXPR_RESULT,^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node body = parent.getFirstChild (  ) ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node key = parent.getFirstChild (  ) ;^61^^^^^56^130^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_"  ^  counter ^  ^  ) ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^63^64^^^^56^130^[ADD] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node ifBody;^66^^^^^56^130^[REPLACE] Node assignment;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node assignment;^67^^^^^56^130^[REPLACE] Node ifBody;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^67^68^^70^^56^130^[ADD] Node ifBody;  if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^if  ( key.getType (  )   &&  Token.VAR )  {^70^^^^^56^130^[REPLACE] if  ( key.getType (  )  == Token.VAR )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node body = parent .getFirstChild (  )  ;^59^^^^^56^130^[REPLACE] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[ADD]^^59^^^^^56^130^[ADD] Node body = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
[REPLACE]^Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" +null ) ;^63^64^^^^56^130^[REPLACE] Node tmp = Node.newString ( Token.NAME, "JSCompiler_IgnoreCajaProperties_" + counter++ ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignment  body  ifBody  key  n  newBody  parent  tmp 
