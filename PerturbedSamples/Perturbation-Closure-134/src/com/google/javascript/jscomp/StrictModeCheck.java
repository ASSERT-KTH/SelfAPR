[REPLACE]^static final DiagnosticType UNKNOWN_VARIABLE ;^40^41^^^^40^41^[REPLACE] static final DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.error ( "JSC_UNKNOWN_VARIABLE", "unknown variable {0}" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType WITH_DISALLOWED = DiagnosticType.error ( "JSC_WITH_DISALLOWED", "\"with\" cannot be used in ES5 strict mode" ) ;^43^44^^^^43^44^[REPLACE] static final DiagnosticType WITH_DISALLOWED = DiagnosticType.error ( "JSC_WITH_DISALLOWED", "\"with\" cannot be used in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^final DiagnosticType EVAL_USE = DiagnosticType.error ( "JSC_EVAL_USE", "\"eval\" cannot be used in Caja" ) ;^46^47^^^^46^47^[REPLACE] static final DiagnosticType EVAL_USE = DiagnosticType.error ( "JSC_EVAL_USE", "\"eval\" cannot be used in Caja" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType EVAL_DECLARATION = DiagnosticType.error ( "JSC_EVAL_DECLARATION", "\"eval\" cannot be redeclared in ES5 strict mode" ) ;^49^50^51^^^49^51^[REPLACE] static final DiagnosticType EVAL_DECLARATION = DiagnosticType.error ( "JSC_EVAL_DECLARATION", "\"eval\" cannot be redeclared in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static final DiagnosticType EVAL_ASSIGNMENT ;^53^54^55^^^53^55^[REPLACE] static final DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.error ( "JSC_EVAL_ASSIGNMENT", "the \"eval\" object cannot be reassigned in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.error ( "JSC_ARGUMENTS_DECLARATION", "\"arguments\" cannot be redeclared in ES5 strict mode" ) ;^57^58^59^^^57^59^[REPLACE] static final DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.error ( "JSC_ARGUMENTS_DECLARATION", "\"arguments\" cannot be redeclared in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static final DiagnosticType ARGUMENTS_ASSIGNMENT  = null ;^61^62^63^^^61^63^[REPLACE] static final DiagnosticType ARGUMENTS_ASSIGNMENT = DiagnosticType.error ( "JSC_ARGUMENTS_ASSIGNMENT", "the \"arguments\" object cannot be reassigned in ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static  DiagnosticType DELETE_VARIABLE = DiagnosticType.error ( "JSC_DELETE_VARIABLE", "variables, functions, and arguments cannot be deleted in " + "ES5 strict mode" ) ;^65^66^67^68^^65^68^[REPLACE] static final DiagnosticType DELETE_VARIABLE = DiagnosticType.error ( "JSC_DELETE_VARIABLE", "variables, functions, and arguments cannot be deleted in " + "ES5 strict mode" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^static final DiagnosticType ILLEGAL_NAME  = null ;^70^71^72^^^70^72^[REPLACE] static final DiagnosticType ILLEGAL_NAME = DiagnosticType.error ( "JSC_ILLEGAL_NAME", "identifiers ending in '__' cannot be used in Caja" ) ;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^private  boolean noVarCheck;^75^^^^^^^[REPLACE] private final boolean noVarCheck;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^private  boolean noCajaChecks;^76^^^^^^^[REPLACE] private final boolean noCajaChecks;^ [CLASS] StrictModeCheck NonExternChecks  
[REPLACE]^this ( compiler, false, true ) ;^79^^^^^78^80^[REPLACE] this ( compiler, false, false ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED 
[REPLACE]^this.compiler =  null;^84^^^^^82^87^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean noVarCheck boolean noCajaChecks [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED 
[REPLACE]^this.noCajaChecks = noCajaChecks; ;^85^^^^^82^87^[REPLACE] this.noVarCheck = noVarCheck;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean noVarCheck boolean noCajaChecks [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED 
[REPLACE]^this.noVarCheck = noVarCheck; ;^86^^^^^82^87^[REPLACE] this.noCajaChecks = noCajaChecks;^[METHOD] <init> [TYPE] AbstractCompiler,boolean,boolean) [PARAMETER] AbstractCompiler compiler boolean noVarCheck boolean noCajaChecks [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED 
[REPLACE]^NodeTraversal.report ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^90^91^^^^89^93^[REPLACE] NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node externs  root 
[ADD]^^90^91^^^^89^93^[ADD] NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^91^^^^^89^93^[REPLACE] compiler, Lists.newArrayList ( externs, root ) , this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node externs  root 
[REMOVE]^NodeTraversal.traverseRoots ( compiler, Lists.newArrayList ( externs, root ) , this ) ;^91^^^^^89^93^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal .traverseRoots ( compiler , false )  ;^92^^^^^89^93^[REPLACE] NodeTraversal.traverse ( compiler, root, new NonExternChecks (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node externs  root 
[ADD]^^92^^^^^89^93^[ADD] NodeTraversal.traverse ( compiler, root, new NonExternChecks (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node externs  root 
[REPLACE]^if  ( n.getType (  )   &&  Token.WITH )  {^96^^^^^95^111^[REPLACE] if  ( n.getType (  )  == Token.WITH )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^t.report ( n, WITH_DISALLOWED ) ;checkNameUse ( t, n ) ;^96^97^98^99^100^95^111^[ADD] if  ( n.getType (  )  == Token.WITH )  { t.report ( n, WITH_DISALLOWED ) ; } else if  ( n.getType (  )  == Token.NAME )  { if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  { checkNameUse ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.NAME )  {^98^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( parent.getType (  )   &&  Token.ASSIGN )  {^102^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.DELPROP )  {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkLabel ( t, parent ) ;^109^^^^^95^111^[REPLACE] checkLabel ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n ) ;^107^^^^^95^111^[REPLACE] checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkDelete ( t, parent ) ;^105^^^^^95^111^[REPLACE] checkDelete ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   !=  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n ) ;^109^^^^^95^111^[REPLACE] checkLabel ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkObjectLiteral ( t, parent ) ;^107^^^^^95^111^[REPLACE] checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n .getParent (  )    !=  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkAssignment ( t, parent ) ;^103^^^^^95^111^[REPLACE] checkAssignment ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( OBJECTLIT )  )  {     checkObjectLiteral ( t, n ) ; }else     if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {         checkLabel ( t, n ) ;     }^104^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   &&  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkObjectLiteral ( t, n ) ;checkLabel ( t, n ) ;^106^107^108^109^110^95^111^[ADD] else if  ( n.getType (  )  == Token.OBJECTLIT )  { checkObjectLiteral ( t, n ) ; } else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  else {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^109^^^^^95^111^[ADD] checkLabel ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   &&  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n ) ;^105^^^^^95^111^[REPLACE] checkDelete ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^105^^^^^95^111^[ADD] checkDelete ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkLabel ( t, n ) ;^106^107^108^109^110^95^111^[ADD] else if  ( n.getType (  )  == Token.OBJECTLIT )  { checkObjectLiteral ( t, n ) ; } else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkLabel ( t, n ) ;^108^109^110^^^95^111^[ADD] else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^107^^^^^95^111^[ADD] checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^99^^^^^95^111^[REPLACE] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^checkNameUse ( t, n ) ;^99^100^101^^^95^111^[ADD] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  { checkNameUse ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, parent ) ;^100^^^^^95^111^[REPLACE] checkNameUse ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  (  !isDeclaration ( n )  )  {^99^^^^^95^111^[REPLACE] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^100^^^^^95^111^[ADD] checkNameUse ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.ASSIGN )  {^102^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( OBJECTLIT )  )  {     checkObjectLiteral ( t, n ) ; }else     if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {         checkLabel ( t, n ) ;     }^102^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.DELPROP )  {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkObjectLiteral ( t, n ) ;^104^105^106^107^^95^111^[ADD] else if  ( n.getType (  )  == Token.DELPROP )  { checkDelete ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( parent.getType (  )   ||  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( OBJECTLIT )  )  {     checkObjectLiteral ( t, n ) ; }else     if  (  ( n.getType (  )  )  ==  ( LABEL )  )  {         checkLabel ( t, n ) ;     }^108^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}^108^109^110^^^95^111^[ADD] else if  ( n.getType (  )  == Token.LABEL )  { checkLabel ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   &&  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n ) ;^103^^^^^95^111^[REPLACE] checkAssignment ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkDelete ( t, n ) ;checkObjectLiteral ( t, n ) ;^104^105^106^107^^95^111^[ADD] else if  ( n.getType (  )  == Token.DELPROP )  { checkDelete ( t, n ) ; } else if  ( n.getType (  )  == Token.OBJECTLIT )  { checkObjectLiteral ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REMOVE]^checkNameUse ( t, n ) ;^107^^^^^95^111^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^t .report ( EVAL_USE )  ;^97^^^^^95^111^[REPLACE] t.report ( n, WITH_DISALLOWED ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.NAME )  {^98^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.ASSIGN )  {^102^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkAssignment ( t, n ) ;checkDelete ( t, n ) ;^102^103^104^105^^95^111^[ADD] else if  ( n.getType (  )  == Token.ASSIGN )  { checkAssignment ( t, n ) ; } else if  ( n.getType (  )  == Token.DELPROP )  { checkDelete ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   &&  Token.DELPROP )  {^104^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.DELPROP )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getType (  )   ||  Token.LABEL )  {^108^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.LABEL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   !=  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  ( NodeUtil.isLabelName ( n )  ) {^99^^^^^95^111^[REPLACE] if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( n.getType (  )   ||  Token.ASSIGN )  {^102^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( parent.getType (  )   ||  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^103^^^^^95^111^[ADD] checkAssignment ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( parent.getType (  )   ||  Token.OBJECTLIT )  {^106^^^^^95^111^[REPLACE] } else if  ( n.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^return false;^122^^^^^117^130^[REPLACE] return true;^[METHOD] isDeclaration [TYPE] boolean [PARAMETER] Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^return n.getParent (  ) .getParent (  )  .getParent (  )   == Token.FUNCTION;^125^^^^^117^130^[REPLACE] return n.getParent (  ) .getParent (  ) .getType (  )  == Token.FUNCTION;^[METHOD] isDeclaration [TYPE] boolean [PARAMETER] Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^return true;^128^^^^^117^130^[REPLACE] return false;^[METHOD] isDeclaration [TYPE] boolean [PARAMETER] Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^Var v = t.getScope (  ) .endsWith ( n.getString (  )  ) ;^134^^^^^133^150^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( v != null )  {^135^^^^^133^150^[REPLACE] if  ( v == null )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( noVarCheck )  {^138^^^^^133^150^[REPLACE] if  ( !noVarCheck )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^^138^139^140^^^133^150^[ADD] if  ( !noVarCheck )  { t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ; }^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.report ( n, UNKNOWN_VARIABLE, n .getParent (  )   ) ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.report ( n, UNKNOWN_VARIABLE, n.getParent (  )  ) ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t .report ( n , WITH_DISALLOWED )  ;^139^^^^^133^150^[REPLACE] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^^139^^^^^133^150^[ADD] t.report ( n, UNKNOWN_VARIABLE, n.getString (  )  ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^143^^^^^133^150^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^^143^144^145^146^147^133^150^[ADD] if  ( !noCajaChecks )  { if  ( "eval".equals ( n.getString (  )  )  )  { t.report ( n, EVAL_USE ) ; } else if  ( n.getString (  ) .endsWith ( "__" )  )  { t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( "eval".equals ( n .getParent (  )   )  )  {^144^^^^^133^150^[REPLACE] if  ( "eval".equals ( n.getString (  )  )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( key.getString (  ) .endsWith ( "__" )  )  {^146^^^^^133^150^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^}   t.report ( n, ILLEGAL_NAME ) ;^146^147^148^^^133^150^[ADD] else if  ( n.getString (  ) .endsWith ( "__" )  )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, ILLEGAL_NAME ) ;^147^^^^^133^150^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^^147^^^^^133^150^[ADD] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, EVAL_USE ) ;^145^^^^^133^150^[REPLACE] t.report ( n, EVAL_USE ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^}  else {^146^^^^^133^150^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[ADD]^}^146^147^148^^^133^150^[ADD] else if  ( n.getString (  ) .endsWith ( "__" )  )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t .report ( DELETE_VARIABLE )  ;^147^^^^^133^150^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^144^^^^^133^150^[REPLACE] if  ( "eval".equals ( n.getString (  )  )  )  {^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t .report ( EVAL_USE )  ;^145^^^^^133^150^[REPLACE] t.report ( n, EVAL_USE ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t .report ( EVAL_ASSIGNMENT )  ;^147^^^^^133^150^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkNameUse [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( n.getFirstChild (  ) .getType (  )   &&  Token.NAME )  {^154^^^^^153^165^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.NAME )  {^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^} else if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {^155^^^^^153^165^[REPLACE] if  ( "arguments".equals ( n.getFirstChild (  ) .getString (  )  )  )  {^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^}  if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {^157^^^^^153^165^[REPLACE] } else if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^}   t.report ( n, EVAL_ASSIGNMENT ) ;^157^158^^160^161^153^165^[ADD] else if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {  if  ( noCajaChecks )  { t.report ( n, EVAL_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( !noVarCheck )  {^160^^^^^153^165^[REPLACE] if  ( noCajaChecks )  {^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^^160^161^162^^^153^165^[ADD] if  ( noCajaChecks )  { t.report ( n, EVAL_ASSIGNMENT ) ; }^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, EVAL_ASSIGNMENT ) ;^161^^^^^153^165^[REPLACE] t.report ( n, EVAL_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^^161^^^^^153^165^[ADD] t.report ( n, EVAL_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, ARGUMENTS_ASSIGNMENT ) ;^156^^^^^153^165^[REPLACE] t.report ( n, ARGUMENTS_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^}  else {^157^^^^^153^165^[REPLACE] } else if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^t.report ( n, EVAL_ASSIGNMENT ) ;^160^161^162^^^153^165^[ADD] if  ( noCajaChecks )  { t.report ( n, EVAL_ASSIGNMENT ) ; }^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( ILLEGAL_NAME )  ;^161^^^^^153^165^[REPLACE] t.report ( n, EVAL_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REMOVE]^if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {     if  ( noCajaChecks )  {         t.report ( n, EVAL_ASSIGNMENT ) ;     } }^155^^^^^153^165^[REMOVE] ^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( ARGUMENTS_DECLARATION )  ;^156^^^^^153^165^[REPLACE] t.report ( n, ARGUMENTS_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^}  if  ( "eval".equals ( n.getFirstChild (  ) .endsWith (  )  )  )  {^157^^^^^153^165^[REPLACE] } else if  ( "eval".equals ( n.getFirstChild (  ) .getString (  )  )  )  {^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( DELETE_VARIABLE )  ;^161^^^^^153^165^[REPLACE] t.report ( n, EVAL_ASSIGNMENT ) ;^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REMOVE]^t.report ( n, ILLEGAL_NAME ) ;^161^^^^^153^165^[REMOVE] ^[METHOD] checkAssignment [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( n.getFirstChild (  ) .getType (  )   &&  Token.NAME )  {^169^^^^^168^175^[REPLACE] if  ( n.getFirstChild (  ) .getType (  )  == Token.NAME )  {^[METHOD] checkDelete [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( v == null )  {^171^^^^^168^175^[REPLACE] if  ( v != null )  {^[METHOD] checkDelete [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, DELETE_VARIABLE ) ;^172^^^^^168^175^[REPLACE] t.report ( n, DELETE_VARIABLE ) ;^[METHOD] checkDelete [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^Var v = t.getScope (  ) .getVar ( n.getLastChild (  ) .getString (  )  ) ;^170^^^^^168^175^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] checkDelete [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( v == false )  {^171^^^^^168^175^[REPLACE] if  ( v != null )  {^[METHOD] checkDelete [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^Var v = t.getScope (  ) .getVar ( n .getLastChild (  )  .getString (  )  ) ;^170^^^^^168^175^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getFirstChild (  ) .getString (  )  ) ;^[METHOD] checkDelete [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^179^^^^^178^188^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[ADD]^^179^180^181^182^^178^188^[ADD] if  ( !noCajaChecks )  { for  ( Node key = n.getFirstChild (  ) ; key != null; key = key.getNext (  ) .getNext (  )  )  {^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^} else if  ( n.getString (  ) .endsWith ( "__" )  )  {^183^^^^^178^188^[REPLACE] if  ( key.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^t .report ( EVAL_ASSIGNMENT )  ;^184^^^^^178^188^[REPLACE] t.report ( key, ILLEGAL_NAME ) ;^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[ADD]^^184^^^^^178^188^[ADD] t.report ( key, ILLEGAL_NAME ) ;^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^for  ( Node key = n.getFirstChild (  ) ; key != null;^180^^^^^178^188^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^if  ( key.getParent (  ) .endsWith ( "__" )  )  {^183^^^^^178^188^[REPLACE] if  ( key.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^t.traverseRoots ( key, ILLEGAL_NAME ) ;^184^^^^^178^188^[REPLACE] t.report ( key, ILLEGAL_NAME ) ;^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^key =  null.getNext (  ) .getNext (  )  )  {^182^^^^^178^188^[REPLACE] key = key.getNext (  ) .getNext (  )  )  {^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^for  ( Node key = n.getLastChild (  ) ;^180^^^^^178^188^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[ADD]^^183^184^185^^^178^188^[ADD] if  ( key.getString (  ) .endsWith ( "__" )  )  { t.report ( key, ILLEGAL_NAME ) ; }^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^for  ( Node key = n .getLastChild (  )  ;^180^^^^^178^188^[REPLACE] for  ( Node key = n.getFirstChild (  ) ;^[METHOD] checkObjectLiteral [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node key  n 
[REPLACE]^if  ( n.getLastChild (  ) .getString (  ) .endsWith ( "__" )  )  {^192^^^^^191^197^[REPLACE] if  ( n.getFirstChild (  ) .getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^193^^^^^191^197^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ;^193^194^195^^^191^197^[ADD] if  ( !noCajaChecks )  { t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ; }^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( n , UNKNOWN_VARIABLE )  ;^194^^^^^191^197^[REPLACE] t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^194^^^^^191^197^[REPLACE] t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( !noVarCheck )  {^193^^^^^191^197^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( n , DELETE_VARIABLE )  ;^194^^^^^191^197^[REPLACE] t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REMOVE]^t.report ( n, ILLEGAL_NAME ) ;^194^^^^^191^197^[REMOVE] ^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.report ( n .getLastChild (  )  , ILLEGAL_NAME ) ;^194^^^^^191^197^[REPLACE] t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkLabel [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  (  isDeclaration ( n )  )  {^202^^^^^201^208^[REPLACE] if  (  ( n.getType (  )  == Token.NAME )  && isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^} else if  (  ( n.getType (  )  == Token.GETPROP ) ) {^204^205^^^^201^208^[REPLACE] } else if  (  ( n.getType (  )  == Token.GETPROP ) ||  ( n.getType (  )  == Token.SETPROP )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkProperty ( t, parent ) ;^206^^^^^201^208^[REPLACE] checkProperty ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^checkNameUse ( t, n ) ;^203^^^^^201^208^[REPLACE] checkDeclaration ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^^203^^^^^201^208^[ADD] checkDeclaration ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^}  if  (  ( n.getType (  )  == Token.GETPROP ) &&  ( n.getType (  )  == Token.SETPROP )  )  {^204^205^^^^201^208^[REPLACE] } else if  (  ( n.getType (  )  == Token.GETPROP ) ||  ( n.getType (  )  == Token.SETPROP )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[ADD]^}   checkProperty ( t, n ) ;^204^205^206^207^^201^208^[ADD] else if  (  ( n.getType (  )  == Token.GETPROP ) ||  ( n.getType (  )  == Token.SETPROP )  )  { checkProperty ( t, n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n  parent 
[REPLACE]^if  ( !NodeUtil.isLabelName ( n )  && !isDeclaration ( n )  )  {^212^^^^^211^221^[REPLACE] if  ( "eval".equals ( n.getString (  )  )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^t.report ( n, EVAL_DECLARATION ) ;t.report ( n, ARGUMENTS_DECLARATION ) ;^212^213^214^215^^211^221^[ADD] if  ( "eval".equals ( n.getString (  )  )  )  { t.report ( n, EVAL_DECLARATION ) ; } else if  ( "arguments".equals ( n.getString (  )  )  )  { t.report ( n, ARGUMENTS_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^}  else {^214^^^^^211^221^[REPLACE] } else if  ( "arguments".equals ( n.getString (  )  )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^}  else {^216^^^^^211^221^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^217^^^^^211^221^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( EVAL_USE )  ;^218^^^^^211^221^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^t.report ( n, ILLEGAL_NAME ) ;^217^218^219^^^211^221^[ADD] if  ( !noCajaChecks )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, ILLEGAL_NAME ) ;^218^^^^^211^221^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^^218^^^^^211^221^[ADD] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( WITH_DISALLOWED )  ;^215^^^^^211^221^[REPLACE] t.report ( n, ARGUMENTS_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( key.getString (  ) .endsWith ( "__" )  )  {^216^^^^^211^221^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( !noVarCheck )  {^217^^^^^211^221^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.traverseRoots ( n, EVAL_DECLARATION ) ;^213^^^^^211^221^[REPLACE] t.report ( n, EVAL_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^^213^^^^^211^221^[ADD] t.report ( n, EVAL_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^}   t.report ( n, ILLEGAL_NAME ) ;^214^215^216^217^218^211^221^[ADD] else if  ( "arguments".equals ( n.getString (  )  )  )  { t.report ( n, ARGUMENTS_DECLARATION ) ; } else if  ( n.getString (  ) .endsWith ( "__" )  )  { if  ( !noCajaChecks )  { t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( ILLEGAL_NAME )  ;^218^^^^^211^221^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t .report ( EVAL_DECLARATION )  ;^215^^^^^211^221^[REPLACE] t.report ( n, ARGUMENTS_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^}   t.report ( n, ILLEGAL_NAME ) ;^216^217^218^219^^211^221^[ADD] else if  ( n.getString (  ) .endsWith ( "__" )  )  { if  ( !noCajaChecks )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( n.getLastChild (  ) .endsWith (  ) .endsWith ( "__" )  )  {^225^^^^^224^230^[REPLACE] if  ( n.getLastChild (  ) .getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( !noVarCheck )  {^226^^^^^224^230^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^t.report ( n.getFirstChild (  ) , ILLEGAL_NAME ) ;^227^^^^^224^230^[REPLACE] t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[ADD]^^227^^^^^224^230^[ADD] t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^226^^^^^224^230^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StrictModeCheck NonExternChecks   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  noCajaChecks  noVarCheck  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType ARGUMENTS_ASSIGNMENT  ARGUMENTS_DECLARATION  DELETE_VARIABLE  EVAL_ASSIGNMENT  EVAL_DECLARATION  EVAL_USE  ILLEGAL_NAME  UNKNOWN_VARIABLE  WITH_DISALLOWED  [TYPE]  Node n 
[REPLACE]^if  (  ( n.getType (  )  == Token.NAME )  || isDeclaration ( n )  )  {^202^^^^^201^208^[REPLACE] if  (  ( n.getType (  )  == Token.NAME )  && isDeclaration ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^202^203^204^205^206^201^208^[ADD] if  (  ( n.getType (  )  == Token.NAME )  && isDeclaration ( n )  )  { checkDeclaration ( t, n ) ; } else if  (  ( n.getType (  )  == Token.GETPROP ) ||  ( n.getType (  )  == Token.SETPROP )  )  { checkProperty ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^}  else {^204^205^^^^201^208^[REPLACE] } else if  (  ( n.getType (  )  == Token.GETPROP ) ||  ( n.getType (  )  == Token.SETPROP )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^checkProperty ( t, parent ) ;^206^^^^^201^208^[REPLACE] checkProperty ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^checkProperty ( t, n ) ;^203^^^^^201^208^[REPLACE] checkDeclaration ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^}  if  (  ( n .getString (  )   == Token.GETPROP ) &&  ( n^204^205^^^^201^208^[REPLACE] } else if  (  ( n.getType (  )  == Token.GETPROP ) ||  ( n.getType (  )  == Token.SETPROP )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^checkDeclaration ( t, n ) ;^206^^^^^201^208^[REPLACE] checkProperty ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( n.getString (  ) .endsWith ( "__" )  )  {^212^^^^^211^221^[REPLACE] if  ( "eval".equals ( n.getString (  )  )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^}  else {^214^^^^^211^221^[REPLACE] } else if  ( "arguments".equals ( n.getString (  )  )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[ADD]^}   t.report ( n, ARGUMENTS_DECLARATION ) ;t.report ( n, ILLEGAL_NAME ) ;^214^215^216^217^218^211^221^[ADD] else if  ( "arguments".equals ( n.getString (  )  )  )  { t.report ( n, ARGUMENTS_DECLARATION ) ; } else if  ( n.getString (  ) .endsWith ( "__" )  )  { if  ( !noCajaChecks )  { t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^}  if  ( n.getString (  ) .endsWith ( "__" )  )  {^216^^^^^211^221^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[ADD]^}   t.report ( n, ILLEGAL_NAME ) ;^216^217^218^219^^211^221^[ADD] else if  ( n.getString (  ) .endsWith ( "__" )  )  { if  ( !noCajaChecks )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^} else if  ( n.getString (  ) .endsWith ( "__" )  )  {^217^^^^^211^221^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^218^^^^^211^221^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^217^^^^^211^221^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t .report ( 0 )  ;^215^^^^^211^221^[REPLACE] t.report ( n, ARGUMENTS_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^}  if  ( n.getString (  )  .getString (  )   )  {^216^^^^^211^221^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t .report ( null )  ;^218^^^^^211^221^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[ADD]^^218^^^^^211^221^[ADD] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[ADD]^t.report ( n, ILLEGAL_NAME ) ;^217^218^219^^^211^221^[ADD] if  ( !noCajaChecks )  { t.report ( n, ILLEGAL_NAME ) ; }^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t.report ( n, ILLEGAL_NAME ) ;^213^^^^^211^221^[REPLACE] t.report ( n, EVAL_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^}  else {^216^^^^^211^221^[REPLACE] } else if  ( n.getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t.report ( n, ILLEGAL_NAME ) ;^215^^^^^211^221^[REPLACE] t.report ( n, ARGUMENTS_DECLARATION ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t .report ( true )  ;^218^^^^^211^221^[REPLACE] t.report ( n, ILLEGAL_NAME ) ;^[METHOD] checkDeclaration [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^if  ( n .getString (  )  .getString (  ) .endsWith ( "__" )  )  {^225^^^^^224^230^[REPLACE] if  ( n.getLastChild (  ) .getString (  ) .endsWith ( "__" )  )  {^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^} else if  ( n.getString (  ) .endsWith ( "__" )  )  {^226^^^^^224^230^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t.report ( n.getString (  ) , ILLEGAL_NAME ) ;^227^^^^^224^230^[REPLACE] t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REMOVE]^t.report ( n, ILLEGAL_NAME ) ;^227^^^^^224^230^[REMOVE] ^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^t.report ( n .getString (  )  , ILLEGAL_NAME ) ;^227^^^^^224^230^[REPLACE] t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^if  ( noCajaChecks )  {^226^^^^^224^230^[REPLACE] if  ( !noCajaChecks )  {^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[ADD]^^227^^^^^224^230^[ADD] t.report ( n.getLastChild (  ) , ILLEGAL_NAME ) ;^[METHOD] checkProperty [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] NonExternChecks   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
