[REPLACE]^private  final Logger logger_ = Logger.getLogger ( JsAst.class.getName (  )  ) ;^36^^^^^^^[REPLACE] private static final Logger logger_ = Logger.getLogger ( JsAst.class.getName (  )  ) ;^ [CLASS] JsAst  
[REPLACE]^private static final long serialVersionUID ;^37^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] JsAst  
[REPLACE]^private  boolean  fileName;^40^^^^^^^[REPLACE] private String fileName;^ [CLASS] JsAst  
[REPLACE]^this.sourceFile =  null;^44^^^^^43^46^[REPLACE] this.sourceFile = sourceFile;^[METHOD] <init> [TYPE] SourceFile) [PARAMETER] SourceFile sourceFile [CLASS] JsAst   [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^this.fileName =  null.getName (  ) ;^45^^^^^43^46^[REPLACE] this.fileName = sourceFile.getName (  ) ;^[METHOD] <init> [TYPE] SourceFile) [PARAMETER] SourceFile sourceFile [CLASS] JsAst   [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^if  ( root != null )  {^50^^^^^49^54^[REPLACE] if  ( root == null )  {^[METHOD] getAstRoot [TYPE] Node [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^sourceFile.clearCachedSource (  ) ;^51^^^^^49^54^[REPLACE] createAst ( compiler ) ;^[METHOD] getAstRoot [TYPE] Node [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[ADD]^^51^^^^^49^54^[ADD] createAst ( compiler ) ;^[METHOD] getAstRoot [TYPE] Node [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^return sourceFile;^53^^^^^49^54^[REPLACE] return root;^[METHOD] getAstRoot [TYPE] Node [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root = true;^58^^^^^57^63^[REPLACE] root = null;^[METHOD] clearAst [TYPE] void [PARAMETER] [CLASS] JsAst   [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^sourceFile.getCode (  ) ;^62^^^^^57^63^[REPLACE] sourceFile.clearCachedSource (  ) ;^[METHOD] clearAst [TYPE] void [PARAMETER] [CLASS] JsAst   [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^return root;^67^^^^^66^68^[REPLACE] return sourceFile;^[METHOD] getSourceFile [TYPE] SourceFile [PARAMETER] [CLASS] JsAst   [TYPE]  SourceFile sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^Preconditions.checkState ( sourceFileName.equals ( file.getName (  )  )  ) ;^72^^^^^71^74^[REPLACE] Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[METHOD] setSourceFile [TYPE] void [PARAMETER] SourceFile file [CLASS] JsAst   [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^Preconditions.checkState ( sourceFileName.equals ( file.getCode (  )  )  ) ;^72^^^^^71^74^[REPLACE] Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ;^[METHOD] setSourceFile [TYPE] void [PARAMETER] SourceFile file [CLASS] JsAst   [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[ADD]^^72^73^^^^71^74^[ADD] Preconditions.checkState ( fileName.equals ( file.getName (  )  )  ) ; sourceFile = file;^[METHOD] setSourceFile [TYPE] void [PARAMETER] SourceFile file [CLASS] JsAst   [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[REPLACE]^sourceFile =  null;^73^^^^^71^74^[REPLACE] sourceFile = file;^[METHOD] setSourceFile [TYPE] void [PARAMETER] SourceFile file [CLASS] JsAst   [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  boolean false  true  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID  [TYPE]  Node root 
[ADD]^parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^77^78^79^80^81^76^83^[ADD] try { parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ; } catch  ( IOException e )  { compiler.report ( JSError.make ( AbstractCompiler.READ_ERROR, sourceFile.getName (  )  )  ) ;^[METHOD] createAst [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^parse ( compiler, sourceFile.getName (  ) , sourceFile.getName (  )  ) ;^78^^^^^76^83^[REPLACE] parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[METHOD] createAst [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^parse ( compiler, sourceFile.getCode (  ) , sourceFile.getCode (  )  ) ;^78^^^^^76^83^[REPLACE] parse ( compiler, sourceFile.getName (  ) , sourceFile.getCode (  )  ) ;^[METHOD] createAst [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[ADD]^logger_.fine ( "Parsing: " + sourceName ) ;^87^88^89^90^91^85^108^[ADD] try { logger_.fine ( "Parsing: " + sourceName ) ; root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) ,^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root =  ParserRunner.parse ( sourceStr, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^89^90^91^92^^85^108^[REPLACE] root = ParserRunner.parse ( sourceName, sourceStr, compiler.isIdeMode (  ) , compiler.getTypeRegistry (  ) , compiler.getDefaultErrorReporter (  ) , logger_ ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( root != false ) {^97^^^^^85^108^[REPLACE] if  ( root == null || compiler.hasHaltingErrors (  )  )  {^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.annotateCodingConvention ( root ) ;^101^^^^^85^108^[REPLACE] compiler.normalizeNodeTypes ( root ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^compiler.normalizeNodeTypes ( root ) ;^102^^^^^85^108^[REPLACE] compiler.annotateCodingConvention ( root ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root  =  root ;^99^^^^^85^108^[REPLACE] root = new Node ( Token.BLOCK ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root ;^99^^^^^85^108^[REPLACE] root = new Node ( Token.BLOCK ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
[REPLACE]^root.putProp ( Node.SOURCENAME_PROP, sourceStr ) ;^107^^^^^85^108^[REPLACE] root.putProp ( Node.SOURCENAME_PROP, sourceName ) ;^[METHOD] parse [TYPE] void [PARAMETER] AbstractCompiler compiler String sourceName String sourceStr [CLASS] JsAst   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node root  [TYPE]  SourceFile file  sourceFile  [TYPE]  String fileName  sourceName  sourceStr  [TYPE]  IOException e  [TYPE]  Logger logger_  [TYPE]  long serialVersionUID 
