[REPLACE]^private static final long serialVersionUID ;^41^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] CompilerInput DepsFinder  
[REPLACE]^private  boolean isExtern;^43^^^^^^^[REPLACE] private final boolean isExtern;^ [CLASS] CompilerInput DepsFinder  
[REPLACE]^private  SourceAst ast;^44^^^^^^^[REPLACE] private final SourceAst ast;^ [CLASS] CompilerInput DepsFinder  
[REPLACE]^final private  double  name;^45^^^^^^^[REPLACE] final private String name;^ [CLASS] CompilerInput DepsFinder  
[REPLACE]^private final Set<String> provides  = null ;^46^^^^^^^[REPLACE] private final Set<String> provides = Sets.newHashSet (  ) ;^ [CLASS] CompilerInput DepsFinder  
[REPLACE]^private  Set<String> requires = Sets.newHashSet (  ) ;^47^^^^^^^[REPLACE] private final Set<String> requires = Sets.newHashSet (  ) ;^ [CLASS] CompilerInput DepsFinder  
[REPLACE]^this ( ast, ast.getSourceFile (  ) .getName (  ) , true ) ;^50^^^^^49^51^[REPLACE] this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[METHOD] <init> [TYPE] SourceAst) [PARAMETER] SourceAst ast [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^50^^^^^49^51^[REPLACE] this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[METHOD] <init> [TYPE] SourceAst) [PARAMETER] SourceAst ast [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^this ( ast, ast .setSourceFile ( null )  .getName (  ) , false ) ;^50^^^^^49^51^[REPLACE] this ( ast, ast.getSourceFile (  ) .getName (  ) , false ) ;^[METHOD] <init> [TYPE] SourceAst) [PARAMETER] SourceAst ast [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^this ( ast, ast.getSourceFile (  ) .getName (  ) , true ) ;^54^^^^^53^55^[REPLACE] this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[METHOD] <init> [TYPE] SourceAst,boolean) [PARAMETER] SourceAst ast boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^this ( ast, ast.clearAst (  ) .getName (  ) , isExtern ) ;^54^^^^^53^55^[REPLACE] this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[METHOD] <init> [TYPE] SourceAst,boolean) [PARAMETER] SourceAst ast boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^this ( ast, ast .setSourceFile ( null )  .getName (  ) , isExtern ) ;^54^^^^^53^55^[REPLACE] this ( ast, ast.getSourceFile (  ) .getName (  ) , isExtern ) ;^[METHOD] <init> [TYPE] SourceAst,boolean) [PARAMETER] SourceAst ast boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^this.ast =  null;^58^^^^^57^61^[REPLACE] this.ast = ast;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] SourceAst ast String inputName boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this.name =  null;^59^^^^^57^61^[REPLACE] this.name = inputName;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] SourceAst ast String inputName boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this.isExtern =  true;^60^^^^^57^61^[REPLACE] this.isExtern = isExtern;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] SourceAst ast String inputName boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this ( file, true ) ;^64^^^^^63^65^[REPLACE] this ( file, false ) ;^[METHOD] <init> [TYPE] JSSourceFile) [PARAMETER] JSSourceFile file [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  JSSourceFile file  [TYPE]  long serialVersionUID 
[REPLACE]^this.ast =  new JsAst ( null ) ;^68^^^^^67^71^[REPLACE] this.ast = new JsAst ( file ) ;^[METHOD] <init> [TYPE] JSSourceFile,boolean) [PARAMETER] JSSourceFile file boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  JSSourceFile file  [TYPE]  long serialVersionUID 
[REPLACE]^this.name =  null.getName (  ) ;^69^^^^^67^71^[REPLACE] this.name = file.getName (  ) ;^[METHOD] <init> [TYPE] JSSourceFile,boolean) [PARAMETER] JSSourceFile file boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  JSSourceFile file  [TYPE]  long serialVersionUID 
[REPLACE]^this.isExtern =  true;^70^^^^^67^71^[REPLACE] this.isExtern = isExtern;^[METHOD] <init> [TYPE] JSSourceFile,boolean) [PARAMETER] JSSourceFile file boolean isExtern [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  JSSourceFile file  [TYPE]  long serialVersionUID 
[REPLACE]^this.findRequire =  true;^133^^^^^132^136^[REPLACE] this.findRequire = findRequire;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this.codingConvention =  null.getCodingConvention (  ) ;^134^^^^^132^136^[REPLACE] this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this.types ;^135^^^^^132^136^[REPLACE] this.types = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[ADD]^^135^^^^^132^136^[ADD] this.types = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^75^^^^^74^76^[REPLACE] return name;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.setSourceFile ( compiler ) ;^80^^^^^79^81^[REPLACE] return ast.getAstRoot ( compiler ) ;^[METHOD] getAstRoot [TYPE] Node [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^ast.getSourceFile (  ) ;^85^^^^^84^86^[REPLACE] ast.clearAst (  ) ;^[METHOD] clearAst [TYPE] void [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.clearAst (  ) ;^90^^^^^89^91^[REPLACE] return ast.getSourceFile (  ) ;^[METHOD] getSourceFile [TYPE] SourceFile [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^ast .getSourceFile (  )  ;^95^^^^^94^96^[REPLACE] ast.setSourceFile ( file ) ;^[METHOD] setSourceFile [TYPE] void [PARAMETER] SourceFile file [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  SourceFile file  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^100^^^^^99^101^[REPLACE] return ast;^[METHOD] getSourceAst [TYPE] SourceAst [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( getAstRoot ( compiler )  == this  )  {^105^^^^^104^113^[REPLACE] if  ( getAstRoot ( compiler )  != null )  {^[METHOD] getRequires [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^111^^^^^104^113^[REPLACE] return ImmutableSet.<String>of (  ) ;^[METHOD] getRequires [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^109^^^^^104^113^[REPLACE] return requires;^[METHOD] getRequires [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^DepsFinder deps = new DepsFinder ( compiler, false ) ;^106^^^^^104^113^[REPLACE] DepsFinder deps = new DepsFinder ( compiler, true ) ;^[METHOD] getRequires [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[ADD]^^106^107^^^^104^113^[ADD] DepsFinder deps = new DepsFinder ( compiler, true ) ; NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[METHOD] getRequires [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( getAstRoot ( compiler )  == null )  {^117^^^^^116^125^[REPLACE] if  ( getAstRoot ( compiler )  != null )  {^[METHOD] getProvides [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^123^^^^^116^125^[REPLACE] return ImmutableSet.<String>of (  ) ;^[METHOD] getProvides [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^121^^^^^116^125^[REPLACE] return provides;^[METHOD] getProvides [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^DepsFinder deps = new DepsFinder ( compiler, true ) ;^118^^^^^116^125^[REPLACE] DepsFinder deps = new DepsFinder ( compiler, false ) ;^[METHOD] getProvides [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[ADD]^NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^118^119^^^^116^125^[ADD] DepsFinder deps = new DepsFinder ( compiler, false ) ; NodeTraversal.traverse ( compiler, getAstRoot ( compiler ) , deps ) ;^[METHOD] getProvides [TYPE] Set [PARAMETER] AbstractCompiler compiler [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  DepsFinder deps  [TYPE]  String inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( name == null )  {^144^^^^^138^149^[REPLACE] if  ( className != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^types.add ( name ) ;^145^^^^^138^149^[REPLACE] types.add ( className ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^String className = findRequire ? codingConvention .extractClassNameIfProvide ( n , parent )  : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^[REPLACE] String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return getSourceFile (  ) .getRegion ( lineNumber ) ;^161^^^^^160^162^[REPLACE] return getSourceFile (  ) .getLine ( lineNumber ) ;^[METHOD] getLine [TYPE] String [PARAMETER] int lineNumber [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber 
[REPLACE]^return getSourceFile (  ) .getLine ( lineNumber ) ;^174^^^^^173^175^[REPLACE] return getSourceFile (  ) .getRegion ( lineNumber ) ;^[METHOD] getRegion [TYPE] Region [PARAMETER] int lineNumber [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^178^^^^^177^179^[REPLACE] return getSourceFile (  ) .getCode (  ) ;^[METHOD] getCode [TYPE] String [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^183^^^^^182^184^[REPLACE] return module;^[METHOD] getModule [TYPE] JSModule [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^Preconditions.checkArgument ( module != null && this.module == null && this.module == module ) ;^189^190^^^^187^192^[REPLACE] Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[METHOD] setModule [TYPE] void [PARAMETER] JSModule module [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[ADD]^^189^190^^^^187^192^[ADD] Preconditions.checkArgument ( module == null || this.module == null || this.module == module ) ;^[METHOD] setModule [TYPE] void [PARAMETER] JSModule module [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this.module =  null;^191^^^^^187^192^[REPLACE] this.module = module;^[METHOD] setModule [TYPE] void [PARAMETER] JSModule module [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^return ast.getAstRoot ( compiler ) ;^195^^^^^194^196^[REPLACE] return isExtern;^[METHOD] isExtern [TYPE] boolean [PARAMETER] [CLASS] CompilerInput DepsFinder   [TYPE]  SourceAst ast  [TYPE]  boolean false  findRequire  isExtern  true  [TYPE]  Set provides  requires  [TYPE]  CodingConvention codingConvention  [TYPE]  JSModule module  [TYPE]  List types  [TYPE]  String className  inputName  name  [TYPE]  long serialVersionUID 
[REPLACE]^this.findRequire =  true;^133^^^^^132^136^[REPLACE] this.findRequire = findRequire;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  true  [TYPE]  CodingConvention codingConvention 
[ADD]^^133^134^^^^132^136^[ADD] this.findRequire = findRequire; this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  true  [TYPE]  CodingConvention codingConvention 
[REPLACE]^this.codingConvention =  null.getCodingConvention (  ) ;^134^^^^^132^136^[REPLACE] this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  true  [TYPE]  CodingConvention codingConvention 
[ADD]^this.types = Lists.newArrayList (  ) ;^134^135^^^^132^136^[ADD] this.codingConvention = compiler.getCodingConvention (  ) ; this.types = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  true  [TYPE]  CodingConvention codingConvention 
[REPLACE]^this.types  = null ;^135^^^^^132^136^[REPLACE] this.types = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean findRequire [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  findRequire  true  [TYPE]  CodingConvention codingConvention 
[REPLACE]^if  ( className == null )  {^144^^^^^138^149^[REPLACE] if  ( className != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  boolean false  findRequire  true  [TYPE]  String className  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent 
[REPLACE]^: codingConvention.extractClassNameIfProvide ( n, parent ) ;^145^^^^^138^149^[REPLACE] types.add ( className ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  boolean false  findRequire  true  [TYPE]  String className  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent 
[REPLACE]^String className = findRequire ? codingConvention.extractClassNameIfProvide ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^141^142^143^^^138^149^[REPLACE] String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  boolean false  findRequire  true  [TYPE]  String className  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent 
[ADD]^^141^142^143^^^138^149^[ADD] String className = findRequire ? codingConvention.extractClassNameIfRequire ( n, parent ) : codingConvention.extractClassNameIfProvide ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] DepsFinder   [TYPE]  List types  [TYPE]  boolean false  findRequire  true  [TYPE]  String className  [TYPE]  NodeTraversal t  [TYPE]  CodingConvention codingConvention  [TYPE]  Node n  parent 
