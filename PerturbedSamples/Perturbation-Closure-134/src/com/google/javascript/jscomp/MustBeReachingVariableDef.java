[REPLACE]^private  Scope jsScope;^47^^^^^^^[REPLACE] private final Scope jsScope;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^private  AbstractCompiler compiler;^48^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^final Set<Var> depends  = null ;^68^^^^^^^[REPLACE] final Set<Var> depends = Sets.newHashSet (  ) ;^ [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1  
[REPLACE]^super ( null, new JoinOp (  )  ) ;^53^^^^^51^58^[REPLACE] super ( cfg, new JoinOp (  )  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  ControlFlowGraph cfg  [TYPE]  Map reachingDef 
[REPLACE]^this.jsScope =  null;^54^^^^^51^58^[REPLACE] this.jsScope = jsScope;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  ControlFlowGraph cfg  [TYPE]  Map reachingDef 
[REPLACE]^this.compiler =  null;^55^^^^^51^58^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  ControlFlowGraph cfg  [TYPE]  Map reachingDef 
[REPLACE]^this.escaped  =  this.escaped ;^56^^^^^51^58^[REPLACE] this.escaped = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  ControlFlowGraph cfg  [TYPE]  Map reachingDef 
[REPLACE]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^57^^^^^51^58^[REPLACE] computeEscaped ( jsScope, escaped, compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  ControlFlowGraph cfg  [TYPE]  Map reachingDef 
[ADD]^^57^^^^^51^58^[ADD] computeEscaped ( jsScope, escaped, compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node> cfg Scope jsScope AbstractCompiler compiler [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  ControlFlowGraph cfg  [TYPE]  Map reachingDef 
[REPLACE]^this.node =  null;^70^^^^^69^71^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Map reachingDef  [TYPE]  Node node 
[ADD]^^70^^^^^69^71^[ADD] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Map reachingDef  [TYPE]  Node node 
[REPLACE]^reachingDef  =  reachingDef ;^113^^^^^112^114^[REPLACE] reachingDef = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] MustBeReachingVariableDef$MustDef() [PARAMETER] [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Map reachingDef  [TYPE]  Node node 
[REPLACE]^if  ( otherDef.depends.contains ( var )  )  { def.reachingDef.put ( other, null ) ;^117^^^^^116^125^[REPLACE] this (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  Iterator vars  [TYPE]  Map reachingDef 
[REMOVE]^n.getLastChild (  ) , output ) ;^117^^^^^116^125^[REMOVE] ^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  Iterator vars  [TYPE]  Map reachingDef 
[REPLACE]^while ( vars.next (  )  )  {^118^^^^^116^125^[REPLACE] while ( vars.hasNext (  )  )  {^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  Iterator vars  [TYPE]  Map reachingDef 
[REPLACE]^Var var = 1.next (  ) ;^119^^^^^116^125^[REPLACE] Var var = vars.next (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  Iterator vars  [TYPE]  Map reachingDef 
[REPLACE]^Var var = null.hasNext (  ) ;^119^^^^^116^125^[REPLACE] Var var = vars.next (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node node  [TYPE]  Iterator vars  [TYPE]  Map reachingDef 
[REPLACE]^reachingDef =  Maps.newHashMap ( null.reachingDef ) ;^133^^^^^132^134^[REPLACE] reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[METHOD] <init> [TYPE] MustBeReachingVariableDef$MustDef) [PARAMETER] MustDef other [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  Map reachingDef  [TYPE]  MustDef other 
[REPLACE]^if  ( ! ! ( other instanceof Definition )  )  {^75^^^^^74^82^[REPLACE] if  ( ! ( other instanceof Definition )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Map reachingDef 
[REPLACE]^return true;^76^^^^^74^82^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Map reachingDef 
[REPLACE]^Definition aDef = a.reachingDef.get ( var ) ;^78^^^^^74^82^[REPLACE] Definition otherDef =  ( Definition )  other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Map reachingDef 
[REPLACE]^return otherDef.node  &&  node;^81^^^^^74^82^[REPLACE] return otherDef.node == node;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Map reachingDef 
[REPLACE]^return  ( other instanceof MustDef )  ;^138^139^^^^137^140^[REPLACE] return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node node  [TYPE]  Object other  [TYPE]  Map reachingDef 
[REPLACE]^Node lhs = n.getFirstChild (  ) ;^146^^^^^145^185^[REPLACE] MustDef result = new MustDef (  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { computeMustDef ( c, cfgNode, output, conditional ) ;^147^^^^^145^185^[REPLACE] Map<Var, Definition> resultMap = result.reachingDef;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  (bDef != null )  {^154^^^^^145^185^[REPLACE] if  ( aDef == null )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^154^155^^^158^145^185^[ADD] if  ( aDef == null )  {  resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, true ) ;^158^^^^^145^185^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( b.reachingDef .equals ( true )   )  {^164^^^^^145^185^[REPLACE] if  ( b.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap .put ( var )  ;^173^^^^^164^174^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^173^^^^^164^174^[ADD] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( aDef.Definition ( bDef )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, true ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^170^^^^^167^171^[ADD] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, null ) ;^168^^^^^145^185^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[ADD]^^168^^^^^145^185^[ADD] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Definition bDef = b.reachingDef.put ( var ) ;^165^^^^^145^185^[REPLACE] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( aDef.equals ( aDef )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, this ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^for  ( Var other : def.reachingDef.keySet (  )  )  { Definition otherDef = def.reachingDef.get ( other ) ;^150^^^^^145^185^[REPLACE] for  ( Var var : a.reachingDef.keySet (  )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Definition aDef = a.reachingDef.put ( var ) ;^152^^^^^145^185^[REPLACE] Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^Node aNode = bDef.node;^162^^^^^145^185^[REPLACE] Node aNode = aDef.node;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^if  ( a.reachingDef.containsKey ( var )  )  {^180^^^^^145^185^[REPLACE] if  ( !a.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^resultMap.put ( var, b.reachingDef.put ( var )  ) ;^181^^^^^145^185^[REPLACE] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^for  ( Var var : a.reachingDef.keySet (  )  )  {^179^^^^^145^185^[REPLACE] for  ( Var var : b.reachingDef.keySet (  )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^return;^184^^^^^145^185^[REPLACE] return result;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var var  [TYPE]  Node aNode  node  [TYPE]  Definition aDef  bDef  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef a  b  result 
[REPLACE]^return false;^190^^^^^189^191^[REPLACE] return true;^[METHOD] isForward [TYPE] boolean [PARAMETER] [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Map reachingDef  resultMap  [TYPE]  Node aNode  node 
[REPLACE]^return  new MustDef ( input )    ) ;^195^^^^^194^196^[REPLACE] return new MustDef ( jsScope.getVars (  )  ) ;^[METHOD] createEntryLattice [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Map reachingDef  resultMap  [TYPE]  Node aNode  node 
[REPLACE]^return  new MustDef ( input )  ;^200^^^^^199^201^[REPLACE] return new MustDef (  ) ;^[METHOD] createInitialEstimateLattice [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Map reachingDef  resultMap  [TYPE]  Node aNode  node 
[REPLACE]^MustDef output = new MustDef ( output ) ;^207^^^^^204^213^[REPLACE] MustDef output = new MustDef ( input ) ;^[METHOD] flowThrough [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] Node n MustDef input [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  n  node  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef input  output 
[REPLACE]^computeMustDef ( n, n, output, true ) ;^211^^^^^204^213^[REPLACE] computeMustDef ( n, n, output, false ) ;^[METHOD] flowThrough [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] Node n MustDef input [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  n  node  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef input  output 
[REPLACE]^return input;^212^^^^^204^213^[REPLACE] return output;^[METHOD] flowThrough [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] Node n MustDef input [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  n  node  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef input  output 
[REPLACE]^if  ( NodeUtil.isForIn ( n )  )  {^236^^^^^221^297^[REPLACE] if  ( !NodeUtil.isForIn ( n )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^236^237^238^239^^221^297^[ADD] if  ( !NodeUtil.isForIn ( n )  )  { computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ; } else {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isName ( target )  )  {^243^^^^^236^249^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^243^244^245^^^236^249^[ADD] if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^244^^^^^236^249^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil .isVar ( target )   )  {^246^^^^^236^249^[REPLACE] if  ( NodeUtil.isName ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( lhs.getType (  ) , cfgNode, rhs, output ) ;^247^^^^^236^249^[REPLACE] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^247^^^^^236^249^[ADD] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( rhs.getType (  ) , cfgNode, rhs, output ) ;^247^^^^^236^249^[REPLACE] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node lhs = n.getLastChild (  ) ;^241^^^^^236^249^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node rhs = rhs.getType (  ) ;^242^^^^^236^249^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( NodeUtil.isForIn ( n ) , node, output, conditional ) ;^237^238^^^^221^297^[REPLACE] computeMustDef ( NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^NodeUtil.isForIn ( node ) , cfgNode, output, conditional ) ;^238^^^^^221^297^[REPLACE] NodeUtil.getConditionExpression ( n ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isVar ( rhs )  )  {^243^^^^^221^297^[REPLACE] if  ( NodeUtil.isVar ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^lhs = lhs.getLastChild (  ) ;^243^244^245^^^221^297^[ADD] if  ( NodeUtil.isVar ( lhs )  )  { lhs = lhs.getLastChild (  ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^lhs =  rhs.getLastChild (  ) ;^244^^^^^221^297^[REPLACE] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^244^^^^^221^297^[ADD] lhs = lhs.getLastChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isName ( target )  )  {^246^^^^^221^297^[REPLACE] if  ( NodeUtil.isName ( lhs )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( lhs .getLastChild (  )  , cfgNode, target, output ) ;^247^^^^^221^297^[REPLACE] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^247^^^^^221^297^[ADD] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( rhs.getString (  ) , cfgNode, rhs, output ) ;^247^^^^^221^297^[REPLACE] addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( cfgNode.hasChildren (  )  )  {^266^^^^^221^297^[REPLACE] if  ( c.hasChildren (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( n.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^221^297^[REPLACE] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( cfgNode.getFirstChild (  ) , cfgNode, output, conditional ) ;^267^^^^^221^297^[REPLACE] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( c.getString (  ) , conditional ? this : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^221^297^[REPLACE] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^268^269^^^^221^297^[ADD] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( cfgNode.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^221^297^[REPLACE] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^c.getLastChild (  ) , output ) ;^269^^^^^221^297^[REPLACE] c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isAssignmentOp ( n )  ) {^275^^^^^221^297^[REPLACE] if  ( NodeUtil.isAssignmentOp ( n )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REMOVE]^if  ( ! ( isForIn ( n )  )  )  {     computeMustDef ( getConditionExpression ( n ) , cfgNode, output, conditional ) ; }else {     Node lhs = n.getFirstChild (  ) ;     Node rhs = lhs.getNext (  ) ;     if  ( isVar ( lhs )  )  {         lhs = lhs.getLastChild (  ) ;     }     if  ( isName ( lhs )  )  {         addToDefIfLocal ( lhs.getString (  ) , cfgNode, rhs, output ) ;     } }^275^^^^^221^297^[REMOVE] ^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( n.getType (  )  == Token.DEC ) {^283^^^^^275^295^[REPLACE] if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isVar ( lhs )  )  {^285^^^^^275^295^[REPLACE] if  ( NodeUtil.isName ( target )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^285^286^287^288^289^275^295^[ADD] if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^288^^^^^275^295^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node target = node .getLastChild (  )  ;^284^^^^^275^295^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getType (  )  )  {^292^^^^^275^295^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^292^293^294^^^275^295^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { computeMustDef ( c, cfgNode, output, conditional ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( cfgNode, cfgNode, output, conditional ) ;^293^^^^^275^295^[REPLACE] computeMustDef ( c, cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( c.hasChildren (  )  )  { ;^292^^^^^275^295^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node target = node.getFirstChild (  ) ;^284^^^^^275^295^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = node.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^292^^^^^275^295^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node nodeame = n.getFirstChild (  ) ;^276^^^^^221^297^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  (  n.getType (  )  == Token.INC )  {^283^^^^^221^297^[REPLACE] if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^Node target = n.getFirstChild (  ) ;conditional ? null : cfgNode, null, output ) ;^283^284^285^286^287^221^297^[ADD] if  ( n.getType (  )  == Token.DEC || n.getType (  )  == Token.INC )  { Node target = n.getFirstChild (  ) ; if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil.isVar ( target )  )  {^285^^^^^221^297^[REPLACE] if  ( NodeUtil.isName ( target )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^288^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node target = node.getLastChild (  ) ;^284^^^^^221^297^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^284^^^^^221^297^[ADD] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( NodeUtil .isVar ( n )   )  {^285^^^^^221^297^[REPLACE] if  ( NodeUtil.isName ( target )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^285^286^287^288^289^221^297^[ADD] if  ( NodeUtil.isName ( target )  )  { addToDefIfLocal ( target.getString (  ) , conditional ? null : cfgNode, null, output ) ; return; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == false; c = c.getNext (  )  )  {^265^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^if  ( ! ( other instanceof Definition )  )  {^266^^^^^221^297^[REPLACE] if  ( c.hasChildren (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^266^267^268^269^270^221^297^[ADD] if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( c.getFirstChild (  ) , cfgNode, output, true ) ;^267^^^^^221^297^[REPLACE] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^267^^^^^221^297^[ADD] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( c .getLastChild (  )  , cfgNode, output, conditional ) ;^267^^^^^221^297^[REPLACE] computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( c.getString (  ) , conditional ? false : cfgNode, c.getLastChild (  ) , output ) ;^268^269^^^^221^297^[REPLACE] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^addToDefIfLocal ( c .getLastChild (  )  , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^268^269^^^^221^297^[REPLACE] addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^292^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^computeMustDef ( c, cfgNode, output, true ) ;^293^^^^^221^297^[REPLACE] computeMustDef ( c, cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^293^^^^^221^297^[ADD] computeMustDef ( c, cfgNode, output, conditional ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( c.hasChildren (  )  )  { ;^265^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^265^266^267^268^269^221^297^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( c.hasChildren (  )  )  { computeMustDef ( c.getFirstChild (  ) , cfgNode, output, conditional ) ; addToDefIfLocal ( c.getString (  ) , conditional ? null : cfgNode, c.getFirstChild (  ) , output ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { if  ( c.hasChildren (  )  )  { ;^292^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^292^293^294^^^221^297^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { computeMustDef ( c, cfgNode, output, conditional ) ; }^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^226^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^233^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^250^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^256^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^262^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^return false;^272^^^^^221^297^[REPLACE] return;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node lhs = node.getFirstChild (  ) ;^241^^^^^221^297^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node rhs = rhs.getNext (  ) ;^242^^^^^221^297^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[ADD]^^242^^^^^221^297^[ADD] Node rhs = lhs.getNext (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = node.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^265^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Node target = n.getLastChild (  ) ;^284^^^^^221^297^[REPLACE] Node target = n.getFirstChild (  ) ;^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^for  ( Node c = node .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^292^^^^^221^297^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] computeMustDef [TYPE] void [PARAMETER] Node n Node cfgNode MustDef output boolean conditional [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean conditional  false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rhs  target  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef output 
[REPLACE]^Var var = jsScope.isDeclared ( name ) ;^308^^^^^307^337^[REPLACE] Var var = jsScope.getVar ( name ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( other != true || var.scope != jsScope )  {^312^^^^^307^337^[REPLACE] if  ( var == null || var.scope != jsScope )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^return false;^313^^^^^307^337^[REPLACE] return;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( otherDef != null )  {^318^^^^^307^337^[REPLACE] if  ( otherDef == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( otherDef.depends .add (  )   )  {^321^^^^^307^337^[REPLACE] if  ( otherDef.depends.contains ( var )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^def.reachingDef.put ( var, false ) ;^322^^^^^307^337^[REPLACE] def.reachingDef.put ( other, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^for  ( Var other : def.reachingDef.keySet (  )  )  { Definition otherDef = def.reachingDef.get ( other ) ;^316^^^^^307^337^[REPLACE] for  ( Var other : def.reachingDef.keySet (  )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Definition otherDef = def.reachingDef.put ( other ) ;^317^^^^^307^337^[REPLACE] Definition otherDef = def.reachingDef.get ( other ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( escaped.contains ( var )  )  {^326^^^^^307^337^[REPLACE] if  ( !escaped.contains ( var )  )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( node != null )  {^327^^^^^307^337^[REPLACE] if  ( node == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( rValue == null )  {^331^^^^^327^335^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^computeMustDef ( c, cfgNode, output, conditional ) ;^332^^^^^327^335^[REPLACE] computeDependence ( definition, rValue ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^332^^^^^327^335^[ADD] computeDependence ( definition, rValue ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Definition definition = new Definition ( target ) ;^330^^^^^327^335^[REPLACE] Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^def.reachingDef.put ( var, this ) ;^328^^^^^307^337^[REPLACE] def.reachingDef.put ( var, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( rValue ==rhs )  {^331^^^^^307^337^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^331^332^333^^^307^337^[ADD] if  ( rValue != null )  { computeDependence ( definition, rValue ) ; }^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^computeDependence ( definition, rhs ) ;^332^^^^^307^337^[REPLACE] computeDependence ( definition, rValue ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^Definition definition = new Definition ( target ) ;^330^^^^^307^337^[REPLACE] Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( target != null )  {^327^^^^^307^337^[REPLACE] if  ( node == null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^327^328^329^330^^307^337^[ADD] if  ( node == null )  { def.reachingDef.put ( var, null ) ; } else { Definition definition = new Definition ( node ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^def.reachingDef .put ( other )  ;^328^^^^^307^337^[REPLACE] def.reachingDef.put ( var, null ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  (rhs == true )  {^331^^^^^307^337^[REPLACE] if  ( rValue != null )  {^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[ADD]^^332^^^^^307^337^[ADD] computeDependence ( definition, rValue ) ;^[METHOD] addToDefIfLocal [TYPE] void [PARAMETER] String name Node node Node rValue MustDef def [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Var other  var  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  rValue  rhs  target  [TYPE]  Definition definition  otherDef  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap  [TYPE]  MustDef def 
[REPLACE]^if  ( NodeUtil.isName ( n )  || jsScope.isDeclared ( n.getType (  ) , true )  )  {^348^^^^^343^353^[REPLACE] if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[METHOD] computeDependence [TYPE] void [PARAMETER] Definition def Node rValue [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Definition def  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^def.depends.add ( jsScope.getVar ( n.getType (  )  )  ) ;^349^^^^^343^353^[REPLACE] def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[METHOD] computeDependence [TYPE] void [PARAMETER] Definition def Node rValue [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Definition def  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^def.depends.add ( jsScope.getVar ( parent.getString (  )  )  ) ;^349^^^^^343^353^[REPLACE] def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[METHOD] computeDependence [TYPE] void [PARAMETER] Definition def Node rValue [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Definition def  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^def.depends.add ( jsScope.getVar ( parent.getType (  )  )  ) ;^349^^^^^343^353^[REPLACE] def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[METHOD] computeDependence [TYPE] void [PARAMETER] Definition def Node rValue [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Definition def  [TYPE]  Map reachingDef  resultMap 
[ADD]^^349^^^^^343^353^[ADD] def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[METHOD] computeDependence [TYPE] void [PARAMETER] Definition def Node rValue [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Definition def  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^if  ( NodeUtil.isName ( n )  || jsScope.isDeclared ( n.getString (  ) , true )  )  {^348^^^^^347^351^[REPLACE] if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Map reachingDef  resultMap 
[ADD]^^348^349^350^^^347^351^[ADD] if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^def.depends.add ( jsScope.getVar ( parent.getString (  )  )  ) ;^349^^^^^347^351^[REPLACE] def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  NodeTraversal t  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^Preconditions.checkArgument ( getCfg (  ) .hasNode ( rValue )  ) ;^365^^^^^364^374^[REPLACE] Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^365^^^^^364^374^[REPLACE] Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[ADD]^^365^366^^^^364^374^[ADD] Preconditions.checkArgument ( getCfg (  ) .hasNode ( useNode )  ) ; GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^GraphNode<Node, Branch> n = getCfg (  ) .hasNode ( useNode ) ;^366^^^^^364^374^[REPLACE] GraphNode<Node, Branch> n = getCfg (  ) .getNode ( useNode ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^FlowState<MustDef> state = null.getAnnotation (  ) ;^367^^^^^364^374^[REPLACE] FlowState<MustDef> state = n.getAnnotation (  ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^Definition def = state.getIn (  ) .reachingDef.get ( jsScope.isDeclared ( name )  ) ;^368^^^^^364^374^[REPLACE] Definition def = state.getIn (  ) .reachingDef.get ( jsScope.getVar ( name )  ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^if  ( def != null )  {^369^^^^^364^374^[REPLACE] if  ( def == null )  {^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^return;^372^^^^^364^374^[REPLACE] return def.node;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^return this;^370^^^^^364^374^[REPLACE] return null;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^return true;^370^^^^^364^374^[REPLACE] return null;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] MustBeReachingVariableDef Definition MustDef JoinOp 1   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^Node node;^67^^^^^^^[REPLACE] final Node node;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] Definition   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^final Set<Var> depends ;^68^^^^^^^[REPLACE] final Set<Var> depends = Sets.newHashSet (  ) ;^[METHOD] getDef [TYPE] Node [PARAMETER] String name Node useNode [CLASS] Definition   [TYPE]  AbstractCompiler compiler  [TYPE]  FlowState state  [TYPE]  Set depends  escaped  [TYPE]  boolean false  true  [TYPE]  Scope jsScope  [TYPE]  Node aNode  c  cfgNode  lhs  n  name  node  parent  rValue  rhs  target  useNode  [TYPE]  Definition def  [TYPE]  GraphNode n  [TYPE]  String name  [TYPE]  Map reachingDef  resultMap 
[REPLACE]^this.node =  null;^70^^^^^69^71^[REPLACE] this.node = node;^[METHOD] <init> [TYPE] Node) [PARAMETER] Node node [CLASS] Definition   [TYPE]  Set depends  [TYPE]  Node node  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! ! ( other instanceof Definition )  )  {^75^^^^^74^82^[REPLACE] if  ( ! ( other instanceof Definition )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Definition   [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Set depends  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return true;^76^^^^^74^82^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Definition   [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Set depends  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^return otherDef.node  !=  node;;^81^^^^^74^82^[REPLACE] return otherDef.node == node;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Definition   [TYPE]  Definition otherDef  [TYPE]  Object other  [TYPE]  Set depends  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^reachingDef  =  reachingDef ;^113^^^^^112^114^[REPLACE] reachingDef = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] MustBeReachingVariableDef$MustDef() [PARAMETER] [CLASS] MustDef   [TYPE]  Map reachingDef  [TYPE]  boolean false  true 
[REPLACE]^while ( vars.hasNext (  )  )  { Var var = vars.next (  ) ;^117^^^^^116^125^[REPLACE] this (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustDef   [TYPE]  Iterator vars  [TYPE]  boolean false  true  [TYPE]  Map reachingDef  [TYPE]  Var var 
[REPLACE]^while ( vars.next (  )  )  {^118^^^^^116^125^[REPLACE] while ( vars.hasNext (  )  )  {^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustDef   [TYPE]  Iterator vars  [TYPE]  boolean false  true  [TYPE]  Map reachingDef  [TYPE]  Var var 
[REPLACE]^Var var = null.next (  ) ;^119^^^^^116^125^[REPLACE] Var var = vars.next (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustDef   [TYPE]  Iterator vars  [TYPE]  boolean false  true  [TYPE]  Map reachingDef  [TYPE]  Var var 
[ADD]^^119^^^^^116^125^[ADD] Var var = vars.next (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustDef   [TYPE]  Iterator vars  [TYPE]  boolean false  true  [TYPE]  Map reachingDef  [TYPE]  Var var 
[REPLACE]^Var var = true.next (  ) ;^119^^^^^116^125^[REPLACE] Var var = vars.next (  ) ;^[METHOD] <init> [TYPE] Iterator) [PARAMETER] Var> vars [CLASS] MustDef   [TYPE]  Iterator vars  [TYPE]  boolean false  true  [TYPE]  Map reachingDef  [TYPE]  Var var 
[REPLACE]^reachingDef =  Maps.newHashMap ( null.reachingDef ) ;^133^^^^^132^134^[REPLACE] reachingDef = Maps.newHashMap ( other.reachingDef ) ;^[METHOD] <init> [TYPE] MustBeReachingVariableDef$MustDef) [PARAMETER] MustDef other [CLASS] MustDef   [TYPE]  Map reachingDef  [TYPE]  MustDef other  [TYPE]  boolean false  true 
[REPLACE]^return   (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^138^139^^^^137^140^[REPLACE] return  ( other instanceof MustDef )  && (  ( MustDef )  other ) .reachingDef.equals ( this.reachingDef ) ;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] MustDef   [TYPE]  Map reachingDef  [TYPE]  Object other  [TYPE]  boolean false  true 
[REPLACE]^Node aNode = aDef.node;^146^^^^^145^185^[REPLACE] MustDef result = new MustDef (  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^146^^^^^145^185^[ADD] MustDef result = new MustDef (  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^MustDef result = new MustDef (  ) ;^147^^^^^145^185^[REPLACE] Map<Var, Definition> resultMap = result.reachingDef;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( bDef != null )  {^154^^^^^145^185^[REPLACE] if  ( aDef == null )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, this ) ;^158^^^^^145^185^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REMOVE]^resultMap.put ( var, aDef ) ;^158^^^^^145^185^[REMOVE] ^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( b.reachingDef .keySet (  )   )  {^164^^^^^145^185^[REPLACE] if  ( b.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap .put ( var )  ;^173^^^^^164^174^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( aDef.equals ( aDef )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^167^168^169^170^171^145^185^[ADD] if  ( aDef.equals ( bDef )  )  { resultMap.put ( var, aDef ) ; } else { resultMap.put ( var, null ) ; }^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, this ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, null ) ;^168^^^^^145^185^[REPLACE] resultMap.put ( var, aDef ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition bDef = b.reachingDef.put ( var ) ;^165^^^^^145^185^[REPLACE] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( b.reachingDef.containsKey ( var )  )  {^167^^^^^145^185^[REPLACE] if  ( aDef.equals ( bDef )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, false ) ;^170^^^^^167^171^[REPLACE] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^170^^^^^167^171^[ADD] resultMap.put ( var, null ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition bDef = b.reachingDef.get ( var ) ;^150^^^^^145^185^[REPLACE] for  ( Var var : a.reachingDef.keySet (  )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^150^151^152^^^145^185^[ADD] for  ( Var var : a.reachingDef.keySet (  )  )  {  Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition aDef = a.reachingDef.put ( var ) ;^152^^^^^145^185^[REPLACE] Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^152^^^^^145^185^[ADD] Definition aDef = a.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Node aNode = bDef.node;^162^^^^^145^185^[REPLACE] Node aNode = aDef.node;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^162^^^^^145^185^[ADD] Node aNode = aDef.node;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^Definition bDef = b.reachingDef .keySet (  )  ;^165^^^^^145^185^[REPLACE] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^165^^^^^145^185^[ADD] Definition bDef = b.reachingDef.get ( var ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  ( a.reachingDef.containsKey ( var )  )  {^180^^^^^145^185^[REPLACE] if  ( !a.reachingDef.containsKey ( var )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^resultMap.put ( var, b.reachingDef.put ( var )  ) ;^181^^^^^145^185^[REPLACE] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[ADD]^^181^^^^^145^185^[ADD] resultMap.put ( var, b.reachingDef.get ( var )  ) ;^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^for  ( Var var : a.reachingDef.keySet (  )  )  {^179^^^^^145^185^[REPLACE] for  ( Var var : b.reachingDef.keySet (  )  )  {^[METHOD] apply [TYPE] MustBeReachingVariableDef$MustDef [PARAMETER] MustDef a MustDef b [CLASS] JoinOp   [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Node aNode  [TYPE]  Definition aDef  bDef  [TYPE]  MustDef a  b  result  [TYPE]  Map resultMap 
[REPLACE]^if  (  jsScope.isDeclared ( n.getString (  ) , false )  )  {^348^^^^^347^351^[REPLACE] if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^def.depends.add ( jsScope.getVar ( parent.getString (  )  )  ) ;^349^^^^^347^351^[REPLACE] def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REMOVE]^if  ( NodeUtil.isName ( n )  && jsScope.isDeclared ( n.getString (  ) , false )  )  { def.depends.add ( jsScope.getVar ( n.getString (  )  )  ) ;^349^^^^^347^351^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
