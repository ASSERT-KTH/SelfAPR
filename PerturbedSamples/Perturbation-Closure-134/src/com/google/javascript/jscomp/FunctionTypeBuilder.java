[REPLACE]^private  String fnName;^63^^^^^^^[REPLACE] private final String fnName;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private  CodingConvention codingConvention;^65^^^^^^^[REPLACE] private final CodingConvention codingConvention;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private  JSTypeRegistry typeRegistry;^66^^^^^^^[REPLACE] private final JSTypeRegistry typeRegistry;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private final  boolean  sourceName;^68^^^^^^^[REPLACE] private final String sourceName;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private JSType returnType ;^71^^^^^^^[REPLACE] private JSType returnType = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private List<ObjectType> implementedInterfaces  = null ;^72^^^^^^^[REPLACE] private List<ObjectType> implementedInterfaces = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private ObjectType baseType  = null ;^73^^^^^^^[REPLACE] private ObjectType baseType = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private ObjectType thisType  = null ;^74^^^^^^^[REPLACE] private ObjectType thisType = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private boolean isConstructor ;^75^^^^^^^[REPLACE] private boolean isConstructor = false;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private boolean isInterface ;^76^^^^^^^[REPLACE] private boolean isInterface = false;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private Node parametersNode  = null ;^77^^^^^^^[REPLACE] private Node parametersNode = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private Node sourceNode ;^78^^^^^^^[REPLACE] private Node sourceNode = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^private String templateTypeName  = null ;^79^^^^^^^[REPLACE] private String templateTypeName = null;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning ( "JSC_EXTENDS_WITHOUT_TYPEDEF", "@extends used without @constructor or @interface for {0}" ) ;^81^82^83^^^81^83^[REPLACE] static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning ( "JSC_EXTENDS_WITHOUT_TYPEDEF", "@extends used without @constructor or @interface for {0}" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static  DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning ( "JSC_EXTENDS_NON_OBJECT", "{0} @extends non-object type {1}" ) ;^85^86^87^^^85^87^[REPLACE] static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning ( "JSC_EXTENDS_NON_OBJECT", "{0} @extends non-object type {1}" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR  = null ;^89^90^91^92^^89^92^[REPLACE] static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR = DiagnosticType.warning ( "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "@implements used without @constructor or @interface for {0}" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static final DiagnosticType VAR_ARGS_MUST_BE_LAST  = null ;^94^95^96^^^94^96^[REPLACE] static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning ( "JSC_VAR_ARGS_MUST_BE_LAST", "variable length argument must be last" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static final DiagnosticType OPTIONAL_ARG_AT_END  = null ;^98^99^100^^^98^100^[REPLACE] static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning ( "JSC_OPTIONAL_ARG_AT_END", "optional arguments must be at the end" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static final DiagnosticType INEXISTANT_PARAM ;^102^103^104^^^102^104^[REPLACE] static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning ( "JSC_INEXISTANT_PARAM", "parameter {0} does not appear in {1}''s parameter list" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static final DiagnosticType TYPE_REDEFINITION  = null ;^106^107^108^109^^106^110^[REPLACE] static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning ( "JSC_TYPE_REDEFINITION", "attempted re-definition of type {0}\n" + "found   : {1}\n"^ [CLASS] FunctionTypeBuilder  
[REPLACE]^final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_DUPLICATED", "Only one parameter type must be the template type" ) ;^112^113^114^^^112^114^[REPLACE] static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_DUPLICATED", "Only one parameter type must be the template type" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^static  DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_EXPECTED", "The template type must be a parameter type" ) ;^116^117^118^^^116^118^[REPLACE] static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.error ( "JSC_TEMPLATE_TYPE_EXPECTED", "The template type must be a parameter type" ) ;^ [CLASS] FunctionTypeBuilder  
[REPLACE]^Preconditions.checkNotNull ( sourceNode ) ;^131^^^^^129^140^[REPLACE] Preconditions.checkNotNull ( errorRoot ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.fnName  = templateTypeName;^133^^^^^129^140^[REPLACE] this.fnName = fnName == null ? "" : fnName;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.codingConvention =  null.getCodingConvention (  ) ;^134^^^^^129^140^[REPLACE] this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[ADD]^^134^^^^^129^140^[ADD] this.codingConvention = compiler.getCodingConvention (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.typeRegistry =  null.getTypeRegistry (  ) ;^135^^^^^129^140^[REPLACE] this.typeRegistry = compiler.getTypeRegistry (  ) ;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.errorRoot =  null;^136^^^^^129^140^[REPLACE] this.errorRoot = errorRoot;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[ADD]^^136^^^^^129^140^[ADD] this.errorRoot = errorRoot;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.sourceNode = sourceNode; ;^137^^^^^129^140^[REPLACE] this.sourceName = sourceName;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.compiler =  null;^138^^^^^129^140^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.scope =  null;^139^^^^^129^140^[REPLACE] this.scope = scope;^[METHOD] <init> [TYPE] Scope) [PARAMETER] String fnName AbstractCompiler compiler Node errorRoot String sourceName Scope scope [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^this.sourceName = sourceName; ;^146^^^^^145^148^[REPLACE] this.sourceNode = sourceNode;^[METHOD] setSourceNode [TYPE] FunctionTypeBuilder [PARAMETER] Node sourceNode [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[ADD]^return this;^146^147^^^^145^148^[ADD] this.sourceNode = sourceNode; return this;^[METHOD] setSourceNode [TYPE] FunctionTypeBuilder [PARAMETER] Node sourceNode [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^return null;^147^^^^^145^148^[REPLACE] return this;^[METHOD] setSourceNode [TYPE] FunctionTypeBuilder [PARAMETER] Node sourceNode [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node errorRoot  parametersNode  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName 
[REPLACE]^returnType =  null.getReturnType (  ) ;^161^^^^^160^191^[REPLACE] returnType = oldType.getReturnType (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^161^^^^^160^191^[ADD] returnType = oldType.getReturnType (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  ( paramsParent != true )  {^162^^^^^160^191^[REPLACE] if  ( paramsParent == null )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^162^163^164^165^166^160^191^[ADD] if  ( paramsParent == null )  {  parametersNode = oldType.getParametersNode (  ) ; if  ( parametersNode == null )  { parametersNode = new FunctionParamBuilder ( typeRegistry ) .build (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  ( parametersNode == null )  {^177^^^^^162^189^[REPLACE] if  ( oldParams.hasNext (  )  )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^warnedAboutArgList |=  addParameter ( null, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^180^181^182^183^^177^186^[REPLACE] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.addVarArgs ( oldParams.next (  )  ) ;^178^^^^^162^189^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.newParameterFromNode ( this.hasNext (  )  ) ;^178^^^^^162^189^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^for  ( NodesourceNode = paramsParent.getFirstChild (  ) ;^175^^^^^162^189^[REPLACE] for  ( Node currentParam = paramsParent.getFirstChild (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^175^176^177^178^^162^189^[ADD] for  ( Node currentParam = paramsParent.getFirstChild (  ) ; currentParam != null; currentParam = currentParam.getNext (  )  )  { if  ( oldParams.hasNext (  )  )  { paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  ( parametersNode == null )  {^177^^^^^175^187^[REPLACE] if  ( oldParams.hasNext (  )  )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^warnedAboutArgList |=  addParameter ( null, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^180^181^182^183^^175^187^[REPLACE] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^180^181^182^^^175^187^[ADD] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) ,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.newParameterFromNode ( null.next (  )  ) ;^178^^^^^175^187^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^currentParam !=  null; sourceNode^176^^^^^162^189^[REPLACE] currentParam != null; currentParam = currentParam.getNext (  )  )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^warnedAboutArgList |=  addParameter ( null, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^180^181^182^183^^162^189^[REPLACE] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^180^181^182^^^162^189^[ADD] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) ,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^parametersNode = builder.build (  ) ; ;^188^^^^^162^189^[REPLACE] parametersNode = paramBuilder.build (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^Iterator<Node> oldParams = oldType.getParametersNode (  ) .iterator (  ) ;^173^^^^^162^189^[REPLACE] Iterator<Node> oldParams = oldType.getParameters (  ) .iterator (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^boolean warnedAboutArgList = true;^174^^^^^162^189^[REPLACE] boolean warnedAboutArgList = false;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^for  ( Node currentParam = sourceNode.getString (  ) ;^175^^^^^162^189^[REPLACE] for  ( Node currentParam = paramsParent.getFirstChild (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  (sourceNode != null )  {^165^^^^^160^191^[REPLACE] if  ( parametersNode == null )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^parametersNode = new FunctionParamBuilder ( typeRegistry ) .build (  ) ;^165^166^167^^^160^191^[ADD] if  ( parametersNode == null )  { parametersNode = new FunctionParamBuilder ( typeRegistry ) .build (  ) ; }^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^parametersNode  =  parametersNode ;^166^^^^^160^191^[REPLACE] parametersNode = new FunctionParamBuilder ( typeRegistry ) .build (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^166^^^^^160^191^[ADD] parametersNode = new FunctionParamBuilder ( typeRegistry ) .build (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^parametersNode =  null.getParametersNode (  ) ;^164^^^^^160^191^[REPLACE] parametersNode = oldType.getParametersNode (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^164^^^^^160^191^[ADD] parametersNode = oldType.getParametersNode (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^parametersNode ;^166^^^^^160^191^[REPLACE] parametersNode = new FunctionParamBuilder ( typeRegistry ) .build (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  ( parametersNode != null )  {^165^^^^^160^191^[REPLACE] if  ( parametersNode == null )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  ( oldParams.next (  )  )  {^177^^^^^160^191^[REPLACE] if  ( oldParams.hasNext (  )  )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^177^178^179^180^181^160^191^[ADD] if  ( oldParams.hasNext (  )  )  { paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ; } else { warnedAboutArgList |= addParameter ( paramBuilder,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^180^181^182^^^177^186^[ADD] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) ,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.newParameterFromNode ( false.next (  )  ) ;^178^^^^^160^191^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^178^^^^^160^191^[ADD] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.newParameterFromNode ( oldParams.hasNext (  )  ) ;^178^^^^^160^191^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^for  ( Node sourceNode = paramsParent.getFirstChild (  ) ;^175^^^^^160^191^[REPLACE] for  ( Node currentParam = paramsParent.getFirstChild (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^if  ( null.hasNext (  )  )  {^177^^^^^175^187^[REPLACE] if  ( oldParams.hasNext (  )  )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.newParameterFromNode ( null.hasNext (  )  ) ;^178^^^^^175^187^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^paramBuilder.newParameterFromNode ( 0.next (  )  ) ;^178^^^^^175^187^[REPLACE] paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^currentParam !=  null; sourceNode^176^^^^^160^191^[REPLACE] currentParam != null; currentParam = currentParam.getNext (  )  )  {^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^176^177^178^^^160^191^[ADD] currentParam != null; currentParam = currentParam.getNext (  )  )  { if  ( oldParams.hasNext (  )  )  { paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^warnedAboutArgList |=  addParameter ( null, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^180^181^182^183^^160^191^[REPLACE] warnedAboutArgList |= addParameter ( paramBuilder, typeRegistry.getNativeType ( UNKNOWN_TYPE ) , warnedAboutArgList,^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^parametersNode = builder.build (  ) ; ;^188^^^^^160^191^[REPLACE] parametersNode = paramBuilder.build (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^171^172^^^^160^191^[ADD] FunctionParamBuilder paramBuilder = new FunctionParamBuilder ( typeRegistry ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^Iterator<Node> oldParams = oldType.getParametersNode (  ) .iterator (  ) ;^173^^^^^160^191^[REPLACE] Iterator<Node> oldParams = oldType.getParameters (  ) .iterator (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^173^^^^^160^191^[ADD] Iterator<Node> oldParams = oldType.getParameters (  ) .iterator (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^boolean warnedAboutArgList = true;^174^^^^^160^191^[REPLACE] boolean warnedAboutArgList = false;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^174^175^^^^160^191^[ADD] boolean warnedAboutArgList = false; for  ( Node currentParam = paramsParent.getFirstChild (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^for  ( Node currentParam = sourceNode.getFirstChild (  ) ;^175^^^^^160^191^[REPLACE] for  ( Node currentParam = paramsParent.getFirstChild (  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[ADD]^^175^176^177^178^^160^191^[ADD] for  ( Node currentParam = paramsParent.getFirstChild (  ) ; currentParam != null; currentParam = currentParam.getNext (  )  )  { if  ( oldParams.hasNext (  )  )  { paramBuilder.newParameterFromNode ( oldParams.next (  )  ) ;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^return null;^190^^^^^160^191^[REPLACE] return this;^[METHOD] inferFromOverriddenFunction [TYPE] FunctionTypeBuilder [PARAMETER] FunctionType oldType Node paramsParent [CLASS] FunctionTypeBuilder   [TYPE]  JSType returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType oldType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Iterator oldParams  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder paramBuilder 
[REPLACE]^returnType  =  typeRegistry.getNativeType ( UNKNOWN_TYPE ) ;^197^198^199^^^196^205^[REPLACE] returnType = info != null && info.hasReturnType (  )  ? info.getReturnType (  ) .evaluate ( scope )  : typeRegistry.getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] inferReturnType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( templateTypeName == null && returnType.restrictByNotNullOrUndefined (  ) .isTemplateType (  )  )  {^200^201^^^^196^205^[REPLACE] if  ( templateTypeName != null && returnType.restrictByNotNullOrUndefined (  ) .isTemplateType (  )  )  {^[METHOD] inferReturnType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ;^202^^^^^196^205^[REPLACE] reportError ( TEMPLATE_TYPE_EXPECTED, fnName ) ;^[METHOD] inferReturnType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return null;^204^^^^^196^205^[REPLACE] return this;^[METHOD] inferReturnType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType returnType  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null )  {^212^^^^^211^254^[REPLACE] if  ( info != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( parametersNode == null )  {^217^^^^^211^254^[REPLACE] if  ( info.hasBaseType (  )  )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  (  isInterface )  {^218^^^^^211^254^[REPLACE] if  ( isConstructor || isInterface )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^return inferParameterTypes ( info ) ;^224^^^^^218^225^[REPLACE] reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^224^^^^^218^225^[ADD] reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType != true )  {^220^^^^^211^254^[REPLACE] if  ( baseType == null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^220^221^222^^^211^254^[ADD] if  ( baseType == null )  { reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ; }^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^221^^^^^211^254^[REPLACE] reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^221^^^^^211^254^[ADD] reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.cast (  )  ) ;^221^^^^^211^254^[REPLACE] reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REMOVE]^ObjectType objType = ObjectType.cast ( type ) ;^221^^^^^211^254^[REMOVE] ^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^maybeThisType = ObjectType.cast ( info.getThisType (  ) .evaluate ( scope )  ) ; ;^219^^^^^211^254^[REPLACE] baseType = ObjectType.cast ( info.getBaseType (  ) .evaluate ( scope )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType !=thisType )  {^220^^^^^211^254^[REPLACE] if  ( baseType == null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^220^221^222^^^211^254^[ADD] if  ( baseType == null )  { reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ; }^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  (warnedAboutArgList && isInterface )  {^218^^^^^211^254^[REPLACE] if  ( isConstructor || isInterface )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^baseType = ObjectType.cast ( info.getBaseType (  ) .evaluate ( scope )  ) ;reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^218^219^220^221^222^211^254^[ADD] if  ( isConstructor || isInterface )  { baseType = ObjectType.cast ( info.getBaseType (  ) .evaluate ( scope )  ) ; if  ( baseType == null )  { reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ; }^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType != null )  {^220^^^^^211^254^[REPLACE] if  ( baseType == null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType .getConstructor (  )   ) ;^221^^^^^211^254^[REPLACE] reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( isConstructor &&warnedAboutArgList )  {^229^^^^^211^254^[REPLACE] if  ( isConstructor || isInterface )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^229^230^231^232^^211^254^[ADD] if  ( isConstructor || isInterface )  { implementedInterfaces = Lists.newArrayList (  ) ; for  ( JSTypeExpression t : info.getImplementedInterfaces (  )  )  { ObjectType interType = ObjectType.cast ( t.evaluate ( scope )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^}  else {^248^^^^^211^254^[REPLACE] } else if  ( info.getImplementedInterfaceCount (  )  > 0 )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^}^248^249^250^^^211^254^[ADD] else if  ( info.getImplementedInterfaceCount (  )  > 0 )  { reportWarning ( IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName ) ; }^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^249^^^^^211^254^[REPLACE] reportWarning ( IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( thisType == true )  {^233^^^^^211^254^[REPLACE] if  ( interType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^return inferParameterTypes ( info ) ;^236^^^^^233^237^[REPLACE] reportError ( BAD_IMPLEMENTED_TYPE, fnName ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^236^^^^^233^237^[ADD] reportError ( BAD_IMPLEMENTED_TYPE, fnName ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^implementedInterfaces.add ( thisType ) ;^234^^^^^211^254^[REPLACE] implementedInterfaces.add ( interType ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType == true )  {^239^^^^^211^254^[REPLACE] if  ( baseType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^239^240^241^242^243^211^254^[ADD] if  ( baseType != null )  { JSType maybeFunctionType = baseType.getConstructor (  ) ; if  ( maybeFunctionType instanceof FunctionType )  { FunctionType functionType = baseType.getConstructor (  ) ; Iterables.addAll (^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( ! returnType instanceof FunctionType )  {^241^^^^^211^254^[REPLACE] if  ( maybeFunctionType instanceof FunctionType )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^FunctionType functionType = baseType.toString (  ) ;^242^^^^^211^254^[REPLACE] FunctionType functionType = baseType.getConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^242^^^^^211^254^[ADD] FunctionType functionType = baseType.getConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^JSType maybeFunctionType = baseType.toString (  ) ;^240^^^^^211^254^[REPLACE] JSType maybeFunctionType = baseType.getConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( ! maybeFunctionType instanceof FunctionType )  {^241^^^^^211^254^[REPLACE] if  ( maybeFunctionType instanceof FunctionType )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^FunctionType functionType = baseType.getConstructor (  ) ;functionType.getImplementedInterfaces (  )  ) ;^241^242^243^244^245^211^254^[ADD] if  ( maybeFunctionType instanceof FunctionType )  { FunctionType functionType = baseType.getConstructor (  ) ; Iterables.addAll ( implementedInterfaces, functionType.getImplementedInterfaces (  )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^implementedInterfaces ;^230^^^^^211^254^[REPLACE] implementedInterfaces = Lists.newArrayList (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^for  ( JSTypeExpression t : info.getImplementedInterfaces (  )  )  { ObjectType interType = ObjectType.cast ( t.evaluate ( scope )  ) ;^231^^^^^211^254^[REPLACE] for  ( JSTypeExpression t : info.getImplementedInterfaces (  )  )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^231^232^233^234^^211^254^[ADD] for  ( JSTypeExpression t : info.getImplementedInterfaces (  )  )  { ObjectType interType = ObjectType.cast ( t.evaluate ( scope )  ) ; if  ( interType != null )  { implementedInterfaces.add ( interType ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^JSType maybeFunctionType = baseType.getConstructor (  ) ;^232^^^^^211^254^[REPLACE] ObjectType interType = ObjectType.cast ( t.evaluate ( scope )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^JSType maybeFunctionType = baseType .toString (  )  ;^240^^^^^211^254^[REPLACE] JSType maybeFunctionType = baseType.getConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^240^^^^^211^254^[ADD] JSType maybeFunctionType = baseType.getConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( thisType == null )  {^233^^^^^211^254^[REPLACE] if  ( interType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^implementedInterfaces.add ( interType ) ;reportError ( BAD_IMPLEMENTED_TYPE, fnName ) ;^233^234^235^236^237^211^254^[ADD] if  ( interType != null )  { implementedInterfaces.add ( interType ) ; } else { reportError ( BAD_IMPLEMENTED_TYPE, fnName ) ; }^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType == this )  {^239^^^^^211^254^[REPLACE] if  ( baseType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^FunctionType functionType = baseType .toString (  )  ;^242^^^^^211^254^[REPLACE] FunctionType functionType = baseType.getConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^} else if  ( info.getImplementedInterfaceCount (  )   <=  0 )  {^248^^^^^211^254^[REPLACE] } else if  ( info.getImplementedInterfaceCount (  )  > 0 )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^}   reportWarning ( IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName ) ;^248^249^250^^^211^254^[ADD] else if  ( info.getImplementedInterfaceCount (  )  > 0 )  { reportWarning ( IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName ) ; }^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^isConstructor =  null.isConstructor (  ) ;^213^^^^^211^254^[REPLACE] isConstructor = info.isConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^213^^^^^211^254^[ADD] isConstructor = info.isConstructor (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^isInterface =  null.isInterface (  ) ;^214^^^^^211^254^[REPLACE] isInterface = info.isInterface (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^219^^^^^211^254^[ADD] baseType = ObjectType.cast ( info.getBaseType (  ) .evaluate ( scope )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^implementedInterfaces  =  implementedInterfaces ;^230^^^^^211^254^[REPLACE] implementedInterfaces = Lists.newArrayList (  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^ObjectType interType = ObjectType.cast ( t .isTemplateType (  )   ) ;^232^^^^^211^254^[REPLACE] ObjectType interType = ObjectType.cast ( t.evaluate ( scope )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[ADD]^^217^218^219^220^221^211^254^[ADD] if  ( info.hasBaseType (  )  )  { if  ( isConstructor || isInterface )  { baseType = ObjectType.cast ( info.getBaseType (  ) .evaluate ( scope )  ) ; if  ( baseType == null )  { reportWarning ( EXTENDS_NON_OBJECT, fnName, baseType.toString (  )  ) ;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( warnedAboutArgList ) {^218^^^^^211^254^[REPLACE] if  ( isConstructor || isInterface )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( isConstructor ) {^218^^^^^211^254^[REPLACE] if  ( isConstructor || isInterface )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType != this )  {^220^^^^^211^254^[REPLACE] if  ( baseType == null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  (  isInterface )  {^229^^^^^211^254^[REPLACE] if  ( isConstructor || isInterface )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^} else if  ( info.getImplementedInterfaceCount (  )   <  4 )  {^248^^^^^211^254^[REPLACE] } else if  ( info.getImplementedInterfaceCount (  )  > 0 )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  (thisType == null )  {^233^^^^^211^254^[REPLACE] if  ( interType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( baseType == null )  {^239^^^^^211^254^[REPLACE] if  ( baseType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^if  ( thisType == false )  {^233^^^^^211^254^[REPLACE] if  ( interType != null )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^}  if  ( info.getImplementedInterfaceCount (  )   <  0 )  {^248^^^^^211^254^[REPLACE] } else if  ( info.getImplementedInterfaceCount (  )  > 0 )  {^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^return null;^253^^^^^211^254^[REPLACE] return this;^[METHOD] inferInheritance [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  returnType  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType functionType  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  JSTypeExpression t  [TYPE]  List implementedInterfaces 
[REPLACE]^ObjectType objType = ObjectType.cast ( returnType ) ;^261^^^^^260^266^[REPLACE] ObjectType objType = ObjectType.cast ( type ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info JSType type [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  objType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( objType != null &&  ( info != null ) {^262^^^^^260^266^[REPLACE] if  ( objType != null &&  ( info == null || !info.hasType (  )  )  )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info JSType type [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  objType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^thisType = ownerType; ;^263^^^^^260^266^[REPLACE] thisType = objType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info JSType type [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  objType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^263^^^^^260^266^[ADD] thisType = objType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info JSType type [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  objType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return null;^265^^^^^260^266^[REPLACE] return this;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info JSType type [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  objType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType maybeThisType = this;^277^^^^^276^308^[REPLACE] ObjectType maybeThisType = null;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null ) {^278^^^^^276^308^[REPLACE] if  ( info != null && info.hasThisType (  )  )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^baseType = ObjectType.cast ( info.getBaseType (  ) .evaluate ( scope )  ) ; ;^279^^^^^276^308^[REPLACE] maybeThisType = ObjectType.cast ( info.getThisType (  ) .evaluate ( scope )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( maybeThisType == this  )  {^281^^^^^276^308^[REPLACE] if  ( maybeThisType != null )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^281^282^^^^276^308^[ADD] if  ( maybeThisType != null )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^}  else {^289^290^^^^276^308^[REPLACE] } else if  ( owner != null && ( info == null || !info.hasType (  )  )  )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  (thisType == false )  {^302^^^^^289^305^[REPLACE] if  ( ownerType != null )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^thisType = ownerType;^302^303^304^^^289^305^[ADD] if  ( ownerType != null )  { thisType = ownerType; }^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^thisType = objType; ;^303^^^^^289^305^[REPLACE] thisType = ownerType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^303^^^^^289^305^[ADD] thisType = ownerType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^String ownerTypeName = owner.getLineno (  ) ;^297^^^^^289^305^[REPLACE] String ownerTypeName = owner.getQualifiedName (  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType sourceNodeType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^298^299^300^301^^289^305^[REPLACE] ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^298^299^300^^^289^305^[ADD] ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName,^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == null )  {^302^^^^^276^308^[REPLACE] if  ( ownerType != null )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^thisType = objType; ;^303^^^^^276^308^[REPLACE] thisType = ownerType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^303^^^^^276^308^[ADD] thisType = ownerType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^String sourceNodeTypeName = owner .getLineno (  )  ;^297^^^^^276^308^[REPLACE] String ownerTypeName = owner.getQualifiedName (  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( typeRegistry .getType ( scope , sourceName , templateTypeName )   )  ) ;^298^299^300^301^^276^308^[REPLACE] ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^thisType =  null;^288^^^^^276^308^[REPLACE] thisType = maybeThisType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^}  if  ( owner != false && ( info != false ) {^289^290^^^^276^308^[REPLACE] } else if  ( owner != null && ( info == null || !info.hasType (  )  )  )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == null )  {^302^^^^^289^305^[REPLACE] if  ( ownerType != null )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^String sourceNodeTypeName = owner.getQualifiedName (  ) ;^297^^^^^289^305^[REPLACE] String ownerTypeName = owner.getQualifiedName (  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^297^298^299^300^301^289^305^[ADD] String ownerTypeName = owner.getQualifiedName (  ) ; ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, templateTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^298^299^300^301^^289^305^[REPLACE] ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( ownerType == true )  {^302^^^^^276^308^[REPLACE] if  ( ownerType != null )  {^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^302^303^304^^^276^308^[ADD] if  ( ownerType != null )  { thisType = ownerType; }^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^thisType =  ownerType;^288^^^^^276^308^[REPLACE] thisType = maybeThisType;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^String sourceNodeTypeName = owner.getLineno (  ) ;^297^^^^^276^308^[REPLACE] String ownerTypeName = owner.getQualifiedName (  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^297^298^299^300^301^276^308^[ADD] String ownerTypeName = owner.getQualifiedName (  ) ; ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^ObjectType sourceNodeType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^298^299^300^301^^276^308^[REPLACE] ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName, owner.getLineno (  ) , owner.getCharno (  )  )  ) ;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^298^299^300^^^276^308^[ADD] ObjectType ownerType = ObjectType.cast ( typeRegistry.getType ( scope, ownerTypeName, sourceName,^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return null;^307^^^^^276^308^[REPLACE] return this;^[METHOD] inferThisType [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info Node owner [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^FunctionParamBuilder builder = new FunctionParamBuilder ( typeRegistry ) ;^315^^^^^313^321^[REPLACE] Node lp = new Node ( Token.LP ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^JSType parameterType = info != null && info.hasParameterType ( argumentName )  ?^316^^^^^313^321^[REPLACE] for  ( String name : info.getParameterNames (  )  )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return inferParameterTypes ( paramsParent, info ) ;^320^^^^^313^321^[REPLACE] return inferParameterTypes ( lp, info ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  returnType  type  [TYPE]  boolean false  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String fnName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( argsParent != null )  {^329^^^^^328^376^[REPLACE] if  ( argsParent == null )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^^329^330^331^332^333^328^376^[ADD] if  ( argsParent == null )  { if  ( info == null )  { return this; } else { return inferParameterTypes ( info ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( info != false )  {^330^^^^^328^376^[REPLACE] if  ( info == null )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^return inferParameterTypes ( lp, info ) ;^333^^^^^330^334^[REPLACE] return inferParameterTypes ( info ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^return null;^331^^^^^328^376^[REPLACE] return this;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^return inferParameterTypes ( lp, info ) ;^333^^^^^328^376^[REPLACE] return inferParameterTypes ( info ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( info != null )  {^330^^^^^328^376^[REPLACE] if  ( info == null )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^^330^331^332^333^334^328^376^[ADD] if  ( info == null )  { return this; } else { return inferParameterTypes ( info ) ; }^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^FunctionParamBuilder paramBuilder = new FunctionParamBuilder ( typeRegistry ) ;^338^^^^^328^376^[REPLACE] FunctionParamBuilder builder = new FunctionParamBuilder ( typeRegistry ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^boolean warnedAboutArgList = true;^339^^^^^328^376^[REPLACE] boolean warnedAboutArgList = false;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^Set<String> allJsDocParams  =  Sets.newHashSet ( info.getParameterCount (  )  ) ;^340^341^342^^^328^376^[REPLACE] Set<String> allJsDocParams =  ( info == null )  ? Sets.<String>newHashSet (  )  : Sets.newHashSet ( info.getParameterNames (  )  ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^boolean foundTemplateType = true;^343^^^^^328^376^[REPLACE] boolean foundTemplateType = false;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^^343^^^^^328^376^[ADD] boolean foundTemplateType = false;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( templateTypeName == null && parameterType.restrictByNotNullOrUndefined (  ) .isTemplateType (  )  )  {^353^354^^^^328^376^[REPLACE] if  ( templateTypeName != null && parameterType.restrictByNotNullOrUndefined (  ) .isTemplateType (  )  )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^^353^354^355^356^357^328^376^[ADD] if  ( templateTypeName != null && parameterType.restrictByNotNullOrUndefined (  ) .isTemplateType (  )  )  { if  ( foundTemplateType )  { reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ; }^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( warnedAboutArgList )  {^355^^^^^353^359^[REPLACE] if  ( foundTemplateType )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportError ( TEMPLATE_TYPE_EXPECTED, fnName ) ;^356^^^^^353^359^[REPLACE] reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^foundTemplateType = false;^358^^^^^353^359^[REPLACE] foundTemplateType = true;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( true )  {^355^^^^^328^376^[REPLACE] if  ( foundTemplateType )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ;^355^356^357^^^328^376^[ADD] if  ( foundTemplateType )  { reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ; }^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportError ( TEMPLATE_TYPE_EXPECTED, fnName ) ;^356^^^^^328^376^[REPLACE] reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REMOVE]^return inferParameterTypes ( info ) ;^356^^^^^328^376^[REMOVE] ^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^foundTemplateType = false;^358^^^^^328^376^[REPLACE] foundTemplateType = true;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^warnedAboutArgList |=  addParameter ( null, parameterType, warnedAboutArgList, isOptionalParameter ( arg, info ) , isVarArgsParameter ( arg, info )  ) ;^360^361^362^363^^328^376^[REPLACE] warnedAboutArgList |= addParameter ( builder, parameterType, warnedAboutArgList, isOptionalParameter ( arg, info ) , isVarArgsParameter ( arg, info )  ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^for  ( Node arg : argsParent.children (  )  )  { String argumentName = arg.getString (  ) ;^344^^^^^328^376^[REPLACE] for  ( Node arg : argsParent.children (  )  )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^^344^345^346^^^328^376^[ADD] for  ( Node arg : argsParent.children (  )  )  { String argumentName = arg.getString (  ) ; allJsDocParams.remove ( argumentName ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^String sourceNodeumentName = arg.getString (  ) ;^345^^^^^328^376^[REPLACE] String argumentName = arg.getString (  ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^JSType parameterType  =  info.getParameterType ( argumentName ) .evaluate ( scope )  ;^349^350^351^352^^328^376^[REPLACE] JSType parameterType = info != null && info.hasParameterType ( argumentName )  ? info.getParameterType ( argumentName ) .evaluate ( scope )  : typeRegistry.getNativeType ( UNKNOWN_TYPE ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( templateTypeName == null ) {^366^^^^^328^376^[REPLACE] if  ( templateTypeName != null && !foundTemplateType )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportError ( TEMPLATE_TYPE_DUPLICATED, fnName ) ;^367^^^^^328^376^[REPLACE] reportError ( TEMPLATE_TYPE_EXPECTED, fnName ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^String argumentName = arg.getString (  ) ;^370^^^^^328^376^[REPLACE] for  ( String inexistentName : allJsDocParams )  {^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[ADD]^^370^371^372^^^328^376^[ADD] for  ( String inexistentName : allJsDocParams )  { reportWarning ( INEXISTANT_PARAM, inexistentName, fnName ) ; }^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^parametersNode = paramBuilder.build (  ) ; ;^374^^^^^328^376^[REPLACE] parametersNode = builder.build (  ) ;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^return null;^375^^^^^328^376^[REPLACE] return this;^[METHOD] inferParameterTypes [TYPE] FunctionTypeBuilder [PARAMETER] Node argsParent JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  Set allJsDocParams  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  parametersNode  paramsParent  sourceNode  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  sourceName  templateTypeName  [TYPE]  JSDocInfo info  [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  List implementedInterfaces  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( codingConvention .isOptionalParameter ( arg , info )   )  {^383^^^^^381^390^[REPLACE] if  ( codingConvention.isOptionalParameter ( param )  )  {^[METHOD] isOptionalParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[ADD]^^383^384^385^^^381^390^[ADD] if  ( codingConvention.isOptionalParameter ( param )  )  { return true; }^[METHOD] isOptionalParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return false;^384^^^^^381^390^[REPLACE] return true;^[METHOD] isOptionalParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^String sourceNodeName = param.getString (  ) ;^387^^^^^381^390^[REPLACE] String paramName = param.getString (  ) ;^[METHOD] isOptionalParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return   info.getParameterType ( paramName )  || info.getParameterType ( paramName ) .isOptionalArg (  ) ;^388^389^^^^381^390^[REPLACE] return info != null && info.hasParameterType ( paramName )  && info.getParameterType ( paramName ) .isOptionalArg (  ) ;^[METHOD] isOptionalParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( codingConvention.isOptionalParameter ( param )  )  {^398^^^^^396^405^[REPLACE] if  ( codingConvention.isVarArgsParameter ( param )  )  {^[METHOD] isVarArgsParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return false;^399^^^^^396^405^[REPLACE] return true;^[METHOD] isVarArgsParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^String paramsParentName = param.getLineno (  ) ;^402^^^^^396^405^[REPLACE] String paramName = param.getString (  ) ;^[METHOD] isVarArgsParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return info != null && info.hasParameterType ( paramName )  && info.getParameterType ( paramName ) .evaluate (  ) ;^403^404^^^^396^405^[REPLACE] return info != null && info.hasParameterType ( paramName )  && info.getParameterType ( paramName ) .isVarArgs (  ) ;^[METHOD] isVarArgsParameter [TYPE] boolean [PARAMETER] Node param JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( info == null )  {^411^^^^^410^416^[REPLACE] if  ( info != null )  {^[METHOD] inferTemplateTypeName [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^templateTypeName =  null.getTemplateTypeName (  ) ;^412^^^^^410^416^[REPLACE] templateTypeName = info.getTemplateTypeName (  ) ;^[METHOD] inferTemplateTypeName [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^return null;^415^^^^^410^416^[REPLACE] return this;^[METHOD] inferTemplateTypeName [TYPE] FunctionTypeBuilder [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  parameterType  returnType  type  [TYPE]  boolean false  foundTemplateType  isConstructor  isInterface  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
[REPLACE]^boolean emittedWarning = true;^431^^^^^430^458^[REPLACE] boolean emittedWarning = false;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( warnedAboutArgList )  {^432^^^^^430^458^[REPLACE] if  ( isOptional )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^}  else {^440^^^^^430^458^[REPLACE] } else if  ( isVarArgs )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.addRequiredParams ( paramType )  && !warnedAboutArgList )  {^446^^^^^440^456^[REPLACE] if  ( !builder.addRequiredParams ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^446^447^^449^450^440^456^[ADD] if  ( !builder.addRequiredParams ( paramType )  && !warnedAboutArgList )  {  if  ( builder.hasVarArgs (  )  )  { reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.build (  )  )  {^449^^^^^440^456^[REPLACE] if  ( builder.hasVarArgs (  )  )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;reportWarning ( OPTIONAL_ARG_AT_END ) ;^449^450^451^452^453^440^456^[ADD] if  ( builder.hasVarArgs (  )  )  { reportWarning ( VAR_ARGS_MUST_BE_LAST ) ; } else { reportWarning ( OPTIONAL_ARG_AT_END ) ; }^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^452^^^^^440^456^[REPLACE] reportWarning ( OPTIONAL_ARG_AT_END ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REMOVE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^452^^^^^440^456^[REMOVE] ^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^450^^^^^440^456^[REPLACE] reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^emittedWarning = false;^454^^^^^440^456^[REPLACE] emittedWarning = true;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( parametersNode == null )  {^449^^^^^440^456^[REPLACE] if  ( builder.hasVarArgs (  )  )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^450^^^^^440^456^[ADD] reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.addVarArgs ( paramType )  && !warnedAboutArgList )  {^441^^^^^430^458^[REPLACE] if  ( !builder.addVarArgs ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^emittedWarning = false;^443^^^^^430^458^[REPLACE] emittedWarning = true;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^443^^^^^430^458^[ADD] emittedWarning = true;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.addVarArgs ( paramType )  ) {^441^^^^^430^458^[REPLACE] if  ( !builder.addVarArgs ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.addRequiredParams ( paramType )  && !warnedAboutArgList )  {^446^^^^^430^458^[REPLACE] if  ( !builder.addRequiredParams ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( parametersNode == null )  {^449^^^^^430^458^[REPLACE] if  ( builder.hasVarArgs (  )  )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^449^450^451^452^453^430^458^[ADD] if  ( builder.hasVarArgs (  )  )  { reportWarning ( VAR_ARGS_MUST_BE_LAST ) ; } else { reportWarning ( OPTIONAL_ARG_AT_END ) ; }^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^452^^^^^449^453^[REPLACE] reportWarning ( OPTIONAL_ARG_AT_END ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^450^^^^^430^458^[REPLACE] reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^emittedWarning = false;^454^^^^^430^458^[REPLACE] emittedWarning = true;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.build (  )  )  {^449^^^^^430^458^[REPLACE] if  ( builder.hasVarArgs (  )  )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^450^^^^^430^458^[ADD] reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder.addOptionalParams ( paramType )  && !warnedAboutArgList )  {^436^^^^^430^458^[REPLACE] if  ( !builder.addOptionalParams ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^436^437^438^439^^430^458^[ADD] if  ( !builder.addOptionalParams ( paramType )  && !warnedAboutArgList )  { reportWarning ( VAR_ARGS_MUST_BE_LAST ) ; emittedWarning = true; }^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^emittedWarning = false;^438^^^^^430^458^[REPLACE] emittedWarning = true;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  (  !warnedAboutArgList )  {^446^^^^^440^456^[REPLACE] if  ( !builder.addRequiredParams ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^452^^^^^440^456^[ADD] reportWarning ( OPTIONAL_ARG_AT_END ) ;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REMOVE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^450^^^^^440^456^[REMOVE] ^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^^454^^^^^440^456^[ADD] emittedWarning = true;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  (  !warnedAboutArgList )  {^441^^^^^430^458^[REPLACE] if  ( !builder.addVarArgs ( paramType )  && !warnedAboutArgList )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( builder .addVarArgs ( returnType )   )  {^449^^^^^430^458^[REPLACE] if  ( builder.hasVarArgs (  )  )  {^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[ADD]^reportWarning ( VAR_ARGS_MUST_BE_LAST ) ;reportWarning ( OPTIONAL_ARG_AT_END ) ;^449^450^451^452^453^430^458^[ADD] if  ( builder.hasVarArgs (  )  )  { reportWarning ( VAR_ARGS_MUST_BE_LAST ) ; } else { reportWarning ( OPTIONAL_ARG_AT_END ) ; }^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^return warnedAboutArgList;^457^^^^^430^458^[REPLACE] return emittedWarning;^[METHOD] addParameter [TYPE] boolean [PARAMETER] FunctionParamBuilder builder JSType paramType boolean warnedAboutArgList boolean isOptional boolean isVarArgs [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  FunctionParamBuilder builder 
[REPLACE]^if  ( returnType != null || parametersNode == null )  {^464^^^^^463^491^[REPLACE] if  ( returnType == null || parametersNode == null )  {^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^return ;^465^466^^^^463^491^[REPLACE] throw new IllegalStateException ( "All Function types must have params and a return type" ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^465^466^^^^463^491^[ADD] throw new IllegalStateException ( "All Function types must have params and a return type" ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType existingFn = isInstanceObject ?^469^^^^^463^491^[REPLACE] FunctionType fnType;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( parametersNode == null )  {^470^^^^^463^491^[REPLACE] if  ( isConstructor )  {^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^}  else {^472^^^^^463^491^[REPLACE] } else if  ( isInterface )  {^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType  =  fnType ;^479^480^^^^472^482^[REPLACE] fnType = new FunctionType ( typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  (  fnName.isEmpty (  )  )  {^474^^^^^463^491^[REPLACE] if  ( scope.isGlobal (  )  && !fnName.isEmpty (  )  )  {^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^typeRegistry.declareType ( fnName, fnType.getReturnType (  )  ) ;^475^^^^^463^491^[REPLACE] typeRegistry.declareType ( fnName, fnType.getInstanceType (  )  ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType  =  fnType ;^473^^^^^463^491^[REPLACE] fnType = typeRegistry.createInterfaceType ( fnName, sourceNode ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^473^^^^^463^491^[ADD] fnType = typeRegistry.createInterfaceType ( fnName, sourceNode ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( scope.isGlobal (  )  && fnName.isEmpty (  )  )  {^474^^^^^463^491^[REPLACE] if  ( scope.isGlobal (  )  && !fnName.isEmpty (  )  )  {^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^typeRegistry.createInterfaceType ( fnName, fnType.getInstanceType (  )  ) ;^475^^^^^463^491^[REPLACE] typeRegistry.declareType ( fnName, fnType.getInstanceType (  )  ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType ;^479^480^^^^463^491^[REPLACE] fnType = new FunctionType ( typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType ;^471^^^^^463^491^[REPLACE] fnType = getOrCreateConstructor (  ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType ;^479^480^^^^472^482^[REPLACE] fnType = new FunctionType ( typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^479^480^^^^472^482^[ADD] fnType = new FunctionType ( typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^typeRegistry.declareType ( fnName, fnType.getInstanceType (  )  ) ;^474^475^476^^^463^491^[ADD] if  ( scope.isGlobal (  )  && !fnName.isEmpty (  )  )  { typeRegistry.declareType ( fnName, fnType.getInstanceType (  )  ) ; }^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType  = null ;^473^^^^^463^491^[REPLACE] fnType = typeRegistry.createInterfaceType ( fnName, sourceNode ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType  = null ;^471^^^^^463^491^[REPLACE] fnType = getOrCreateConstructor (  ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType  =  fnType ;^479^480^^^^463^491^[REPLACE] fnType = new FunctionType ( typeRegistry, fnName, sourceNode, parametersNode, returnType, thisType, templateTypeName ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( implementedInterfaces == null )  {^484^^^^^463^491^[REPLACE] if  ( implementedInterfaces != null )  {^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType .getImplementedInterfaces (  )  ;^485^^^^^463^491^[REPLACE] fnType.setImplementedInterfaces ( implementedInterfaces ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^typeRegistry.getNativeType (  ) ;^488^^^^^463^491^[REPLACE] typeRegistry.clearTemplateTypeName (  ) ;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^return inferParameterTypes ( info ) ;^490^^^^^463^491^[REPLACE] return fnType;^[METHOD] buildAndRegister [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( baseType == this )  {^494^^^^^493^497^[REPLACE] if  ( baseType != null )  {^[METHOD] maybeSetBaseType [TYPE] void [PARAMETER] FunctionType fnType [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType.hasEqualCallType ( baseType ) ;^495^^^^^493^497^[REPLACE] fnType.setPrototypeBasedOn ( baseType ) ;^[METHOD] maybeSetBaseType [TYPE] void [PARAMETER] FunctionType fnType [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType fnType = typeRegistry .createInterfaceType ( ownerTypeName , sourceNode )  ;^513^514^^^^512^548^[REPLACE] FunctionType fnType = typeRegistry.createConstructorType ( fnName, sourceNode, parametersNode, returnType ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^513^514^^^^512^548^[ADD] FunctionType fnType = typeRegistry.createConstructorType ( fnName, sourceNode, parametersNode, returnType ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^JSType existingType = typeRegistry.declareType ( fnName ) ;^515^^^^^512^548^[REPLACE] JSType existingType = typeRegistry.getType ( fnName ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( existingType ==type )  {^517^^^^^512^548^[REPLACE] if  ( existingType != null )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  (isOptional && fnName.equals ( "Function" )  )  {^519^^^^^512^548^[REPLACE] if  ( isInstanceObject || fnName.equals ( "Function" )  )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^519^520^521^522^523^512^548^[ADD] if  ( isInstanceObject || fnName.equals ( "Function" )  )  { FunctionType existingFn = isInstanceObject ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( existingFn.getSource (  )  != null )  {^525^^^^^512^548^[REPLACE] if  ( existingFn.getSource (  )  == null )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^existingFn.setPrototypeBasedOn ( sourceNode ) ;^526^^^^^512^548^[REPLACE] existingFn.setSource ( sourceNode ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REMOVE]^reportWarning ( EXTENDS_WITHOUT_TYPEDEF, fnName ) ;^526^^^^^512^548^[REMOVE] ^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( existingFn.hasEqualCallType ( fnType )  )  {^529^^^^^512^548^[REPLACE] if  ( !existingFn.hasEqualCallType ( fnType )  )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^reportWarning ( TYPE_REDEFINITION, fnName, fnType .getConstructor (  )  , existingFn^530^531^^^^512^548^[REPLACE] reportWarning ( TYPE_REDEFINITION, fnName, fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^530^531^^^^512^548^[ADD] reportWarning ( TYPE_REDEFINITION, fnName, fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType.getSource (  ) , existingFn.toString (  )  ) ;^531^^^^^512^548^[REPLACE] fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType.toString (  ) , fnType.toString (  )  ) ;^531^^^^^512^548^[REPLACE] fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^531^^^^^512^548^[ADD] fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^return inferParameterTypes ( info ) ;^534^^^^^512^548^[REPLACE] return existingFn;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType existingFn = isInstanceObject ? (  ( InstanceObjectType )  existingType ) .iterator (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^520^521^522^523^^512^548^[REPLACE] FunctionType existingFn = isInstanceObject ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( fnType.setSource (  )  != this )  {^525^^^^^512^548^[REPLACE] if  ( existingFn.getSource (  )  == null )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^529^530^531^532^^512^548^[ADD] if  ( !existingFn.hasEqualCallType ( fnType )  )  { reportWarning ( TYPE_REDEFINITION, fnName, fnType.toString (  ) , existingFn.toString (  )  ) ; }^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^reportWarning ( TYPE_REDEFINITION, fnName, fnType.getSource (  ) , existingFn.toString (  )  ) ;^530^531^^^^512^548^[REPLACE] reportWarning ( TYPE_REDEFINITION, fnName, fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^return fnType;^534^^^^^512^548^[REPLACE] return existingFn;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType existingFn = isInstanceObject ?^518^^^^^512^548^[REPLACE] boolean isInstanceObject = existingType instanceof InstanceObjectType;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType existingFn = true ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^520^521^522^523^^512^548^[REPLACE] FunctionType existingFn = isInstanceObject ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  (  fnName.equals ( "Function" )  )  {^519^^^^^512^548^[REPLACE] if  ( isInstanceObject || fnName.equals ( "Function" )  )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( fnType.getSource (  )  != this )  {^525^^^^^512^548^[REPLACE] if  ( existingFn.getSource (  )  == null )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType existingFn = warnedAboutArgList ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^520^521^522^523^^512^548^[REPLACE] FunctionType existingFn = isInstanceObject ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( existingFn.setSource (  )  != false )  {^525^^^^^512^548^[REPLACE] if  ( existingFn.getSource (  )  == null )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^fnType .getConstructor (  )  , existingFn^531^^^^^512^548^[REPLACE] fnType.toString (  ) , existingFn.toString (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^boolean isInstanceObject = type instanceof InstanceObjectType;^518^^^^^512^548^[REPLACE] boolean isInstanceObject = existingType instanceof InstanceObjectType;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^FunctionType existingFn = true ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getType ( FUNCTION_FUNCTION_TYPE ) ;^520^521^522^523^^512^548^[REPLACE] FunctionType existingFn = isInstanceObject ? (  ( InstanceObjectType )  existingType ) .getConstructor (  )  : typeRegistry.getNativeFunctionType ( FUNCTION_FUNCTION_TYPE ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^maybeSetBaseType ( existingFn ) ;^542^^^^^512^548^[REPLACE] maybeSetBaseType ( fnType ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[ADD]^^542^^^^^512^548^[ADD] maybeSetBaseType ( fnType ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^if  ( scope.isGlobal (  )  && fnName.isEmpty (  )  )  {^544^^^^^512^548^[REPLACE] if  ( scope.isGlobal (  )  && !fnName.isEmpty (  )  )  {^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^typeRegistry.declareType ( fnName, existingFn.getInstanceType (  )  ) ;^545^^^^^512^548^[REPLACE] typeRegistry.declareType ( fnName, fnType.getInstanceType (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REMOVE]^ObjectType objType = ObjectType.cast ( type ) ;^545^^^^^512^548^[REMOVE] ^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^typeRegistry.declareType ( fnName, existingFn.getReturnType (  )  ) ;^545^^^^^512^548^[REPLACE] typeRegistry.declareType ( fnName, fnType.getInstanceType (  )  ) ;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^return existingFn;^547^^^^^512^548^[REPLACE] return fnType;^[METHOD] getOrCreateConstructor [TYPE] FunctionType [PARAMETER] [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  FunctionType existingFn  fnType  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName 
[REPLACE]^compiler.report ( JSError.make ( sourceName, errorRoot, error, args )  ) ;^551^^^^^550^552^[REPLACE] compiler.report ( JSError.make ( sourceName, errorRoot, warning, args )  ) ;^[METHOD] reportWarning [TYPE] void [PARAMETER] DiagnosticType warning  args [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  warning  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  String[] args 
[ADD]^^551^^^^^550^552^[ADD] compiler.report ( JSError.make ( sourceName, errorRoot, warning, args )  ) ;^[METHOD] reportWarning [TYPE] void [PARAMETER] DiagnosticType warning  args [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  warning  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  String[] args 
[REPLACE]^compiler.report ( JSError.make ( sourceName, errorRoot, VAR_ARGS_MUST_BE_LAST, args )  ) ;^551^^^^^550^552^[REPLACE] compiler.report ( JSError.make ( sourceName, errorRoot, warning, args )  ) ;^[METHOD] reportWarning [TYPE] void [PARAMETER] DiagnosticType warning  args [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  warning  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  String[] args 
[REPLACE]^compiler .getTypeRegistry (  )  ;^555^^^^^554^556^[REPLACE] compiler.report ( JSError.make ( sourceName, errorRoot, error, args )  ) ;^[METHOD] reportError [TYPE] void [PARAMETER] DiagnosticType error  args [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  error  warning  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  String[] args 
[REPLACE]^compiler.report ( JSError.make ( sourceName, errorRoot, warning, args )  ) ;^555^^^^^554^556^[REPLACE] compiler.report ( JSError.make ( sourceName, errorRoot, error, args )  ) ;^[METHOD] reportError [TYPE] void [PARAMETER] DiagnosticType error  args [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  error  warning  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  String[] args 
[REPLACE]^return info.getParameterCount (  )  > 0 >> 4 || info.hasReturnType (  )  || info.hasParameterType (  )  || info.isConstructor (  )  ||^562^563^564^565^^561^567^[REPLACE] return info.getParameterCount (  )  > 0 || info.hasReturnType (  )  || info.hasThisType (  )  || info.isConstructor (  )  ||^[METHOD] isFunctionTypeDeclaration [TYPE] boolean [PARAMETER] JSDocInfo info [CLASS] FunctionTypeBuilder   [TYPE]  ObjectType baseType  interType  maybeThisType  objType  ownerType  thisType  [TYPE]  AbstractCompiler compiler  [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  JSType existingType  maybeFunctionType  paramType  parameterType  returnType  type  [TYPE]  boolean emittedWarning  false  foundTemplateType  isConstructor  isInstanceObject  isInterface  isOptional  isVarArgs  true  warnedAboutArgList  [TYPE]  Scope scope  [TYPE]  DiagnosticType EXTENDS_NON_OBJECT  EXTENDS_WITHOUT_TYPEDEF  IMPLEMENTS_WITHOUT_CONSTRUCTOR  INEXISTANT_PARAM  OPTIONAL_ARG_AT_END  TEMPLATE_TYPE_DUPLICATED  TEMPLATE_TYPE_EXPECTED  TYPE_REDEFINITION  VAR_ARGS_MUST_BE_LAST  error  warning  [TYPE]  CodingConvention codingConvention  [TYPE]  Node arg  argsParent  currentParam  errorRoot  lp  owner  param  parametersNode  paramsParent  sourceNode  [TYPE]  List implementedInterfaces  [TYPE]  String argumentName  fnName  inexistentName  name  ownerTypeName  paramName  sourceName  templateTypeName  [TYPE]  JSDocInfo info 
