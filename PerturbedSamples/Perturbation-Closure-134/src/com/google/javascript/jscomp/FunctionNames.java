[REPLACE]^private static final long serialVersionUID ;^51^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  transient AbstractCompiler compiler;^53^^^^^^^[REPLACE] private final transient AbstractCompiler compiler;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  Map<Node, FunctionRecord> functionMap = Maps.newLinkedHashMap (  ) ;^54^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap = Maps.newLinkedHashMap (  ) ;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private static final long serialVersionUID  = null ;^113^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^public  int id;^115^^^^^^^[REPLACE] public final int id;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^public  char  name;^117^^^^^^^[REPLACE] public String name;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  Map<Node, FunctionRecord> functionMap;^127^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private int nextId = 2;^128^^^^^^^[REPLACE] private int nextId = 0;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private static final char DELIMITER ;^150^^^^^^^[REPLACE] private static final char DELIMITER = '.';^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private static  NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^151^152^^^^151^152^[REPLACE] private static final NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^private  Map<Node, FunctionRecord> functionMap;^153^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap;^ [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer  
[REPLACE]^this.compiler =  null;^58^^^^^57^60^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.functionListExtractor =  new AnonymousFunctionNamer ( functionMap )  ;^59^^^^^57^60^[REPLACE] this.functionListExtractor = new FunctionListExtractor ( functionMap ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^59^^^^^57^60^[ADD] this.functionListExtractor = new FunctionListExtractor ( functionMap ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.id =  nextId;^120^^^^^119^123^[REPLACE] this.id = id;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^120^^^^^119^123^[ADD] this.id = id;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.parent =  null;^121^^^^^119^123^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.name =  null;^122^^^^^119^123^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^122^^^^^119^123^[ADD] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.functionMap =  0;^131^^^^^130^132^[REPLACE] this.functionMap = functionMap;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionRecord> functionMap [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.functionMap =  null;^156^^^^^155^157^[REPLACE] this.functionMap = functionMap;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionRecord> functionMap [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node parent  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^NodeTraversal .getEnclosingFunction (  )  ;^64^^^^^63^69^[REPLACE] NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  AnonymousFunctionNamingCallback namingCallback  [TYPE]  Node externs  parent  root  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  AnonymousFunctionNamer namer  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^FunctionRecord record = functionMap.get ( fnNode ) ;^65^^^^^63^69^[REPLACE] AnonymousFunctionNamer namer = new AnonymousFunctionNamer ( functionMap ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  AnonymousFunctionNamingCallback namingCallback  [TYPE]  Node externs  parent  root  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  AnonymousFunctionNamer namer  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^NodeTraversal.traverse ( compiler, parent, namingCallback ) ;^68^^^^^63^69^[REPLACE] NodeTraversal.traverse ( compiler, root, namingCallback ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  AnonymousFunctionNamingCallback namingCallback  [TYPE]  Node externs  parent  root  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  AnonymousFunctionNamer namer  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return functionMap .get ( externs )  ;^72^^^^^71^73^[REPLACE] return functionMap.keySet (  ) ;^[METHOD] getFunctionNodeList [TYPE] Iterable [PARAMETER] [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  parent  root  [TYPE]  char DELIMITER  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^FunctionRecord record = functionMap.get ( fnNode ) ;^76^^^^^75^82^[REPLACE] FunctionRecord record = functionMap.get ( f ) ;^[METHOD] getFunctionId [TYPE] int [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( record == null )  {^77^^^^^75^82^[REPLACE] if  ( record != null )  {^[METHOD] getFunctionId [TYPE] int [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return -1 >> 0;^80^^^^^75^82^[REPLACE] return -1;^[METHOD] getFunctionId [TYPE] int [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return null;^78^^^^^75^82^[REPLACE] return record.id;^[METHOD] getFunctionId [TYPE] int [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return -1 + 3;^80^^^^^75^82^[REPLACE] return -1;^[METHOD] getFunctionId [TYPE] int [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^FunctionRecord record = functionMap.get ( fnNode ) ;^85^^^^^84^110^[REPLACE] FunctionRecord record = functionMap.get ( f ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( record != null )  {^86^^^^^84^110^[REPLACE] if  ( record == null )  {^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return true;^88^^^^^84^110^[REPLACE] return null;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return this;^88^^^^^84^110^[REPLACE] return null;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^Node parent = record.parent;^91^^^^^84^110^[REPLACE] String str = record.name;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( str .replaceFirst ( name , str )   )  {^92^^^^^84^110^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^str = "<anonymous>";^92^93^94^^^84^110^[ADD] if  ( str.isEmpty (  )  )  { str = "<anonymous>"; }^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str  =  str ;^93^^^^^84^110^[REPLACE] str = "<anonymous>";^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^String str = record.name;^96^^^^^84^110^[REPLACE] Node parent = record.parent;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( parent == null )  {^97^^^^^84^110^[REPLACE] if  ( parent != null )  {^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str = getFunctionName ( parent )   &  "::"  &  str;^98^^^^^84^110^[REPLACE] str = getFunctionName ( parent )  + "::" + str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str = getFunctionName ( parent )   |  "::"  |  str;^98^^^^^84^110^[REPLACE] str = getFunctionName ( parent )  + "::" + str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str = str.replaceAll ( "\\.\\.", "." ) ; ;^102^^^^^84^110^[REPLACE] str = str.replaceAll ( "::this\\.", "." ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str = str.replaceAll ( "::this\\.", "." ) ; ;^106^^^^^84^110^[REPLACE] str = str.replaceAll ( "\\.\\.", "." ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^106^^^^^84^110^[ADD] str = str.replaceAll ( "\\.\\.", "." ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^str =  null.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^108^^^^^84^110^[REPLACE] str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^return str;^108^109^^^^84^110^[ADD] str = str.replaceFirst ( "^ ( <anonymous>:: ) *", "" ) ; return str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return null;^109^^^^^84^110^[REPLACE] return str;^[METHOD] getFunctionName [TYPE] String [PARAMETER] Node f [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node externs  f  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^if  ( n.getType (  )   !=  Token.FUNCTION )  {^135^^^^^134^145^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^Node functionNameNode = parent.getFirstChild (  ) ;^136^^^^^134^145^[REPLACE] Node functionNameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^String functionName = root.getString (  ) ;^137^^^^^134^145^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^Node functionNameNode = n.getFirstChild (  ) ;^139^^^^^134^145^[REPLACE] Node enclosingFunction = t.getEnclosingFunction (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^Node functionNameNode = parent .getString (  )  ;^136^^^^^134^145^[REPLACE] Node functionNameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^136^137^^^^134^145^[ADD] Node functionNameNode = n.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^String functionName = root.getType (  ) ;^137^^^^^134^145^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[ADD]^^137^^^^^134^145^[ADD] String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return extractor.NodeNameExtractor ( node ) ;^161^^^^^160^162^[REPLACE] return extractor.getName ( node ) ;^[METHOD] getName [TYPE] String [PARAMETER] Node node [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^FunctionRecord record = functionMap.get ( root ) ;^166^^^^^165^170^[REPLACE] FunctionRecord record = functionMap.get ( fnNode ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^NodeTraversal.traverse ( compiler, root, functionListExtractor ) ;^168^^^^^165^170^[REPLACE] assert ( record.name.isEmpty (  )  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^record.name =  name;^169^^^^^165^170^[REPLACE] record.name = name;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  String functionName  name  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^return lhs +str + rhs;^174^^^^^173^175^[REPLACE] return lhs + DELIMITER + rhs;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionNames FunctionRecord FunctionListExtractor AnonymousFunctionNamer   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^private static final long serialVersionUID  = null ;^113^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionRecord   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^public final  short  id;^115^^^^^^^[REPLACE] public final int id;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionRecord   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^public  Node parent;^116^^^^^^^[REPLACE] public final Node parent;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] FunctionRecord   [TYPE]  AbstractCompiler compiler  [TYPE]  FunctionListExtractor functionListExtractor  [TYPE]  boolean false  true  [TYPE]  Node enclosingFunction  externs  f  fnNode  functionNameNode  n  node  parent  root  [TYPE]  char DELIMITER  [TYPE]  String functionName  lhs  name  rhs  str  [TYPE]  NodeNameExtractor extractor  [TYPE]  Map functionMap  [TYPE]  long serialVersionUID  [TYPE]  int id  nextId 
[REPLACE]^this.id =  null;^120^^^^^119^123^[REPLACE] this.id = id;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionRecord   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int id  [TYPE]  Node parent 
[REPLACE]^this.parent =  null;^121^^^^^119^123^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionRecord   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int id  [TYPE]  Node parent 
[REPLACE]^this.name =  null;^122^^^^^119^123^[REPLACE] this.name = name;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionRecord   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int id  [TYPE]  Node parent 
[REPLACE]^private  Map<Node, FunctionRecord> functionMap;^127^^^^^^^[REPLACE] private final Map<Node, FunctionRecord> functionMap;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionListExtractor   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int id  [TYPE]  Node parent 
[REPLACE]^private int nextId = 2;^128^^^^^^^[REPLACE] private int nextId = 0;^[METHOD] <init> [TYPE] String) [PARAMETER] int id Node parent String name [CLASS] FunctionListExtractor   [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int id  [TYPE]  Node parent 
[REPLACE]^this.functionMap =  true;^131^^^^^130^132^[REPLACE] this.functionMap = functionMap;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionRecord> functionMap [CLASS] FunctionListExtractor   [TYPE]  Map functionMap  [TYPE]  int nextId  [TYPE]  boolean false  true 
[REPLACE]^if  ( n.getType (  )   ||  Token.FUNCTION )  {^135^^^^^134^145^[REPLACE] if  ( n.getType (  )  == Token.FUNCTION )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionListExtractor   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^Node functionNameNode = parent.getFirstChild (  ) ;^136^^^^^134^145^[REPLACE] Node functionNameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionListExtractor   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[ADD]^^136^137^^^^134^145^[ADD] Node functionNameNode = n.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionListExtractor   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^String functionName = parent.getString (  ) ;^137^^^^^134^145^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionListExtractor   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^Node functionNameNode = n.getFirstChild (  ) ;^139^^^^^134^145^[REPLACE] Node enclosingFunction = t.getEnclosingFunction (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FunctionListExtractor   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^private static final char DELIMITER ;^150^^^^^^^[REPLACE] private static final char DELIMITER = '.';^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamer   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^private static  NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^151^152^^^^151^152^[REPLACE] private static final NodeNameExtractor extractor = new NodeNameExtractor ( DELIMITER ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamer   [TYPE]  String functionName  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  NodeTraversal t  [TYPE]  int nextId  [TYPE]  Node enclosingFunction  functionNameNode  n  parent 
[REPLACE]^this.functionMap =  this;^156^^^^^155^157^[REPLACE] this.functionMap = functionMap;^[METHOD] <init> [TYPE] Map) [PARAMETER] FunctionRecord> functionMap [CLASS] AnonymousFunctionNamer   [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor extractor  [TYPE]  boolean false  true  [TYPE]  Map functionMap 
[REPLACE]^return extractor .NodeNameExtractor ( DELIMITER )  ;^161^^^^^160^162^[REPLACE] return extractor.getName ( node ) ;^[METHOD] getName [TYPE] String [PARAMETER] Node node [CLASS] AnonymousFunctionNamer   [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor extractor  [TYPE]  boolean false  true  [TYPE]  Map functionMap  [TYPE]  Node node 
[REPLACE]^FunctionRecord record = functionMap.get ( fnNode ) ;^168^^^^^165^170^[REPLACE] assert ( record.name.isEmpty (  )  ) ;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  boolean false  true  [TYPE]  Node fnNode  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  NodeNameExtractor extractor  [TYPE]  String name  [TYPE]  Map functionMap 
[REPLACE]^record.name =  name;^169^^^^^165^170^[REPLACE] record.name = name;^[METHOD] setFunctionName [TYPE] void [PARAMETER] String name Node fnNode [CLASS] AnonymousFunctionNamer   [TYPE]  boolean false  true  [TYPE]  Node fnNode  [TYPE]  char DELIMITER  [TYPE]  FunctionRecord record  [TYPE]  NodeNameExtractor extractor  [TYPE]  String name  [TYPE]  Map functionMap 
[REPLACE]^return lhs + lhs + lhs;^174^^^^^173^175^[REPLACE] return lhs + DELIMITER + rhs;^[METHOD] getCombinedName [TYPE] String [PARAMETER] String lhs String rhs [CLASS] AnonymousFunctionNamer   [TYPE]  char DELIMITER  [TYPE]  NodeNameExtractor extractor  [TYPE]  String lhs  rhs  [TYPE]  boolean false  true  [TYPE]  Map functionMap 
