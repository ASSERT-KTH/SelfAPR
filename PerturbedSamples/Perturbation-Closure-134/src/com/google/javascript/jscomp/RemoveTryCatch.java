[REPLACE]^private  AbstractCompiler compiler;^35^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] RemoveTryCatch RemoveTryCatchCode  
[REPLACE]^this.compiler =  null;^39^^^^^38^41^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  true 
[ADD]^^39^^^^^38^41^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  true 
[REPLACE]^this.tryNodesContainingReturnStatements  =  this.tryNodesContainingReturnStatements ;^40^^^^^38^41^[REPLACE] this.tryNodesContainingReturnStatements = new HashSet<Node> (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  true 
[ADD]^^40^^^^^38^41^[ADD] this.tryNodesContainingReturnStatements = new HashSet<Node> (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  true 
[REPLACE]^anc = anc.getParent (  )  )  { if  ( anc.getType (  )  == Token.TRY )  {^47^^^^^46^48^[REPLACE] NodeTraversal.traverse ( compiler, root, new RemoveTryCatchCode (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^if  (  info.shouldPreserveTry (  )  )  {^57^^^^^51^111^[REPLACE] if  ( info != null && info.shouldPreserveTry (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( finallyBlock == null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^51^111^[REPLACE] if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( tryBlock.hasOneChild (  )  )  {^73^^^^^51^111^[REPLACE] if  ( catchBlock.hasOneChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^NodeUtil.isStatementBlock ( parent ) ;^74^^^^^51^111^[REPLACE] NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( !NodeUtil.redeclareVarsInsideBranch ( parent )  )  {^83^^^^^51^111^[REPLACE] if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block =  n;^89^^^^^83^90^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^89^^^^^83^90^[ADD] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block ;^84^^^^^51^111^[REPLACE] block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( finallyBlock == null )  {^93^^^^^51^111^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^93^94^95^^^51^111^[ADD] if  ( finallyBlock != null )  { block.addChildAfter ( finallyBlock, tryBlock ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block.replaceChild ( parent, tryBlock ) ;^94^^^^^51^111^[REPLACE] block.addChildAfter ( finallyBlock, tryBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( anc.addChildToFront (  )   ||  Token.TRY )  {^104^^^^^51^111^[REPLACE] if  ( anc.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^51^111^[REPLACE] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^for  ( Node tryBlock = parent;^101^^^^^51^111^[REPLACE] for  ( Node anc = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( anc.getType (  )   ||  Token.TRY )  {^104^^^^^101^108^[REPLACE] if  ( anc.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^104^105^106^107^^101^108^[ADD] if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ; break; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^101^108^[REPLACE] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REMOVE]^if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ;^105^^^^^101^108^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block  =  block ;^84^^^^^51^111^[REPLACE] block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^block =  n;^89^^^^^51^111^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^anc =  tryBlock.getParent (  )  )  {^103^^^^^51^111^[REPLACE] anc = anc.getParent (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[ADD]^^103^104^105^^^51^111^[ADD] anc = anc.getParent (  )  )  { if  ( anc.getType (  )  == Token.TRY )  { tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^56^^^^^51^111^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^Node tryBlock = parent .replaceChild ( n , anc )  ;^61^^^^^51^111^[REPLACE] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^Node catchBlock = finallyBlock.getNext (  ) ;^62^^^^^51^111^[REPLACE] Node catchBlock = tryBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^Node finallyBlock  =  catchBlock.getNext (  )  ;^63^^^^^51^111^[REPLACE] Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^Node tryBlock = n.getFirstChild (  ) ;^82^^^^^51^111^[REPLACE] Node block;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^boolean isInTryBlock = true;^100^^^^^51^111^[REPLACE] boolean isInTryBlock = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^for  ( Node anc = n;^101^^^^^51^111^[REPLACE] for  ( Node anc = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatch RemoveTryCatchCode   [TYPE]  AbstractCompiler compiler  [TYPE]  Set tryNodesContainingReturnStatements  [TYPE]  boolean false  isInTryBlock  true  [TYPE]  JSDocInfo info  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock 
[REPLACE]^if  ( info == null && info.shouldPreserveTry (  )  )  {^57^^^^^51^111^[REPLACE] if  ( info != null && info.shouldPreserveTry (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( finallyBlock == null && tryNodesContainingReturnStatements.contains ( n )  )  {^67^68^^^^51^111^[REPLACE] if  ( finallyBlock != null && tryNodesContainingReturnStatements.contains ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( tryBlock.hasOneChild (  )  )  {^73^^^^^51^111^[REPLACE] if  ( catchBlock.hasOneChild (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^NodeUtil.redeclareVarsInsideBranch ( tryBlock ) ;^74^^^^^51^111^[REPLACE] NodeUtil.redeclareVarsInsideBranch ( catchBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( NodeUtil.isStatementBlock ( parent )  )  {^83^^^^^51^111^[REPLACE] if  ( !NodeUtil.isStatementBlock ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block =  n;^89^^^^^83^90^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block  = null ;^84^^^^^51^111^[REPLACE] block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  (parent == false )  {^93^^^^^51^111^[REPLACE] if  ( finallyBlock != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^block.addChildAfter ( finallyBlock, tryBlock ) ;^93^94^95^^^51^111^[ADD] if  ( finallyBlock != null )  { block.addChildAfter ( finallyBlock, tryBlock ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block .addChildToFront ( tryBlock )  ;^94^^^^^51^111^[REPLACE] block.addChildAfter ( finallyBlock, tryBlock ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( anc.getType (  )   &&  Token.TRY )  {^104^^^^^51^111^[REPLACE] if  ( anc.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^tryNodesContainingReturnStatements.add ( n ) ;^105^^^^^51^111^[REPLACE] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^for  ( Node anc = n;^101^^^^^51^111^[REPLACE] for  ( Node anc = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^if  ( anc.getType (  )   !=  Token.TRY )  {^104^^^^^101^108^[REPLACE] if  ( anc.getType (  )  == Token.TRY )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^tryNodesContainingReturnStatements.add ( tryBlock ) ;^105^^^^^101^108^[REPLACE] tryNodesContainingReturnStatements.add ( anc ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block ;^84^^^^^51^111^[REPLACE] block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[ADD]^^84^^^^^51^111^[ADD] block = new Node ( Token.BLOCK ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^block =  n;^89^^^^^51^111^[REPLACE] block = parent;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^anc =  tryBlock.getParent (  )  )  {^103^^^^^51^111^[REPLACE] anc = anc.getParent (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^JSDocInfo info = parent.getJSDocInfo (  ) ;^56^^^^^51^111^[REPLACE] JSDocInfo info = n.getJSDocInfo (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node tryBlock = parent.getFirstChild (  ) ;^61^^^^^51^111^[REPLACE] Node tryBlock = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node catchBlock = tryBlock.getParent (  ) ;^62^^^^^51^111^[REPLACE] Node catchBlock = tryBlock.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node finallyBlock  =  catchBlock.getNext (  )  ;^63^^^^^51^111^[REPLACE] Node finallyBlock = catchBlock != null ? catchBlock.getNext (  )  : null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^Node tryBlock = n.getFirstChild (  ) ;^82^^^^^51^111^[REPLACE] Node block;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
[REPLACE]^boolean isInTryBlock = true;^100^^^^^51^111^[REPLACE] boolean isInTryBlock = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RemoveTryCatchCode   [TYPE]  boolean false  isInTryBlock  true  [TYPE]  NodeTraversal t  [TYPE]  Node anc  block  catchBlock  finallyBlock  n  parent  tryBlock  [TYPE]  JSDocInfo info 
