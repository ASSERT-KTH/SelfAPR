[REPLACE]^private Deque<Renamer> nameStack ;^42^^^^^^^[REPLACE] private Deque<Renamer> nameStack = new ArrayDeque<Renamer> (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private  AbstractCompiler compiler;^231^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private Map<Var, String> nameMap  = null ;^234^^^^^^^[REPLACE] private Map<Var, String> nameMap = Maps.newHashMap (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private  Multiset<String> nameUsage;^299^^^^^^^[REPLACE] private final Multiset<String> nameUsage;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private final Map<String, String> declarations  = null ;^300^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private  boolean global;^301^^^^^^^[REPLACE] private final boolean global;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private final Map<String, String> declarations  = null ;^380^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private  Supplier<String> uniqueIdSupplier;^381^^^^^^^[REPLACE] private final Supplier<String> uniqueIdSupplier;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^private final  int  namePrefix;^382^^^^^^^[REPLACE] private final String namePrefix;^ [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer  
[REPLACE]^this.rootRenamer =  new ContextualRenameInverter ( compiler )  ;^46^^^^^45^47^[REPLACE] this.rootRenamer = new ContextualRenamer (  ) ;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique() [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^46^^^^^45^47^[ADD] this.rootRenamer = new ContextualRenamer (  ) ;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique() [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.rootRenamer =  rootRenamer;^50^^^^^49^51^[REPLACE] this.rootRenamer = renamer;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$Renamer) [PARAMETER] Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^50^^^^^49^51^[ADD] this.rootRenamer = renamer;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$Renamer) [PARAMETER] Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.compiler =  null;^237^^^^^236^238^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.global = false;^304^^^^^303^306^[REPLACE] this.global = true;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$ContextualRenamer() [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^nameUsage = HashMultiset.create (  ) ;^304^305^^^^303^306^[ADD] this.global = true; nameUsage = HashMultiset.create (  ) ;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$ContextualRenamer() [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^nameUsage ;^305^^^^^303^306^[REPLACE] nameUsage = HashMultiset.create (  ) ;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$ContextualRenamer() [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.global = true; ;^312^^^^^311^314^[REPLACE] this.global = false;^[METHOD] <init> [TYPE] Multiset) [PARAMETER] String> nameUsage [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^312^313^^^^311^314^[ADD] this.global = false; this.nameUsage = nameUsage;^[METHOD] <init> [TYPE] Multiset) [PARAMETER] String> nameUsage [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.nameUsage =  null;^313^^^^^311^314^[REPLACE] this.nameUsage = nameUsage;^[METHOD] <init> [TYPE] Multiset) [PARAMETER] String> nameUsage [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.uniqueIdSupplier =  0;^389^^^^^385^392^[REPLACE] this.uniqueIdSupplier = uniqueIdSupplier;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^389^^^^^385^392^[ADD] this.uniqueIdSupplier = uniqueIdSupplier;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.namePrefix =  null;^390^^^^^385^392^[REPLACE] this.namePrefix = namePrefix;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.removeConstness =  true;^391^^^^^385^392^[REPLACE] this.removeConstness = removeConstness;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return  new ContextualRenamer (  )  ;^54^^^^^53^55^[REPLACE] return new ContextualRenameInverter ( compiler ) ;^[METHOD] getContextualRenameInverter [TYPE] CompilerPass [PARAMETER] AbstractCompiler compiler [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node declarationRoot = t.getScope (  ) ;^59^^^^^58^89^[REPLACE] Node declarationRoot = t.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer = nameStack.peek (  ) ;^60^^^^^58^89^[REPLACE] Renamer renamer;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( name.isEmpty (  )  )  {^61^^^^^58^89^[REPLACE] if  ( nameStack.isEmpty (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer  =  renamer ;^70^^^^^61^71^[REPLACE] renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^70^71^^^^61^71^[ADD] renamer = nameStack.peek (  ) .forChildScope (  ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer  = null ;^68^^^^^58^89^[REPLACE] renamer = rootRenamer;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer ;^68^^^^^58^89^[REPLACE] renamer = rootRenamer;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer  =  renamer ;^70^^^^^58^89^[REPLACE] renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^70^71^^^^58^89^[ADD] renamer = nameStack.peek (  ) .forChildScope (  ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( declarationRoot.getType (  )   ||  Token.FUNCTION )  {^73^^^^^58^89^[REPLACE] if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^73^74^75^76^77^58^89^[ADD] if  ( declarationRoot.getType (  )  == Token.FUNCTION )  {  Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ; for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { String name = c.getString (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^findDeclaredNames ( declarationRoot, true, renamer ) ;^86^^^^^73^87^[REPLACE] findDeclaredNames ( declarationRoot, null, renamer ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = fnParams.getFirstChild (  ) ; c == false; c = c.getNext (  )  )  {^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String name = functionBody.getString (  ) ;^77^^^^^58^89^[REPLACE] String name = c.getString (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { String name = c.getString (  ) ; ;^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node fnParams = declarationRoot.getFirstChild (  ) .getVar (  ) ;^75^^^^^58^89^[REPLACE] Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = functionBody.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String name = functionBody.setString (  ) ;^77^^^^^58^89^[REPLACE] String name = c.getString (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node functionBody = functionBody.getFirstChild (  ) ;^82^^^^^58^89^[REPLACE] Node functionBody = declarationRoot.getLastChild (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = fnParams.getLastChild (  ) ; c ==functionBody; c = c.getNext (  )  )  {^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^76^77^78^79^^58^89^[ADD] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { String name = c.getString (  ) ; renamer.addDeclaredName ( name ) ; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node fnParams = functionBody.getFirstChild (  ) .getNext (  ) ;^75^^^^^58^89^[REPLACE] Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = functionBody.getLastChild (  ) ; c != null; c = c.getNext (  )  )  {^76^^^^^58^89^[REPLACE] for  ( Node c = fnParams.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node functionBody = functionBody.getLastChild (  ) ;^82^^^^^58^89^[REPLACE] Node functionBody = declarationRoot.getLastChild (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^nameStack.push ( rootRenamer ) ;^88^^^^^58^89^[REPLACE] nameStack.push ( renamer ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node c  declarationRoot  fnParams  functionBody  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( id != 0 )  {^93^^^^^92^96^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^nameStack.pop (  ) ;^93^94^95^^^92^96^[ADD] if  ( !t.inGlobalScope (  )  )  { nameStack.pop (  ) ; }^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^nameStack.peek (  ) ;^94^^^^^92^96^[REPLACE] nameStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( name == this && !name.isEmpty (  )  && parent != this && !NodeUtil.isFunctionDeclaration ( n )  )  {^110^111^^^^99^132^[REPLACE] if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^110^111^112^113^^99^132^[ADD] if  ( name != null && !name.isEmpty (  )  && parent != null && !NodeUtil.isFunctionDeclaration ( n )  )  { renamer.addDeclaredName ( name ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer.addDeclaredName ( namePrefix ) ;^112^^^^^110^113^[REPLACE] renamer.addDeclaredName ( name ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer = nameStack.peek (  ) .addDeclaredName (  ) ;^106^^^^^99^132^[REPLACE] Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String name = n.getLastChild (  ) .getString (  ) ;^109^^^^^99^132^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^109^^^^^99^132^[ADD] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer = nameStack.pop (  ) .forChildScope (  ) ;^121^^^^^99^132^[REPLACE] Renamer renamer = nameStack.peek (  ) .forChildScope (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String parentame = n.getFirstChild (  ) .getVar (  ) ;^123^^^^^99^132^[REPLACE] String name = n.getFirstChild (  ) .getString (  ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return false;^131^^^^^99^132^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( newName == false )  {^139^^^^^135^160^[REPLACE] if  ( newName != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( rootRenamer.stripConstIfReplaced (  )  )  {^141^^^^^135^160^[REPLACE] if  ( renamer.stripConstIfReplaced (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^n .getType (  )  ;^143^^^^^135^160^[REPLACE] n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REMOVE]^t.getCompiler (  ) .reportCodeChange (  ) ;^143^^^^^135^160^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer = nameStack .push ( false )  ;^140^^^^^135^160^[REPLACE] Renamer renamer = nameStack.peek (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^140^^^^^135^160^[ADD] Renamer renamer = nameStack.peek (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^n.setString ( Node.IS_CONSTANT_NAME ) ;^143^^^^^135^160^[REPLACE] n.removeProp ( Node.IS_CONSTANT_NAME ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String parentewName = getReplacementName ( n.setString (  )  ) ;^138^^^^^135^160^[REPLACE] String newName = getReplacementName ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer = nameStack.pop (  ) ;^140^^^^^135^160^[REPLACE] Renamer renamer = nameStack.peek (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( newName == null )  {^169^^^^^166^174^[REPLACE] if  ( newName != null )  {^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return oldName;^170^^^^^166^174^[REPLACE] return newName;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Renamer renamer;^167^^^^^166^174^[REPLACE] for  ( Renamer names : nameStack )  {^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = names.getReplacementName ( newName ) ;^168^^^^^166^174^[REPLACE] String newName = names.getReplacementName ( oldName ) ;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return true;^173^^^^^166^174^[REPLACE] return null;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parent != nameNodeull ) {^183^184^185^^^180^197^[REPLACE] if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^183^184^185^186^187^180^197^[ADD] if  ( parent == null || parent.getType (  )  != Token.FUNCTION || n == parent.getFirstChild (  )  )  { if  ( NodeUtil.isVarDeclaration ( n )  )  { renamer.addDeclaredName ( n.getString (  )  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( id != 0 )  {^186^^^^^180^197^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^} else if  ( NodeUtil.isFunctionDeclaration ( parent )  )  {^188^^^^^180^197^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentameNode = n.getFirstChild (  ) ;^189^^^^^180^197^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^189^^^^^180^197^[ADD] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^189^190^^^^180^197^[ADD] Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer.addDeclaredName ( nameNode.getString (  )  ) ;^187^^^^^180^197^[REPLACE] renamer.addDeclaredName ( n.getString (  )  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^renamer.addDeclaredName ( n.setString (  )  ) ;^187^^^^^180^197^[REPLACE] renamer.addDeclaredName ( n.getString (  )  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^}  else {^188^^^^^180^197^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^}   Node nameNode = n.getFirstChild (  ) ;renamer.addDeclaredName ( nameNode.getString (  )  ) ;^188^189^190^191^^180^197^[ADD] else if  ( NodeUtil.isFunctionDeclaration ( n )  )  { Node nameNode = n.getFirstChild (  ) ; renamer.addDeclaredName ( nameNode.getString (  )  ) ; }^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = n.getLastChild (  ) ; c == this; c = c.getNext (  )  )  {^193^^^^^180^197^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^findDeclaredNames ( c, parent, renamer ) ;^194^^^^^180^197^[REPLACE] findDeclaredNames ( c, n, renamer ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c =  n.getFirstChild (  ) ; null !^193^^^^^180^197^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = parent.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( NodeUtil.isVarDeclaration ( parent )  )  {^186^^^^^180^197^[REPLACE] if  ( NodeUtil.isVarDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^}  if  ( NodeUtil.isVarDeclaration ( n )  )  {^188^^^^^180^197^[REPLACE] } else if  ( NodeUtil.isFunctionDeclaration ( n )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentameNode = n.getLastChild (  ) ;^189^^^^^180^197^[REPLACE] Node nameNode = n.getFirstChild (  ) ;^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REMOVE]^Node fnParams = declarationRoot.getFirstChild (  ) .getNext (  ) ;^187^^^^^180^197^[REMOVE] ^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = parent.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^193^^^^^180^197^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^193^194^195^^^180^197^[ADD] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { findDeclaredNames ( c, n, renamer ) ; }^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^for  ( Node c = parent .getLastChild (  )  ; c != null; c = c.getNext (  )  )  {^193^^^^^180^197^[REPLACE] for  ( Node c = n.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] findDeclaredNames [TYPE] void [PARAMETER] Node n Node parent Renamer renamer [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node c  n  nameNode  parent  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^NodeTraversal.traverse ( compiler, externs, this ) ;^241^^^^^240^242^[REPLACE] NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Node externs  js  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( node.getType (  )   &&  Token.NAME )  {^246^^^^^245^284^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( oldName.indexOf ( "$$" )   ==  -1 )  {^248^^^^^245^284^[REPLACE] if  ( oldName.indexOf ( "$$" )  != -1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^Scope scope = t.getScope (  ) ;Var var = t.getScope (  ) .getVar ( oldName ) ;return;^248^249^250^251^252^245^284^[ADD] if  ( oldName.indexOf ( "$$" )  != -1 )  { Scope scope = t.getScope (  ) ; Var var = t.getScope (  ) .getVar ( oldName ) ; if  ( var == null || var.isGlobal (  )  )  { return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^return;^251^252^253^^^245^284^[ADD] if  ( var == null || var.isGlobal (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return name;^252^^^^^245^284^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( id != 0 )  {^255^^^^^245^284^[REPLACE] if  ( nameMap.containsKey ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^255^256^257^258^^245^284^[ADD] if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ; } else { String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( newName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REMOVE]^t.getCompiler (  ) .reportCodeChange (  ) ;^273^^^^^263^278^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  null;^265^^^^^263^278^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  namePrefix;^265^^^^^255^281^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^255^281^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node .getString (  )  ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , name )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^263^264^265^266^267^245^284^[ADD] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  { newName = oldName; } else { var.scope.declare ( newName, var.nameNode, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^271^272^273^274^^263^278^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  )  .getString (  )  ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^273^^^^^263^278^[ADD] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^270^^^^^263^278^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  namePrefix;^265^^^^^263^278^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^273^^^^^271^274^[ADD] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  namePrefix;^265^^^^^245^284^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Scope scope = t.getScopeRoot (  ) ;^249^^^^^245^284^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^249^^^^^245^284^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Var var = t.getScopeRoot (  ) .getVar ( oldName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 0 - 2, oldName .indexOf ( namePrefix )   ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  (  var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^265^^^^^263^278^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^255^281^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^node.setString ( nameMap.containsKey ( var )  ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  ) {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  ) .getVar ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String oldName = parentNode.setString (  ) ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^250^^^^^245^284^[ADD] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = newName.substring ( 0 + 3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^270^^^^^245^284^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^263^264^265^266^267^255^281^[ADD] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  { newName = oldName; } else { var.scope.declare ( newName, var.nameNode, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  )  .getString (  )  ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  null;^265^^^^^255^281^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^265^^^^^255^281^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = newName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^var.getNameNode (  ) .getVar ( newName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^Var var = t.getScope (  ) .setString ( oldName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^node.setString ( nameMap.get ( var )  ) ;String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^255^256^257^258^^245^284^[ADD] if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ; } else { String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 2, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^270^^^^^255^281^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^256^^^^^245^284^[ADD] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^newName =  null;^265^^^^^245^284^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String oldName = parentNode.getString (  ) ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^String newName = oldName.substring ( 0 - 1, oldName.indexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return  new ContextualRenameInverter ( compiler )  ;^321^^^^^320^322^[REPLACE] return new ContextualRenamer ( nameUsage ) ;^[METHOD] forChildScope [TYPE] MakeDeclaredNamesUnique$Renamer [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( id != 0 )  {^329^^^^^328^342^[REPLACE] if  ( global )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^if  ( declarations.containsKey ( name )  )  {^333^^^^^328^342^[REPLACE] if  ( !declarations.containsKey ( name )  )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[ADD]^int id = incrementNameCount ( name ) ;String newName = null;newName = getUniqueName ( name, id ) ;^333^334^335^336^337^328^342^[ADD] if  ( !declarations.containsKey ( name )  )  { int id = incrementNameCount ( name ) ; String newName = null; if  ( id != 0 )  { newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^if  ( id  ==  0 )  {^336^^^^^328^342^[REPLACE] if  ( id != 0 )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^newName =  getUniqueName ( oldName, id ) ;^337^^^^^328^342^[REPLACE] newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[ADD]^^337^^^^^328^342^[ADD] newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^int id = incrementNameCount ( oldName ) ;^334^^^^^328^342^[REPLACE] int id = incrementNameCount ( name ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[ADD]^String newName = null;^334^335^^^^328^342^[ADD] int id = incrementNameCount ( name ) ; String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^String newName = true;^335^^^^^328^342^[REPLACE] String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[ADD]^^335^^^^^328^342^[ADD] String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[ADD]^newName = getUniqueName ( name, id ) ;^336^337^338^^^328^342^[ADD] if  ( id != 0 )  { newName = getUniqueName ( name, id ) ; }^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^String newName = this;^335^^^^^328^342^[REPLACE] String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^reserveName ( oldName ) ;^330^^^^^328^342^[REPLACE] reserveName ( name ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^newName =  getUniqueName ( null, id ) ;^337^^^^^328^342^[REPLACE] newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^String newName = names.getReplacementName ( oldName ) ;^334^^^^^328^342^[REPLACE] int id = incrementNameCount ( name ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^return declarations.containsKey ( oldName ) ;^346^^^^^345^347^[REPLACE] return declarations.get ( oldName ) ;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return name  ;^353^^^^^352^354^[REPLACE] return name + "$$" + id;^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name int id [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap  [TYPE]  int id 
[REPLACE]^nameUsage.setCount ( name, 2, 1 ) ;^357^^^^^356^358^[REPLACE] nameUsage.setCount ( name, 0, 1 ) ;^[METHOD] reserveName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return nameUsage.add ( name, 1 / 0 ) ;^361^^^^^360^362^[REPLACE] return nameUsage.add ( name, 1 ) ;^[METHOD] incrementNameCount [TYPE] int [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return true;^366^^^^^365^367^[REPLACE] return false;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( !declarations.containsKey ( oldName )  )  {^396^^^^^395^399^[REPLACE] if  ( !declarations.containsKey ( name )  )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^declarations.put ( oldName, getUniqueName ( name )  ) ;^397^^^^^395^399^[REPLACE] declarations.put ( name, getUniqueName ( name )  ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[ADD]^^397^^^^^395^399^[ADD] declarations.put ( name, getUniqueName ( name )  ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^if  ( oldName.isEmpty (  )  )  {^402^^^^^401^406^[REPLACE] if  ( name.isEmpty (  )  )  {^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return oldName;^403^^^^^401^406^[REPLACE] return name;^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return namePrefix + name + "_" + uniqueIdSupplier .put ( null , name )  ;^405^^^^^401^406^[REPLACE] return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return declarations.containsKey ( oldName ) ;^410^^^^^409^411^[REPLACE] return declarations.get ( oldName ) ;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return new ContextualRenameInverter ( compiler ) ;^415^^^^^414^416^[REPLACE] return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[METHOD] forChildScope [TYPE] MakeDeclaredNamesUnique$Renamer [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^420^^^^^419^421^[REPLACE] return removeConstness;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^private  AbstractCompiler compiler;^231^^^^^^^[REPLACE] private final AbstractCompiler compiler;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] ContextualRenameInverter   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^private Map<Var, String> nameMap  = null ;^234^^^^^^^[REPLACE] private Map<Var, String> nameMap = Maps.newHashMap (  ) ;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] ContextualRenameInverter   [TYPE]  Renamer names  renamer  rootRenamer  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  global  removeConstness  true  [TYPE]  Multiset nameUsage  [TYPE]  Supplier uniqueIdSupplier  [TYPE]  String name  namePrefix  newName  oldName  [TYPE]  Deque nameStack  [TYPE]  Map declarations  nameMap 
[REPLACE]^this.compiler =  null;^237^^^^^236^238^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] ContextualRenameInverter   [TYPE]  Map nameMap  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true 
[REPLACE]^NodeTraversal.traverse ( compiler, externs, this ) ;^241^^^^^240^242^[REPLACE] NodeTraversal.traverse ( compiler, js, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node js [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Map nameMap  [TYPE]  Node externs  js 
[REPLACE]^if  ( node.getType (  )   !=  Token.NAME )  {^246^^^^^245^284^[REPLACE] if  ( node.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( oldName.indexOf ( "$$" )   ==  -1 )  {^248^^^^^245^284^[REPLACE] if  ( oldName.indexOf ( "$$" )  != -1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var != null ) {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^return;^251^252^253^^^245^284^[ADD] if  ( var == null || var.isGlobal (  )  )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^255^^^^^245^284^[REPLACE] if  ( nameMap.containsKey ( var )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( newName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^newName =  null;^265^^^^^263^278^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^newName =  null;^265^^^^^255^281^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = newName.substring ( 1, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^255^281^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^node.setString ( nameMap.containsKey ( var )  ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( NAME )  )  {     String oldName = node.getString (  ) ;     if  (  ( oldName.indexOf ( "$$" )  )  !=  ( -1 )  )  {         Scope scope = t.getScope (  ) ;         Var var = t.getScope (  ) .getVar ( oldName ) ;         if  (  ( var == null )  ||  ( var.isGlobal (  )  )  )  {             return ;         }         if  ( nameMap.containsKey ( var )  )  {             node.setString ( nameMap.get ( var )  ) ;         }else {             String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;             if  (  ( isDeclared ( newName, false )  )  ||  ( ! ( isJSIdentifier ( newName )  )  )  )  {                 newName = oldName;             }else {                 declare ( newName, var.nameNode, null, null ) ;                 Node parentNode = var.getParentNode (  ) ;                 if  (  (  ( parentNode.getType (  )  )  ==  ( FUNCTION )  )  &&  ( parentNode ==  ( getRootNode (  )  )  )  )  {                     var.getNameNode (  ) .setString ( newName ) ;                 }                 node.setString ( newName ) ;                 compiler.reportCodeChange (  ) ;             }             nameMap.put ( var, newName ) ;         }     } }^263^^^^^245^284^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^271^272^273^274^^263^278^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var .getParentNode (  )  .setString ( newName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  parentNode ==       )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^273^^^^^271^274^[ADD] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^newName =  null;^265^^^^^245^284^[REPLACE] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^265^^^^^245^284^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( oldName ) ;^249^^^^^245^284^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  )  .setString (  )  ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = newName.substring ( 4, oldName.indexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^270^^^^^245^284^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var != null || var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^273^^^^^263^278^[ADD] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( newName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = newName.substring ( 0L, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , oldName )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^node.setString ( nameMap .put ( var , newName )   ) ;^256^^^^^245^284^[REPLACE] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^256^^^^^245^284^[ADD] node.setString ( nameMap.get ( var )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION ) {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var .getNameNode (  )  ;^270^^^^^263^278^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^265^^^^^263^278^[ADD] newName = oldName;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^271^272^273^274^^245^284^[ADD] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  { var.getNameNode (  ) .setString ( newName ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getParentNode (  ) .setString ( oldName ) ;^273^^^^^271^274^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String oldName = parentNode.getString (  ) ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Scope scope = t .traverse ( compiler , parentNode , false )  ;^249^^^^^245^284^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  ) .getVar ( newName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName.substring ( 0 - 3, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Node parentNode = var.getNameNode (  ) ;^270^^^^^245^284^[REPLACE] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  var.isGlobal (  )  )  {^251^^^^^245^284^[REPLACE] if  ( var == null || var.isGlobal (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, false )  ) {^263^264^^^^255^281^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^263^264^265^266^267^255^281^[ADD] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  { newName = oldName; } else { var.scope.declare ( newName, var.nameNode, null, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  )  .getString (  )  ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.getType (  )  == Token.FUNCTION || parentNode == var.scope .declare ( oldName , null , 1 )   )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REMOVE]^if  ( nameMap.containsKey ( var )  )  { node.setString ( nameMap.get ( var )  ) ;^273^^^^^271^274^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^270^^^^^255^281^[ADD] Node parentNode = var.getParentNode (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( var.scope.isDeclared ( newName, true )  || TokenStream.isJSIdentifier ( newName )  )  {^263^264^^^^245^284^[REPLACE] if  ( var.scope.isDeclared ( newName, false )  || !TokenStream.isJSIdentifier ( newName )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parent.getType (  )  == Token.FUNCTION || parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^263^278^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^var.getNameNode (  ) .getVar ( newName ) ;^273^^^^^263^278^[REPLACE] var.getNameNode (  ) .setString ( newName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  ( parentNode.setString (  )  == Token.FUNCTION ) {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = newName.substring ( 0 + 0, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^255^281^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName.substring ( 4, oldName.lastIndexOf ( "$$" )  ) ;^258^^^^^255^281^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^if  (  parentNode == var.scope.getRootNode (  )  )  {^271^272^^^^245^284^[REPLACE] if  ( parentNode.getType (  )  == Token.FUNCTION && parentNode == var.scope.getRootNode (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String oldName = node .setString (  )  ;^247^^^^^245^284^[REPLACE] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^247^^^^^245^284^[ADD] String oldName = node.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^Var var = t.getScope (  ) .setString ( oldName ) ;^250^^^^^245^284^[REPLACE] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[ADD]^^250^^^^^245^284^[ADD] Var var = t.getScope (  ) .getVar ( oldName ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^String newName = oldName .lastIndexOf ( newName )  ;^258^^^^^245^284^[REPLACE] String newName = oldName.substring ( 0, oldName.lastIndexOf ( "$$" )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenameInverter   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^private  Multiset<String> nameUsage;^299^^^^^^^[REPLACE] private final Multiset<String> nameUsage;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^private  Map<String, String> declarations = Maps.newHashMap (  ) ;^300^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node node Node parent [CLASS] ContextualRenamer   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node node  parent  parentNode  [TYPE]  String newName  oldName  [TYPE]  Map nameMap 
[REPLACE]^this.global = false;^304^^^^^303^306^[REPLACE] this.global = true;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$ContextualRenamer() [PARAMETER] [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[ADD]^^304^^^^^303^306^[ADD] this.global = true;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$ContextualRenamer() [PARAMETER] [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^nameUsage ;^305^^^^^303^306^[REPLACE] nameUsage = HashMultiset.create (  ) ;^[METHOD] <init> [TYPE] MakeDeclaredNamesUnique$ContextualRenamer() [PARAMETER] [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^this.global = true;^312^^^^^311^314^[REPLACE] this.global = false;^[METHOD] <init> [TYPE] Multiset) [PARAMETER] String> nameUsage [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^this.nameUsage =  true;^313^^^^^311^314^[REPLACE] this.nameUsage = nameUsage;^[METHOD] <init> [TYPE] Multiset) [PARAMETER] String> nameUsage [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^return name + "$$" + id;^321^^^^^320^322^[REPLACE] return new ContextualRenamer ( nameUsage ) ;^[METHOD] forChildScope [TYPE] MakeDeclaredNamesUnique$Renamer [PARAMETER] [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^if  ( id != 0 )  {^329^^^^^328^342^[REPLACE] if  ( global )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^if  ( declarations.containsKey ( name )  )  {^333^^^^^328^342^[REPLACE] if  ( !declarations.containsKey ( name )  )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[ADD]^int id = incrementNameCount ( name ) ;String newName = null;newName = getUniqueName ( name, id ) ;^333^334^335^336^337^328^342^[ADD] if  ( !declarations.containsKey ( name )  )  { int id = incrementNameCount ( name ) ; String newName = null; if  ( id != 0 )  { newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^if  ( id  ==  0L )  {^336^^^^^328^342^[REPLACE] if  ( id != 0 )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^newName =  getUniqueName ( null, id ) ;^337^^^^^328^342^[REPLACE] newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^int id = incrementNameCount ( newName ) ;^334^^^^^328^342^[REPLACE] int id = incrementNameCount ( name ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^String newName = false;^335^^^^^328^342^[REPLACE] String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^if  ( id  ==  1 )  {^336^^^^^328^342^[REPLACE] if  ( id != 0 )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^reserveName ( newName ) ;^330^^^^^328^342^[REPLACE] reserveName ( name ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REMOVE]^if  ( global )  {     reserveName ( name ) ; }else {     if  ( ! ( declarations.containsKey ( name )  )  )  {         int id = incrementNameCount ( name ) ;         String newName = null;         if  ( id != 0 )  {             newName = getUniqueName ( name, id ) ;         }         declarations.put ( name, newName ) ;     } }^333^^^^^328^342^[REMOVE] ^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[ADD]^^337^^^^^328^342^[ADD] newName = getUniqueName ( name, id ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[ADD]^^334^335^^^^328^342^[ADD] int id = incrementNameCount ( name ) ; String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^String newName = this;^335^^^^^328^342^[REPLACE] String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^if  ( id  ==  0 )  {^336^^^^^328^342^[REPLACE] if  ( id != 0 )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^String newName = true;^335^^^^^328^342^[REPLACE] String newName = null;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  newName  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^return declarations.containsKey ( oldName ) ;^346^^^^^345^347^[REPLACE] return declarations.get ( oldName ) ;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String oldName  [TYPE]  Map declarations 
[REPLACE]^return false;^353^^^^^352^354^[REPLACE] return name + "$$" + id;^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name int id [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  [TYPE]  Map declarations  [TYPE]  int id 
[REPLACE]^nameUsage.setCount ( name, 4, 1 ) ;^357^^^^^356^358^[REPLACE] nameUsage.setCount ( name, 0, 1 ) ;^[METHOD] reserveName [TYPE] void [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  [TYPE]  Map declarations 
[REPLACE]^return nameUsage.add ( name, 1 * 1 ) ;^361^^^^^360^362^[REPLACE] return nameUsage.add ( name, 1 ) ;^[METHOD] incrementNameCount [TYPE] int [PARAMETER] String name [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  String name  [TYPE]  Map declarations 
[REPLACE]^return true;^366^^^^^365^367^[REPLACE] return false;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] ContextualRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^private final Map<String, String> declarations  = null ;^380^^^^^^^[REPLACE] private final Map<String, String> declarations = Maps.newHashMap (  ) ;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^private  Supplier<String> uniqueIdSupplier;^381^^^^^^^[REPLACE] private final Supplier<String> uniqueIdSupplier;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^private  String namePrefix;^382^^^^^^^[REPLACE] private final String namePrefix;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^private  boolean removeConstness;^383^^^^^^^[REPLACE] private final boolean removeConstness;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Multiset nameUsage  [TYPE]  boolean false  global  true  [TYPE]  Map declarations 
[REPLACE]^this.uniqueIdSupplier =  this;^389^^^^^385^392^[REPLACE] this.uniqueIdSupplier = uniqueIdSupplier;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String namePrefix  [TYPE]  Map declarations 
[REPLACE]^this.namePrefix =  null;^390^^^^^385^392^[REPLACE] this.namePrefix = namePrefix;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String namePrefix  [TYPE]  Map declarations 
[ADD]^^390^391^^^^385^392^[ADD] this.namePrefix = namePrefix; this.removeConstness = removeConstness;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String namePrefix  [TYPE]  Map declarations 
[REPLACE]^this.removeConstness =  true;^391^^^^^385^392^[REPLACE] this.removeConstness = removeConstness;^[METHOD] <init> [TYPE] String,boolean) [PARAMETER] String> uniqueIdSupplier String namePrefix boolean removeConstness [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String namePrefix  [TYPE]  Map declarations 
[REPLACE]^if  ( !declarations.get ( namePrefix )  )  {^396^^^^^395^399^[REPLACE] if  ( !declarations.containsKey ( name )  )  {^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  [TYPE]  Map declarations 
[REPLACE]^declarations.put ( namePrefix, getUniqueName ( name )  ) ;^397^^^^^395^399^[REPLACE] declarations.put ( name, getUniqueName ( name )  ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  [TYPE]  Map declarations 
[ADD]^^397^^^^^395^399^[ADD] declarations.put ( name, getUniqueName ( name )  ) ;^[METHOD] addDeclaredName [TYPE] void [PARAMETER] String name [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  [TYPE]  Map declarations 
[REPLACE]^if  ( namePrefix.isEmpty (  )  )  {^402^^^^^401^406^[REPLACE] if  ( name.isEmpty (  )  )  {^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  [TYPE]  Map declarations 
[REPLACE]^return namePrefix;^403^^^^^401^406^[REPLACE] return name;^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  [TYPE]  Map declarations 
[REPLACE]^return namePrefix + name + "_" +namePrefix (  ) ;^405^^^^^401^406^[REPLACE] return namePrefix + name + "_" + uniqueIdSupplier.get (  ) ;^[METHOD] getUniqueName [TYPE] String [PARAMETER] String name [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  [TYPE]  Map declarations 
[REPLACE]^return declarations.get ( namePrefix ) ;^410^^^^^409^411^[REPLACE] return declarations.get ( oldName ) ;^[METHOD] getReplacementName [TYPE] String [PARAMETER] String oldName [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  oldName  [TYPE]  Map declarations 
[REPLACE]^return removeConstness;^415^^^^^414^416^[REPLACE] return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^[METHOD] forChildScope [TYPE] MakeDeclaredNamesUnique$Renamer [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  oldName  [TYPE]  Map declarations 
[REPLACE]^return new InlineRenamer ( uniqueIdSupplier, namePrefix, removeConstness ) ;^420^^^^^419^421^[REPLACE] return removeConstness;^[METHOD] stripConstIfReplaced [TYPE] boolean [PARAMETER] [CLASS] InlineRenamer   [TYPE]  Supplier uniqueIdSupplier  [TYPE]  boolean false  removeConstness  true  [TYPE]  String name  namePrefix  oldName  [TYPE]  Map declarations 
