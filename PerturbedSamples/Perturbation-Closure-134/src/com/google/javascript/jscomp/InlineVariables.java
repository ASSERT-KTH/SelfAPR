[REPLACE]^private  AbstractCompiler compiler;^56^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior  
[REPLACE]^private  Mode mode;^66^^^^^^^[REPLACE] private final Mode mode;^ [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior  
[REPLACE]^private  boolean inlineAllStrings;^69^^^^^^^[REPLACE] private final boolean inlineAllStrings;^ [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior  
[REPLACE]^private  IdentifyConstants identifyConstants = new IdentifyConstants (  ) ;^71^^^^^^^[REPLACE] private final IdentifyConstants identifyConstants = new IdentifyConstants (  ) ;^ [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior  
[REPLACE]^private final Set<Var> staleVars  = null ;^148^^^^^^^[REPLACE] private final Set<Var> staleVars = Sets.newHashSet (  ) ;^ [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior  
[REPLACE]^final Map<Node, AliasCandidate> aliasCandidates  = null ;^155^^^^^^^[REPLACE] final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap (  ) ;^ [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior  
[REPLACE]^this.compiler =  null;^77^^^^^73^80^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] InlineVariables$Mode,boolean) [PARAMETER] AbstractCompiler compiler Mode mode boolean inlineAllStrings [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^this.mode =  LOCALS_ONLY;^78^^^^^73^80^[REPLACE] this.mode = mode;^[METHOD] <init> [TYPE] InlineVariables$Mode,boolean) [PARAMETER] AbstractCompiler compiler Mode mode boolean inlineAllStrings [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^this.inlineAllStrings =  true;^79^^^^^73^80^[REPLACE] this.inlineAllStrings = inlineAllStrings;^[METHOD] <init> [TYPE] InlineVariables$Mode,boolean) [PARAMETER] AbstractCompiler compiler Mode mode boolean inlineAllStrings [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^this.alias =  null;^132^^^^^131^134^[REPLACE] this.alias = alias;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^this.refInfo =  null;^133^^^^^131^134^[REPLACE] this.refInfo = refInfo;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^86^^^^^83^87^[REPLACE] callback.process ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  ReferenceCollectingCallback callback  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node externs  root  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^return NodeUtil.isLiteralValue ( value ) || value.getType (  )  == Token.FUNCTION;^92^^^^^89^100^[REPLACE] return Predicates.<Var>alwaysTrue (  ) ;^[METHOD] getFilterForMode [TYPE] Predicate [PARAMETER] [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^return  new InliningBehavior (  )  ;^94^^^^^89^100^[REPLACE] return new IdentifyLocals (  ) ;^[METHOD] getFilterForMode [TYPE] Predicate [PARAMETER] [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^return  new InliningBehavior (  )  ;^96^^^^^89^100^[REPLACE] return new IdentifyConstants (  ) ;^[METHOD] getFilterForMode [TYPE] Predicate [PARAMETER] [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^return ;^98^^^^^89^100^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] getFilterForMode [TYPE] Predicate [PARAMETER] [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^return var .isDefine (  )  ;^113^^^^^112^114^[REPLACE] return var.isConst (  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Var var [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^return alias.scope.isLocal (  ) ;^123^^^^^122^124^[REPLACE] return var.scope.isLocal (  ) ;^[METHOD] apply [TYPE] boolean [PARAMETER] Var var [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates 
[REPLACE]^collectAliasCandidates ( t, 1 ) ;^160^^^^^158^162^[REPLACE] collectAliasCandidates ( t, referenceMap ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^160^^^^^158^162^[ADD] collectAliasCandidates ( t, referenceMap ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^doInlinesForScope ( t, null ) ;^161^^^^^158^162^[REPLACE] doInlinesForScope ( t, referenceMap ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( mode  ==  Mode.CONSTANTS_ONLY )  {^170^^^^^168^189^[REPLACE] if  ( mode != Mode.CONSTANTS_ONLY )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( referenceInfo != true ) {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  value.getType (  )  != Token.NAME )  {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^183^184^185^^^168^189^[ADD] if  ( value != null && value.getType (  )  == Token.NAME )  { aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ; }^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^aliasCandidates.put ( value, new AliasCandidate ( v, refInfo )  ) ;^184^^^^^168^189^[REPLACE] aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = refInfo.getInitializingReference (  ) ;^181^^^^^168^189^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^181^^^^^168^189^[ADD] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = init.getNameNode (  ) ;^182^^^^^168^189^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^171^^^^^168^189^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^171^172^173^^^168^189^[ADD] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  { Var v = it.next (  ) ; ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( referenceInfo != null ) {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.NAME )  {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^aliasCandidates.put ( varalue, new AliasCandidate ( v, referenceInfo )  ) ;^184^^^^^168^189^[REPLACE] aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Var v = this.next (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^172^173^^^^168^189^[ADD] Var v = it.next (  ) ; ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ReferenceCollection referenceInfo = this.get ( v ) ;^173^^^^^168^189^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^173^^^^^168^189^[ADD] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = init .getNameNode (  )  ;^182^^^^^168^189^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^182^^^^^168^189^[ADD] Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  )  .getParent (  )  ; it.hasNext (  ) ; )  {^171^^^^^168^189^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Var v = it.hasNext (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ReferenceCollection referenceInfo = null.get ( v ) ;^173^^^^^168^189^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = refInfo .getInitializingReferenceForConstants (  )  ;^181^^^^^168^189^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  referenceInfo.references.size (  )  + 5 >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^178^179^180^181^182^168^189^[ADD] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  { Reference init = referenceInfo.getInitializingReference (  ) ; Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = refInfo.getInitializingReferenceForConstants (  ) ;^181^^^^^168^189^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^Node value = init.getAssignedValue (  ) ;^181^182^^^^168^189^[ADD] Reference init = referenceInfo.getInitializingReference (  ) ; Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^184^^^^^168^189^[REPLACE] aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^initialization.getGrandparent (  ) , initialization.getGrandparent (  ) .getParent (  )  ) ;^184^^^^^168^189^[REMOVE] ^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( referenceInfo != this && referenceInfo.references.size (  )  /  0.5  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Var v = null.next (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ReferenceCollection referenceInfo = referenceMap.get ( var ) ;^173^^^^^168^189^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  ) .replaceChild (  ) ; it.hasNext (  ) ; )  {^171^^^^^168^189^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Var v = null.hasNext (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = referenceInfo .getInitializingReferenceForConstants (  )  ;^181^^^^^168^189^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  isVarInlineForbidden ( var )  || staleVars.contains ( v )  )  {^205^206^^^^196^223^[REPLACE] if  ( referenceInfo == null || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  else {^210^^^^^196^223^[REPLACE] } else if  ( isInlineableDeclaredConstant ( v, referenceInfo )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^}   Node value = init.getAssignedValue (  ) ;inlineDeclaredConstant ( v, value, referenceInfo.references ) ;staleVars.add ( v ) ;^210^211^212^213^214^196^223^[ADD] else if  ( isInlineableDeclaredConstant ( v, referenceInfo )  )  { Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ; Node value = init.getAssignedValue (  ) ; inlineDeclaredConstant ( v, value, referenceInfo.references ) ; staleVars.add ( v ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  if  ( mode  !=  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineNonConstants ( v, refInfo ) ;^220^^^^^215^221^[REPLACE] inlineNonConstants ( v, referenceInfo ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^220^^^^^215^221^[ADD] inlineNonConstants ( v, referenceInfo ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = referenceInfo.getInitializingReference (  ) ;^211^^^^^196^223^[REPLACE] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = init.getNameNode (  ) ;^212^^^^^196^223^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  else {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^}   continue;^215^216^^218^^196^223^[ADD] else if  ( mode == Mode.CONSTANTS_ONLY )  {  continue;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = refInfo.getInitializingReferenceForConstants (  ) ;^211^^^^^196^223^[REPLACE] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^212^213^^^^196^223^[ADD] Node value = init.getAssignedValue (  ) ; inlineDeclaredConstant ( v, value, referenceInfo.references ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  if  ( isInlineableDeclaredConstant ( v, referenceInfo )  )  {^210^^^^^196^223^[REPLACE] } else if  ( isInlineableDeclaredConstant ( v, referenceInfo )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  if  ( mode  &&  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = refInfo .getInitializingReference (  )  ;^211^^^^^196^223^[REPLACE] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^inlineDeclaredConstant ( v, value, referenceInfo.references ) ;^212^213^^^^196^223^[ADD] Node value = init.getAssignedValue (  ) ; inlineDeclaredConstant ( v, value, referenceInfo.references ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineNonConstants ( var, referenceInfo ) ;^220^^^^^215^221^[REPLACE] inlineNonConstants ( v, referenceInfo ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^198^^^^^196^223^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( referenceInfo != this || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^205^206^^^^196^223^[REPLACE] if  ( referenceInfo == null || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^|| !isValidInitialization ( initialization ) || !isValidReference ( reference )  )  {^220^^^^^215^221^[REMOVE] ^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^212^^^^^196^223^[ADD] Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 0 ) ;^220^^^^^215^221^[REPLACE] inlineNonConstants ( v, referenceInfo ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Var v = it.hasNext (  ) ;^199^^^^^196^223^[REPLACE] Var v = it.next (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^199^^^^^196^223^[ADD] Var v = it.next (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ReferenceCollection referenceInfo = null.get ( v ) ;^201^^^^^196^223^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = init .getNameNode (  )  ;^212^^^^^196^223^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  )  .getParent (  )  ; it.hasNext (  ) ; )  {^198^^^^^196^223^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Var v = false.next (  ) ;^199^^^^^196^223^[REPLACE] Var v = it.next (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ReferenceCollection referenceInfo = 1.get ( v ) ;^201^^^^^196^223^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^201^^^^^196^223^[ADD] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^211^^^^^196^223^[ADD] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  NodeTraversal t  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^int refCount = refInfo.references.size (  ) ;^227^^^^^226^284^[REPLACE] int refCount = referenceInfo.references.size (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^227^^^^^226^284^[ADD] int refCount = referenceInfo.references.size (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 4 ) ;^228^^^^^226^284^[REPLACE] Reference declaration = referenceInfo.references.get ( 0 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = refInfo.getInitializingReference (  ) ;^229^^^^^226^284^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^int firstRefAfterInit  =  3;^230^^^^^226^284^[REPLACE] int firstRefAfterInit =  ( declaration == init )  ? 2 : 3;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^232^233^^^^226^284^[REPLACE] if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  else {^240^^^^^226^284^[REPLACE] } else if  ( refCount == firstRefAfterInit )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^240^^^^^226^284^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  if  (  refCount == 2 )  {^249^^^^^226^284^[REPLACE] } else if  ( declaration != init && refCount == 2 )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^249^^^^^226^284^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( isValidDeclaration ( declaration )  ) {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getNameNode (  ) ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^253^^^^^226^284^[ADD] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference .getNameNode (  )  ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( isValidDeclaration ( reference )  || isValidInitialization ( init )  )  {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^250^^^^^226^284^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( canInline ( declaration, init, init )  )  {^245^^^^^226^284^[REPLACE] if  ( canInline ( declaration, init, reference )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inline ( v, declaration, reference, reference ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^staleVars.add ( var ) ;^247^^^^^226^284^[REPLACE] staleVars.add ( v ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference reference = referenceInfo.references.size ( firstRefAfterInit  >=  1 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^245^^^^^226^284^[REPLACE] if  ( canInline ( declaration, init, reference )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inline ( v, declaration, declaration, reference ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  if  ( declaration != init || refCount == 2 / 4 )  {^249^^^^^226^284^[REPLACE] } else if  ( declaration != init && refCount == 2 )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( isValidDeclaration ( declaration )  || isValidInitialization ( init )  )  {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^250^251^^253^254^226^284^[ADD] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {  Node value = init.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = init.getNameNode (  ) ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference reference = referenceInfo.references.size ( firstRefAfterInit  ^  3 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^Preconditions.checkNotNull ( value ) ;^253^254^^^^226^284^[ADD] Node value = init.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getNameNode (  ) ;^236^^^^^232^258^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  else {^249^^^^^226^284^[REPLACE] } else if  ( declaration != init && refCount == 2 )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  isValidInitialization ( init )  )  {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^253^254^^^^226^284^[ADD] Node value = init.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( canInline ( init, init, reference )  )  {^245^^^^^226^284^[REPLACE] if  ( canInline ( declaration, init, reference )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inline ( v, declaration, init, init ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference reference = refInfo.references.get ( refCount - 1 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^inline ( v, declaration, init, reference ) ;staleVars.add ( v ) ;^245^246^247^248^^226^284^[ADD] if  ( canInline ( declaration, init, reference )  )  { inline ( v, declaration, init, reference ) ; staleVars.add ( v ) ; }^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^staleVars.contains ( var ) ;^247^^^^^226^284^[REPLACE] staleVars.add ( v ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getNameNode (  ) ;^236^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference reference = referenceInfo.references.get (refCount - 1 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( staleVars.contains ( v )  ) {^264^265^^^^226^284^[REPLACE] if  ( !staleVars.contains ( v )  && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( aliasCandidates.get ( nameNode )  )  {^269^^^^^264^283^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( staleVars.contains ( candidate.alias )  )  {^271^^^^^264^283^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^aliasInit =  null.refInfo.getInitializingReference (  ) ;^273^^^^^264^283^[REPLACE] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference refDecl = refSet.get ( 0 ) ;^272^^^^^264^283^[REPLACE] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^272^273^^^^264^283^[ADD] Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^274^^^^^264^283^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^AliasCandidate candidate = aliasCandidates.containsKey ( value ) ;^270^^^^^264^283^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^273^^^^^264^283^[ADD] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = aliasInit.getNameNode (  ) ;^274^^^^^264^283^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^Preconditions.checkNotNull ( value ) ;^274^275^^^^264^283^[ADD] Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^f Node nameNode = refs.get (firstRefAfterInit ) .getNameNode (  ) ;^267^268^^^^264^283^[REPLACE] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^269^^^^^264^283^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;Reference aliasInit;aliasInit = candidate.refInfo.getInitializingReference (  ) ;^269^270^271^272^273^264^283^[ADD] if  ( aliasCandidates.containsKey ( nameNode )  )  { AliasCandidate candidate = aliasCandidates.get ( nameNode ) ; if  ( !staleVars.contains ( candidate.alias )  )  { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^274^275^^^^264^283^[ADD] Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^AliasCandidate candidate = aliasCandidates.get ( value ) ;^270^^^^^264^283^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^272^^^^^264^283^[ADD] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^274^^^^^264^283^[ADD] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^271^272^273^274^275^264^283^[ADD] if  ( !staleVars.contains ( candidate.alias )  )  { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ; Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node nameNode = true.get ( i ) .getNameNode (  ) ;^268^^^^^264^283^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^AliasCandidate candidate = aliasCandidates.containsKey ( nameNode ) ;^270^^^^^264^283^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^List<Reference> refs = refInfo.references;^266^^^^^264^283^[REPLACE] List<Reference> refs = referenceInfo.references;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node nameNode = refs.get ( firstRefAfterInit ) .getNameNode (  ) ;^268^^^^^264^283^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( aliasCandidates.addKey ( nameNode )  )  {^269^^^^^226^284^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( !staleVars.add ( candidate.alias )  )  {^271^^^^^226^284^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^271^272^273^274^275^226^284^[ADD] if  ( !staleVars.contains ( candidate.alias )  )  { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ; Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^aliasInit =  null.refInfo.getInitializingReference (  ) ;^273^^^^^226^284^[REPLACE] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference refDecl = refSet.get ( 0 ) ;^272^^^^^226^284^[REPLACE] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^272^273^^^^226^284^[ADD] Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^274^^^^^226^284^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^274^^^^^226^284^[ADD] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^AliasCandidate candidate = aliasCandidates.get ( value ) ;^270^^^^^226^284^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^270^^^^^226^284^[ADD] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^272^^^^^226^284^[ADD] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getNameNode (  ) ;^274^^^^^226^284^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^f Node nameNode = refs.get (firstRefAfterInit ) .getNameNode (  ) ;^267^268^^^^226^284^[REPLACE] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^267^268^^^^226^284^[ADD] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( aliasCandidates.get ( nameNode )  )  {^269^^^^^226^284^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;Reference aliasInit;aliasInit = candidate.refInfo.getInitializingReference (  ) ;^269^270^271^272^273^226^284^[ADD] if  ( aliasCandidates.containsKey ( nameNode )  )  { AliasCandidate candidate = aliasCandidates.get ( nameNode ) ; if  ( !staleVars.contains ( candidate.alias )  )  { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( staleVars.contains ( candidate.alias )  )  {^271^^^^^226^284^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^Preconditions.checkNotNull ( value ) ;^274^275^^^^226^284^[ADD] Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^Reference aliasInit;aliasInit = candidate.refInfo.getInitializingReference (  ) ;Node value = aliasInit.getAssignedValue (  ) ;Preconditions.checkNotNull ( value ) ;^271^272^273^274^275^226^284^[ADD] if  ( !staleVars.contains ( candidate.alias )  )  { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ; Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node nameNode = false.get ( i ) .replaceChild (  ) ;^268^^^^^226^284^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^273^^^^^226^284^[ADD] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^List<Reference> refs = refInfo.references;^266^^^^^226^284^[REPLACE] List<Reference> refs = referenceInfo.references;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^266^^^^^226^284^[ADD] List<Reference> refs = referenceInfo.references;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node nameNode = refs.get ( firstRefAfterInit ) .getNameNode (  ) ;^268^^^^^226^284^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^268^^^^^226^284^[ADD] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^AliasCandidate candidate = aliasCandidates.containsKey ( value ) ;^270^^^^^226^284^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node nameNode  value  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Node c = root.getFirstChild (  ) ; c == null; c = c.getNext (  )  )  {^291^^^^^290^298^[REPLACE] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^blacklistVarReferencesInTree ( value, v.scope ) ;^292^^^^^290^298^[REPLACE] blacklistVarReferencesInTree ( c, scope ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Node c =  root.getFirstChild (  ) ; null !^291^^^^^290^298^[REPLACE] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^for  ( Node c = root.getString (  ) ; c != null; c = c.getNext (  )  )  {^291^^^^^290^298^[REPLACE] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( root.getType (  )   ||  Token.NAME )  {^295^^^^^290^298^[REPLACE] if  ( root.getType (  )  == Token.NAME )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^295^296^297^^^290^298^[ADD] if  ( root.getType (  )  == Token.NAME )  { staleVars.add ( scope.getVar ( root.getString (  )  )  ) ; }^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^296^^^^^290^298^[REPLACE] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^296^^^^^290^298^[ADD] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^staleVars.add ( scope.getVar ( root.getParent (  )  )  ) ;^296^^^^^290^298^[REPLACE] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Scope scope  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node c  root  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return compiler.reportCodeChange (  ) .isExported ( var.name )  || staleVars.contains ( var ) ;^309^310^^^^303^311^[REPLACE] return compiler.getCodingConvention (  ) .isExported ( var.name )  || staleVars.contains ( var ) ;^[METHOD] isVarInlineForbidden [TYPE] boolean [PARAMETER] Var var [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = reference.getNameNode (  ) ;^319^^^^^317^329^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Preconditions.checkState ( value == null ) ;^320^^^^^317^329^[REPLACE] Preconditions.checkState ( value != null ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineValue ( var, reference, value.detachFromParent (  )  ) ;^322^^^^^317^329^[REPLACE] inlineValue ( v, reference, value.detachFromParent (  )  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineValue ( v, reference, expressRoot.detachFromParent (  )  ) ;^322^^^^^317^329^[REPLACE] inlineValue ( v, reference, value.detachFromParent (  )  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^322^^^^^317^329^[ADD] inlineValue ( v, reference, value.detachFromParent (  )  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( declaration  == reference )  {^323^^^^^317^329^[REPLACE] if  ( declaration != init )  {^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node expressRoot = reference.getGrandparent (  ) ;^324^^^^^317^329^[REPLACE] Node expressRoot = init.getGrandparent (  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^removeDeclaration ( reference ) ;^328^^^^^317^329^[REPLACE] removeDeclaration ( declaration ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^328^^^^^317^329^[ADD] removeDeclaration ( declaration ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  init  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node expressRoot  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference decl = refSet.get ( 0 / 2 ) ;^336^^^^^334^341^[REPLACE] Reference decl = refSet.get ( 0 ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < this.get (  )  - 0 ; i++ )  {^337^^^^^334^341^[REPLACE] for  ( int i = 1; i < refSet.size (  ) ; i++ )  {^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^inlineValue ( v, refSet.get ( i ) , value.getType (  )  ) ;^338^^^^^334^341^[REPLACE] inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[ADD]^^338^^^^^334^341^[ADD] inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^Node parent = ref.getParent (  ) ;^338^^^^^334^341^[REPLACE] inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < refSet.size (  ) ; i++ )  {^337^^^^^334^341^[REPLACE] for  ( int i = 1; i < refSet.size (  ) ; i++ )  {^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 0 ) ;^340^^^^^334^341^[REPLACE] removeDeclaration ( decl ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[ADD]^^340^^^^^334^341^[ADD] removeDeclaration ( decl ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^Reference decl = false;^349^^^^^346^360^[REPLACE] Reference decl = null;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( r .getParent (  )    !=  v^352^^^^^346^360^[REPLACE] if  ( r.getNameNode (  )  == v.getNameNode (  )  )  {^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineValue ( var, r, value.cloneTree (  )  ) ;^355^^^^^346^360^[REPLACE] inlineValue ( v, r, value.cloneTree (  )  ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineValue ( v, r, value.getType (  )  ) ;^355^^^^^346^360^[REPLACE] inlineValue ( v, r, value.cloneTree (  )  ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^decl =  null;^353^^^^^346^360^[REPLACE] decl = r;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^353^^^^^346^360^[ADD] decl = r;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^int refCount = referenceInfo.references.size (  ) ;^351^^^^^346^360^[REPLACE] for  ( Reference r : refSet )  {^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^351^352^353^354^355^346^360^[ADD] for  ( Reference r : refSet )  { if  ( r.getNameNode (  )  == v.getNameNode (  )  )  { decl = r; } else { inlineValue ( v, r, value.cloneTree (  )  ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 0 ) ;^359^^^^^346^360^[REPLACE] removeDeclaration ( decl ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^Reference refDecl = refSet.get ( 0 ) ;^359^^^^^346^360^[REMOVE] ^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference decl  r  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node varNode = declaration.getGrandparent (  ) ;^366^^^^^365^378^[REPLACE] Node varNode = declaration.getParent (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^varNode.removeChild ( declaration.getParent (  )  ) ;^367^^^^^365^378^[REPLACE] varNode.removeChild ( declaration.getNameNode (  )  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^367^^^^^365^378^[ADD] varNode.removeChild ( declaration.getNameNode (  )  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^varNode.removeChild ( declaration .getParent (  )   ) ;^367^^^^^365^378^[REPLACE] varNode.removeChild ( declaration.getNameNode (  )  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^367^^^^^365^378^[REMOVE] ^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( varNode.hasChildren (  )  )  {^370^^^^^365^378^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node grandparent = declaration .getParent (  )  ;^373^^^^^365^378^[REPLACE] Node grandparent = declaration.getGrandparent (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node grandparent = declaration.getParent (  ) ;^373^^^^^365^378^[REPLACE] Node grandparent = declaration.getGrandparent (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^compiler.getCodingConvention (  ) ;^377^^^^^365^378^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^377^^^^^365^378^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node grandparent  varNode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node parent = ref.getGrandparent (  ) ;^389^^^^^388^398^[REPLACE] Node parent = ref.getParent (  ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^390^^^^^388^398^[REPLACE] if  ( ref.isSimpleAssignmentToName (  )  )  {^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref .getParent (  )  , value ) ;^394^^^^^388^398^[REPLACE] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ref.getGrandparent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^394^^^^^388^398^[REPLACE] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^394^^^^^388^398^[ADD] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref.getParent (  ) , value ) ;^394^^^^^388^398^[REPLACE] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ref.getParent (  ) .replaceChild ( parent, value ) ;^392^^^^^388^398^[REPLACE] ref.getGrandparent (  ) .replaceChild ( parent, value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^392^^^^^388^398^[ADD] ref.getGrandparent (  ) .replaceChild ( parent, value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^ref .getParent (  )  .replaceChild ( parent, value ) ;^392^^^^^388^398^[REPLACE] ref.getGrandparent (  ) .replaceChild ( parent, value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^392^^^^^388^398^[REMOVE] ^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^blacklistVarReferencesInTree ( parent, v.scope ) ;^396^^^^^388^398^[REPLACE] blacklistVarReferencesInTree ( value, v.scope ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^compiler.getCodingConvention (  ) ;^397^^^^^388^398^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( !identifyConstants.apply ( v )  )  {^406^^^^^405^435^[REPLACE] if  ( !identifyConstants.apply ( var )  )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^407^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( refInfo.isAssignedOnce (  )  )  {^410^^^^^405^435^[REPLACE] if  ( !refInfo.isAssignedOnce (  )  )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^return false;^410^411^412^^^405^435^[ADD] if  ( !refInfo.isAssignedOnce (  )  )  { return false; }^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^411^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference init = referenceInfo.getInitializingReference (  ) ;^414^^^^^405^435^[REPLACE] Reference init = refInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( init != null )  {^415^^^^^405^435^[REPLACE] if  ( init == null )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^if  ( ! ( refInfo.isAssignedOnce (  )  )  )  {     return false; }^415^^^^^405^435^[REMOVE] ^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^416^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = init.getNameNode (  ) ;^419^^^^^405^435^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( value != null )  {^420^^^^^405^435^[REPLACE] if  ( value == null )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^420^421^^^424^405^435^[ADD] if  ( value == null )  {  return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^424^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( !NodeUtil .isLiteralValue ( value )   )  {^428^^^^^405^435^[REPLACE] if  ( !NodeUtil.isImmutableValue ( value )  )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^429^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return value.getType (  )  != Token.STRING && isStringWorthInlining ( var, refInfo.references ) ;;^433^434^^^^405^435^[REPLACE] return value.getType (  )  != Token.STRING || isStringWorthInlining ( var, refInfo.references ) ;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference init  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( inlineAllStrings && !var .isConst (  )   )  {^441^^^^^440^463^[REPLACE] if  ( !inlineAllStrings && !var.isDefine (  )  )  {^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^return noInlineBytes  != len;;^459^^^^^440^463^[REPLACE] return noInlineBytes >= inlineBytes;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int len = v.getInitialValue (  ) .getString (  ) .length (  )  - 1 + "''".length (  )  - 1;^442^^^^^440^463^[REPLACE] int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int noInlineBytes = "var xx=;" .getFirstChild (  )   + len + 4 *  ( refs.size (  )  *  0.5  - 1 ) ;^448^449^^^^440^463^[REPLACE] int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[ADD]^^448^449^^^^440^463^[ADD] int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int inlineBytes =  ( noInlineBytes - 0  )  *  ( refs.size (  )  - 4 - 0  ) ;^455^^^^^440^463^[REPLACE] int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^return true ;^459^^^^^440^463^[REPLACE] return noInlineBytes >= inlineBytes;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int len = var.getInitialValue (  ) .getString (  ) .length (  )  %  2 + "''".length (  )  %  2;^442^^^^^440^463^[REPLACE] int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( null.length (  )  - 1 ) ;^448^449^^^^440^463^[REPLACE] int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  + 1 - 1 ) ;^455^^^^^440^463^[REPLACE] int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^return false;^462^^^^^440^463^[REPLACE] return true;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  List refs  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^if  ( isValidDeclaration ( declaration ) ) {^473^474^475^^^472^513^[REPLACE] if  ( !isValidDeclaration ( declaration ) || !isValidInitialization ( initialization ) || !isValidReference ( reference )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^476^^^^^473^477^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^476^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( declaration != initialization || initialization.getGrandparent (  ) .getType (  )  != Token.EXPR_RESULT )  {^482^483^^^^472^513^[REPLACE] if  ( declaration != initialization && initialization.getGrandparent (  ) .getType (  )  != Token.EXPR_RESULT )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^482^483^484^485^^472^513^[ADD] if  ( declaration != initialization && initialization.getGrandparent (  ) .getType (  )  != Token.EXPR_RESULT )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^484^^^^^482^485^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^484^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  declaration.getBasicBlock (  )  != reference.getBasicBlock (  )  )  {^489^490^^^^472^513^[REPLACE] if  ( declaration.getBasicBlock (  )  != initialization.getBasicBlock (  ) || declaration.getBasicBlock (  )  != reference.getBasicBlock (  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^491^^^^^489^492^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^491^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node value = declaration.getAssignedValue (  ) ;^503^^^^^472^513^[REPLACE] Node value = initialization.getAssignedValue (  ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Preconditions.checkState ( value == null ) ;^504^^^^^472^513^[REPLACE] Preconditions.checkState ( value != null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^Preconditions.checkState ( varNode.getType (  )  == Token.VAR ) ;^504^^^^^472^513^[REMOVE] ^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  (  reference.getParent (  ) .getType (  )  == Token.CALL || reference.getParent (  ) .getFirstChild (  )  == reference.getNameNode (  )  )  {^505^506^507^^^472^513^[REPLACE] if  ( value.getType (  )  == Token.GETPROP && reference.getParent (  ) .getType (  )  == Token.CALL && reference.getParent (  ) .getFirstChild (  )  == reference.getNameNode (  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^508^^^^^505^509^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^508^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return canMoveAggressively ( value )  ;^511^512^^^^472^513^[REPLACE] return canMoveAggressively ( value )  || canMoveModerately ( initialization, reference ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return   value   || value.getType (  )  == Token.FUNCTION;^521^522^^^^518^523^[REPLACE] return NodeUtil.isLiteralValue ( value ) || value.getType (  )  == Token.FUNCTION;^[METHOD] canMoveAggressively [TYPE] boolean [PARAMETER] Node value [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node varNode = declaration.getParent (  ) ;^535^^^^^532^561^[REPLACE] Iterator<Node> it;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( initialization.getParent (  ) .getType (  )   !=  Token.VAR )  {^536^^^^^532^561^[REPLACE] if  ( initialization.getParent (  ) .getType (  )  == Token.VAR )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^536^537^538^539^540^532^561^[ADD] if  ( initialization.getParent (  ) .getType (  )  == Token.VAR )  { it = NodeIterators.LocalVarMotion.forVar ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  )  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  if  ( initialization.getParent (  ) .getType (  )   &&  Token.ASSIGN )  {^541^^^^^532^561^[REPLACE] } else if  ( initialization.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^}   initialization.getGrandparent (  ) .getType (  )  == Token.EXPR_RESULT ) ;^541^542^543^544^545^532^561^[ADD] else if  ( initialization.getParent (  ) .getType (  )  == Token.ASSIGN )  { Preconditions.checkState ( initialization.getGrandparent (  ) .getType (  )  == Token.EXPR_RESULT ) ; it = NodeIterators.LocalVarMotion.forAssign ( initialization.getNameNode (  ) ,^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return ;^550^^^^^541^551^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^it =  NodeIterators.LocalVarMotion.forAssign ( null.getNameNode (  ) , null.getParent (  ) , null.getGrandparent (  ) ,^544^545^546^547^^532^561^[REPLACE] it = NodeIterators.LocalVarMotion.forAssign ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  ) ,^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^544^545^546^547^548^532^561^[ADD] it = NodeIterators.LocalVarMotion.forAssign ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  ) , initialization.getGrandparent (  ) .getParent (  )  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return ;^550^^^^^532^561^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^550^^^^^532^561^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^it =  NodeIterators.LocalVarMotion.forVar ( null.getNameNode (  ) , null.getParent (  ) , null.getGrandparent (  )  ) ;^537^538^539^540^^532^561^[REPLACE] it = NodeIterators.LocalVarMotion.forVar ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  )  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  else {^541^^^^^532^561^[REPLACE] } else if  ( initialization.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^550^^^^^541^551^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node targetName = reference.getParent (  ) ;^552^^^^^532^561^[REPLACE] Node targetName = reference.getNameNode (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^552^^^^^532^561^[ADD] Node targetName = reference.getNameNode (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^while  ( 1.next (  )  )  {^553^^^^^532^561^[REPLACE] while  ( it.hasNext (  )  )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( curNode  ||  targetName )  {^555^^^^^532^561^[REPLACE] if  ( curNode == targetName )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REMOVE]^if  ( ! ( refInfo.isAssignedOnce (  )  )  )  {     return false; }^555^^^^^532^561^[REMOVE] ^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return false;^556^^^^^532^561^[REPLACE] return true;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node curNode = this.next (  ) ;^554^^^^^532^561^[REPLACE] Node curNode = it.next (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^554^^^^^532^561^[ADD] Node curNode = it.next (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( curNode  &&  curNode )  {^555^^^^^532^561^[REPLACE] if  ( curNode == targetName )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^560^^^^^532^561^[REPLACE] return false;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node curNode  targetName  [TYPE]  Iterator it  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return declaration .getNext (  )  .getType (  )  ;^568^569^^^^567^570^[REPLACE] return declaration.getParent (  ) .getType (  )  == Token.VAR && declaration.getGrandparent (  ) .getType (  )  != Token.FOR;^[METHOD] isValidDeclaration [TYPE] boolean [PARAMETER] Reference declaration [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference declaration  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( initialization != true )  {^576^^^^^575^588^[REPLACE] if  ( initialization == null )  {^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^}  else {^578^^^^^575^588^[REPLACE] } else if  ( initialization.isDeclaration (  )  )  {^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return false;^586^^^^^575^588^[REPLACE] return true;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node parent = initialization.getGrandparent (  ) ;^582^^^^^575^588^[REPLACE] Node parent = initialization.getParent (  ) ;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return initialization.getParent (  ) .getFirstChild (  )  != null;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return initialization.getNameNode (  ) .replaceChild (  )  != false;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return true;^577^^^^^575^588^[REPLACE] return false;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return initialization.getNameNode (  ) .replaceChild (  )  != null;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return initialization.getNameNode (  )  .getString (  )   != null;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference initialization  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node parent  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^return   !reference.isLvalue (  ) ;^594^^^^^593^595^[REPLACE] return !reference.isDeclaration (  )  && !reference.isLvalue (  ) ;^[METHOD] isValidReference [TYPE] boolean [PARAMETER] Reference reference [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference reference  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^List<Reference> refSet = referenceInfo.references;^604^^^^^603^637^[REPLACE] List<Reference> refSet = refInfo.references;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^int startingReadRef = 4;^605^^^^^603^637^[REPLACE] int startingReadRef = 1;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[ADD]^^605^^^^^603^637^[ADD] int startingReadRef = 1;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference refDecl = refSet.get ( 0 - 0 ) ;^606^^^^^603^637^[REPLACE] Reference refDecl = refSet.get ( 0 ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !isValidDeclaration ( refInit )  )  {^607^^^^^603^637^[REPLACE] if  ( !isValidDeclaration ( refDecl )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^608^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference refInit = referenceInfo.getInitializingReference (  ) ;^611^^^^^603^637^[REPLACE] Reference refInit = refInfo.getInitializingReference (  ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !isValidInitialization ( refDecl )  )  {^612^^^^^603^637^[REPLACE] if  ( !isValidInitialization ( refInit )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REMOVE]^if  ( ! ( refInfo.isAssignedOnce (  )  )  )  {     return false; }^612^^^^^603^637^[REMOVE] ^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^613^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( refDecl  ==  refInit )  {^616^^^^^603^637^[REPLACE] if  ( refDecl != refInit )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^startingReadRef = 0;^618^^^^^603^637^[REPLACE] startingReadRef = 2;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^startingReadRef = 1;^618^^^^^603^637^[REPLACE] startingReadRef = 2;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !isValidReference ( refInit )  )  {^623^^^^^603^637^[REPLACE] if  ( !isValidReference ( ref )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[ADD]^return false;^623^624^625^^^603^637^[ADD] if  ( !isValidReference ( ref )  )  { return false; }^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^624^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^for  ( int i = startingReadRef; i < refSet.length (  ) ; i++ )  {^621^^^^^603^637^[REPLACE] for  ( int i = startingReadRef; i < refSet.size (  ) ; i++ )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference ref = true.get ( i ) ;^622^^^^^603^637^[REPLACE] Reference ref = refSet.get ( i ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[ADD]^^622^^^^^603^637^[ADD] Reference ref = refSet.get ( i ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^for  ( int i = i; i < refSet.size (  ) ; i++ )  {^621^^^^^603^637^[REPLACE] for  ( int i = startingReadRef; i < refSet.size (  ) ; i++ )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference ref = refSet.get ( startingReadRef ) ;^622^^^^^603^637^[REPLACE] Reference ref = refSet.get ( i ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( refInfo.isWellDefined (  )  )  {^628^^^^^603^637^[REPLACE] if  ( !refInfo.isWellDefined (  )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^629^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^Node value = refDecl.getAssignedValue (  ) ;^632^^^^^603^637^[REPLACE] Node value = refInit.getAssignedValue (  ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^value   ;^633^^^^^603^637^[REPLACE] Preconditions.checkNotNull ( value ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^return NodeUtil.isImmutableValue ( value )  ;^634^635^636^^^603^637^[REPLACE] return NodeUtil.isImmutableValue ( value )  && ( value.getType (  )  != Token.STRING || isStringWorthInlining ( v, refInfo.references )  ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InlineVariables Mode IdentifyConstants IdentifyLocals AliasCandidate InliningBehavior   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inlineAllStrings  true  [TYPE]  IdentifyConstants identifyConstants  [TYPE]  Set staleVars  [TYPE]  Var alias  v  var  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Mode ALL  CONSTANTS_ONLY  LOCALS_ONLY  mode  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  ReferenceCollection refInfo  referenceInfo  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i  startingReadRef 
[REPLACE]^this.alias =  null;^132^^^^^131^134^[REPLACE] this.alias = alias;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] AliasCandidate   [TYPE]  ReferenceCollection refInfo  [TYPE]  Var alias  [TYPE]  boolean false  true 
[REPLACE]^this.refInfo =  null;^133^^^^^131^134^[REPLACE] this.refInfo = refInfo;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] AliasCandidate   [TYPE]  ReferenceCollection refInfo  [TYPE]  Var alias  [TYPE]  boolean false  true 
[ADD]^^133^^^^^131^134^[ADD] this.refInfo = refInfo;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] AliasCandidate   [TYPE]  ReferenceCollection refInfo  [TYPE]  Var alias  [TYPE]  boolean false  true 
[REPLACE]^private final Set<Var> staleVars  = null ;^148^^^^^^^[REPLACE] private final Set<Var> staleVars = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  ReferenceCollection refInfo  [TYPE]  Var alias  [TYPE]  boolean false  true 
[REPLACE]^final Map<Node, AliasCandidate> aliasCandidates  = null ;^155^^^^^^^[REPLACE] final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap (  ) ;^[METHOD] <init> [TYPE] ReferenceCollection) [PARAMETER] Var alias ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  ReferenceCollection refInfo  [TYPE]  Var alias  [TYPE]  boolean false  true 
[REPLACE]^collectAliasCandidates ( t, null ) ;^160^^^^^158^162^[REPLACE] collectAliasCandidates ( t, referenceMap ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  NodeTraversal t 
[REPLACE]^inlineNonConstants ( v, referenceInfo ) ;^161^^^^^158^162^[REPLACE] doInlinesForScope ( t, referenceMap ) ;^[METHOD] afterExitScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  NodeTraversal t 
[REPLACE]^if  ( mode  ==  Mode.CONSTANTS_ONLY )  {^170^^^^^168^189^[REPLACE] if  ( mode != Mode.CONSTANTS_ONLY )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( referenceInfo != null && referenceInfo.references.size (  )  /  0.5  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REMOVE]^if  (  ( mode )  !=  ( CONSTANTS_ONLY )  )  {     for  ( Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {         Var v = it.next (  ) ;         ReferenceCollection referenceInfo = referenceMap.get ( v ) ;         if  (  (  (  ( referenceInfo != null )  &&  (  ( size (  )  )  >= 2 )  )  &&  ( referenceInfo.isWellDefined (  )  )  )  &&  ( referenceInfo.isAssignedOnce (  )  )  )  {             Reference init = referenceInfo.getInitializingReference (  ) ;             Node value = init.getAssignedValue (  ) ;             if  (  ( value != null )  &&  (  ( value.getType (  )  )  ==  ( NAME )  )  )  {                 aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;             }         }     } }^178^^^^^168^189^[REMOVE] ^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  (  value.getType (  )  != Token.NAME )  {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^184^^^^^168^189^[REPLACE] aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^181^^^^^168^189^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Node value = init .getNameNode (  )  ;^182^^^^^168^189^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^182^^^^^168^189^[ADD] Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( value != null && value.getType (  )  != Token.NAME )  {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^183^184^185^^^168^189^[ADD] if  ( value != null && value.getType (  )  == Token.NAME )  { aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ; }^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REMOVE]^initialization.getGrandparent (  ) , initialization.getGrandparent (  ) .getParent (  )  ) ;^184^^^^^168^189^[REMOVE] ^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^171^^^^^168^189^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^171^172^173^^^168^189^[ADD] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  { Var v = it.next (  ) ; ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  (  referenceInfo.references.size (  )  /  0.5  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^178^179^180^181^182^168^189^[ADD] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  { Reference init = referenceInfo.getInitializingReference (  ) ; Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( value != null ) {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^183^184^185^^^168^189^[ADD] if  ( value != null && value.getType (  )  == Token.NAME )  { aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ; }^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^184^^^^^168^189^[ADD] aliasCandidates.put ( value, new AliasCandidate ( v, referenceInfo )  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Node value = init.getNameNode (  ) ;^182^^^^^168^189^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( value != true && value.getType (  )  != Token.NAME )  {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Var v = this.next (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^172^173^^^^168^189^[ADD] Var v = it.next (  ) ; ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^ReferenceCollection referenceInfo = null.get ( v ) ;^173^^^^^168^189^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^181^182^^^^168^189^[ADD] Reference init = referenceInfo.getInitializingReference (  ) ; Node value = init.getAssignedValue (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  ) .replaceChild (  ) ; it.hasNext (  ) ; )  {^171^^^^^168^189^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Var v = true.next (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^ReferenceCollection referenceInfo = this.get ( v ) ;^173^^^^^168^189^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( referenceInfo != null && referenceInfo.references.length (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^178^179^180^^^168^189^[REPLACE] if  ( referenceInfo != null && referenceInfo.references.size (  )  >= 2 && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Reference init = referenceInfo .getInitializingReferenceForConstants (  )  ;^181^^^^^168^189^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( value != this ) {^183^^^^^168^189^[REPLACE] if  ( value != null && value.getType (  )  == Token.NAME )  {^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Var v = 1.hasNext (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Var v = null.next (  ) ;^172^^^^^168^189^[REPLACE] Var v = it.next (  ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^172^173^^^^168^189^[ADD] Var v = it.next (  ) ; ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] collectAliasCandidates [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( referenceInfo != null ) {^205^206^^^^196^223^[REPLACE] if  ( referenceInfo == null || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^}  if  ( isInlineableDeclaredConstant ( v, referenceInfo )  )  {^210^^^^^196^223^[REPLACE] } else if  ( isInlineableDeclaredConstant ( v, referenceInfo )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^}  else {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 0 ) ;^220^^^^^215^221^[REPLACE] inlineNonConstants ( v, referenceInfo ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REMOVE]^|| !isValidInitialization ( initialization ) || !isValidReference ( reference )  )  {^220^^^^^215^221^[REMOVE] ^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Reference init = referenceInfo.getInitializingReference (  ) ;^211^^^^^196^223^[REPLACE] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Node value = init .getNameNode (  )  ;^212^^^^^196^223^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^} else if  (this  !=  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^}   continue;^215^216^^218^^196^223^[ADD] else if  ( mode == Mode.CONSTANTS_ONLY )  {  continue;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Node value = init.getNameNode (  ) ;^212^^^^^196^223^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^}  if  ( true  ||  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^198^^^^^196^223^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^if  ( referenceInfo != null || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^205^206^^^^196^223^[REPLACE] if  ( referenceInfo == null || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^220^^^^^215^221^[ADD] inlineNonConstants ( v, referenceInfo ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^211^^^^^196^223^[ADD] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^}  if  ( mode  &&  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Reference init = referenceInfo .getInitializingReference (  )  ;^211^^^^^196^223^[REPLACE] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^} else if  ( mode  ||  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^^211^212^^^^196^223^[ADD] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ; Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^} else if  ( mode  !=  Mode.CONSTANTS_ONLY )  {^215^^^^^196^223^[REPLACE] } else if  ( mode == Mode.CONSTANTS_ONLY )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Var v = this.hasNext (  ) ;^199^^^^^196^223^[REPLACE] Var v = it.next (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^ReferenceCollection referenceInfo = referenceMap .put ( value , null )  ;^201^^^^^196^223^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^for  ( Iterator<Var> it = t.getScope (  )  .getParent (  )  ; it.hasNext (  ) ; )  {^198^^^^^196^223^[REPLACE] for  ( Iterator<Var> it = t.getScope (  ) .getVars (  ) ; it.hasNext (  ) ; )  {^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Var v = 0.hasNext (  ) ;^199^^^^^196^223^[REPLACE] Var v = it.next (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^ReferenceCollection referenceInfo = this .put ( value , true )  ;^201^^^^^196^223^[REPLACE] ReferenceCollection referenceInfo = referenceMap.get ( v ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[ADD]^Node value = init.getAssignedValue (  ) ;^211^212^^^^196^223^[ADD] Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ; Node value = init.getAssignedValue (  ) ;^[METHOD] doInlinesForScope [TYPE] void [PARAMETER] NodeTraversal t ReferenceCollection> referenceMap [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Iterator it  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo 
[REPLACE]^Reference reference = referenceInfo.references.get (^227^^^^^226^284^[REPLACE] int refCount = referenceInfo.references.size (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^227^228^^^^226^284^[ADD] int refCount = referenceInfo.references.size (  ) ; Reference declaration = referenceInfo.references.get ( 0 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference declaration = referenceInfo.references .put ( value , candidate )  ;^228^^^^^226^284^[REPLACE] Reference declaration = referenceInfo.references.get ( 0 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference init = referenceInfo.getInitializingReferenceForConstants (  ) ;^229^^^^^226^284^[REPLACE] Reference init = referenceInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^int firstRefAfterInit  =  2 ;^230^^^^^226^284^[REPLACE] int firstRefAfterInit =  ( declaration == init )  ? 2 : 3;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( refCount > 1 ) {^232^233^^^^226^284^[REPLACE] if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^}  else {^240^^^^^226^284^[REPLACE] } else if  ( refCount == firstRefAfterInit )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^}   firstRefAfterInit - 1 ) ;^240^241^^243^244^226^284^[ADD] else if  ( refCount == firstRefAfterInit )  {  Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^}  else {^249^^^^^226^284^[REPLACE] } else if  ( declaration != init && refCount == 2 )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( isValidDeclaration ( declaration )  || isValidInitialization ( init )  )  {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^253^^^^^226^284^[ADD] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getNameNode (  ) ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  (  isValidInitialization ( init )  )  {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( canInline ( declaration, init, declaration )  )  {^245^^^^^226^284^[REPLACE] if  ( canInline ( declaration, init, reference )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^inline ( v, declaration, declaration, reference ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^staleVars.contains ( v ) ;^247^^^^^226^284^[REPLACE] staleVars.add ( v ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference reference = referenceInfo.references .get ( v )  ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( canInline ( declaration, init, init )  )  {^245^^^^^226^284^[REPLACE] if  ( canInline ( declaration, init, reference )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^inline ( v, declaration, init, init ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^}  if  ( declaration != init ) {^249^^^^^226^284^[REPLACE] } else if  ( declaration != init && refCount == 2 )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( isValidDeclaration ( declaration )  ) {^250^^^^^226^284^[REPLACE] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^250^251^^253^254^226^284^[ADD] if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  {  Node value = init.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = init.getNameNode (  ) ;^253^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference reference = referenceInfo.references.get ( refCount - 1 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getNameNode (  ) ;^236^^^^^232^258^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^} else if  ( refCount  !=  firstRefAfterInit )  {^240^^^^^226^284^[REPLACE] } else if  ( refCount == firstRefAfterInit )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^240^^^^^226^284^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^250^^^^^226^284^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( canInline ( reference, init, reference )  )  {^245^^^^^226^284^[REPLACE] if  ( canInline ( declaration, init, reference )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^inline ( v, declaration, reference, reference ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference reference = referenceInfo.references.get (refCount - 3 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^inline ( v, declaration, init, declaration ) ;^246^^^^^226^284^[REPLACE] inline ( v, declaration, init, reference ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^}   Node value = init.getAssignedValue (  ) ;^249^250^^^253^226^284^[ADD] else if  ( declaration != init && refCount == 2 )  { if  ( isValidDeclaration ( declaration )  && isValidInitialization ( init )  )  { Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^Preconditions.checkNotNull ( value ) ;^253^254^^^^226^284^[ADD] Node value = init.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^236^^^^^226^284^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference reference = referenceInfo.references.size (refCount - 1 ) ;^243^244^^^^226^284^[REPLACE] Reference reference = referenceInfo.references.get ( firstRefAfterInit - 1 ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  (  referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^264^265^^^^226^284^[REPLACE] if  ( !staleVars.contains ( v )  && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^264^265^266^267^268^226^284^[ADD] if  ( !staleVars.contains ( v )  && referenceInfo.isWellDefined (  )  && referenceInfo.isAssignedOnce (  )  )  { List<Reference> refs = referenceInfo.references; f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( aliasCandidates .get ( v )   )  {^269^^^^^264^283^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( staleVars.contains ( candidate.alias )  )  {^271^^^^^264^283^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^Reference aliasInit;aliasInit = candidate.refInfo.getInitializingReference (  ) ;Node value = aliasInit.getAssignedValue (  ) ;Preconditions.checkNotNull ( value ) ;^271^272^273^274^275^264^283^[ADD] if  ( !staleVars.contains ( candidate.alias )  )  { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference (  ) ; Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^aliasInit =  null.refInfo.getInitializingReference (  ) ;^273^^^^^264^283^[REPLACE] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^273^274^^^^264^283^[ADD] aliasInit = candidate.refInfo.getInitializingReference (  ) ; Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference refDecl = refSet.get ( 0 ) ;^272^^^^^264^283^[REPLACE] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getNameNode (  ) ;^274^^^^^264^283^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^AliasCandidate candidate = aliasCandidates.get ( value ) ;^270^^^^^264^283^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^272^^^^^264^283^[ADD] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference .getNameNode (  )  ;^274^^^^^264^283^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( !staleVars.add ( candidate.alias )  )  {^271^^^^^264^283^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^274^275^^^^264^283^[ADD] Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^f Node nameNode = refs.get ( firstRefAfterInit ) .getNameNode (  ) ;^267^268^^^^264^283^[REPLACE] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^267^268^^^^264^283^[ADD] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^269^^^^^264^283^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^269^^^^^264^283^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^274^^^^^264^283^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^AliasCandidate candidate = aliasCandidates.containsKey ( value ) ;^270^^^^^264^283^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^270^^^^^264^283^[ADD] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = aliasInit.getNameNode (  ) ;^274^^^^^264^283^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^271^^^^^264^283^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node nameNode = refs.get ( firstRefAfterInit ) .getNameNode (  ) ;^268^^^^^264^283^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^int refCount = referenceInfo.references.size (  ) ;^266^^^^^264^283^[REPLACE] List<Reference> refs = referenceInfo.references;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^266^^^^^264^283^[ADD] List<Reference> refs = referenceInfo.references;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^268^^^^^264^283^[ADD] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( aliasCandidates.containsKey ( value )  )  {^269^^^^^226^284^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^271^^^^^226^284^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^aliasInit =  null.refInfo.getInitializingReference (  ) ;^273^^^^^226^284^[REPLACE] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Reference refDecl = refSet.get ( 0 ) ;^272^^^^^226^284^[REPLACE] Reference aliasInit;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = aliasInit.getNameNode (  ) ;^274^^^^^226^284^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^AliasCandidate candidate = aliasCandidates.containsKey ( value ) ;^270^^^^^226^284^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getAssignedValue (  ) ;^274^^^^^226^284^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( !staleVars .add ( v )   )  {^271^^^^^226^284^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^f Node nameNode = refs.get (firstRefAfterInit ) .getNameNode (  ) ;^267^268^^^^226^284^[REPLACE] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^267^268^^^^226^284^[ADD] f Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^269^^^^^226^284^[REPLACE] if  ( aliasCandidates.containsKey ( nameNode )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REMOVE]^if  ( ! ( staleVars.contains ( candidate.alias )  )  )  {     Reference aliasInit;     aliasInit = getInitializingReference (  ) ;     Node value = aliasInit.getAssignedValue (  ) ;     checkNotNull ( value ) ;     inlineWellDefinedVariable ( candidate.alias, value, references ) ;     staleVars.add ( candidate.alias ) ; }^269^^^^^226^284^[REMOVE] ^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^if  ( !staleVars.add ( candidate.alias )  )  {^271^^^^^226^284^[REPLACE] if  ( !staleVars.contains ( candidate.alias )  )  {^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^AliasCandidate candidate = aliasCandidates.get ( value ) ;^270^^^^^226^284^[REPLACE] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^270^^^^^226^284^[ADD] AliasCandidate candidate = aliasCandidates.get ( nameNode ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^Preconditions.checkNotNull ( value ) ;^274^275^^^^226^284^[ADD] Node value = aliasInit.getAssignedValue (  ) ; Preconditions.checkNotNull ( value ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^^273^^^^^226^284^[ADD] aliasInit = candidate.refInfo.getInitializingReference (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node value = reference.getNameNode (  ) ;^274^^^^^226^284^[REPLACE] Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[ADD]^Node value = aliasInit.getAssignedValue (  ) ;^273^274^^^^226^284^[ADD] aliasInit = candidate.refInfo.getInitializingReference (  ) ; Node value = aliasInit.getAssignedValue (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node nameNode = refs.get ( firstRefAfterInit )  .getParent (  )  ;^268^^^^^226^284^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^int refCount = referenceInfo.references.size (  ) ;^266^^^^^226^284^[REPLACE] List<Reference> refs = referenceInfo.references;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^Node nameNode = 0.get ( i ) .getNameNode (  ) ;^268^^^^^226^284^[REPLACE] Node nameNode = refs.get ( i ) .getNameNode (  ) ;^[METHOD] inlineNonConstants [TYPE] void [PARAMETER] Var v ReferenceCollection referenceInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference aliasInit  declaration  init  reference  [TYPE]  Node nameNode  value  [TYPE]  List refs  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection referenceInfo  [TYPE]  int firstRefAfterInit  i  refCount  [TYPE]  AliasCandidate candidate 
[REPLACE]^for  ( Node c = root.getFirstChild (  ) ; c == true; c = c.getNext (  )  )  {^291^^^^^290^298^[REPLACE] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^blacklistVarReferencesInTree ( value, v.scope ) ;^292^^^^^290^298^[REPLACE] blacklistVarReferencesInTree ( c, scope ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^for  ( Node c =  root.getFirstChild (  ) ; null !^291^^^^^290^298^[REPLACE] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^for  ( Node c = root.getString (  ) ; c != null; c = c.getNext (  )  )  {^291^^^^^290^298^[REPLACE] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[ADD]^^291^292^293^^^290^298^[ADD] for  ( Node c = root.getFirstChild (  ) ; c != null; c = c.getNext (  )  )  { blacklistVarReferencesInTree ( c, scope ) ; }^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^if  ( root.getType (  )   &&  Token.NAME )  {^295^^^^^290^298^[REPLACE] if  ( root.getType (  )  == Token.NAME )  {^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^296^^^^^290^298^[REPLACE] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^staleVars.add ( scope.getVar ( root .getParent (  )   )  ) ;^296^^^^^290^298^[REPLACE] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[ADD]^^296^^^^^290^298^[ADD] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^staleVars.add ( scope.getVar ( root.getParent (  )  )  ) ;^296^^^^^290^298^[REPLACE] staleVars.add ( scope.getVar ( root.getString (  )  )  ) ;^[METHOD] blacklistVarReferencesInTree [TYPE] void [PARAMETER] Node root Scope scope [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node c  root 
[REPLACE]^return compiler.reportCodeChange (  ) .isExported ( var.name )  || staleVars.contains ( var ) ;^309^310^^^^303^311^[REPLACE] return compiler.getCodingConvention (  ) .isExported ( var.name )  || staleVars.contains ( var ) ;^[METHOD] isVarInlineForbidden [TYPE] boolean [PARAMETER] Var var [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var 
[REPLACE]^Node value = init.getNameNode (  ) ;^319^^^^^317^329^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^Preconditions.checkState ( expressRoot == false ) ;^320^^^^^317^329^[REPLACE] Preconditions.checkState ( value != null ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[ADD]^^320^^^^^317^329^[ADD] Preconditions.checkState ( value != null ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^inlineValue ( v, reference, expressRoot.detachFromParent (  )  ) ;^322^^^^^317^329^[REPLACE] inlineValue ( v, reference, value.detachFromParent (  )  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[ADD]^^322^^^^^317^329^[ADD] inlineValue ( v, reference, value.detachFromParent (  )  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^inlineValue ( v, reference, expressRoot .getParent (  )   ) ;^322^^^^^317^329^[REPLACE] inlineValue ( v, reference, value.detachFromParent (  )  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REMOVE]^if  ( referenceInfo == null || isVarInlineForbidden ( v )  || staleVars.contains ( v )  )  {^322^^^^^317^329^[REMOVE] ^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^if  ( declaration  ==  init )  {^323^^^^^317^329^[REPLACE] if  ( declaration != init )  {^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^Node expressRoot = reference.getGrandparent (  ) ;^324^^^^^317^329^[REPLACE] Node expressRoot = init.getGrandparent (  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^Node expressRoot = reference.getParent (  ) ;^324^^^^^317^329^[REPLACE] Node expressRoot = init.getGrandparent (  ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^removeDeclaration ( reference ) ;^328^^^^^317^329^[REPLACE] removeDeclaration ( declaration ) ;^[METHOD] inline [TYPE] void [PARAMETER] Var v Reference declaration Reference init Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference declaration  init  reference  [TYPE]  Node expressRoot  value 
[REPLACE]^Reference decl = refSet.get ( 0L ) ;^336^^^^^334^341^[REPLACE] Reference decl = refSet.get ( 0 ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^for  ( int i = 1; i < refSet.size (  )  - 2; i++ )  {^337^^^^^334^341^[REPLACE] for  ( int i = 1; i < refSet.size (  ) ; i++ )  {^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[ADD]^^337^338^339^^^334^341^[ADD] for  ( int i = 1; i < refSet.size (  ) ; i++ )  { inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ; }^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^inlineValue ( v, null.get ( i ) , value.cloneTree (  )  ) ;^338^^^^^334^341^[REPLACE] inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^inlineValue ( v, refSet .put ( value , null )  , value.cloneTree (  )  ) ;^338^^^^^334^341^[REPLACE] inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^inlineValue ( v, refSet.get ( i ) , value .detachFromParent (  )   ) ;^338^^^^^334^341^[REPLACE] inlineValue ( v, refSet.get ( i ) , value.cloneTree (  )  ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < refSet.size (  ) ; i++ )  {^337^^^^^334^341^[REPLACE] for  ( int i = 1; i < refSet.size (  ) ; i++ )  {^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 0 ) ;^340^^^^^334^341^[REPLACE] removeDeclaration ( decl ) ;^[METHOD] inlineWellDefinedVariable [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  int i 
[REPLACE]^Reference decl = this;^349^^^^^346^360^[REPLACE] Reference decl = null;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^if  ( r.getNameNode (  )   &&  v.getNameNode (  )  )  {^352^^^^^346^360^[REPLACE] if  ( r.getNameNode (  )  == v.getNameNode (  )  )  {^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineValue ( v, r, value.getType (  )  ) ;^355^^^^^346^360^[REPLACE] inlineValue ( v, r, value.cloneTree (  )  ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^inlineValue ( v, r, value .detachFromParent (  )   ) ;^355^^^^^346^360^[REPLACE] inlineValue ( v, r, value.cloneTree (  )  ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^decl =  null;^353^^^^^346^360^[REPLACE] decl = r;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[ADD]^^353^^^^^346^360^[ADD] decl = r;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^int refCount = referenceInfo.references.size (  ) ;^351^^^^^346^360^[REPLACE] for  ( Reference r : refSet )  {^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Reference declaration = referenceInfo.references.get ( 0 ) ;^359^^^^^346^360^[REPLACE] removeDeclaration ( decl ) ;^[METHOD] inlineDeclaredConstant [TYPE] void [PARAMETER] Var v Node value Reference> refSet [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference decl  r  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap 
[REPLACE]^Node varNode = declaration .getNext (  )  ;^366^^^^^365^378^[REPLACE] Node varNode = declaration.getParent (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[REPLACE]^varNode.removeChild ( declaration .getParent (  )   ) ;^367^^^^^365^378^[REPLACE] varNode.removeChild ( declaration.getNameNode (  )  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[REPLACE]^varNode.removeChild ( declaration.getParent (  )  ) ;^367^^^^^365^378^[REPLACE] varNode.removeChild ( declaration.getNameNode (  )  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[REPLACE]^if  ( grandparent.hasChildren (  )  )  {^370^^^^^365^378^[REPLACE] if  ( !varNode.hasChildren (  )  )  {^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[REPLACE]^Node grandparent = declaration.getParent (  ) ;^373^^^^^365^378^[REPLACE] Node grandparent = declaration.getGrandparent (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[REPLACE]^compiler.getCodingConvention (  ) ;^377^^^^^365^378^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[ADD]^^377^^^^^365^378^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] removeDeclaration [TYPE] void [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  [TYPE]  Node grandparent  varNode 
[REPLACE]^Node parent = ref .getNext (  )  ;^389^^^^^388^398^[REPLACE] Node parent = ref.getParent (  ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^390^^^^^388^398^[REPLACE] if  ( ref.isSimpleAssignmentToName (  )  )  {^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , parent ) ;^394^^^^^388^398^[REPLACE] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[ADD]^^394^^^^^388^398^[ADD] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^ref.getGrandparent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^394^^^^^388^398^[REPLACE] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^ref.getParent (  ) .replaceChild ( ref .getParent (  )  , value ) ;^394^^^^^388^398^[REPLACE] ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^ref.getParent (  ) .replaceChild ( parent, value ) ;^392^^^^^388^398^[REPLACE] ref.getGrandparent (  ) .replaceChild ( parent, value ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REMOVE]^ref.getParent (  ) .replaceChild ( ref.getNameNode (  ) , value ) ;^392^^^^^388^398^[REMOVE] ^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^blacklistVarReferencesInTree ( c, scope ) ;^396^^^^^388^398^[REPLACE] blacklistVarReferencesInTree ( value, v.scope ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^compiler.getCodingConvention (  ) ;^397^^^^^388^398^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] inlineValue [TYPE] void [PARAMETER] Var v Reference ref Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var v  [TYPE]  Reference ref  [TYPE]  Node parent  value 
[REPLACE]^if  ( refCount > 1 && isImmutableAndWellDefinedVariable ( v, referenceInfo )  )  {^406^^^^^405^435^[REPLACE] if  ( !identifyConstants.apply ( var )  )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^return true;^407^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^if  ( refInfo.isAssignedOnce (  )  )  {^410^^^^^405^435^[REPLACE] if  ( !refInfo.isAssignedOnce (  )  )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^return true;^411^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^Reference init = refInfo.getInitializingReference (  ) ;^414^^^^^405^435^[REPLACE] Reference init = refInfo.getInitializingReferenceForConstants (  ) ;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^if  ( init != false )  {^415^^^^^405^435^[REPLACE] if  ( init == null )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^return true;^416^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^Node value = init.getNameNode (  ) ;^419^^^^^405^435^[REPLACE] Node value = init.getAssignedValue (  ) ;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^if  ( value != this  )  {^420^^^^^405^435^[REPLACE] if  ( value == null )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^return true;^424^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^if  ( !NodeUtil.isLiteralValue ( value )  )  {^428^^^^^405^435^[REPLACE] if  ( !NodeUtil.isImmutableValue ( value )  )  {^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^return true;^429^^^^^405^435^[REPLACE] return false;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^return value.getType (  )  != Token.STRING && isStringWorthInlining ( var, refInfo.references ) ;;^433^434^^^^405^435^[REPLACE] return value.getType (  )  != Token.STRING || isStringWorthInlining ( var, refInfo.references ) ;^[METHOD] isInlineableDeclaredConstant [TYPE] boolean [PARAMETER] Var var ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var var  [TYPE]  Reference init  [TYPE]  Node value  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo 
[REPLACE]^if  ( inlineAllStrings && !var.isDefine (  )  )  {^441^^^^^440^463^[REPLACE] if  ( !inlineAllStrings && !var.isDefine (  )  )  {^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[ADD]^int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^441^442^^^^440^463^[ADD] if  ( !inlineAllStrings && !var.isDefine (  )  )  { int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^return false ;^459^^^^^440^463^[REPLACE] return noInlineBytes >= inlineBytes;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int len = var.getInitialValue (  ) .getString (  ) .length (  )  %  2 + "''".length (  )  %  2;^442^^^^^440^463^[REPLACE] int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 3 - 1 ) ;^448^449^^^^440^463^[REPLACE] int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  + 4 - 1 ) ;^455^^^^^440^463^[REPLACE] int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^return noInlineBytes  ;^459^^^^^440^463^[REPLACE] return noInlineBytes >= inlineBytes;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int len = var.getInitialValue (  ) .getString (  ) .length (  )  /  2 + "''".length (  )  /  2;^442^^^^^440^463^[REPLACE] int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[ADD]^^442^^^^^440^463^[ADD] int len = var.getInitialValue (  ) .getString (  ) .length (  )  + "''".length (  ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 1 - 1 ) ;^448^449^^^^440^463^[REPLACE] int noInlineBytes = "var xx=;".length (  )  + len + 4 *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^int inlineBytes =  ( len - 0  )  *  ( refs.length (  )  - 0  ) ;^455^^^^^440^463^[REPLACE] int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[ADD]^^455^^^^^440^463^[ADD] int inlineBytes =  ( len - 1 )  *  ( refs.size (  )  - 1 ) ;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^return false;^462^^^^^440^463^[REPLACE] return true;^[METHOD] isStringWorthInlining [TYPE] boolean [PARAMETER] Var var Reference> refs [CLASS] InliningBehavior   [TYPE]  List refs  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Var var  [TYPE]  int inlineBytes  len  noInlineBytes 
[REPLACE]^if  ( isValidDeclaration ( declaration ) ) {^473^474^475^^^472^513^[REPLACE] if  ( !isValidDeclaration ( declaration ) || !isValidInitialization ( initialization ) || !isValidReference ( reference )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[ADD]^^473^474^475^476^477^472^513^[ADD] if  ( !isValidDeclaration ( declaration ) || !isValidInitialization ( initialization ) || !isValidReference ( reference )  )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^476^^^^^473^477^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^476^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^if  ( declaration != initialization ) {^482^483^^^^472^513^[REPLACE] if  ( declaration != initialization && initialization.getGrandparent (  ) .getType (  )  != Token.EXPR_RESULT )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^484^^^^^482^485^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^484^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^if  ( declaration.getBasicBlock (  )  != initialization.getBasicBlock (  ) && declaration.getBasicBlock (  )  != reference.getBasicBlock (  )  )  {^489^490^^^^472^513^[REPLACE] if  ( declaration.getBasicBlock (  )  != initialization.getBasicBlock (  ) || declaration.getBasicBlock (  )  != reference.getBasicBlock (  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[ADD]^^489^490^491^492^^472^513^[ADD] if  ( declaration.getBasicBlock (  )  != initialization.getBasicBlock (  ) || declaration.getBasicBlock (  )  != reference.getBasicBlock (  )  )  { return false; }^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^491^^^^^489^492^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^491^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^Node value = declaration.getAssignedValue (  ) ;^503^^^^^472^513^[REPLACE] Node value = initialization.getAssignedValue (  ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^Preconditions.checkState ( value == null ) ;^504^^^^^472^513^[REPLACE] Preconditions.checkState ( value != null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[ADD]^^504^^^^^472^513^[ADD] Preconditions.checkState ( value != null ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^if  ( value.getType (  )  == Token.GETPROP ) {^505^506^507^^^472^513^[REPLACE] if  ( value.getType (  )  == Token.GETPROP && reference.getParent (  ) .getType (  )  == Token.CALL && reference.getParent (  ) .getFirstChild (  )  == reference.getNameNode (  )  )  {^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^508^^^^^505^509^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return true;^508^^^^^472^513^[REPLACE] return false;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return canMoveAggressively ( value )  && canMoveModerately ( initialization, reference ) ;^511^512^^^^472^513^[REPLACE] return canMoveAggressively ( value )  || canMoveModerately ( initialization, reference ) ;^[METHOD] canInline [TYPE] boolean [PARAMETER] Reference declaration Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration  initialization  reference  [TYPE]  Node value 
[REPLACE]^return NodeUtil.isLiteralValue ( value ) || value .getString (  )   == Token.FUNCTION;^521^522^^^^518^523^[REPLACE] return NodeUtil.isLiteralValue ( value ) || value.getType (  )  == Token.FUNCTION;^[METHOD] canMoveAggressively [TYPE] boolean [PARAMETER] Node value [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Node value 
[REPLACE]^Node varNode = declaration.getParent (  ) ;^535^^^^^532^561^[REPLACE] Iterator<Node> it;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^if  ( initialization.getParent (  ) .getType (  )   !=  Token.VAR )  {^536^^^^^532^561^[REPLACE] if  ( initialization.getParent (  ) .getType (  )  == Token.VAR )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^}  else {^541^^^^^532^561^[REPLACE] } else if  ( initialization.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^return ;^550^^^^^541^551^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[ADD]^^550^^^^^541^551^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^it =  NodeIterators.LocalVarMotion.forAssign ( null.getNameNode (  ) , null.getParent (  ) , null.getGrandparent (  ) ,^544^545^546^547^^532^561^[REPLACE] it = NodeIterators.LocalVarMotion.forAssign ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  ) ,^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[ADD]^^544^545^546^547^548^532^561^[ADD] it = NodeIterators.LocalVarMotion.forAssign ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  ) , initialization.getGrandparent (  ) .getParent (  )  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^return ;^550^^^^^532^561^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[ADD]^^550^^^^^532^561^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^it =  NodeIterators.LocalVarMotion.forVar ( null.getNameNode (  ) , null.getParent (  ) , null.getGrandparent (  )  ) ;^537^538^539^540^^532^561^[REPLACE] it = NodeIterators.LocalVarMotion.forVar ( initialization.getNameNode (  ) , initialization.getParent (  ) , initialization.getGrandparent (  )  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^}  if  ( initialization.getParent (  ) .getType (  )   ||  Token.ASSIGN )  {^541^^^^^532^561^[REPLACE] } else if  ( initialization.getParent (  ) .getType (  )  == Token.ASSIGN )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^Node targetName = reference .getParent (  )  ;^552^^^^^532^561^[REPLACE] Node targetName = reference.getNameNode (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^while  ( this.hasNext (  )  )  {^553^^^^^532^561^[REPLACE] while  ( it.hasNext (  )  )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^if  ( curNode  &&  targetName )  {^555^^^^^532^561^[REPLACE] if  ( curNode == targetName )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[ADD]^^555^556^557^^^532^561^[ADD] if  ( curNode == targetName )  { return true; }^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^return false;^556^^^^^532^561^[REPLACE] return true;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^Node curNode = this.hasNext (  ) ;^554^^^^^532^561^[REPLACE] Node curNode = it.next (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^if  ( curNode  !=  targetName )  {^555^^^^^532^561^[REPLACE] if  ( curNode == targetName )  {^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^Node curNode = null.next (  ) ;^554^^^^^532^561^[REPLACE] Node curNode = it.next (  ) ;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^return true;^560^^^^^532^561^[REPLACE] return false;^[METHOD] canMoveModerately [TYPE] boolean [PARAMETER] Reference initialization Reference reference [CLASS] InliningBehavior   [TYPE]  Iterator it  [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  reference  [TYPE]  Node curNode  targetName 
[REPLACE]^return declaration.getParent (  ) .replaceChild (  )  == Token.VAR && declaration.getGrandparent (  ) .getType (  )  != Token.FOR;^568^569^^^^567^570^[REPLACE] return declaration.getParent (  ) .getType (  )  == Token.VAR && declaration.getGrandparent (  ) .getType (  )  != Token.FOR;^[METHOD] isValidDeclaration [TYPE] boolean [PARAMETER] Reference declaration [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference declaration 
[REPLACE]^if  ( initialization != null )  {^576^^^^^575^588^[REPLACE] if  ( initialization == null )  {^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^}  else {^578^^^^^575^588^[REPLACE] } else if  ( initialization.isDeclaration (  )  )  {^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^return false;^586^^^^^575^588^[REPLACE] return true;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^Node parent = initialization.getGrandparent (  ) ;^582^^^^^575^588^[REPLACE] Node parent = initialization.getParent (  ) ;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^return initialization .getParent (  )  .getFirstChild (  )  != this;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^return initialization.getNameNode (  ) .replaceChild (  )  != null;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^Node parent = initialization .getNext (  )  ;^582^^^^^575^588^[REPLACE] Node parent = initialization.getParent (  ) ;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^return true;^577^^^^^575^588^[REPLACE] return false;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^}  if  ( initialization.isDeclaration (  )  )  {^578^^^^^575^588^[REPLACE] } else if  ( initialization.isDeclaration (  )  )  {^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[ADD]^}   return initialization.getNameNode (  ) .getFirstChild (  )  != null;Node parent = initialization.getParent (  ) ;^578^579^580^581^582^575^588^[ADD] else if  ( initialization.isDeclaration (  )  )  {  return initialization.getNameNode (  ) .getFirstChild (  )  != null; } else { Node parent = initialization.getParent (  ) ;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^return initialization.getNameNode (  )  .getString (  )   != null;^580^^^^^575^588^[REPLACE] return initialization.getNameNode (  ) .getFirstChild (  )  != null;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[ADD]^^582^^^^^575^588^[ADD] Node parent = initialization.getParent (  ) ;^[METHOD] isValidInitialization [TYPE] boolean [PARAMETER] Reference initialization [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference initialization  [TYPE]  Node parent 
[REPLACE]^return !reference.isDeclaration (  )  ;^594^^^^^593^595^[REPLACE] return !reference.isDeclaration (  )  && !reference.isLvalue (  ) ;^[METHOD] isValidReference [TYPE] boolean [PARAMETER] Reference reference [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  Reference reference 
[REPLACE]^int refCount = referenceInfo.references.size (  ) ;^604^^^^^603^637^[REPLACE] List<Reference> refSet = refInfo.references;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[ADD]^^604^^^^^603^637^[ADD] List<Reference> refSet = refInfo.references;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^int startingReadRef = 3;^605^^^^^603^637^[REPLACE] int startingReadRef = 1;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[ADD]^Reference refDecl = refSet.get ( 0 ) ;^605^606^^^^603^637^[ADD] int startingReadRef = 1; Reference refDecl = refSet.get ( 0 ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference refDecl = this.get ( 0L ) ;^606^^^^^603^637^[REPLACE] Reference refDecl = refSet.get ( 0 ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !isValidDeclaration ( refInit )  )  {^607^^^^^603^637^[REPLACE] if  ( !isValidDeclaration ( refDecl )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^608^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference refInit = refInfo.getInitializingReferenceForConstants (  ) ;^611^^^^^603^637^[REPLACE] Reference refInit = refInfo.getInitializingReference (  ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !isValidInitialization ( refDecl )  )  {^612^^^^^603^637^[REPLACE] if  ( !isValidInitialization ( refInit )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^613^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( refDecl  ==  refInit )  {^616^^^^^603^637^[REPLACE] if  ( refDecl != refInit )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^startingReadRef = 0;^618^^^^^603^637^[REPLACE] startingReadRef = 2;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[ADD]^^618^^^^^603^637^[ADD] startingReadRef = 2;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^startingReadRef = 2 - 1;^618^^^^^603^637^[REPLACE] startingReadRef = 2;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !isValidReference ( refInit )  )  {^623^^^^^603^637^[REPLACE] if  ( !isValidReference ( ref )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^624^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^for  ( int i = startingReadRef; i < refSet.size (  )  /  2; i++ )  {^621^^^^^603^637^[REPLACE] for  ( int i = startingReadRef; i < refSet.size (  ) ; i++ )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[ADD]^^621^622^623^624^625^603^637^[ADD] for  ( int i = startingReadRef; i < refSet.size (  ) ; i++ )  { Reference ref = refSet.get ( i ) ; if  ( !isValidReference ( ref )  )  { return false; }^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[ADD]^return false;^623^624^625^^^603^637^[ADD] if  ( !isValidReference ( ref )  )  { return false; }^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^Reference ref = refSet.get ( startingReadRef ) ;^622^^^^^603^637^[REPLACE] Reference ref = refSet.get ( i ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^for  ( int i = i; i < refSet.size (  ) ; i++ )  {^621^^^^^603^637^[REPLACE] for  ( int i = startingReadRef; i < refSet.size (  ) ; i++ )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^if  ( !refInfo .isAssignedOnce (  )   )  {^628^^^^^603^637^[REPLACE] if  ( !refInfo.isWellDefined (  )  )  {^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[ADD]^return false;^628^629^630^^^603^637^[ADD] if  ( !refInfo.isWellDefined (  )  )  { return false; }^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^return true;^629^^^^^603^637^[REPLACE] return false;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^Node value = refDecl.getAssignedValue (  ) ;^632^^^^^603^637^[REPLACE] Node value = refInit.getAssignedValue (  ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^value   ;^633^^^^^603^637^[REPLACE] Preconditions.checkNotNull ( value ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
[REPLACE]^return   ( value.getType (  )  != Token.STRING || isStringWorthInlining ( v, refInfo.references )  ) ;;^634^635^636^^^603^637^[REPLACE] return NodeUtil.isImmutableValue ( value )  && ( value.getType (  )  != Token.STRING || isStringWorthInlining ( v, refInfo.references )  ) ;^[METHOD] isImmutableAndWellDefinedVariable [TYPE] boolean [PARAMETER] Var v ReferenceCollection refInfo [CLASS] InliningBehavior   [TYPE]  Set staleVars  [TYPE]  boolean false  true  [TYPE]  Var v  [TYPE]  Reference ref  refDecl  refInit  [TYPE]  Node value  [TYPE]  List refSet  [TYPE]  Map aliasCandidates  referenceMap  [TYPE]  ReferenceCollection refInfo  [TYPE]  int i  startingReadRef 
