[REPLACE]^private  Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^51^52^^^^51^65^[REPLACE] private final Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^private final Visitor<JSType> restrictToNotArrayVisitor  = null ;^70^71^^^^70^76^[REPLACE] private final Visitor<JSType> restrictToNotArrayVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^private  Visitor<JSType> restrictToObjectVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^82^83^^^^82^98^[REPLACE] private final Visitor<JSType> restrictToObjectVisitor = new RestrictByTrueTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^private final Visitor<JSType> restrictToNotObjectVisitor ;^103^104^^^^103^114^[REPLACE] private final Visitor<JSType> restrictToNotObjectVisitor = new RestrictByFalseTypeOfResultVisitor (  )  {^ [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5  
[REPLACE]^Node param = condition.getLastChild (  ) ;^125^^^^^124^191^[REPLACE] super ( convention, typeRegistry ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( this.second )  {^130^^^^^124^191^[REPLACE] if  ( p.second )  {^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return false;^133^^^^^130^134^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( null.first ) ;^131^^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( null.second )  {^139^^^^^124^191^[REPLACE] if  ( p.second )  {^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[ADD]^return getNativeType ( NULL_TYPE ) ;return getRestrictedWithoutNull ( p.first ) ;^139^140^141^142^143^124^191^[ADD] if  ( p.second )  { return getNativeType ( NULL_TYPE ) ; } else { return getRestrictedWithoutNull ( p.first ) ; }^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( null.first ) ;^142^^^^^139^143^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getNativeType ( NO_OBJECT_TYPE ) ;^140^^^^^124^191^[REPLACE] return getNativeType ( NULL_TYPE ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^if  ( null.second )  {^148^^^^^124^191^[REPLACE] if  ( p.second )  {^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return this;^152^^^^^148^153^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( this.first )  ) ;^149^150^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( true.first ) ;^131^^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return false;^133^^^^^124^191^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( this.first ) ;^142^^^^^124^191^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( null.first )  ) ;^149^150^^^^124^191^[REPLACE] return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return this;^152^^^^^124^191^[REPLACE] return null;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( null.first, "string", p.second ) ;^158^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( this.first, "boolean", p.second ) ;^163^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( null.first, "number", p.second ) ;^168^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( false.first, "function", p.second ) ;^173^^^^^124^191^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = 0.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^178^179^^^^124^191^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = null.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^185^186^^^^124^191^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[ADD]^^185^186^^^^124^191^[ADD] Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[METHOD] <init> [TYPE] JSTypeRegistry) [PARAMETER] CodingConvention convention JSTypeRegistry typeRegistry [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSTypeRegistry typeRegistry  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  CodingConvention convention  [TYPE]  Pair p 
[REPLACE]^return informed;^57^^^^^54^58^[REPLACE] return topType;^[METHOD] caseTopType [TYPE] JSType [PARAMETER] JSType topType [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSType topType  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^62^^^^^61^64^[REPLACE] JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  ObjectType type  [TYPE]  JSType arrayType  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[ADD]^^62^63^^^^61^64^[ADD] JSType arrayType = getNativeType ( ARRAY_TYPE ) ; return arrayType.isSubtype ( type )  ? arrayType : null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  ObjectType type  [TYPE]  JSType arrayType  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^return arrayType.isSubtype ( type )  ? arrayType : false;^63^^^^^61^64^[REPLACE] return arrayType.isSubtype ( type )  ? arrayType : null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  ObjectType type  [TYPE]  JSType arrayType  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? false : type;^74^^^^^73^75^[REPLACE] return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  ObjectType type  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^return getNativeType ( NULL_TYPE ) ;^86^^^^^85^87^[REPLACE] return getNativeType ( NO_OBJECT_TYPE ) ;^[METHOD] caseTopType [TYPE] JSType [PARAMETER] JSType topType [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  JSType topType  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^return informed;^91^^^^^90^92^[REPLACE] return type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  ObjectType type  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^return informed;^96^^^^^95^97^[REPLACE] return type;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  FunctionType type 
[REPLACE]^return false;^107^^^^^106^108^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  ObjectType type  [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters 
[REPLACE]^return true;^112^^^^^111^113^[REPLACE] return null;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  FunctionType type 
[REPLACE]^if  ( false.second )  {^130^^^^^129^135^[REPLACE] if  ( p.second )  {^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return this;^133^^^^^129^135^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( p.first ) ;^131^^^^^129^135^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( null.first ) ;^131^^^^^129^135^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return true;^133^^^^^129^135^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^if  ( this.second )  {^139^^^^^138^144^[REPLACE] if  ( p.second )  {^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( null.first ) ;^142^^^^^138^144^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getNativeType ( NO_OBJECT_TYPE ) ;^140^^^^^138^144^[REPLACE] return getNativeType ( NULL_TYPE ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( p.first ) ;^142^^^^^138^144^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^if  ( this.second )  {^148^^^^^147^154^[REPLACE] if  ( p.second )  {^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REMOVE]^if  ( p.second )  {     return getRestrictedWithoutUndefined ( p.first ) ; }else {     return null; }^148^^^^^147^154^[REMOVE] ^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return false;^152^^^^^147^154^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( null.first )  ) ;^149^150^^^^147^154^[REPLACE] return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return true;^152^^^^^147^154^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( this.first, "string", p.second ) ;^158^^^^^157^159^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^163^^^^^162^164^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^168^^^^^167^169^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( this.first, "function", p.second ) ;^173^^^^^172^174^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = null.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^178^179^^^^177^181^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = null.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^185^186^^^^184^188^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  boolean false  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Map restricters  [TYPE]  Pair p 
[REPLACE]^if  ( condition.getType (  )  == CALL || condition.getChildCount (  )  == 2 )  {^195^^^^^193^217^[REPLACE] if  ( condition.getType (  )  == CALL && condition.getChildCount (  )  == 2 )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( callee .getString (  )    ||  GETPROP )  {^198^^^^^193^217^[REPLACE] if  ( callee.getType (  )  == GETPROP )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;Node left = callee.getFirstChild (  ) ;Node right = callee.getLastChild (  ) ;^198^199^200^201^202^193^217^[ADD] if  ( callee.getType (  )  == GETPROP )  { JSType paramType =  getTypeIfRefinable ( param, blindScope ) ; if  ( paramType != null )  { Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( paramType == this  )  {^200^^^^^193^217^[REPLACE] if  ( paramType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( left.getType (  )  == NAME || "goog".equals ( left.getString (  )  )  || right.getType (  )  == STRING )  {^203^204^^^^193^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( false == null )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, restricter, true ) ;^208^209^^^^193^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^208^209^^^^193^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getString (  )  ) ;^205^206^^^^193^217^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^205^206^^^^193^217^[ADD] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == true )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^207^208^209^210^^193^217^[ADD] if  ( restricter != null )  { return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ; }^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( callee, paramType, blindScope, restricter, outcome ) ;^208^209^^^^193^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, false, outcome ) ;^208^209^^^^193^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = param .getLastChild (  )  ;^201^^^^^193^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^201^202^^^^193^217^[ADD] Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = param.getLastChild (  ) ;^202^^^^^193^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  (  "goog".equals ( left.getString (  )  )  || right.getType (  )  == STRING )  {^203^204^^^^193^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == null )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^JSType calleeType =  getTypeIfRefinable ( param, blindScope ) ;^199^^^^^193^217^[REPLACE] JSType paramType =  getTypeIfRefinable ( param, blindScope ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = param.getFirstChild (  ) ;^201^^^^^193^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = callee .getFirstChild (  )  ;^202^^^^^193^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^202^^^^^193^217^[ADD] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( paramType == null )  {^200^^^^^193^217^[REPLACE] if  ( paramType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( false == true )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, null, outcome ) ;^208^209^^^^193^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == this )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = callee .getLastChild (  )  ;^201^^^^^193^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = callee.getFirstChild (  ) ;^202^^^^^193^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^203^204^205^206^^193^217^[ADD] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  { Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getType (  )  ) ;^205^206^^^^193^217^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( this == null )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node callee = right.getFirstChild (  ) ;^196^^^^^193^217^[REPLACE] Node callee = condition.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node param = right.getLastChild (  ) ;^197^^^^^193^217^[REPLACE] Node param = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node right = param.getFirstChild (  ) ;^202^^^^^193^217^[REPLACE] Node right = callee.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( left.getType (  )  ) ;^205^206^^^^193^217^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( callee.getType (  )   ||  GETPROP )  {^198^^^^^193^217^[REPLACE] if  ( callee.getType (  )  == GETPROP )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( paramType == this )  {^200^^^^^193^217^[REPLACE] if  ( paramType != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( left.getType (  )  == NAME ) {^203^204^^^^193^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == this  )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right .getLastChild (  )   ) ;^205^206^^^^193^217^[REPLACE] Function<Pair<JSType, Boolean>, JSType> restricter = restricters.get ( right.getString (  )  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return restrictParameter ( param, paramType, blindScope, true, outcome ) ;^208^209^^^^193^217^[REPLACE] return restrictParameter ( param, paramType, blindScope, restricter, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^200^201^202^203^^193^217^[ADD] if  ( paramType != null )  { Node left = callee.getFirstChild (  ) ; Node right = callee.getLastChild (  ) ; if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  &&^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( null == this )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node left = param.getLastChild (  ) ;^201^^^^^193^217^[REPLACE] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[ADD]^^201^^^^^193^217^[ADD] Node left = callee.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  (  "goog".equals ( left .getLastChild (  )   )  || right.getType (  )  == STRING )  {^203^204^^^^193^217^[REPLACE] if  ( left.getType (  )  == NAME && "goog".equals ( left.getString (  )  )  && right.getType (  )  == STRING )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^if  ( restricter == false )  {^207^^^^^193^217^[REPLACE] if  ( restricter != null )  {^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node callee = right .getLastChild (  )  ;^196^^^^^193^217^[REPLACE] Node callee = condition.getFirstChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^Node param = right.getFirstChild (  ) ;^197^^^^^193^217^[REPLACE] Node param = condition.getLastChild (  ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, true ) ;^215^216^^^^193^217^[REPLACE] return nextPreciserScopeKnowingConditionOutcome ( condition, blindScope, outcome ) ;^[METHOD] getPreciserScopeKnowingConditionOutcome [TYPE] FlowScope [PARAMETER] Node condition FlowScope blindScope boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restricter  [TYPE]  boolean false  outcome  true  [TYPE]  JSType paramType  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node callee  condition  left  param  right  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope 
[REPLACE]^type =  0.apply ( Pair.of ( type, outcome )  ) ;^223^^^^^219^233^[REPLACE] type = restriction.apply ( Pair.of ( type, outcome )  ) ;^[METHOD] restrictParameter [TYPE] FlowScope [PARAMETER] Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restriction  [TYPE]  JSType type  [TYPE]  boolean false  outcome  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node parameter  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^if  ( type == null )  {^226^^^^^219^233^[REPLACE] if  ( type != null )  {^[METHOD] restrictParameter [TYPE] FlowScope [PARAMETER] Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restriction  [TYPE]  JSType type  [TYPE]  boolean false  outcome  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node parameter  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return informed;^231^^^^^219^233^[REPLACE] return blindScope;^[METHOD] restrictParameter [TYPE] FlowScope [PARAMETER] Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restriction  [TYPE]  JSType type  [TYPE]  boolean false  outcome  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node parameter  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^return blindScope;^229^^^^^219^233^[REPLACE] return informed;^[METHOD] restrictParameter [TYPE] FlowScope [PARAMETER] Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restriction  [TYPE]  JSType type  [TYPE]  boolean false  outcome  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node parameter  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope  informed 
[REPLACE]^FlowScope informed = informed.createChildFlowScope (  ) ;^227^^^^^219^233^[REPLACE] FlowScope informed = blindScope.createChildFlowScope (  ) ;^[METHOD] restrictParameter [TYPE] FlowScope [PARAMETER] Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restriction  [TYPE]  JSType type  [TYPE]  boolean false  outcome  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node parameter  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope  informed 
[ADD]^^227^228^229^230^231^219^233^[ADD] FlowScope informed = blindScope.createChildFlowScope (  ) ; declareNameInScope ( informed, parameter, type ) ; return informed; } else { return blindScope;^[METHOD] restrictParameter [TYPE] FlowScope [PARAMETER] Node parameter JSType type FlowScope blindScope JSType> restriction boolean outcome [CLASS] ClosureReverseAbstractInterpreter 1 2 3 4 13 12 11 10 9 8 7 6 5   [TYPE]  Function restriction  [TYPE]  JSType type  [TYPE]  boolean false  outcome  true  [TYPE]  Visitor restrictToArrayVisitor  restrictToNotArrayVisitor  restrictToNotObjectVisitor  restrictToObjectVisitor  visitor  [TYPE]  Node parameter  [TYPE]  Map restricters  [TYPE]  FlowScope blindScope  informed 
[ADD]^^62^^^^^61^64^[ADD] JSType arrayType = getNativeType ( ARRAY_TYPE ) ;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] 1   [TYPE]  ObjectType type  [TYPE]  JSType arrayType  [TYPE]  boolean false  true 
[REPLACE]^return arrayType.isSubtype ( type )  ? arrayType : false;^63^^^^^61^64^[REPLACE] return arrayType.isSubtype ( type )  ? arrayType : null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] 1   [TYPE]  ObjectType type  [TYPE]  JSType arrayType  [TYPE]  boolean false  true 
[REPLACE]^return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? false : type;^74^^^^^73^75^[REPLACE] return type.isSubtype ( getNativeType ( ARRAY_TYPE )  )  ? null : type;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] 2   [TYPE]  ObjectType type  [TYPE]  boolean false  true 
[REPLACE]^return false;^107^^^^^106^108^[REPLACE] return null;^[METHOD] caseObjectType [TYPE] JSType [PARAMETER] ObjectType type [CLASS] 4   [TYPE]  ObjectType type  [TYPE]  boolean false  true 
[REPLACE]^return false;^112^^^^^111^113^[REPLACE] return null;^[METHOD] caseFunctionType [TYPE] JSType [PARAMETER] FunctionType type [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  FunctionType type 
[REPLACE]^if  ( this.second )  {^130^^^^^129^135^[REPLACE] if  ( p.second )  {^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 13   [TYPE]  boolean false  true  [TYPE]  Pair p 
[ADD]^return getRestrictedWithoutUndefined ( p.first ) ;return null;^130^131^132^133^134^129^135^[ADD] if  ( p.second )  { return getRestrictedWithoutUndefined ( p.first ) ; } else { return null; }^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 13   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return this;^133^^^^^129^135^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 13   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( null.first ) ;^131^^^^^129^135^[REPLACE] return getRestrictedWithoutUndefined ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 13   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^133^^^^^129^135^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 13   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( false.second )  {^139^^^^^138^144^[REPLACE] if  ( p.second )  {^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 12   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( null.first ) ;^142^^^^^138^144^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 12   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( p.first ) ;^140^^^^^138^144^[REPLACE] return getNativeType ( NULL_TYPE ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 12   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutNull ( this.first ) ;^142^^^^^138^144^[REPLACE] return getRestrictedWithoutNull ( p.first ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 12   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^if  ( 1.second )  {^148^^^^^147^154^[REPLACE] if  ( p.second )  {^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 11   [TYPE]  boolean false  true  [TYPE]  Pair p 
[ADD]^^148^149^150^151^152^147^154^[ADD] if  ( p.second )  { return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ; } else { return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 11   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return true;^152^^^^^147^154^[REPLACE] return null;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 11   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( null.first )  ) ;^149^150^^^^147^154^[REPLACE] return getRestrictedWithoutUndefined ( getRestrictedWithoutNull ( p.first )  ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 11   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( false.first, "string", p.second ) ;^158^^^^^157^159^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "string", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 10   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( this.first, "boolean", p.second ) ;^163^^^^^162^164^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "boolean", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 9   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( 1.first, "number", p.second ) ;^168^^^^^167^169^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "number", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 8   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^return getRestrictedByTypeOfResult ( 0.first, "function", p.second ) ;^173^^^^^172^174^[REPLACE] return getRestrictedByTypeOfResult ( p.first, "function", p.second ) ;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 7   [TYPE]  boolean false  true  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = null.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^178^179^^^^177^181^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToArrayVisitor : restrictToNotArrayVisitor;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 6   [TYPE]  boolean false  true  [TYPE]  Visitor visitor  [TYPE]  Pair p 
[REPLACE]^Visitor<JSType> visitor = this.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^185^186^^^^184^188^[REPLACE] Visitor<JSType> visitor = p.second ? restrictToObjectVisitor : restrictToNotObjectVisitor;^[METHOD] apply [TYPE] JSType [PARAMETER] Boolean> p [CLASS] 5   [TYPE]  boolean false  true  [TYPE]  Visitor visitor  [TYPE]  Pair p 
