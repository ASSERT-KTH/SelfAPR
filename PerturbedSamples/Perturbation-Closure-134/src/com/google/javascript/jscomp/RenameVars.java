[REPLACE]^private final new Assignment> (  )  ;^40^^^^^^^[REPLACE] private final ArrayList<Node> globalNameNodes = new ArrayList<Node> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final ArrayList<Node> localNameNodes ;^43^^^^^^^[REPLACE] private final ArrayList<Node> localNameNodes = new ArrayList<Node> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  ArrayList<String> localTempNames = new ArrayList<String> (  ) ;^46^^^^^^^[REPLACE] private final ArrayList<String> localTempNames = new ArrayList<String> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final Set<String> externNames  = null ;^49^^^^^^^[REPLACE] private final Set<String> externNames = new HashSet<String> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  Map<String, String> renameMap = new HashMap<String, String> (  ) ;^55^^^^^^^[REPLACE] private final Map<String, String> renameMap = new HashMap<String, String> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final  double  prefix;^61^^^^^^^[REPLACE] private final String prefix;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private int assignmentCount ;^64^^^^^^^[REPLACE] private int assignmentCount = 0;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^CompilerInput input;^70^^^^^^^[REPLACE] final CompilerInput input;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^final  boolean  oldName;^71^^^^^^^[REPLACE] final String oldName;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^int orderOfOccurrence;^72^^^^^^^[REPLACE] final int orderOfOccurrence;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^short  count;^74^^^^^^^[REPLACE] int count;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private final SortedMap<String, Assignment> assignments ;^96^97^^^^96^97^[REPLACE] private final SortedMap<String, Assignment> assignments = new TreeMap<String, Assignment> (  ) ;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  boolean localRenamingOnly;^100^^^^^^^[REPLACE] private final boolean localRenamingOnly;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  char[] reservedCharacters;^113^^^^^^^[REPLACE] private final char[] reservedCharacters;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private static final  char  LOCAL_VAR_PREFIX = "L ";^116^^^^^^^[REPLACE] private static final String LOCAL_VAR_PREFIX = "L ";^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  boolean isExternsPass_;^164^^^^^^^[REPLACE] private final boolean isExternsPass_;^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private  final Comparator<Assignment> FREQUENCY_COMPARATOR = new Comparator<Assignment> (  )  {^243^244^^^^243^253^[REPLACE] private static final Comparator<Assignment> FREQUENCY_COMPARATOR = new Comparator<Assignment> (  )  {^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR  = null ;^259^260^^^^259^264^[REPLACE] private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR = new Comparator<Assignment> (  )  {^ [CLASS] RenameVars Assignment ProcessVars 1 2  
[REPLACE]^this.input =  null;^77^^^^^76^84^[REPLACE] this.input = input;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.newName = newName; ;^78^^^^^76^84^[REPLACE] this.oldName = name;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.newName = newName; ;^79^^^^^76^84^[REPLACE] this.newName = null;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^79^80^^^^76^84^[ADD] this.newName = null; this.count = 0;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.count = 2;^80^^^^^76^84^[REPLACE] this.count = 0;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.orderOfOccurrence  = null ;^83^^^^^76^84^[REPLACE] this.orderOfOccurrence = assignmentCount++;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^83^^^^^76^84^[ADD] this.orderOfOccurrence = assignmentCount++;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.compiler =  null;^126^^^^^118^138^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.prefix  = LOCAL_VAR_PREFIX;^127^^^^^118^138^[REPLACE] this.prefix = prefix == null ? "" : prefix;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.localRenamingOnly =  true;^128^^^^^118^138^[REPLACE] this.localRenamingOnly = localRenamingOnly;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.preserveAnonymousFunctionNames =  true;^129^^^^^118^138^[REPLACE] this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^129^130^^^^118^138^[ADD] this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames; this.generatePseudoNames = generatePseudoNames;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.generatePseudoNames =  true;^130^^^^^118^138^[REPLACE] this.generatePseudoNames = generatePseudoNames;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.prevUsedRenameMap =  null;^131^^^^^118^138^[REPLACE] this.prevUsedRenameMap = prevUsedRenameMap;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^131^132^^^^118^138^[ADD] this.prevUsedRenameMap = prevUsedRenameMap; this.reservedCharacters = reservedCharacters;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedCharacters =  null;^132^^^^^118^138^[REPLACE] this.reservedCharacters = reservedCharacters;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( reservedNames != null )  {^133^^^^^118^138^[REPLACE] if  ( reservedNames == null )  {^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedNames = Sets.newHashSet (  ) ; ;^136^^^^^118^138^[REPLACE] this.reservedNames = Sets.newHashSet ( reservedNames ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^136^^^^^118^138^[ADD] this.reservedNames = Sets.newHashSet ( reservedNames ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedNames = Sets.newHashSet ( reservedNames ) ; ;^134^^^^^118^138^[REPLACE] this.reservedNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedNames = Sets.newHashSet ( reservedNames ) ; ;^134^^^^^118^138^[REPLACE] this.reservedNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^134^^^^^118^138^[ADD] this.reservedNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.reservedNames = Sets.newHashSet (  ) ; ;^136^^^^^118^138^[REPLACE] this.reservedNames = Sets.newHashSet ( reservedNames ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String prefix boolean localRenamingOnly boolean preserveAnonymousFunctionNames boolean generatePseudoNames VariableMap prevUsedRenameMap Nullable
char[] reservedCharacters String> reservedNames [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^isExternsPass_ =  true;^167^^^^^166^168^[REPLACE] isExternsPass_ = isExterns;^[METHOD] <init> [TYPE] RenameVars$ProcessVars(boolean) [PARAMETER] boolean isExterns [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^Preconditions.checkState ( this.newName != null ) ;^90^^^^^89^92^[REPLACE] Preconditions.checkState ( this.newName == null ) ;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.oldName = name; ;^91^^^^^89^92^[REPLACE] this.newName = newName;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( n.setString (  )   ==  Token.NAME )  {^172^^^^^171^225^[REPLACE] if  ( n.getType (  )  != Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^173^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String parentame = n.getString (  ) ;^176^^^^^171^225^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^176^^^^^171^225^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( name.equals (  )  - 1 == 0 )  {^179^^^^^171^225^[REPLACE] if  ( name.length (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^180^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String name = n.getString (  ) ;^184^^^^^171^225^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^boolean local =  ( var != null )  ;^185^^^^^171^225^[REPLACE] boolean local =  ( var != null )  && var.isLocal (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( local &&preserveAnonymousFunctionNames )  {^188^^^^^171^225^[REPLACE] if  ( !local && localRenamingOnly )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^190^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( preserveAnonymousFunctionNames ) {^194^195^196^^^171^225^[REPLACE] if  ( preserveAnonymousFunctionNames && var != null && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^198^^^^^194^199^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^198^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( !okToRenameVar ( name, preserveAnonymousFunctionNames )  )  {^202^^^^^171^225^[REPLACE] if  ( !okToRenameVar ( name, local )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^203^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( !local )  {^206^^^^^171^225^[REPLACE] if  ( isExternsPass_ )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( local )  {^208^^^^^171^225^[REPLACE] if  ( !local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^externNames.add ( tempName ) ;^209^^^^^171^225^[REPLACE] externNames.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return a.newName;^211^^^^^171^225^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^209^^^^^171^225^[ADD] externNames.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( !local )  {^214^^^^^171^225^[REPLACE] if  ( local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^}  if  ( null == this  )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^}   incCount ( name, var.input ) ;globalNameNodes.add ( n ) ;^220^221^222^223^224^171^225^[ADD] else if  ( var != null )  {  incCount ( name, var.input ) ; globalNameNodes.add ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^incCount ( tempName, var.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^222^^^^^171^225^[ADD] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^globalNameNodes.add ( parent ) ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName =prefix + var.getLocalVarIndex (  ) ;^216^^^^^171^225^[REPLACE] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^216^217^^^^171^225^[ADD] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ; incCount ( tempName, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^}  if  ( true == null )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^incCount ( name, null.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REMOVE]^String newName = getNewLocalName ( n, count ) ;^222^^^^^171^225^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^localNameNodes.add ( n ) ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String tempName =tempName + 1.getLocalVarIndex (  ) ;^216^^^^^171^225^[REPLACE] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^216^^^^^171^225^[ADD] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^Assignment s = assignments.get ( tempName ) ;^229^^^^^228^235^[REPLACE] Assignment s = assignments.get ( name ) ;^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment s  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( s != null )  {^230^^^^^228^235^[REPLACE] if  ( s == null )  {^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment s  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^s = new Assignment ( name, input ) ;assignments.put ( name, s ) ;^230^231^232^233^^228^235^[ADD] if  ( s == null )  { s = new Assignment ( name, input ) ; assignments.put ( name, s ) ; }^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment s  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^s =  new Assignment ( tempName, input ) ;^231^^^^^228^235^[REPLACE] s = new Assignment ( name, input ) ;^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment s  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^231^232^^^^228^235^[ADD] s = new Assignment ( name, input ) ; assignments.put ( name, s ) ;^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment s  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( a1.count  ==  a2.count )  {^246^^^^^245^252^[REPLACE] if  ( a1.count != a2.count )  {^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a1  a2  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^returnorderOfOccurrence - a1.count;^247^^^^^245^252^[REPLACE] return a2.count - a1.count;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a1  a2  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( oldName ) ;^251^^^^^245^252^[REPLACE] return ORDER_OF_OCCURRENCE_COMPARATOR.compare ( a1, a2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a1  a2  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return orderOfOccurrence - orderOfOccurrence;^262^^^^^261^263^[REPLACE] return a1.orderOfOccurrence - a2.orderOfOccurrence;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a1  a2  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignmentLog  =  assignmentLog ;^270^^^^^269^322^[REPLACE] assignmentLog = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^270^^^^^269^322^[ADD] assignmentLog = new StringBuilder (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^NodeTraversal.traverse ( compiler, n, new ProcessVars ( false )  ) ;^273^^^^^269^322^[REPLACE] NodeTraversal.traverse ( compiler, externs, new ProcessVars ( true )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^NodeTraversal.traverse ( compiler, root, new ProcessVars ( true )  ) ;^274^^^^^269^322^[REPLACE] NodeTraversal.traverse ( compiler, root, new ProcessVars ( false )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^reservedNames .add ( true )  ;^277^^^^^269^322^[REPLACE] reservedNames.addAll ( externNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^277^^^^^269^322^[ADD] reservedNames.addAll ( externNames ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^280^281^^^^269^322^[ADD] SortedSet<Assignment> varsByFrequency = new TreeSet<Assignment> ( FREQUENCY_COMPARATOR ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^finalizeNameAssignment ( a, generatedNamesForAssignments.get ( i )  ) ;^282^^^^^269^322^[REPLACE] varsByFrequency.addAll ( assignments.values (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( prevUsedRenameMap == false )  {^285^^^^^269^322^[REPLACE] if  ( prevUsedRenameMap != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^reusePreviouslyUsedVariableMap (  ) ;^285^286^287^^^269^322^[ADD] if  ( prevUsedRenameMap != null )  { reusePreviouslyUsedVariableMap (  ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^reservedNames.add ( name ) ;^286^^^^^269^322^[REPLACE] reusePreviouslyUsedVariableMap (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignNames ( null ) ;^290^^^^^269^322^[REPLACE] assignNames ( varsByFrequency ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^boolean changed = true;^292^^^^^269^322^[REPLACE] boolean changed = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( tempName == false )  {^298^^^^^269^322^[REPLACE] if  ( newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^changed = false;^300^^^^^269^322^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^300^^^^^269^322^[ADD] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( Node n : localNameNodes )  { String newName = getNewLocalName ( n, count ) ;^295^^^^^269^322^[REPLACE] for  ( Node n : globalNameNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String externsewName = getNewGlobalName ( n ) ;^296^^^^^269^322^[REPLACE] String newName = getNewGlobalName ( n ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^int count = 0 << 0;^305^^^^^269^322^[REPLACE] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^305^^^^^269^322^[ADD] int count = 0;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  (tempName == null )  {^308^^^^^269^322^[REPLACE] if  ( newName != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^changed = false;^310^^^^^269^322^[REPLACE] changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( Node n : localNameNodes )  { String newName = getNewLocalName ( n, count ) ;^306^^^^^269^322^[REPLACE] for  ( Node n : localNameNodes )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^306^307^308^309^310^269^322^[ADD] for  ( Node n : localNameNodes )  { String newName = getNewLocalName ( n, count ) ; if  ( newName != null )  { n.setString ( newName ) ; changed = true;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String newName = getNewLocalName ( n, orderOfOccurrence ) ;^307^^^^^269^322^[REPLACE] String newName = getNewLocalName ( n, count ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( true )  {^315^^^^^269^322^[REPLACE] if  ( changed )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^compiler.getCodingConvention (  ) ;^316^^^^^269^322^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^316^^^^^269^322^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^compiler.addToDebugLog ( "JS var assignments:\n" +tempName ) ;^320^^^^^269^322^[REPLACE] compiler.addToDebugLog ( "JS var assignments:\n" + assignmentLog ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REMOVE]^boolean local =  ( var != null )  && var.isLocal (  ) ;^320^^^^^269^322^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignmentLog = false;^321^^^^^269^322^[REPLACE] assignmentLog = null;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node externs  n  root  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  SortedSet varsByFrequency  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String oldName = n .setString ( name )  ;^325^^^^^324^335^[REPLACE] String oldName = n.getString (  ) ;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^Assignment a = assignments .put ( false , null )  ;^326^^^^^324^335^[REPLACE] Assignment a = assignments.get ( oldName ) ;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( a.newName == null ) {^327^^^^^324^335^[REPLACE] if  ( a.newName != null && !a.newName.equals ( oldName )  )  {^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return true;^333^^^^^324^335^[REPLACE] return null;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( !local )  {^328^^^^^324^335^[REPLACE] if  ( generatePseudoNames )  {^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( tempName ) ;^329^^^^^324^335^[REPLACE] return getPseudoName ( oldName ) ;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return ORDER_OF_OCCURRENCE_COMPARATOR.compare ( a1, a2 ) ;^329^^^^^324^335^[REPLACE] return getPseudoName ( oldName ) ;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( oldName ) ;^331^^^^^324^335^[REPLACE] return a.newName;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^328^329^330^^^324^335^[ADD] if  ( generatePseudoNames )  { return getPseudoName ( oldName ) ; }^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return this;^333^^^^^324^335^[REPLACE] return null;^[METHOD] getNewGlobalName [TYPE] String [PARAMETER] Node n [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  prefix  tempName  [TYPE]  int assignmentCount  count  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String oldTempName = localTempNames.add ( index ) ;^338^^^^^337^347^[REPLACE] String oldTempName = localTempNames.get ( index ) ;^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^Assignment a = assignments.get ( tempName ) ;^339^^^^^337^347^[REPLACE] Assignment a = assignments.get ( oldTempName ) ;^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( a.newName.equals ( oldTempName )  )  {^340^^^^^337^347^[REPLACE] if  ( !a.newName.equals ( oldTempName )  )  {^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( !local )  {^341^^^^^337^347^[REPLACE] if  ( generatePseudoNames )  {^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( oldName ) ;^342^^^^^337^347^[REPLACE] return getPseudoName ( n.getString (  )  ) ;^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( oldName ) ;^344^^^^^337^347^[REPLACE] return a.newName;^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( n .setString ( oldName )   ) ;^342^^^^^337^347^[REPLACE] return getPseudoName ( n.getString (  )  ) ;^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return false;^346^^^^^337^347^[REPLACE] return null;^[METHOD] getNewLocalName [TYPE] String [PARAMETER] Node n int index [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  Node n  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^generatePseudoNames   ;^350^^^^^349^354^[REPLACE] Preconditions.checkState ( generatePseudoNames ) ;^[METHOD] getPseudoName [TYPE] String [PARAMETER] String s [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^350^^^^^349^354^[ADD] Preconditions.checkState ( generatePseudoNames ) ;^[METHOD] getPseudoName [TYPE] String [PARAMETER] String s [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return;^353^^^^^349^354^[REPLACE] return '$' + s + "$$";^[METHOD] getPseudoName [TYPE] String [PARAMETER] String s [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( oldTempName != this ) {^364^^^^^361^375^[REPLACE] if  ( prevNewName == null || reservedNames.contains ( prevNewName )  )  {^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^if  (  ( externNames.contains ( a.oldName )  && prevNewName.startsWith ( prefix )  )  )  {^368^369^370^^^361^375^[REPLACE] if  ( a.oldName.startsWith ( LOCAL_VAR_PREFIX )  || ( !externNames.contains ( a.oldName )  && prevNewName.startsWith ( prefix )  )  )  {^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^368^369^370^371^372^361^375^[ADD] if  ( a.oldName.startsWith ( LOCAL_VAR_PREFIX )  || ( !externNames.contains ( a.oldName )  && prevNewName.startsWith ( prefix )  )  )  { reservedNames.add ( prevNewName ) ; finalizeNameAssignment ( a, prevNewName ) ;^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^reservedNames.add ( tempName ) ;^371^^^^^361^375^[REPLACE] reservedNames.add ( prevNewName ) ;^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^finalizeNameAssignment ( a, tempName ) ;^372^^^^^361^375^[REPLACE] finalizeNameAssignment ( a, prevNewName ) ;^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^int numPendingAssignments = generatedNamesForAssignments.size (  ) ;^362^^^^^361^375^[REPLACE] for  ( Assignment a : assignments.values (  )  )  {^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^362^363^364^365^366^361^375^[ADD] for  ( Assignment a : assignments.values (  )  )  { String prevNewName = prevUsedRenameMap.lookupNewName ( a.oldName ) ; if  ( prevNewName == null || reservedNames.contains ( prevNewName )  )  { continue; }^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String prevNewName = prevUsedRenameMap.VariableMap ( a.oldName ) ;^363^^^^^361^375^[REPLACE] String prevNewName = prevUsedRenameMap.lookupNewName ( a.oldName ) ;^[METHOD] reusePreviouslyUsedVariableMap [TYPE] void [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  index  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^NameGenerator localNameGenerator = prefix.isEmpty (  )  ? localNameGenerator : new NameGenerator ( reservedNames, "", reservedCharacters ) ;^385^386^387^^^380^452^[REPLACE] NameGenerator localNameGenerator = prefix.isEmpty (  )  ? globalNameGenerator : new NameGenerator ( reservedNames, "", reservedCharacters ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^int numPendingAssignments = generatedNamesForAssignments.size (  ) ;^390^^^^^380^452^[REPLACE] List<Assignment> pendingAssignments = new ArrayList<Assignment> (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^int numPendingAssignments = generatedNamesForAssignments.size (  ) ;^391^^^^^380^452^[REPLACE] List<String> generatedNamesForAssignments = new ArrayList<String> (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( a.newName == null )  {^394^^^^^380^452^[REPLACE] if  ( a.newName != null )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( externNames .add ( this )   )  {^398^^^^^380^452^[REPLACE] if  ( externNames.contains ( a.oldName )  )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^if  ( a.oldName .length (  )   )  {^403^^^^^380^452^[REPLACE] if  ( a.oldName.startsWith ( LOCAL_VAR_PREFIX )  )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^newName = localNameGenerator.generateNextName (  ) ; ;^410^^^^^403^413^[REPLACE] newName = globalNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^410^^^^^403^413^[ADD] newName = globalNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^newName = globalNameGenerator.generateNextName (  ) ; ;^405^^^^^380^452^[REPLACE] newName = localNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^405^406^^^^380^452^[ADD] newName = localNameGenerator.generateNextName (  ) ; finalizeNameAssignment ( a, newName ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^newName = localNameGenerator.generateNextName (  ) ; ;^410^^^^^380^452^[REPLACE] newName = globalNameGenerator.generateNextName (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^Assignment a = assignments.get ( oldName ) ;^393^^^^^380^452^[REPLACE] for  ( Assignment a : varsToRename )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^String name = n.getString (  ) ;^402^^^^^380^452^[REPLACE] String newName;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^402^^^^^380^452^[ADD] String newName;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^int numPendingAssignments = null.size (  ) ;^431^^^^^380^452^[REPLACE] int numPendingAssignments = generatedNamesForAssignments.size (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( int i = 0; i  >  numPendingAssignments; )  {^432^^^^^380^452^[REPLACE] for  ( int i = 0; i < numPendingAssignments; )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( int j = i; j < numPendingAssignments &&^439^^^^^380^452^[REPLACE] for  ( int j = i;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^varsByOrderOfOccurrence.addAll ( pendingAssignments.get ( j )  ) ;^443^^^^^439^444^[REPLACE] varsByOrderOfOccurrence.add ( pendingAssignments.get ( j )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^443^^^^^439^444^[ADD] varsByOrderOfOccurrence.add ( pendingAssignments.get ( j )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^varsByOrderOfOccurrence.add ( pendingAssignments.add ( j )  ) ;^443^^^^^439^444^[REPLACE] varsByOrderOfOccurrence.add ( pendingAssignments.get ( j )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^433^434^^^^380^452^[ADD] SortedSet<Assignment> varsByOrderOfOccurrence = new TreeSet<Assignment> ( ORDER_OF_OCCURRENCE_COMPARATOR ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^int len = generatedNamesForAssignments.get ( i ) .equals (  ) ;^438^^^^^380^452^[REPLACE] int len = generatedNamesForAssignments.get ( i ) .length (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^438^^^^^380^452^[ADD] int len = generatedNamesForAssignments.get ( i ) .length (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( numPendingAssignmentsnt j = i;^439^^^^^380^452^[REPLACE] for  ( int j = i;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^Assignment a = assignments.get ( oldName ) ;^447^^^^^380^452^[REPLACE] for  ( Assignment a : varsByOrderOfOccurrence )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[ADD]^^439^440^441^442^443^380^452^[ADD] for  ( int j = i; j < numPendingAssignments && generatedNamesForAssignments.get ( j ) .length (  )  == len; j++ )  { varsByOrderOfOccurrence.add ( pendingAssignments.get ( j )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^varsByOrderOfOccurrence.add ( null.get ( j )  ) ;^443^^^^^439^444^[REPLACE] varsByOrderOfOccurrence.add ( pendingAssignments.get ( j )  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^for  ( int i = 0 + 3; i < numPendingAssignments; )  {^432^^^^^380^452^[REPLACE] for  ( int i = 0; i < numPendingAssignments; )  {^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^int len = generatedNamesForAssignments.get ( numPendingAssignments ) .length (  ) ;^438^^^^^380^452^[REPLACE] int len = generatedNamesForAssignments.get ( i ) .length (  ) ;^[METHOD] assignNames [TYPE] void [PARAMETER] Assignment> varsToRename [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  NameGenerator globalNameGenerator  localNameGenerator  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  SortedSet varsByOrderOfOccurrence  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  List generatedNamesForAssignments  pendingAssignments  [TYPE]  Map renameMap 
[REPLACE]^a.setNewName ( tempName ) ;^458^^^^^457^466^[REPLACE] a.setNewName ( newName ) ;^[METHOD] finalizeNameAssignment [TYPE] void [PARAMETER] Assignment a String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^458^^^^^457^466^[ADD] a.setNewName ( newName ) ;^[METHOD] finalizeNameAssignment [TYPE] void [PARAMETER] Assignment a String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^renameMap .get ( this )  ;^461^^^^^457^466^[REPLACE] renameMap.put ( a.oldName, newName ) ;^[METHOD] finalizeNameAssignment [TYPE] void [PARAMETER] Assignment a String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^assignmentLog .StringBuilder (  )^464^465^^^^457^466^[REPLACE] assignmentLog.append ( a.oldName ) .append ( " => " ) .append ( newName ) . append ( '\n' ) ;^[METHOD] finalizeNameAssignment [TYPE] void [PARAMETER] Assignment a String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[ADD]^^464^465^^^^457^466^[ADD] assignmentLog.append ( a.oldName ) .append ( " => " ) .append ( newName ) . append ( '\n' ) ;^[METHOD] finalizeNameAssignment [TYPE] void [PARAMETER] Assignment a String newName [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  Assignment a  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return getPseudoName ( oldName ) ;^472^^^^^471^473^[REPLACE] return new VariableMap ( renameMap ) ;^[METHOD] getVariableMap [TYPE] VariableMap [PARAMETER] [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^return !compiler .reportCodeChange (  )  .isExported ( name, preserveAnonymousFunctionNames ) ;^479^^^^^478^480^[REPLACE] return !compiler.getCodingConvention (  ) .isExported ( name, isLocal ) ;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] RenameVars Assignment ProcessVars 1 2   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^CompilerInput input;^70^^^^^^^[REPLACE] final CompilerInput input;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] Assignment   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^String oldName;^71^^^^^^^[REPLACE] final String oldName;^[METHOD] okToRenameVar [TYPE] boolean [PARAMETER] String name boolean isLocal [CLASS] Assignment   [TYPE]  Set externNames  reservedNames  varsToRename  [TYPE]  StringBuilder assignmentLog  [TYPE]  ArrayList globalNameNodes  localNameNodes  localTempNames  [TYPE]  String LOCAL_VAR_PREFIX  name  newName  oldName  oldTempName  prefix  prevNewName  s  tempName  [TYPE]  int assignmentCount  count  i  index  j  len  numPendingAssignments  orderOfOccurrence  [TYPE]  char[] reservedCharacters  [TYPE]  Comparator FREQUENCY_COMPARATOR  ORDER_OF_OCCURRENCE_COMPARATOR  [TYPE]  AbstractCompiler compiler  [TYPE]  CompilerInput input  [TYPE]  boolean changed  false  generatePseudoNames  isExterns  isExternsPass_  isLocal  local  localRenamingOnly  preserveAnonymousFunctionNames  true  [TYPE]  VariableMap prevUsedRenameMap  [TYPE]  SortedMap assignments  [TYPE]  Map renameMap 
[REPLACE]^this.input =  null;^77^^^^^76^84^[REPLACE] this.input = input;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^this.newName = newName; ;^78^^^^^76^84^[REPLACE] this.oldName = name;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^this.newName = this;^79^^^^^76^84^[REPLACE] this.newName = null;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^this.count = 0L;^80^^^^^76^84^[REPLACE] this.count = 0;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^this.orderOfOccurrence ;^83^^^^^76^84^[REPLACE] this.orderOfOccurrence = assignmentCount++;^[METHOD] <init> [TYPE] CompilerInput) [PARAMETER] String name CompilerInput input [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^Preconditions.checkState ( this.newName != null ) ;^90^^^^^89^92^[REPLACE] Preconditions.checkState ( this.newName == null ) ;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^this.oldName = name; ;^91^^^^^89^92^[REPLACE] this.newName = newName;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[ADD]^^91^^^^^89^92^[ADD] this.newName = newName;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] Assignment   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^private  boolean isExternsPass_;^164^^^^^^^[REPLACE] private final boolean isExternsPass_;^[METHOD] setNewName [TYPE] void [PARAMETER] String newName [CLASS] ProcessVars   [TYPE]  CompilerInput input  [TYPE]  String name  newName  oldName  [TYPE]  boolean false  true  [TYPE]  int count  orderOfOccurrence 
[REPLACE]^isExternsPass_ =  true;^167^^^^^166^168^[REPLACE] isExternsPass_ = isExterns;^[METHOD] <init> [TYPE] RenameVars$ProcessVars(boolean) [PARAMETER] boolean isExterns [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  true 
[REPLACE]^if  ( n.getType (  )   ==  Token.NAME )  {^172^^^^^171^225^[REPLACE] if  ( n.getType (  )  != Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String name = n .getType (  )  ;^176^^^^^171^225^[REPLACE] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^176^^^^^171^225^[ADD] String name = n.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( name.length (  )  - 5 == 0 )  {^179^^^^^171^225^[REPLACE] if  ( name.length (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^return;^179^180^181^^^171^225^[ADD] if  ( name.length (  )  == 0 )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String name = n.getString (  ) ;^184^^^^^171^225^[REPLACE] Scope.Var var = t.getScope (  ) .getVar ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^boolean local =  ( var == null )  ;^185^^^^^171^225^[REPLACE] boolean local =  ( var != null )  && var.isLocal (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  (  localRenamingOnly )  {^188^^^^^171^225^[REPLACE] if  ( !local && localRenamingOnly )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  (  var == false && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  {^194^195^196^^^171^225^[REPLACE] if  ( preserveAnonymousFunctionNames && var != null && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^194^195^196^197^198^171^225^[ADD] if  ( preserveAnonymousFunctionNames && var != null && NodeUtil.isAnonymousFunction ( var.getParentNode (  )  )  )  { reservedNames.add ( name ) ; return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( !okToRenameVar ( name, isExternsPass_ )  )  {^202^^^^^171^225^[REPLACE] if  ( !okToRenameVar ( name, local )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( !local )  {^206^^^^^171^225^[REPLACE] if  ( isExternsPass_ )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^206^207^208^209^210^171^225^[ADD] if  ( isExternsPass_ )  {  if  ( !local )  { externNames.add ( name ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( !isExternsPass_ )  {^208^^^^^171^225^[REPLACE] if  ( !local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^externNames.add ( tempName ) ;^209^^^^^171^225^[REPLACE] externNames.add ( name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^if  ( !local )  {^214^^^^^171^225^[REPLACE] if  ( local )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^214^215^216^217^218^171^225^[ADD] if  ( local )  {  String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ; incCount ( tempName, null ) ; localNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^} else if  ( var == null )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^}   incCount ( name, var.input ) ;globalNameNodes.add ( n ) ;^220^221^222^223^224^171^225^[ADD] else if  ( var != null )  {  incCount ( name, var.input ) ; globalNameNodes.add ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^incCount ( name, 0.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^222^^^^^171^225^[ADD] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^globalNameNodes.add ( parent ) ;^223^^^^^171^225^[REPLACE] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^223^^^^^171^225^[ADD] globalNameNodes.add ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String tempName = LOCAL_VAR_PREFIX +tempName (  ) ;^216^^^^^171^225^[REPLACE] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^}  if  ( var == null )  {^220^^^^^171^225^[REPLACE] } else if  ( var != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^incCount ( tempName, var.input ) ;^222^^^^^171^225^[REPLACE] incCount ( name, var.input ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String tempName = tempName + null .getParentNode (  )  ;^216^^^^^171^225^[REPLACE] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[ADD]^^216^217^^^^171^225^[ADD] String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex (  ) ; incCount ( tempName, null ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] ProcessVars   [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name  tempName  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  parent 
[REPLACE]^String name = n.getString (  ) ;^229^^^^^228^235^[REPLACE] Assignment s = assignments.get ( name ) ;^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] ProcessVars   [TYPE]  Assignment s  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name 
[REPLACE]^if  ( s != null )  {^230^^^^^228^235^[REPLACE] if  ( s == null )  {^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] ProcessVars   [TYPE]  Assignment s  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name 
[REPLACE]^s =  new Assignment ( null, input ) ;^231^^^^^228^235^[REPLACE] s = new Assignment ( name, input ) ;^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] ProcessVars   [TYPE]  Assignment s  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name 
[ADD]^^231^^^^^228^235^[ADD] s = new Assignment ( name, input ) ;^[METHOD] incCount [TYPE] void [PARAMETER] String name CompilerInput input [CLASS] ProcessVars   [TYPE]  Assignment s  [TYPE]  CompilerInput input  [TYPE]  boolean false  isExterns  isExternsPass_  local  true  [TYPE]  String name 
[REPLACE]^if  ( a1.count  ==  a2.count )  {^246^^^^^245^252^[REPLACE] if  ( a1.count != a2.count )  {^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] 1   [TYPE]  Assignment a1  a2  [TYPE]  boolean false  true 
[ADD]^return a2.count - a1.count;^246^247^248^^^245^252^[ADD] if  ( a1.count != a2.count )  { return a2.count - a1.count; }^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] 1   [TYPE]  Assignment a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return a2.count -this;^247^^^^^245^252^[REPLACE] return a2.count - a1.count;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] 1   [TYPE]  Assignment a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return false - a1.count;^247^^^^^245^252^[REPLACE] return a2.count - a1.count;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] 1   [TYPE]  Assignment a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return a2.count - a1.count;^251^^^^^245^252^[REPLACE] return ORDER_OF_OCCURRENCE_COMPARATOR.compare ( a1, a2 ) ;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] 1   [TYPE]  Assignment a1  a2  [TYPE]  boolean false  true 
[REPLACE]^return null - a2.orderOfOccurrence;^262^^^^^261^263^[REPLACE] return a1.orderOfOccurrence - a2.orderOfOccurrence;^[METHOD] compare [TYPE] int [PARAMETER] Assignment a1 Assignment a2 [CLASS] 2   [TYPE]  Assignment a1  a2  [TYPE]  boolean false  true 
