[REPLACE]^private  NameReferenceGraph graph;^51^^^^^^^[REPLACE] private final NameReferenceGraph graph;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^private  Multimap<String, Pair<Name, Reference>> unknownNameUse = HashMultimap.create (  ) ;^58^59^^^^58^59^[REPLACE] private final Multimap<String, Pair<Name, Reference>> unknownNameUse = HashMultimap.create (  ) ;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^private static final boolean CONSERVATIVE = true;^62^^^^^^^[REPLACE] private static final boolean CONSERVATIVE = false;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^private  ArrayList<Name> currentFunctionStack = new ArrayList<Name> (  ) ;^67^^^^^^^[REPLACE] private final ArrayList<Name> currentFunctionStack = new ArrayList<Name> (  ) ;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^boolean isExtern;^106^^^^^^^[REPLACE] final boolean isExtern;^ [CLASS] NameReferenceGraphConstruction Traversal  
[REPLACE]^this.compiler =  null;^70^^^^^69^72^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^this.graph =  new NameReferenceGraph ( null ) ;^71^^^^^69^72^[REPLACE] this.graph = new NameReferenceGraph ( compiler ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^this.isExtern =  true;^109^^^^^108^111^[REPLACE] this.isExtern = isExtern;^[METHOD] <init> [TYPE] NameReferenceGraphConstruction$Traversal(boolean) [PARAMETER] boolean isExtern [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( graph.UNKNOWN ) ;^110^^^^^108^111^[REPLACE] pushContainingFunction ( graph.MAIN ) ;^[METHOD] <init> [TYPE] NameReferenceGraphConstruction$Traversal(boolean) [PARAMETER] boolean isExtern [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^75^^^^^74^76^[REPLACE] return this.graph;^[METHOD] getNameReferenceGraph [TYPE] NameReferenceGraph [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^ScopeCreator scopeCreator = compiler.getTopScope (  ) ;^82^^^^^78^102^[REPLACE] ScopeCreator scopeCreator = compiler.getScopeCreator (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( scopeCreator != this  )  {^83^^^^^78^102^[REPLACE] if  ( scopeCreator == null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[ADD]^^83^84^^^87^78^102^[ADD] if  ( scopeCreator == null )  {  scopeCreator = new TypedScopeCreator ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^scopeCreator  =  scopeCreator ;^87^^^^^78^102^[REPLACE] scopeCreator = new TypedScopeCreator ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^scopeCreator ;^87^^^^^78^102^[REPLACE] scopeCreator = new TypedScopeCreator ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^89^90^^^^78^102^[REPLACE] NodeTraversal externsTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( true ) , scopeCreator ) ;^91^92^^^^78^102^[REPLACE] NodeTraversal codeTraversal = new NodeTraversal ( compiler, new Traversal ( false ) , scopeCreator ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Scope topScope = compiler.getScopeCreator (  ) ;^93^^^^^78^102^[REPLACE] Scope topScope = compiler.getTopScope (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( topScope == this  )  {^94^^^^^78^102^[REPLACE] if  ( topScope != null )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[ADD]^^94^95^96^97^98^78^102^[ADD] if  ( topScope != null )  { externsTraversal.traverseWithScope ( externs, topScope ) ; codeTraversal.traverseWithScope ( root, topScope ) ; } else { externsTraversal.traverse ( externs ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^safeAlias ( cur ) ;^98^^^^^78^102^[REPLACE] externsTraversal.traverse ( externs ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^safeAlias ( cur ) ;^99^^^^^78^102^[REPLACE] codeTraversal.traverse ( root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^externsTraversal .traverse ( externs )  ;^95^^^^^78^102^[REPLACE] externsTraversal.traverseWithScope ( externs, topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^codeTraversal .traverse ( root )  ;^96^^^^^78^102^[REPLACE] codeTraversal.traverseWithScope ( root, topScope ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REMOVE]^Node gParent = parent.getParent (  ) ;^96^^^^^78^102^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^popContainingFunction (  ) ;^101^^^^^78^102^[REPLACE] connectUnknowns (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope topScope  [TYPE]  NodeTraversal codeTraversal  externsTraversal  [TYPE]  Node externs  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  ScopeCreator scopeCreator  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node root = t .getScope (  )  ;^115^^^^^114^153^[REPLACE] Node root = t.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node parent = parent.getParent (  ) ;^116^^^^^114^153^[REPLACE] Node parent = root.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^120^^^^^114^153^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name != null )  {^127^^^^^114^153^[REPLACE] if  ( name == null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^132^^^^^114^153^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( NodeUtil.isAssign ( parent )  ) {^142^143^^^^114^153^[REPLACE] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, root, gParent, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getLastChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^145^146^^^^142^151^[ADD] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = NodeUtil .isFunction ( ggParent )  ;^125^^^^^114^153^[REPLACE] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType type = getType ( parent ) ;^138^^^^^114^153^[REPLACE] JSType type = getType ( root ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node gParent = root.getParent (  ) ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node ggParent = root.getParent (  ) ;^141^^^^^114^153^[REPLACE] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^141^^^^^114^153^[ADD] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^127^128^^^131^114^153^[ADD] if  ( name == null )  {  pushContainingFunction ( graph.UNKNOWN ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^142^143^144^145^146^114^153^[ADD] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  { pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getFirstChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getFirstChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^149^150^^^^142^151^[ADD] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^t, name, type, root, parent, gParent, root .getFirstChild (  )   )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getLastChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^114^153^[REPLACE] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node gParent = root .getNext (  )  ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( cf != graph.UNKNOWN )  {^157^^^^^156^160^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node gParent = parent.getParent (  ) ;^158^^^^^156^160^[REPLACE] popContainingFunction (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return false;^164^^^^^163^165^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^while  (  ( param = param.getNext (  )  )  == false )  {^232^^^^^169^241^[REPLACE] while  (  ( param = param.getNext (  )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^232^233^234^^^169^241^[ADD] while  (  ( param = param.getNext (  )  )  != null )  { if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isNew ( param )  ) {^233^^^^^169^241^[REPLACE] if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^safeAlias ( varName ) ;^234^^^^^169^241^[REPLACE] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REMOVE]^Node gParent = parent.getParent (  ) ;^234^^^^^169^241^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isGetProp ( parent )  ) {^173^174^^^^169^241^[REPLACE] if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^} else if  ( NodeUtil.isAssign ( varName )  )  {^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^} else if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^}   return;^180^181^182^183^^169^241^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^182^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^179^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  else {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^176^^^^^173^183^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  else {^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^}   return;^177^178^179^180^^169^241^[ADD] else if  ( NodeUtil.isFunction ( parent )  )  {  return; } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( isLocalNameReference ( t, varName )  )  {^185^^^^^169^241^[REPLACE] if  ( isLocalNameReference ( t, n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^187^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( isPrototypeNameReference ( varName )  )  {^190^^^^^169^241^[REPLACE] if  ( isPrototypeNameReference ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  else {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^193^^^^^169^241^[REPLACE] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordPrototypePropUse ( t, varName, parent ) ;^191^^^^^169^241^[REPLACE] recordPrototypePropUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^}  if  ( isStaticNameReference ( varName, t.getScope (  )  )  )  {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^}   recordStaticNameUse ( t, n, parent ) ;recordUnknownUse ( t, n, parent ) ;^192^193^194^195^196^169^241^[ADD] else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  { recordStaticNameUse ( t, n, parent ) ; } else { recordUnknownUse ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^recordStaticNameUse ( t, varName, parent ) ;^193^^^^^169^241^[REPLACE] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isAssign ( rhs )  )  {^202^^^^^169^241^[REPLACE] if  ( NodeUtil.isFunction ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^204^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  ) {^206^207^208^^^169^241^[REPLACE] if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( cf != graph.UNKNOWN )  {^209^^^^^206^214^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name varNameame = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.getPrototypePropertyName ( lhs )  )  {^209^^^^^169^241^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, assignedValue, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^210^211^^^^169^241^[ADD] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^if  ( varName != null )  {^222^^^^^169^241^[REPLACE] if  ( assignedValue == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^return;^222^223^224^^^169^241^[ADD] if  ( assignedValue == null )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^223^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^maybeAliasNamesOnAssign ( lhs, rhs ) ;^234^^^^^169^241^[REPLACE] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^} while  (  ( cur = cur.getNext (  )  )  != null ) ; ;^232^^^^^169^241^[REPLACE] while  (  ( param = param.getNext (  )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^176^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node lhs = varName.getFirstChild (  ) ;^200^^^^^169^241^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^200^201^^^^169^241^[ADD] Node lhs = n.getFirstChild (  ) ; Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node rhs = n.getFirstChild (  ) ;^201^^^^^169^241^[REPLACE] Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getNext (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node varName = varName.getFirstChild (  ) ;^220^^^^^169^241^[REPLACE] Node varName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node assignedValue = rhs .getLastChild (  )  ;^221^^^^^169^241^[REPLACE] Node assignedValue = varName.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Node param = varName.getFirstChild (  ) ;^229^^^^^169^241^[REPLACE] Node param = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return NodeUtil.isName ( n, Token.NAME )  ;^244^245^246^^^243^247^[REPLACE] return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[METHOD] containsName [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph  [TYPE]  Node n 
[REPLACE]^if  ( NodeUtil.isName ( n )  && NodeUtil.isGetProp ( n )  )  {^256^^^^^255^280^[REPLACE] if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name == null )  {^259^^^^^255^280^[REPLACE] if  ( name != null )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^261^^^^^255^280^[REPLACE] return;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String name = n.getParent (  ) ;^257^^^^^255^280^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( name == this )  {^259^^^^^255^280^[REPLACE] if  ( name != null )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( NodeUtil.isName ( n )  )  {^265^^^^^255^280^[REPLACE] if  ( NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  else {^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  if  ( n.getLastChild (  )  )  {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^}   safeAlias ( cur ) ;} while  (  ( cur = cur.getNext (  )  )  != null ) ;^272^273^274^275^276^255^280^[ADD] else if  ( n.hasChildren (  )  )  { Node cur = n.getFirstChild (  ) ; do { safeAlias ( cur ) ; } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^} while  (  ( cur =  null.getNext (  )  )  !^276^^^^^255^280^[REPLACE] } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node cur = n .getLastChild (  )  ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^276^^^^^255^280^[ADD] while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^273^^^^^255^280^[ADD] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^} else if  ( n.hasChildren (  )  )  { Node cur = n.getFirstChild (  ) ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^safeAlias ( n.getLastChild (  )  ) ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  if  ( n.hasChildren (  )  )  {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^defineAndAlias ( n.getFirstChild (  ) .getString (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^defineAndAlias ( n.getLastChild (  ) .hasOwnProperty (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^267^^^^^255^280^[ADD] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^}  if  ( NodeUtil.isAssign ( n )  )  {^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^}   safeAlias ( n.getFirstChild (  )  ) ;^268^269^^271^^255^280^[ADD] else if  ( NodeUtil.isAssign ( n )  )  {  safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[ADD]^^271^^^^^255^280^[ADD] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node cur = n.getLastChild (  ) ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isNew ( lhs )  )  && containsName ( rhs )  && NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^283^284^285^286^^282^290^[REPLACE] if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph  [TYPE]  Node lhs  rhs 
[ADD]^^283^284^285^286^287^282^290^[ADD] if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  { safeAlias ( lhs ) ;^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph  [TYPE]  Node lhs  rhs 
[REPLACE]^safeAlias ( rhs ) ;^287^^^^^282^290^[REPLACE] safeAlias ( lhs ) ;^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph  [TYPE]  Node lhs  rhs 
[REPLACE]^safeAlias ( lhs ) ;^288^^^^^282^290^[REPLACE] safeAlias ( rhs ) ;^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph  [TYPE]  Node lhs  rhs 
[REPLACE]^graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( false ) ;^293^^^^^292^294^[REPLACE] graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[METHOD] defineAndAlias [TYPE] void [PARAMETER] String name [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.connect ( name, isExtern ) .setAliased ( true ) ;^293^^^^^292^294^[REPLACE] graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[METHOD] defineAndAlias [TYPE] void [PARAMETER] String name [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  String name  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( call )  ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( symbol )  ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node getProp = symbol.getFirstChild (  ) ;^298^^^^^296^333^[REPLACE] Node getProp = call.getFirstChild (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !NodeUtil.isGetProp ( symbol )  )  {^299^^^^^296^333^[REPLACE] if  ( !NodeUtil.isGetProp ( getProp )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^300^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propQName = getProp .getParent (  )  ;^303^^^^^296^333^[REPLACE] String propQName = getProp.getQualifiedName (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( qName != null )  {^305^^^^^296^333^[REPLACE] if  ( propQName == null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^306^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  (  propQName.endsWith ( ".apply" )  )  {^311^^^^^296^333^[REPLACE] if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^^311^312^313^314^^296^333^[ADD] if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  { graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern )  .markExported (  )  ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^isExtern ) .markExposedToCallOrApply (  ) ;^312^313^314^^^296^333^[ADD] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getLastChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !"goog.exportSymbol".equals ( qName )  )  {^316^^^^^296^333^[REPLACE] if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^317^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node symbol = getProp .getParent (  )  ;^320^^^^^296^333^[REPLACE] Node symbol = getProp.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !NodeUtil.isAssign ( obj )  )  {^321^^^^^296^333^[REPLACE] if  ( !NodeUtil.isString ( symbol )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^322^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node obj = obj .getParent (  )  ;^325^^^^^296^333^[REPLACE] Node obj = symbol.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String qName = obj.getParent (  ) ;^326^^^^^296^333^[REPLACE] String qName = obj.getQualifiedName (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( qName != null || obj.getNext (  )  != null )  {^328^^^^^296^333^[REPLACE] if  ( qName == null || obj.getNext (  )  != null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^329^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.connect ( propQName, true ) .markExported (  ) ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[ADD]^^332^^^^^296^333^[ADD] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propQName  qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( NodeUtil.isGetProp ( n )  )  {^341^^^^^338^346^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return false ;^343^^^^^338^346^[REPLACE] return v != null && v.isLocal (  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Var v = t.getScope (  )  .getString (  )  ;^342^^^^^338^346^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return   v.isLocal (  ) ;^343^^^^^338^346^[REPLACE] return v != null && v.isLocal (  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Var v = t .getScopeRoot (  )  .getVar ( n.getString (  )  ) ;^342^^^^^338^346^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return true;^345^^^^^338^346^[REPLACE] return false;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  ;^352^^^^^351^362^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  || NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isNew ( n )  ) ;^352^^^^^351^362^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[ADD]^^352^^^^^351^362^[ADD] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  (   n    )  {^353^^^^^351^362^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return false;^354^^^^^351^362^[REPLACE] return true;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String qName = n.getParent (  ) ;^356^^^^^351^362^[REPLACE] String qName = n.getQualifiedName (  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( qName != null )  {^357^^^^^351^362^[REPLACE] if  ( qName == null )  {^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[ADD]^return false;^357^358^359^^^351^362^[ADD] if  ( qName == null )  { return false; }^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return true;^358^^^^^351^362^[REPLACE] return false;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return scope.isDeclared ( qName, false ) ;^361^^^^^351^362^[REPLACE] return scope.isDeclared ( qName, true ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Scope scope  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String qName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^368^^^^^367^376^[REPLACE] if  ( !NodeUtil.isGetProp ( n )  )  {^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return true;^369^^^^^367^376^[REPLACE] return false;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType type = getType ( n .getLastChild (  )   ) ;^371^^^^^367^376^[REPLACE] JSType type = getType ( n.getFirstChild (  )  ) ;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  (  type.isUnionType (  )  )  {^372^^^^^367^376^[REPLACE] if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return true;^373^^^^^367^376^[REPLACE] return false;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return   type.autoboxesTo (  )  != true ) ;;^375^^^^^367^376^[REPLACE] return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( getNamedContainingFunction (  )   == symbol )  {^380^^^^^378^398^[REPLACE] if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( type.isFunctionType (  )  ) {^385^^^^^378^398^[REPLACE] if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^385^386^387^388^389^378^398^[ADD] if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  { return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ; } else { Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isAssign ( parent )  )  {^391^^^^^378^398^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^391^392^393^394^395^378^398^[ADD] if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol .addAssignmentDeclaration ( rValue )  ;^394^^^^^378^398^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol .addFunctionDeclaration ( rValue )  ;^392^^^^^378^398^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return containingFn;^396^^^^^378^398^[REPLACE] return symbol;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^389^^^^^378^398^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent .getNext (  )  , rValue ) ;^386^387^^^^378^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^394^^^^^378^398^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^392^^^^^378^398^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^392^^^^^378^398^[ADD] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getNext (  ) , rValue ) ;^386^387^^^^378^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^389^^^^^378^398^[ADD] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^[REPLACE] JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^407^408^^^^406^435^[ADD] JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ; FunctionType classType = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^FunctionType classType = false;^408^^^^^406^435^[REPLACE] FunctionType classType = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^String className = this;^409^^^^^406^435^[REPLACE] String className = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( ! constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^411^^^^^406^435^[REPLACE] if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^classType  =  classType ;^417^418^^^^411^420^[REPLACE] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^419^420^^^^411^420^[ADD] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ; }^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^classType =   ( FunctionType )  constructor;^413^^^^^406^435^[REPLACE] classType =  ( FunctionType )  constructor;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^className =  null.getReferenceName (  ) ;^414^^^^^406^435^[REPLACE] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^414^^^^^406^435^[ADD] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^classType  = null ;^417^418^^^^406^435^[REPLACE] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^recordClassConstructorOrInterface ( className, classType, true, true, true, true ) ;^422^423^^^^406^435^[REPLACE] recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^422^423^^^^406^435^[ADD] recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^String qNameStr = className  >=  ".prototype."  >=  NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^[REPLACE] String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^^425^426^^^^406^435^[ADD] String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^Name prototypeProp = graph.defineNameIfNotExists ( className, isExtern ) ;^427^^^^^406^435^[REPLACE] Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^Preconditions.checkNotNull ( prototypeProp,className + " should be in the name graph as a node." ) ;^428^429^^^^406^435^[REPLACE] Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( gParent == null )  {^430^^^^^406^435^[REPLACE] if  ( assign != null )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[ADD]^prototypeProp.addAssignmentDeclaration ( assign ) ;^430^431^432^^^406^435^[ADD] if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.addFunctionDeclaration ( assign ) ;^431^^^^^406^435^[REPLACE] prototypeProp.addAssignmentDeclaration ( assign ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.setType ( constructor ) ;^433^^^^^406^435^[REPLACE] prototypeProp.setType ( type ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^return symbol;^434^^^^^406^435^[REPLACE] return prototypeProp;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String className  qNameStr  [TYPE]  NameReferenceGraph graph  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( isExterparent )  {^439^^^^^437^449^[REPLACE] if  ( isExtern )  {^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return symbol;^447^^^^^437^449^[REPLACE] return reference;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Reference ref = new Reference ( n, parent ) ;^443^^^^^437^449^[REPLACE] Reference reference = new Reference ( n, parent ) ;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^443^444^^^^437^449^[ADD] Reference reference = new Reference ( n, parent ) ; Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Name parentame = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^[REPLACE] Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return false;^441^^^^^437^449^[REPLACE] return null;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^return this;^441^^^^^437^449^[REPLACE] return null;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[ADD]^^443^444^^^^437^449^[ADD] Reference reference = new Reference ( n, parent ) ; Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  ) ;^453^^^^^452^480^[REPLACE] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isNew ( parent )  ) ;^453^^^^^452^480^[REPLACE] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Node instance = parent.getFirstChild (  ) ;^454^^^^^452^480^[REPLACE] Node instance = n.getFirstChild (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^JSType instanceType = getType ( instance ) ;^454^455^^^^452^480^[ADD] Node instance = n.getFirstChild (  ) ; JSType instanceType = getType ( instance ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^[REPLACE] JSType instanceType = getType ( instance ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^[REPLACE] JSType boxedType = instanceType.autoboxesTo (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^instanceType = boxedType == true ? boxedType : instanceType;^457^^^^^452^480^[REPLACE] instanceType = boxedType != null ? boxedType : instanceType;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^ObjectType objType = boxedType.toObjectType (  ) ;^460^^^^^452^480^[REPLACE] ObjectType objType = instanceType.toObjectType (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^460^^^^^452^480^[ADD] ObjectType objType = instanceType.toObjectType (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions .checkNotNull ( false , propName )  ;^461^^^^^452^480^[REPLACE] Preconditions.checkState ( objType != null ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( isExtern )  {^463^^^^^452^480^[REPLACE] if  ( !isExtern )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( constructor == null )  {^468^^^^^452^480^[REPLACE] if  ( constructor != null )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REMOVE]^if  ( ! ( isExtern )  )  {     Reference ref = new Reference ( n, parent ) ;     FunctionType constructor = objType.getConstructor (  ) ;     if  ( constructor != null )  {         String propName = n.getLastChild (  ) .getString (  ) ;         if  ( ! ( constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  )  {             recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;         }         recordSubclassPrototypePropUse ( constructor, propName, ref ) ;     }else {         recordUnknownUse ( t, n, parent ) ;     } }^468^^^^^452^480^[REMOVE] ^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^468^478^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^477^^^^^468^478^[ADD] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^[REPLACE] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propName = parent.getLastChild (  ) .hasOwnProperty (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Reference ref = instanceew Reference ( n, parent ) ;^465^^^^^452^480^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^FunctionType constructor = objType.getOwnPropertyNames (  ) ;^467^^^^^452^480^[REPLACE] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[ADD]^^469^^^^^452^480^[ADD] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( constructor == instanceull )  {^468^^^^^452^480^[REPLACE] if  ( constructor != null )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REMOVE]^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^471^^^^^452^480^[REMOVE] ^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Reference reference = new Reference ( n, parent ) ;^465^^^^^452^480^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^FunctionType constructor = objType .getOwnPropertyNames (  )  ;^467^^^^^452^480^[REPLACE] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^String propName = parent.getLastChild (  )  .getVar (  )  ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType objType  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph 
[REPLACE]^FunctionType superClass = superClass.getSuperClassConstructor (  ) ;^487^^^^^485^498^[REPLACE] FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[ADD]^^487^^^^^485^498^[ADD] FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^while  ( superClass == null )  {^488^^^^^485^498^[REPLACE] while  ( superClass != null )  {^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^489^^^^^485^498^[REPLACE] if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^superClass =  classType.getSuperClassConstructor (  ) ;^495^^^^^485^498^[REPLACE] superClass = superClass.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[ADD]^^495^^^^^485^498^[ADD] superClass = superClass.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^493^^^^^485^498^[REPLACE] return;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^superClass =  null.getSuperClassConstructor (  ) ;^495^^^^^485^498^[REPLACE] superClass = superClass.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^506^^^^^504^516^[REPLACE] if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )   ^  ".prototype."  ^  prop, false )  ) ;^507^508^509^^^504^516^[REPLACE] graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[ADD]^^507^508^509^^^504^516^[ADD] graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^graph .defineNameIfNotExists ( prop , isExtern )   ) ;^508^509^^^^504^516^[REPLACE] graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^[REPLACE] classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( classType.getSubTypes (  )  == null )  {^511^^^^^504^516^[REPLACE] if  ( classType.getSubTypes (  )  != null )  {^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^FunctionType classType = null;^512^^^^^504^516^[REPLACE] for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String prop  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( isExterparent )  {^519^^^^^518^529^[REPLACE] if  ( isExtern )  {^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Reference reference = new Reference ( n, parent ) ;^524^^^^^518^529^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[ADD]^^524^^^^^518^529^[ADD] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return symbol;^521^^^^^518^529^[REPLACE] return;^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )  ;^538^^^^^535^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^538^^^^^535^555^[ADD] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Preconditions.checkArgument ( type .isFunctionType (  )   || type.isInterface (  )  ) ;^538^^^^^535^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REMOVE]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^538^^^^^535^555^[REMOVE] ^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Preconditions.checkState ( objType != null ) ;^538^^^^^535^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^539^^^^^535^555^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^539^^^^^535^555^[ADD] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  (parent == null )  {^540^^^^^535^555^[REPLACE] if  ( rhs != null )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^540^541^542^543^544^535^555^[ADD] if  ( rhs != null )  {  symbol.setType ( getType ( rhs )  ) ; if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isName ( n )  )  {^543^^^^^535^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^symbol.addAssignmentDeclaration ( n ) ;symbol.addFunctionDeclaration ( n ) ;^543^544^545^546^547^535^555^[ADD] if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^546^^^^^535^555^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( parent ) ;^544^^^^^535^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil .isFunction ( n )   )  {^543^^^^^535^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( n ) ;^546^^^^^535^555^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[ADD]^^546^^^^^535^555^[ADD] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( n ) ;^544^^^^^535^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REMOVE]^Node gParent = parent.getParent (  ) ;^544^^^^^535^555^[REMOVE] ^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^ObjectType prototype = type .getSubTypes (  )  ;^549^^^^^535^555^[REPLACE] ObjectType prototype = type.getPrototype (  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^Node parent = root.getParent (  ) ;^550^^^^^535^555^[REPLACE] for  ( String prop : prototype.getOwnPropertyNames (  )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^return containingFn;^554^^^^^535^555^[REPLACE] return symbol;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  ObjectType prototype  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  ArrayList currentFunctionStack  [TYPE]  String name  prop  [TYPE]  NameReferenceGraph graph  [TYPE]  Name symbol 
[REPLACE]^if  ( propName != null )  {^562^^^^^558^572^[REPLACE] if  ( propName == null )  {^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[ADD]^^562^563^564^^^558^572^[ADD] if  ( propName == null )  { continue; }^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^if  ( uses == null )  {^566^^^^^558^572^[REPLACE] if  ( uses != null )  {^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^Reference ref = new Reference ( n, parent ) ;^567^^^^^558^572^[REPLACE] for  ( Pair<Name, Reference> use : uses )  {^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^for  ( GraphNode<Name, Reference> node : graph.getNodes (  )  )  { Name name = node.getValue (  ) ;^559^^^^^558^572^[REPLACE] for  ( GraphNode<Name, Reference> node : graph.getNodes (  )  )  {^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^Name name = null.getValue (  ) ;^560^^^^^558^572^[REPLACE] Name name = node.getValue (  ) ;^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^String propName = name .setType ( 1 )  ;^561^^^^^558^572^[REPLACE] String propName = name.getPropertyName (  ) ;^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[ADD]^^561^^^^^558^572^[ADD] String propName = name.getPropertyName (  ) ;^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^Collection<Pair<Name, Reference>> uses = unknownNameUse.put ( propName ) ;^565^^^^^558^572^[REPLACE] Collection<Pair<Name, Reference>> uses = unknownNameUse.get ( propName ) ;^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[ADD]^^565^^^^^558^572^[ADD] Collection<Pair<Name, Reference>> uses = unknownNameUse.get ( propName ) ;^[METHOD] connectUnknowns [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  Collection uses  [TYPE]  GraphNode node  [TYPE]  String propName  [TYPE]  NameReferenceGraph graph  [TYPE]  Name name  [TYPE]  Pair use 
[REPLACE]^JSType type = n.getType (  ) ;^578^^^^^577^589^[REPLACE] JSType type = n.getJSType (  ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( type != null )  {^579^^^^^577^589^[REPLACE] if  ( type == null )  {^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[ADD]^^579^580^581^582^583^577^589^[ADD] if  ( type == null )  { if  ( CONSERVATIVE )  { throw new RuntimeException  (" ")  ; } else { return compiler.getTypeRegistry (  ) .getNativeType (^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^if  ( cf != graph.UNKNOWN )  {^580^^^^^577^589^[REPLACE] if  ( CONSERVATIVE )  {^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[ADD]^^580^581^582^583^584^577^589^[ADD] if  ( CONSERVATIVE )  { throw new RuntimeException  (" ")  ; } else { return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return compiler.getTypeRegistry (  ) .setAliased ( JSTypeNative.UNKNOWN_TYPE ) ;^583^584^^^^577^589^[REPLACE] return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return ;^581^^^^^577^589^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[ADD]^^581^^^^^577^589^[ADD] throw new RuntimeException  (" ")  ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return compiler .getScopeCreator (  )  .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^583^584^^^^577^589^[REPLACE] return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return compiler.getScopeCreator (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^583^584^^^^577^589^[REPLACE] return compiler.getTypeRegistry (  ) .getNativeType ( JSTypeNative.UNKNOWN_TYPE ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^return type .isConstructor (  )  ;^588^^^^^577^589^[REPLACE] return type.restrictByNotNullOrUndefined (  ) ;^[METHOD] getType [TYPE] JSType [PARAMETER] Node n [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  JSType type  [TYPE]  Node n  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph 
[REPLACE]^currentFunctionStack.get ( functionNode ) ;^598^^^^^597^599^[REPLACE] currentFunctionStack.add ( functionNode ) ;^[METHOD] pushContainingFunction [TYPE] void [PARAMETER] Name functionNode [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph  [TYPE]  Name functionNode 
[REPLACE]^currentFunctionStack.remove ( currentFunctionStack.size (  )  + 5 - 1 ) ;^606^^^^^605^607^[REPLACE] currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[METHOD] popContainingFunction [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^currentFunctionStack.remove ( currentFunctionStack.get (  )  - 1 ) ;^606^^^^^605^607^[REPLACE] currentFunctionStack.remove ( currentFunctionStack.size (  )  - 1 ) ;^[METHOD] popContainingFunction [TYPE] void [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  ArrayList currentFunctionStack  [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  NameReferenceGraph graph 
[REPLACE]^Name containingFn = this;^614^^^^^613^625^[REPLACE] Name containingFn = null;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^Node gParent = parent.getParent (  ) ;^615^^^^^613^625^[REPLACE] int pos;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^if  ( containingFn  ==  graph.UNKNOWN )  {^618^^^^^613^625^[REPLACE] if  ( cf != graph.UNKNOWN )  {^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^containingFn =  null;^619^^^^^613^625^[REPLACE] containingFn = cf;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^for  ( pos = currentFunctionStack.size (  )  + 3 - 0 ; pos >= 0; pos = pos - 0  )  {^616^^^^^613^625^[REPLACE] for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^if  ( containingFn  == containingFn )  {^618^^^^^613^625^[REPLACE] if  ( cf != graph.UNKNOWN )  {^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^Name cf = currentFunctionStack .put ( null )  ;^617^^^^^613^625^[REPLACE] Name cf = currentFunctionStack.get ( pos ) ;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^for  ( pos = currentFunctionStack.size (  )  - 2 - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^[REPLACE] for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[ADD]^^616^617^618^619^620^613^625^[ADD] for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  { Name cf = currentFunctionStack.get ( pos ) ; if  ( cf != graph.UNKNOWN )  { containingFn = cf; break;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^for  ( pos = currentFunctionStack.size (  )  + 4 - 1; pos >= 0; pos = pos - 1 )  {^616^^^^^613^625^[REPLACE] for  ( pos = currentFunctionStack.size (  )  - 1; pos >= 0; pos = pos - 1 )  {^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^Name cf = currentFunctionStack .put ( this )  ;^617^^^^^613^625^[REPLACE] Name cf = currentFunctionStack.get ( pos ) ;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[ADD]^^617^^^^^613^625^[ADD] Name cf = currentFunctionStack.get ( pos ) ;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^Preconditions.checkNotNull ( cf ) ;^623^^^^^613^625^[REPLACE] Preconditions.checkNotNull ( containingFn ) ;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[ADD]^^623^624^^^^613^625^[ADD] Preconditions.checkNotNull ( containingFn ) ; return containingFn;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^return cf;^624^^^^^613^625^[REPLACE] return containingFn;^[METHOD] getNamedContainingFunction [TYPE] Name [PARAMETER] [CLASS] NameReferenceGraphConstruction Traversal   [TYPE]  Multimap unknownNameUse  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean CONSERVATIVE  false  isExtern  true  [TYPE]  ArrayList currentFunctionStack  [TYPE]  NameReferenceGraph graph  [TYPE]  int pos  [TYPE]  Name cf  containingFn 
[REPLACE]^this.isExtern =  true;^109^^^^^108^111^[REPLACE] this.isExtern = isExtern;^[METHOD] <init> [TYPE] NameReferenceGraphConstruction$Traversal(boolean) [PARAMETER] boolean isExtern [CLASS] Traversal   [TYPE]  boolean false  isExtern  true 
[REPLACE]^pushContainingFunction ( graph.UNKNOWN ) ;^110^^^^^108^111^[REPLACE] pushContainingFunction ( graph.MAIN ) ;^[METHOD] <init> [TYPE] NameReferenceGraphConstruction$Traversal(boolean) [PARAMETER] boolean isExtern [CLASS] Traversal   [TYPE]  boolean false  isExtern  true 
[ADD]^^110^^^^^108^111^[ADD] pushContainingFunction ( graph.MAIN ) ;^[METHOD] <init> [TYPE] NameReferenceGraphConstruction$Traversal(boolean) [PARAMETER] boolean isExtern [CLASS] Traversal   [TYPE]  boolean false  isExtern  true 
[REPLACE]^Node root = t .getScope (  )  ;^115^^^^^114^153^[REPLACE] Node root = t.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^115^^^^^114^153^[ADD] Node root = t.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node parent = parent.getParent (  ) ;^116^^^^^114^153^[REPLACE] Node parent = root.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^116^^^^^114^153^[ADD] Node parent = root.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^120^^^^^114^153^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^120^121^^^^114^153^[ADD] if  ( !t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( name != null )  {^127^^^^^114^153^[REPLACE] if  ( name == null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^return false;^132^^^^^114^153^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  (  NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^114^153^[REPLACE] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^142^143^144^145^146^114^153^[ADD] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  { pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, root, root.getLastChild (  )  )  ) ;^148^149^150^^^142^151^[REPLACE] pushContainingFunction ( recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, parent, root.getLastChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^149^150^^^^142^151^[ADD] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^t, name, type, parent, parent, gParent, root.getLastChild (  )  )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, root, ggParent )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getLastChild (  ) , type, parent, root, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordPrototypePropDefinition ( t, parent.getLastChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^String name = NodeUtil.getFunctionName ( ggParent, parent ) ;^125^^^^^114^153^[REPLACE] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^JSType type = getType ( parent ) ;^138^^^^^114^153^[REPLACE] JSType type = getType ( root ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node gParent = parent.getNext (  ) ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node ggParent = root.getParent (  ) ;^141^^^^^114^153^[REPLACE] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( NodeUtil.isAssign ( parent )  || NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^142^143^^^^114^153^[REPLACE] if  ( NodeUtil.isAssign ( parent )  && NodeUtil.isPrototypeProperty ( parent.getFirstChild (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getFirstChild (  )  )  ) ;^149^150^^^^142^151^[REPLACE] recordStaticNameDefinition ( t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^t, name, type, parent, parent, gParent, root .getFirstChild (  )   )  ) ;^150^^^^^142^151^[REPLACE] t, name, type, root, parent, gParent, root.getLastChild (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, root )  ) ;^144^145^146^^^142^151^[REPLACE] pushContainingFunction ( recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^recordPrototypePropDefinition ( t, root.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^145^146^^^^142^151^[REPLACE] recordPrototypePropDefinition ( t, parent.getFirstChild (  ) , type, parent, gParent, ggParent )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^String name = NodeUtil.getFunctionName ( root, ggParent ) ;^125^^^^^114^153^[REPLACE] String name = NodeUtil.getFunctionName ( root, parent ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^138^^^^^114^153^[ADD] JSType type = getType ( root ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^Node gParent = root.getParent (  ) ;^140^^^^^114^153^[REPLACE] Node gParent = parent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[ADD]^^141^^^^^114^153^[ADD] Node ggParent = gParent.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  ggParent  parent  root 
[REPLACE]^if  ( !t .getScope (  )   )  {^157^^^^^156^160^[REPLACE] if  ( !t.inGlobalScope (  )  )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  NodeTraversal t  [TYPE]  boolean false  isExtern  true 
[ADD]^popContainingFunction (  ) ;^157^158^159^^^156^160^[ADD] if  ( !t.inGlobalScope (  )  )  { popContainingFunction (  ) ; }^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  NodeTraversal t  [TYPE]  boolean false  isExtern  true 
[REPLACE]^Node gParent = parent.getParent (  ) ;^158^^^^^156^160^[REPLACE] popContainingFunction (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] Traversal   [TYPE]  NodeTraversal t  [TYPE]  boolean false  isExtern  true 
[REPLACE]^return false;^164^^^^^163^165^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  NodeTraversal t  [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  parent 
[REPLACE]^while  (  ( param = param.getNext (  )  )  == false )  {^232^^^^^169^241^[REPLACE] while  (  ( param = param.getNext (  )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^232^233^234^^^169^241^[ADD] while  (  ( param = param.getNext (  )  )  != null )  { if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  { safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( param )  ) {^233^^^^^169^241^[REPLACE] if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^safeAlias ( varName ) ;^234^^^^^169^241^[REPLACE] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  (  parent.getType (  )  == Token.REF_SPECIAL )  {^173^174^^^^169^241^[REPLACE] if  ( NodeUtil.isGetProp ( parent )  || parent.getType (  )  == Token.REF_SPECIAL )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^} else if  ( NodeUtil.isFunction ( varName )  )  {^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  if  ( NodeUtil.isString ( varName )  )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^}   return;^180^181^182^183^^169^241^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^182^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^179^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^} else if  ( NodeUtil.isString ( parent )  )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^176^^^^^173^183^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  else {^177^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^} else if  ( NodeUtil.isAssign ( varName )  )  {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  else {^180^^^^^169^241^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( rhs != null )  {^185^^^^^169^241^[REPLACE] if  ( isLocalNameReference ( t, n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^187^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( isPrototypeNameReference ( varName )  )  {^190^^^^^169^241^[REPLACE] if  ( isPrototypeNameReference ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^}  else {^192^^^^^169^241^[REPLACE] } else if  ( isStaticNameReference ( n, t.getScope (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordStaticNameUse ( t, n, varName ) ;^193^^^^^169^241^[REPLACE] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordPrototypePropUse ( t, n, varName ) ;^191^^^^^169^241^[REPLACE] recordPrototypePropUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordUnknownUse ( t, varName, parent ) ;^195^^^^^192^196^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^193^^^^^169^241^[REPLACE] recordStaticNameUse ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isFunction ( varName )  )  {^202^^^^^169^241^[REPLACE] if  ( NodeUtil.isFunction ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^202^203^204^205^^169^241^[ADD] if  ( NodeUtil.isFunction ( rhs )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^204^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( lhs )  ) {^206^207^208^^^169^241^[REPLACE] if  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  || NodeUtil.isGetProp ( rhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil .getPrototypePropertyName ( parent )   )  {^209^^^^^206^214^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^210^211^^^^206^214^[ADD] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, rhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^206^214^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( rhs != null )  {^209^^^^^169^241^[REPLACE] if  ( NodeUtil.isPrototypeProperty ( lhs )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( varName ) , n, parent, parent.getParent (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( assignedValue != null )  {^222^^^^^169^241^[REPLACE] if  ( assignedValue == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^223^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^if  ( NodeUtil.isName ( varName )  && NodeUtil.isGetProp ( param )  )  {^233^^^^^169^241^[REPLACE] if  ( NodeUtil.isName ( param )  || NodeUtil.isGetProp ( param )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^maybeAliasNamesOnAssign ( lhs, rhs ) ;^234^^^^^169^241^[REPLACE] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^234^^^^^169^241^[ADD] safeAlias ( param ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^} while  (  ( cur = cur.getNext (  )  )  != null ) ; ;^232^^^^^169^241^[REPLACE] while  (  ( param = param.getNext (  )  )  != null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return false;^176^^^^^169^241^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node lhs = varName.getFirstChild (  ) ;^200^^^^^169^241^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node rhs = varName.getFirstChild (  ) ;^201^^^^^169^241^[REPLACE] Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[ADD]^^201^^^^^169^241^[ADD] Node rhs = n.getLastChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, varName, parent.getParent (  )  ) ;^210^211^^^^169^241^[REPLACE] Name name = recordPrototypePropDefinition ( t, lhs, getType ( rhs ) , n, parent, parent.getParent (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node varName = varName .getLastChild (  )  ;^220^^^^^169^241^[REPLACE] Node varName = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node assignedValue = rhs.getFirstChild (  ) ;^221^^^^^169^241^[REPLACE] Node assignedValue = varName.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^Node param = varName.getFirstChild (  ) ;^229^^^^^169^241^[REPLACE] Node param = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Node assignedValue  lhs  n  param  parent  rhs  varName  [TYPE]  Name name 
[REPLACE]^return NodeUtil.isName ( n, Token.NAME )  ;^244^245^246^^^243^247^[REPLACE] return NodeUtil.containsType ( n, Token.NAME )  || NodeUtil.containsType ( n, Token.GETELEM )  || NodeUtil.containsType ( n, Token.GETPROP ) ;^[METHOD] containsName [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n 
[REPLACE]^if  ( NodeUtil.isName ( n )  && NodeUtil.isNew ( n )  )  {^256^^^^^255^280^[REPLACE] if  ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^if  ( name == null )  {^259^^^^^255^280^[REPLACE] if  ( name != null )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^defineAndAlias ( name ) ;return;^259^260^261^262^^255^280^[ADD] if  ( name != null )  { defineAndAlias ( name ) ; return; }^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^return false;^261^^^^^255^280^[REPLACE] return;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^String name = n.getParent (  ) ;^257^^^^^255^280^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^String name = n .getParent (  )  ;^257^^^^^255^280^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^if  ( NodeUtil.isAssign ( n )  )  {^265^^^^^255^280^[REPLACE] if  ( NodeUtil.isGetProp ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^}  else {^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^}  else {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^} while  (  ( cur =  null.getNext (  )  )  !^276^^^^^255^280^[REPLACE] } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^276^^^^^255^280^[ADD] while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^Node cur = n.getLastChild (  ) ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^Node cur = n .getLastChild (  )  ;^273^^^^^255^280^[REPLACE] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^273^^^^^255^280^[ADD] Node cur = n.getFirstChild (  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^safeAlias ( n .getLastChild (  )   ) ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^^271^^^^^255^280^[ADD] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^safeAlias ( n.getLastChild (  )  ) ;^271^^^^^255^280^[REPLACE] safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^}  if  ( n.hasChildren (  )  )  {^272^^^^^255^280^[REPLACE] } else if  ( n.hasChildren (  )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^}   Node cur = n.getFirstChild (  ) ;safeAlias ( cur ) ;} while  (  ( cur = cur.getNext (  )  )  != null ) ;^272^273^274^275^276^255^280^[ADD] else if  ( n.hasChildren (  )  )  { Node cur = n.getFirstChild (  ) ; do { safeAlias ( cur ) ; } while  (  ( cur = cur.getNext (  )  )  != null ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^defineAndAlias ( n.getLastChild (  )  .getVar (  )   ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REMOVE]^Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^267^^^^^255^280^[REMOVE] ^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^defineAndAlias ( n.getFirstChild (  ) .getString (  )  ) ;^267^^^^^255^280^[REPLACE] defineAndAlias ( n.getLastChild (  ) .getString (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^} else if  ( NodeUtil.isAssign ( parent )  )  {^268^^^^^255^280^[REPLACE] } else if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[ADD]^}   safeAlias ( n.getFirstChild (  )  ) ;^268^269^^271^^255^280^[ADD] else if  ( NodeUtil.isAssign ( n )  )  {  safeAlias ( n.getFirstChild (  )  ) ;^[METHOD] safeAlias [TYPE] void [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node cur  n  [TYPE]  String name 
[REPLACE]^if  (  ( NodeUtil.isName ( lhs )  ) {^283^284^285^286^^282^290^[REPLACE] if  (  ( NodeUtil.isName ( lhs )  || NodeUtil.isGetProp ( lhs )  )  && containsName ( rhs )  && !NodeUtil.isFunction ( rhs )  && !NodeUtil.isNew ( rhs )  )  {^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node lhs  rhs 
[REPLACE]^safeAlias ( rhs ) ;^287^^^^^282^290^[REPLACE] safeAlias ( lhs ) ;^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node lhs  rhs 
[REPLACE]^safeAlias ( lhs ) ;^288^^^^^282^290^[REPLACE] safeAlias ( rhs ) ;^[METHOD] maybeAliasNamesOnAssign [TYPE] void [PARAMETER] Node lhs Node rhs [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node lhs  rhs 
[REPLACE]^graph.defineNameIfNotExists ( name, isExtern )  .setType ( false )  ;^293^^^^^292^294^[REPLACE] graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[METHOD] defineAndAlias [TYPE] void [PARAMETER] String name [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name 
[REPLACE]^graph.connect ( name, isExtern ) .setAliased ( true ) ;^293^^^^^292^294^[REPLACE] graph.defineNameIfNotExists ( name, isExtern ) .setAliased ( true ) ;^[METHOD] defineAndAlias [TYPE] void [PARAMETER] String name [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name 
[REMOVE]^Node gParent = parent.getParent (  ) ;^293^^^^^292^294^[REMOVE] ^[METHOD] defineAndAlias [TYPE] void [PARAMETER] String name [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name 
[REPLACE]^Preconditions.checkArgument ( NodeUtil .isName ( call )   ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( symbol )  ) ;^297^^^^^296^333^[REPLACE] Preconditions.checkArgument ( NodeUtil.isCall ( call )  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Node getProp = call.getLastChild (  ) ;^298^^^^^296^333^[REPLACE] Node getProp = call.getFirstChild (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^298^^^^^296^333^[ADD] Node getProp = call.getFirstChild (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^299^^^^^296^333^[REPLACE] if  ( !NodeUtil.isGetProp ( getProp )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REMOVE]^if  (  ( isName ( param )  )  ||  ( isGetProp ( param )  )  )  {     safeAlias ( param ) ; }^299^^^^^296^333^[REMOVE] ^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return false;^300^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^String propQName = symbol.getQualifiedName (  ) ;^303^^^^^296^333^[REPLACE] String propQName = getProp.getQualifiedName (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( propQName != true )  {^305^^^^^296^333^[REPLACE] if  ( propQName == null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return false;^306^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( propQName.endsWith ( ".call" )  && propQName.endsWith ( ".apply" )  )  {^311^^^^^296^333^[REPLACE] if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^311^312^313^314^^296^333^[ADD] if  ( propQName.endsWith ( ".call" )  || propQName.endsWith ( ".apply" )  )  { graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( symbol.getFirstChild (  ) .setAliased (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^312^313^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( getProp.getFirstChild (  ) .getQualifiedName (  ) , isExtern ) .markExposedToCallOrApply (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( !"goog.exportSymbol".endsWith ( qName )  )  {^316^^^^^296^333^[REPLACE] if  ( !"goog.exportSymbol".equals ( propQName )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return false;^317^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Node symbol = symbol.getNext (  ) ;^320^^^^^296^333^[REPLACE] Node symbol = getProp.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^320^^^^^296^333^[ADD] Node symbol = getProp.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( !NodeUtil.isAssign ( obj )  )  {^321^^^^^296^333^[REPLACE] if  ( !NodeUtil.isString ( symbol )  )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[ADD]^^321^322^323^^^296^333^[ADD] if  ( !NodeUtil.isString ( symbol )  )  { return; }^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return false;^322^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^Node obj = symbol.getParent (  ) ;^325^^^^^296^333^[REPLACE] Node obj = symbol.getNext (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^String qName = symbol.getQualifiedName (  ) ;^326^^^^^296^333^[REPLACE] String qName = obj.getQualifiedName (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( qName != null || obj.getNext (  )  != null )  {^328^^^^^296^333^[REPLACE] if  ( qName == null || obj.getNext (  )  != null )  {^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^return false;^329^^^^^296^333^[REPLACE] return;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( propQName, true ) .markExported (  ) ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REMOVE]^Node gParent = parent.getParent (  ) ;^332^^^^^296^333^[REMOVE] ^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^graph.defineNameIfNotExists ( qName, true ) .markExported (  ) ;^332^^^^^296^333^[REPLACE] graph.defineNameIfNotExists ( qName, false ) .markExported (  ) ;^[METHOD] maybeRecordExport [TYPE] void [PARAMETER] Node call [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node call  getProp  obj  symbol  [TYPE]  String propQName  qName 
[REPLACE]^if  ( NodeUtil.isAssign ( n )  )  {^341^^^^^338^346^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^return true ;^343^^^^^338^346^[REPLACE] return v != null && v.isLocal (  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^Var v = t.getScope (  ) .setAliased ( n.getString (  )  ) ;^342^^^^^338^346^[REPLACE] Var v = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^return v ;^343^^^^^338^346^[REPLACE] return v != null && v.isLocal (  ) ;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^return true;^345^^^^^338^346^[REPLACE] return false;^[METHOD] isLocalNameReference [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Var v  [TYPE]  Node n 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( n )  ;^352^^^^^351^362^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isNew ( n )  || NodeUtil.isGetProp ( n )  ) ;^352^^^^^351^362^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isNew ( n )  ) ;^352^^^^^351^362^[REPLACE] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[ADD]^^352^^^^^351^362^[ADD] Preconditions.checkArgument ( NodeUtil.isName ( n )  || NodeUtil.isGetProp ( n )  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^if  ( NodeUtil.isNew ( n )  )  {^353^^^^^351^362^[REPLACE] if  ( NodeUtil.isName ( n )  )  {^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[ADD]^return true;^353^354^355^^^351^362^[ADD] if  ( NodeUtil.isName ( n )  )  { return true; }^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^return false;^354^^^^^351^362^[REPLACE] return true;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^String qName = n.getParent (  ) ;^356^^^^^351^362^[REPLACE] String qName = n.getQualifiedName (  ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^if  ( qName != null )  {^357^^^^^351^362^[REPLACE] if  ( qName == null )  {^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^return true;^358^^^^^351^362^[REPLACE] return false;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^return scope.isDeclared ( qName, false ) ;^361^^^^^351^362^[REPLACE] return scope.isDeclared ( qName, true ) ;^[METHOD] isStaticNameReference [TYPE] boolean [PARAMETER] Node n Scope scope [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String qName  [TYPE]  Scope scope  [TYPE]  Node n 
[REPLACE]^if  ( !NodeUtil .isPrototypeProperty (  )   )  {^368^^^^^367^376^[REPLACE] if  ( !NodeUtil.isGetProp ( n )  )  {^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  [TYPE]  JSType type 
[REPLACE]^return true;^369^^^^^367^376^[REPLACE] return false;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  [TYPE]  JSType type 
[REPLACE]^Node varName = n.getFirstChild (  ) ;^371^^^^^367^376^[REPLACE] JSType type = getType ( n.getFirstChild (  )  ) ;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  [TYPE]  JSType type 
[REPLACE]^if  ( type.isUnknownType (  )  && type.isUnionType (  )  )  {^372^^^^^367^376^[REPLACE] if  ( type.isUnknownType (  )  || type.isUnionType (  )  )  {^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  [TYPE]  JSType type 
[REPLACE]^return true;^373^^^^^367^376^[REPLACE] return false;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  [TYPE]  JSType type 
[REPLACE]^return   type.autoboxesTo (  )  != null ) ;;^375^^^^^367^376^[REPLACE] return  ( type instanceof InstanceObjectType || type.autoboxesTo (  )  != null ) ;^[METHOD] isPrototypeNameReference [TYPE] boolean [PARAMETER] Node n [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  Node n  [TYPE]  JSType type 
[REPLACE]^if  ( getNamedContainingFunction (  )   ==  graph.MAIN )  {^380^^^^^378^398^[REPLACE] if  ( getNamedContainingFunction (  )  != graph.MAIN )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[ADD]^^380^381^^^384^378^398^[ADD] if  ( getNamedContainingFunction (  )  != graph.MAIN )  {  }^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^if  ( type.isFunctionType (  )  || type.isConstructor (  )  )  {^385^^^^^378^398^[REPLACE] if  ( type.isFunctionType (  )  && type.isConstructor (  )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isAssign ( parent )  )  {^391^^^^^378^398^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^394^^^^^378^398^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( n ) ;^392^^^^^378^398^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^return;^396^^^^^378^398^[REPLACE] return symbol;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^389^^^^^378^398^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getNext (  ) , rValue ) ;^386^387^^^^378^398^[REPLACE] return recordClassConstructorOrInterface ( name,  ( FunctionType )  type, n, parent, parent.getParent (  ) , rValue ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( n ) ;^394^^^^^378^398^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REMOVE]^JSType boxedType = instanceType.autoboxesTo (  ) ;^394^^^^^378^398^[REMOVE] ^[METHOD] recordStaticNameDefinition [TYPE] Name [PARAMETER] NodeTraversal t String name JSType type Node n Node parent Node gParent Node rValue [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String name  [TYPE]  JSType type  [TYPE]  NodeTraversal t  [TYPE]  Node gParent  n  parent  rValue  [TYPE]  Name symbol 
[REPLACE]^JSType constructor = getType ( NodeUtil.getPrototypeClassName ( parent )  ) ;^407^^^^^406^435^[REPLACE] JSType constructor = getType ( NodeUtil.getPrototypeClassName ( qName )  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^FunctionType classType = false;^408^^^^^406^435^[REPLACE] FunctionType classType = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^String className = false;^409^^^^^406^435^[REPLACE] String className = null;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^if  (  constructor.isConstructor (  )  )  {^411^^^^^406^435^[REPLACE] if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^411^412^413^414^^406^435^[ADD] if  ( constructor instanceof FunctionType && constructor.isConstructor (  )  )  {  classType =  ( FunctionType )  constructor; className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^classType  =  classType ;^417^418^^^^411^420^[REPLACE] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^417^418^^^^411^420^[ADD] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^411^420^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^classType =   ( FunctionType )  constructor;^413^^^^^406^435^[REPLACE] classType =  ( FunctionType )  constructor;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^className =  null.getReferenceName (  ) ;^414^^^^^406^435^[REPLACE] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^414^^^^^406^435^[ADD] className = classType.getReferenceName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^classType  =  classType ;^417^418^^^^406^435^[REPLACE] classType = compiler.getTypeRegistry (  ) .getNativeFunctionType ( JSTypeNative.U2U_CONSTRUCTOR_TYPE ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^className =  NodeUtil.getPrototypeClassName ( parent ) .getQualifiedName (  ) ;^419^^^^^406^435^[REPLACE] className = NodeUtil.getPrototypeClassName ( qName ) .getQualifiedName (  ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^recordClassConstructorOrInterface ( className, classType, this, this, this, this ) ;^422^423^^^^406^435^[REPLACE] recordClassConstructorOrInterface ( className, classType, null, null, null, null ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^String qNameStr = className  &  ".prototype."  &  NodeUtil.getPrototypePropertyName ( qName ) ;^425^426^^^^406^435^[REPLACE] String qNameStr = className + ".prototype." + NodeUtil.getPrototypePropertyName ( qName ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^Name prototypeProp = graph.connect ( qNameStr, isExtern ) ;^427^^^^^406^435^[REPLACE] Name prototypeProp = graph.defineNameIfNotExists ( qNameStr, isExtern ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^Preconditions.checkNotNull ( prototypeProp,className + " should be in the name graph as a node." ) ;^428^429^^^^406^435^[REPLACE] Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^^428^429^^^^406^435^[ADD] Preconditions.checkNotNull ( prototypeProp, qNameStr + " should be in the name graph as a node." ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( assign == null )  {^430^^^^^406^435^[REPLACE] if  ( assign != null )  {^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[ADD]^prototypeProp.addAssignmentDeclaration ( assign ) ;^430^431^432^^^406^435^[ADD] if  ( assign != null )  { prototypeProp.addAssignmentDeclaration ( assign ) ; }^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.addAssignmentDeclaration ( gParent ) ;^431^^^^^406^435^[REPLACE] prototypeProp.addAssignmentDeclaration ( assign ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^prototypeProp.addAssignmentDeclaration ( type ) ;^433^^^^^406^435^[REPLACE] prototypeProp.setType ( type ) ;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^return;^434^^^^^406^435^[REPLACE] return prototypeProp;^[METHOD] recordPrototypePropDefinition [TYPE] Name [PARAMETER] NodeTraversal t Node qName JSType type Node assign Node parent Node gParent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  JSType constructor  type  [TYPE]  NodeTraversal t  [TYPE]  Node assign  gParent  parent  qName  [TYPE]  FunctionType classType  [TYPE]  String className  qNameStr  [TYPE]  Name prototypeProp 
[REPLACE]^if  ( isExterparent )  {^439^^^^^437^449^[REPLACE] if  ( isExtern )  {^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[REPLACE]^return;^447^^^^^437^449^[REPLACE] return reference;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[REPLACE]^Reference ref = new Reference ( n, parent ) ;^443^^^^^437^449^[REPLACE] Reference reference = new Reference ( n, parent ) ;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[REPLACE]^Name parentame = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^444^^^^^437^449^[REPLACE] Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[REPLACE]^return true;^441^^^^^437^449^[REPLACE] return null;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[REPLACE]^return this;^441^^^^^437^449^[REPLACE] return null;^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[ADD]^name.setType ( getType ( n )  ) ;graph.connect ( getNamedContainingFunction (  ) , reference, name ) ;return reference;^444^445^446^447^448^437^449^[ADD] Name name = graph.defineNameIfNotExists ( n.getQualifiedName (  ) , isExtern ) ; name.setType ( getType ( n )  ) ; graph.connect ( getNamedContainingFunction (  ) , reference, name ) ; return reference; }^[METHOD] recordStaticNameUse [TYPE] Reference [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference reference  [TYPE]  Node n  parent  [TYPE]  Name name 
[REPLACE]^Preconditions.checkArgument ( NodeUtil.isGetProp ( parent )  ) ;^453^^^^^452^480^[REPLACE] Preconditions.checkArgument ( NodeUtil.isGetProp ( n )  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Node instance = parent.getLastChild (  ) ;^454^^^^^452^480^[REPLACE] Node instance = n.getFirstChild (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^JSType parentType = getType ( instance ) ;^455^^^^^452^480^[REPLACE] JSType instanceType = getType ( instance ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^JSType boxedType = boxedType.autoboxesTo (  ) ;^456^^^^^452^480^[REPLACE] JSType boxedType = instanceType.autoboxesTo (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^456^^^^^452^480^[ADD] JSType boxedType = instanceType.autoboxesTo (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^instanceType  = instanceType ;^457^^^^^452^480^[REPLACE] instanceType = boxedType != null ? boxedType : instanceType;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^ObjectType objType = instanceType.isUnionType (  ) ;^460^^^^^452^480^[REPLACE] ObjectType objType = instanceType.toObjectType (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Preconditions.checkState ( objType == true ) ;^461^^^^^452^480^[REPLACE] Preconditions.checkState ( objType != null ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( isExtern )  {^463^^^^^452^480^[REPLACE] if  ( !isExtern )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( constructor == null )  {^468^^^^^452^480^[REPLACE] if  ( constructor != null )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^recordUnknownUse ( t, n, n ) ;^477^^^^^468^478^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( !constructor.getPrototype (  ) .setAliased ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^recordSubclassPrototypePropUse ( constructor, propName, ref ) ;^471^^^^^452^480^[REPLACE] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^471^^^^^452^480^[ADD] recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^String propName = parent.getLastChild (  ) .hasOwnProperty (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Reference reference = new Reference ( n, parent ) ;^465^^^^^452^480^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^FunctionType constructor = objType.getOwnPropertyNames (  ) ;^467^^^^^452^480^[REPLACE] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^467^^^^^452^480^[ADD] FunctionType constructor = objType.getConstructor (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^String propName = parent.getLastChild (  ) .getString (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^String propName = n.getLastChild (  ) .getString (  ) ;recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^468^469^470^471^472^452^480^[ADD] if  ( constructor != null )  { String propName = n.getLastChild (  ) .getString (  ) ; if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^recordUnknownUse ( t, parent, parent ) ;^477^^^^^468^478^[REPLACE] recordUnknownUse ( t, n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^if  ( !constructor.getSubTypes (  ) .hasOwnProperty ( propName )  )  {^470^^^^^452^480^[REPLACE] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^String propName = n.getLastChild (  ) .hasOwnProperty (  ) ;^469^^^^^452^480^[REPLACE] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^recordSuperClassPrototypePropUse ( constructor, propName, ref ) ;^470^471^472^^^452^480^[ADD] if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  { recordSuperClassPrototypePropUse ( constructor, propName, ref ) ; }^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^Reference ref = new Reference ( n, instance ) ;^465^^^^^452^480^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[ADD]^^469^^^^^452^480^[ADD] String propName = n.getLastChild (  ) .getString (  ) ;^[METHOD] recordPrototypePropUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  ObjectType objType  [TYPE]  boolean false  isExtern  true  [TYPE]  JSType boxedType  instanceType  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node instance  n  parent  [TYPE]  FunctionType constructor  [TYPE]  String propName 
[REPLACE]^FunctionType superClass = superClass .isConstructor (  )  ;^487^^^^^485^498^[REPLACE] FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[ADD]^^487^^^^^485^498^[ADD] FunctionType superClass = classType.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[REPLACE]^while  ( classType == null )  {^488^^^^^485^498^[REPLACE] while  ( superClass != null )  {^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[REPLACE]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^489^^^^^485^498^[REPLACE] if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[ADD]^^489^490^491^492^493^485^498^[ADD] if  ( superClass.getPrototype (  ) .hasOwnProperty ( prop )  )  { graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ; return;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[REPLACE]^superClass =  null.getSuperClassConstructor (  ) ;^495^^^^^485^498^[REPLACE] superClass = superClass.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[ADD]^^495^^^^^485^498^[ADD] superClass = superClass.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[REPLACE]^return false;^493^^^^^485^498^[REPLACE] return;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[REPLACE]^superClass =  classType.getSuperClassConstructor (  ) ;^495^^^^^485^498^[REPLACE] superClass = superClass.getSuperClassConstructor (  ) ;^[METHOD] recordSuperClassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  superClass 
[REPLACE]^if  ( !constructor.getPrototype (  ) .hasOwnProperty ( propName )  )  {^506^^^^^504^516^[REPLACE] if  ( classType.getPrototype (  ) .hasOwnProperty ( prop )  )  {^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[REPLACE]^graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )   &&  ".prototype."  &&  prop, false )  ) ;^507^508^509^^^504^516^[REPLACE] graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[ADD]^^507^508^509^^^504^516^[ADD] graph.connect ( getNamedContainingFunction (  ) , ref, graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[REPLACE]^graph.defineNameIfNotExists ( classType.getReferenceName (  )   ^  ".prototype."  ^  prop, false )  ) ;^508^509^^^^504^516^[REPLACE] graph.defineNameIfNotExists ( classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[REPLACE]^superClass.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^509^^^^^504^516^[REPLACE] classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[ADD]^^509^^^^^504^516^[ADD] classType.getReferenceName (  )  + ".prototype." + prop, false )  ) ;^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[REPLACE]^if  ( classType.getSubTypes (  )  == null )  {^511^^^^^504^516^[REPLACE] if  ( classType.getSubTypes (  )  != null )  {^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[REPLACE]^FunctionType classType = null;^512^^^^^504^516^[REPLACE] for  ( FunctionType subclass : classType.getSubTypes (  )  )  {^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[ADD]^^512^513^514^^^504^516^[ADD] for  ( FunctionType subclass : classType.getSubTypes (  )  )  { recordSubclassPrototypePropUse ( subclass, prop, ref ) ; }^[METHOD] recordSubclassPrototypePropUse [TYPE] void [PARAMETER] FunctionType classType String prop Reference ref [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  String prop  [TYPE]  Reference ref  [TYPE]  FunctionType classType  subclass 
[REPLACE]^if  ( !isExtern )  {^519^^^^^518^529^[REPLACE] if  ( isExtern )  {^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent 
[REPLACE]^Reference reference = new Reference ( n, parent ) ;^524^^^^^518^529^[REPLACE] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent 
[ADD]^^524^^^^^518^529^[ADD] Reference ref = new Reference ( n, parent ) ;^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent 
[REPLACE]^return false;^521^^^^^518^529^[REPLACE] return;^[METHOD] recordUnknownUse [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Traversal   [TYPE]  boolean false  isExtern  true  [TYPE]  NodeTraversal t  [TYPE]  Reference ref  [TYPE]  Node n  parent 
[REPLACE]^Preconditions.checkArgument ( type.isConstructor (  )  && type.isInterface (  )  ) ;^538^^^^^535^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^Preconditions.checkState ( objType != null ) ;^538^^^^^535^555^[REPLACE] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^538^^^^^535^555^[ADD] Preconditions.checkArgument ( type.isConstructor (  )  || type.isInterface (  )  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^Name symbol = graph.connect ( name, isExtern ) ;^539^^^^^535^555^[REPLACE] Name symbol = graph.defineNameIfNotExists ( name, isExtern ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^if  ( parent == true )  {^540^^^^^535^555^[REPLACE] if  ( rhs != null )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^540^541^542^543^544^535^555^[ADD] if  ( rhs != null )  {  symbol.setType ( getType ( rhs )  ) ; if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^} else if  ( NodeUtil.isAssign ( n )  )  {^543^^^^^535^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( n ) ;^546^^^^^535^555^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REMOVE]^JSType boxedType = instanceType.autoboxesTo (  ) ;^546^^^^^535^555^[REMOVE] ^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol .addFunctionDeclaration ( parent )  ;^544^^^^^535^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REMOVE]^Node gParent = parent.getParent (  ) ;^544^^^^^535^555^[REMOVE] ^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^if  ( NodeUtil.isString ( parent )  )  {^543^^^^^535^555^[REPLACE] if  ( NodeUtil.isAssign ( n )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^543^544^545^546^547^535^555^[ADD] if  ( NodeUtil.isAssign ( n )  )  { symbol.addAssignmentDeclaration ( n ) ; } else { symbol.addFunctionDeclaration ( n ) ; }^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addFunctionDeclaration ( parent ) ;^546^^^^^535^555^[REPLACE] symbol.addFunctionDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^symbol.addAssignmentDeclaration ( parent ) ;^544^^^^^535^555^[REPLACE] symbol.addAssignmentDeclaration ( n ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^ObjectType prototype = type.getSubTypes (  ) ;^549^^^^^535^555^[REPLACE] ObjectType prototype = type.getPrototype (  ) ;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^Node parent = root.getParent (  ) ;^550^^^^^535^555^[REPLACE] for  ( String prop : prototype.getOwnPropertyNames (  )  )  {^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[ADD]^^550^551^552^553^^535^555^[ADD] for  ( String prop : prototype.getOwnPropertyNames (  )  )  { graph.defineNameIfNotExists ( name + ".prototype." + prop, isExtern ) ; }^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
[REPLACE]^return;^554^^^^^535^555^[REPLACE] return symbol;^[METHOD] recordClassConstructorOrInterface [TYPE] Name [PARAMETER] String name FunctionType type Node n Node parent Node gParent Node rhs [CLASS] Traversal   [TYPE]  ObjectType prototype  [TYPE]  boolean false  isExtern  true  [TYPE]  String name  prop  [TYPE]  FunctionType type  [TYPE]  Node gParent  n  parent  rhs  [TYPE]  Name symbol 
