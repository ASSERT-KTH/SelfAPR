[REPLACE]^private  AbstractCompiler compiler;^49^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] StripCode Strip  
[REPLACE]^private  Set<String> stripTypes;^50^^^^^^^[REPLACE] private final Set<String> stripTypes;^ [CLASS] StripCode Strip  
[REPLACE]^private  Set<String> stripTypePrefixes;^52^^^^^^^[REPLACE] private final Set<String> stripTypePrefixes;^ [CLASS] StripCode Strip  
[REPLACE]^private  Set<Scope.Var> varsToRemove;^54^^^^^^^[REPLACE] private final Set<Scope.Var> varsToRemove;^ [CLASS] StripCode Strip  
[REPLACE]^static final DiagnosticType STRIP_TYPE_INHERIT_ERROR ;^56^57^58^^^56^58^[REPLACE] static final DiagnosticType STRIP_TYPE_INHERIT_ERROR = DiagnosticType.error ( "JSC_STRIP_TYPE_INHERIT_ERROR", "Non-strip type {0} cannot inherit from strip type {1}" ) ;^ [CLASS] StripCode Strip  
[REPLACE]^this.compiler =  null;^71^^^^^65^77^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^this.stripTypes =  null;^72^^^^^65^77^[REPLACE] this.stripTypes = stripTypes;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^this.stripNamePrefixes = stripNamePrefixes; ;^73^^^^^65^77^[REPLACE] this.stripNameSuffixes = stripNameSuffixes;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^this.stripNamePrefixes = stripNamePrefixes; ;^74^^^^^65^77^[REPLACE] this.stripTypePrefixes = stripTypePrefixes;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^this.stripTypePrefixes = stripTypePrefixes; ;^75^^^^^65^77^[REPLACE] this.stripNamePrefixes = stripNamePrefixes;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^this.varsToRemove  =  this.varsToRemove ;^76^^^^^65^77^[REPLACE] this.varsToRemove = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^^76^^^^^65^77^[ADD] this.varsToRemove = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] Set) [PARAMETER] AbstractCompiler compiler String> stripTypes String> stripNameSuffixes String> stripTypePrefixes String> stripNamePrefixes [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^NodeTraversal .report ( externs , STRIP_TYPE_INHERIT_ERROR )  ;^83^^^^^82^84^[REPLACE] NodeTraversal.traverse ( compiler, root, new Strip (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node externs  root 
[REPLACE]^switch  ( n.getNext (  )  )  {^97^^^^^96^133^[REPLACE] switch  ( n.getType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^actsOnStripType ( t, n ) ;^99^^^^^96^133^[REPLACE] removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveReferenceToRemovedVariable ( t, parent, parent ) ;^103^^^^^96^133^[REPLACE] maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^replaceWithNull ( n, parent ) ;^118^^^^^96^133^[REPLACE] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^parent.removeChild ( rvalue ) ;^122^^^^^96^133^[REPLACE] maybeRemoveCall ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[ADD]^^122^^^^^96^133^[ADD] maybeRemoveCall ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^eliminateKeysWithStripNamesFromObjLit ( t, parent ) ;^126^^^^^96^133^[REPLACE] eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^actsOnStripType ( t, n ) ;^130^^^^^96^133^[REPLACE] maybeEliminateExpressionByName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^if  ( isStripName ( name )  && isCallWhoseReturnValueShouldBeStripped ( parent.getFirstChild (  )  )  )  {^149^150^^^^144^163^[REPLACE] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Node ancParent = ancestor.getParent (  ) ;^152^^^^^144^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^152^153^^^^144^163^[ADD] Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode == null;^146^^^^^144^163^[REPLACE] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( isStripName ( name )  ) {^149^150^^^^144^163^[REPLACE] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^149^150^^152^153^144^163^[ADD] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  { Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( nameNode , STRIP_TYPE_INHERIT_ERROR )  ;^152^^^^^144^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^String name = parent.getString (  ) ;^148^^^^^144^163^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( n , STRIP_TYPE_INHERIT_ERROR )  ;^152^^^^^144^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^152^^^^^144^163^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^nameNode =  parent.getNext (  )  )  {^147^^^^^144^163^[REPLACE] nameNode = nameNode.getNext (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^147^148^^^^144^163^[ADD] nameNode = nameNode.getNext (  )  )  { String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^for  ( Node parentameNode = n.getLastChild (  ) ; nameNode != null;^146^^^^^144^163^[REPLACE] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^146^147^148^149^^144^163^[ADD] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null; nameNode = nameNode.getNext (  )  )  { String name = nameNode.getString (  ) ; if  ( isStripName ( name )  ||^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^String name = parent.getParent (  ) ;^148^^^^^144^163^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( !n .getLastChild (  )   )  {^158^^^^^144^163^[REPLACE] if  ( !n.hasChildren (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^158^159^160^161^162^144^163^[ADD] if  ( !n.hasChildren (  )  )  {  replaceWithEmpty ( n, parent ) ; compiler.reportCodeChange (  ) ; }^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^144^163^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^compiler.getCodingConvention (  ) ;^161^^^^^144^163^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^while  ( false )  {^195^^^^^173^258^[REPLACE] while  ( true )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancParent = parent.getParent (  ) ;^198^^^^^173^258^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( type != Token.GETPROP ) {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestorChild =  parent;^209^^^^^173^258^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^210^^^^^173^258^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^198^^^^^173^258^[ADD] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^int type = parent .getString (  )  ;^202^^^^^173^258^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^202^^^^^173^258^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  (   parent    )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^196^197^198^199^200^173^258^[ADD] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( type != Token.GETPROP || type != Token.GETELEM || type != Token.CALL )  {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^210^^^^^173^258^[ADD] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^int type = parent.getNext (  ) ;^202^^^^^173^258^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^209^210^^^^173^258^[ADD] ancestorChild = ancestor; ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestor = n.getNext (  ) ;^193^^^^^173^258^[REPLACE] Node ancestor = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestorChild = n;^194^^^^^173^258^[REPLACE] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancParent = parent.getNext (  ) ;^198^^^^^173^258^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^206^^^^^203^208^[ADD] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( classes != null )  {^228^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^228^229^230^231^^173^258^[ADD] if  ( isReferenceToRemovedVar ( t, n )  )  { if  ( parent.getFirstChild (  )  == n )  { Node gramps = parent.getParent (  ) ; if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   ||  n )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( n, greatGramps ) ;^245^^^^^229^247^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^246^^^^^229^247^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^231^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^231^232^233^234^235^173^258^[ADD] if  ( NodeUtil.isExpressionNode ( gramps )  )  {  Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ; compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getParent (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = parent.getNext (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getNext (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^^^^^231^242^[ADD] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = gramps.getNext (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^233^234^^^^173^258^[ADD] Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   !=  parent )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^239^^^^231^242^[ADD] Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = n.getParent (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^parent.removeChild ( rvalue ) ;^238^239^^^^173^258^[ADD] Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^252^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithEmpty ( parent, gramps ) ;^253^^^^^173^258^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^254^^^^^173^258^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestor =  null.getParent (  ) ;^210^^^^^173^258^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancParent = ancestor.getParent (  ) ;^194^^^^^173^258^[REPLACE] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent .getParent (  )  ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^^^^^173^258^[ADD] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node lvalue = n.getLastChild (  ) ;^274^^^^^269^285^[REPLACE] Node lvalue = n.getFirstChild (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  ( nameEndsWithFieldNameToStrip ( lvalue )  && qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^[REPLACE] if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^277^^^^^269^285^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^277^278^279^280^281^269^285^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^replaceWithEmpty ( parent, gramps ) ;^281^^^^^269^285^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = n.getNext (  ) ;^278^^^^^269^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^278^279^^^^269^285^[ADD] Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = parent.getNext (  ) ;^278^^^^^269^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^278^^^^^269^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node expression = parent.getFirstChild (  ) ;^303^^^^^299^314^[REPLACE] Node expression = n.getFirstChild (  ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^if  ( nameEndsWithFieldNameToStrip ( expression )  && qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^[REPLACE] if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( n )  )  {^306^^^^^299^314^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[ADD]^Node gramps = parent.getParent (  ) ;replaceWithEmpty ( parent, gramps ) ;replaceWithEmpty ( n, parent ) ;^306^307^308^309^310^299^314^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^replaceWithEmpty ( expression, parent ) ;^310^^^^^299^314^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^307^^^^^299^314^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^if  (   parent    )  {^306^^^^^299^314^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^replaceWithEmpty ( n, expression ) ;^310^^^^^299^314^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^Node gramps = parent .getNext (  )  ;^307^^^^^299^314^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^while  ( false )  {^336^^^^^324^359^[REPLACE] while  ( true )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( ancestor.getFirstChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^replaceWithNull ( ancestorChild, ancestor ) ;break;^337^338^339^340^^324^359^[ADD] if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = parent.getParent (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^343^344^^^^324^359^[ADD] Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( type != Token.GETPROP ) {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestorChild =  parent;^354^^^^^324^359^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^355^^^^^324^359^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^343^^^^^324^359^[ADD] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = ancestor .getString (  )  ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^347^^^^^324^359^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( classes != null )  {^328^^^^^324^359^[REPLACE] if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^328^329^^^^324^359^[ADD] if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( parent.getFirstChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^341^342^343^344^345^324^359^[ADD] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^354^355^^^^324^359^[ADD] ancestorChild = ancestor; ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = parent.getNext (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = parent.getNext (  ) ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil .removeChild ( ancestorChild )   )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REMOVE]^ancestor = ancestor.getParent (  ) ;^351^^^^^348^353^[REMOVE] ^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^354^^^^^324^359^[ADD] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestor = n;^333^^^^^324^359^[REPLACE] Node ancestor = parent;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestorChild = parent;^334^^^^^324^359^[REPLACE] Node ancestorChild = n;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int ancestorLevel = 1 / 4;^335^^^^^324^359^[REPLACE] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = n.getParent (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^338^^^^^324^359^[ADD] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  (  type != Token.GETELEM || type != Token.CALL )  {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^348^349^350^351^352^324^359^[ADD] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor = ancestor.getParent (  ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestorChild = ancestorChild;^334^^^^^324^359^[REPLACE] Node ancestorChild = n;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int ancestorLevel = 2;^335^^^^^324^359^[REPLACE] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = parent.getType (  ) ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node key = next .getLastChild (  )  ;^373^^^^^368^387^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^while  (next == null )  {^374^^^^^368^387^[REPLACE] while  ( key != null )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^374^375^376^^^368^387^[ADD] while  ( key != null )  { if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^if  (  isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^[REPLACE] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  next.getNext (  ) .getNext (  ) ;^384^^^^^368^387^[REPLACE] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  null;^381^^^^^368^387^[REPLACE] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = next.getNext (  ) ;^377^^^^^368^387^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^377^^^^^368^387^[ADD] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node next = value.getParent (  ) ;^378^^^^^368^387^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^n.removeChild ( key ) ;^378^379^^^^368^387^[ADD] Node next = value.getNext (  ) ; n.removeChild ( key ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  n;^381^^^^^368^387^[REPLACE] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^384^^^^^368^387^[ADD] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node next = value .getParent (  )  ;^378^^^^^368^387^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^375^376^377^378^379^368^387^[ADD] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  { Node value = key.getNext (  ) ; Node next = value.getNext (  ) ; n.removeChild ( key ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^381^^^^^368^387^[ADD] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[ADD]^^377^378^^^^368^387^[ADD] Node value = key.getNext (  ) ; Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = next.getParent (  ) ;^377^^^^^368^387^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node key  n  next  value 
[REPLACE]^return n != null && n.getType (  )  != Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;;^403^404^405^^^402^406^[REPLACE] return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[METHOD] isCallWhoseReturnValueShouldBeStripped [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n 
[REPLACE]^String name = n.getParent (  ) ;^418^^^^^417^420^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n 
[REPLACE]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  ||^419^^^^^417^420^[REPLACE] return qualifiedNameBeginsWithStripType ( name ) ;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n 
[REPLACE]^if  ( name == null )  {^432^^^^^431^445^[REPLACE] if  ( name != null )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  (  name.startsWith ( type + "." )  )  {^434^^^^^431^445^[REPLACE] if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^435^^^^^431^445^[REPLACE] return true;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( name.endsWith ( type )  )  {^439^^^^^431^445^[REPLACE] if  ( name.startsWith ( type )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^return true;^439^440^441^^^431^445^[ADD] if  ( name.startsWith ( type )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^440^^^^^431^445^[REPLACE] return true;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^for  ( String type : stripTypePrefixes )  { if  ( name.startsWith ( type )  )  {^433^^^^^431^445^[REPLACE] for  ( String type : stripTypes )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^for  ( String stripName : stripNamePrefixes )  { if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^438^^^^^431^445^[REPLACE] for  ( String type : stripTypePrefixes )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( name.equals ( type )  ) {^434^^^^^431^445^[REPLACE] if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^return true;^434^435^436^^^431^445^[ADD] if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( name .endsWith ( type )   )  {^439^^^^^431^445^[REPLACE] if  ( name.startsWith ( type )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^^439^440^441^^^431^445^[ADD] if  ( name.startsWith ( type )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^^433^434^435^436^^431^445^[ADD] for  ( String type : stripTypes )  { if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;^444^^^^^431^445^[REPLACE] return false;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String name  type  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^String name = n.getParent (  ) ;^456^^^^^455^460^[REPLACE] String name = n.getString (  ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[ADD]^^456^^^^^455^460^[ADD] String name = n.getString (  ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( n , STRIP_TYPE_INHERIT_ERROR )  ;^457^^^^^455^460^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Node ancParent = ancestor.getParent (  ) ;^458^^^^^455^460^[REPLACE] Scope.Var var = scope.getVar ( name ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^return qualifiedNameBeginsWithStripType ( name ) ;^459^^^^^455^460^[REPLACE] return varsToRemove.contains ( var ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Node function = parent.getLastChild (  ) ;^483^^^^^474^509^[REPLACE] Node function = n.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  (  function.removeChild (  )  != Token.GETPROP )  {^484^^^^^474^509^[REPLACE] if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^489^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  (  parent.removeChild (  )  != Token.NAME )  {^492^^^^^474^509^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  (  gramps.getType (  )  != Token.VAR )  {^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^500^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node gramps = n.getNext (  ) ;^493^^^^^474^509^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^493^^^^^474^509^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^493^^^^^474^509^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node callee = n.getLastChild (  ) ;^504^^^^^474^509^[REPLACE] Node callee = function.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^504^^^^^474^509^[ADD] Node callee = function.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  && qualifiedNameBeginsWithStripType ( callee )  && actsOnStripType ( t, n ) ;^505^506^507^508^^474^509^[REPLACE] return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( n != null ) {^520^^^^^519^526^[REPLACE] if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  propNode 
[REPLACE]^return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getParent (  )  ) ;^522^523^^^^519^526^[REPLACE] return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  propNode 
[REPLACE]^Node propNode = propNode.getLastChild (  ) ;^521^^^^^519^526^[REPLACE] Node propNode = n.getLastChild (  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  propNode 
[ADD]^^521^^^^^519^526^[ADD] Node propNode = n.getLastChild (  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  propNode 
[REPLACE]^Node propNode = n.getFirstChild (  ) ;^521^^^^^519^526^[REPLACE] Node propNode = n.getLastChild (  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  propNode 
[REPLACE]^return true;^525^^^^^519^526^[REPLACE] return false;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  propNode 
[REPLACE]^SubclassRelationship classes = compiler.reportCodeChange (  ) .getClassesDefinedByCall ( callNode ) ;^539^540^^^^538^557^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( classes == null )  {^541^^^^^538^557^[REPLACE] if  ( classes != null )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^544^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[ADD]^^544^545^546^^^538^557^[ADD] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return false;^545^^^^^538^557^[REPLACE] return true;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^550^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[ADD]^^550^551^552^553^^538^557^[ADD] if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  { t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ; }^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return true;^556^^^^^538^557^[REPLACE] return false;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( stripNameSuffixes.contains ( name )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^[REPLACE] if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^569^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  (  ( name.length (  )  - 1 == 0 )  ) {^572^^^^^566^590^[REPLACE] if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^return false;^572^573^574^^^566^590^[ADD] if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  { return false; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;^573^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^[REPLACE] String lcName = name.toLowerCase (  ) ;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^[REPLACE] if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^579^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^String name = n.getString (  ) ;^577^^^^^566^590^[REPLACE] for  ( String stripName : stripNamePrefixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^^577^578^579^580^^566^590^[ADD] for  ( String stripName : stripNamePrefixes )  { if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^584^^^^^566^590^[REPLACE] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[ADD]^^584^585^586^^^566^590^[ADD] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  { return true; }^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return false;^585^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^String name = n.getString (  ) ;^583^^^^^566^590^[REPLACE] for  ( String stripName : stripNameSuffixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^return true;^589^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  String lcName  name  stripName  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR 
[REPLACE]^parent .removeChild ( n )  ;^600^^^^^599^601^[REPLACE] parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[METHOD] replaceWithNull [TYPE] void [PARAMETER] Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^ancestor = ancestor.getParent (  ) ;^611^^^^^610^612^[REPLACE] NodeUtil.removeChild ( parent, n ) ;^[METHOD] replaceWithEmpty [TYPE] void [PARAMETER] Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[ADD]^^611^^^^^610^612^[ADD] NodeUtil.removeChild ( parent, n ) ;^[METHOD] replaceWithEmpty [TYPE] void [PARAMETER] Node n Node parent [CLASS] StripCode Strip   [TYPE]  AbstractCompiler compiler  [TYPE]  Set stripNamePrefixes  stripNameSuffixes  stripTypePrefixes  stripTypes  varsToRemove  [TYPE]  boolean false  true  [TYPE]  DiagnosticType STRIP_TYPE_INHERIT_ERROR  [TYPE]  Node n  parent 
[REPLACE]^switch  ( parent.getType (  )  )  {^97^^^^^96^133^[REPLACE] switch  ( n.getType (  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^removeVarDeclarationsByNameOrRvalue ( t, n, n ) ;^99^^^^^96^133^[REPLACE] removeVarDeclarationsByNameOrRvalue ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveReferenceToRemovedVariable ( t, n, n ) ;^103^^^^^96^133^[REPLACE] maybeRemoveReferenceToRemovedVariable ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^replaceWithNull ( n, parent ) ;^118^^^^^96^133^[REPLACE] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^118^^^^^96^133^[ADD] maybeEliminateAssignmentByLvalueName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^maybeRemoveCall ( t, n, n ) ;^122^^^^^96^133^[REPLACE] maybeRemoveCall ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REMOVE]^ancestor = ancestor.getParent (  ) ;^122^^^^^96^133^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  { return true;^126^^^^^96^133^[REPLACE] eliminateKeysWithStripNamesFromObjLit ( t, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^actsOnStripType ( t, n ) ;^130^^^^^96^133^[REPLACE] maybeEliminateExpressionByName ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  (  isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^149^150^^^^144^163^[REPLACE] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^149^150^^152^153^144^163^[ADD] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  { Scope scope = t.getScope (  ) ; varsToRemove.add ( scope.getVar ( name )  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( parent , this )  ;^152^^^^^144^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^for  ( Node nameNode = n.getFirstChild (  ) ; nameNode == null;^146^^^^^144^163^[REPLACE] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( isStripName ( name )  ) {^149^150^^^^144^163^[REPLACE] if  ( isStripName ( name )  || isCallWhoseReturnValueShouldBeStripped ( nameNode.getFirstChild (  )  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( n , this )  ;^152^^^^^144^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^String name = parent .getParent (  )  ;^148^^^^^144^163^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^nameNode =  null.getNext (  )  )  {^147^^^^^144^163^[REPLACE] nameNode = nameNode.getNext (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^for  ( Node parentameNode = n.getFirstChild (  ) ; nameNode != null;^146^^^^^144^163^[REPLACE] for  ( Node nameNode = n.getFirstChild (  ) ; nameNode != null;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^String name = parent.getParent (  ) ;^148^^^^^144^163^[REPLACE] String name = nameNode.getString (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^Scope scope = t .report ( nameNode , null )  ;^152^^^^^144^163^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^152^^^^^144^163^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^if  ( !n.removeChild (  )  )  {^158^^^^^144^163^[REPLACE] if  ( !n.hasChildren (  )  )  {^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^replaceWithEmpty ( nameNode, parent ) ;^160^^^^^144^163^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^compiler .getCodingConvention (  )  ;^161^^^^^144^163^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[ADD]^^161^^^^^144^163^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] removeVarDeclarationsByNameOrRvalue [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Node n  nameNode  parent  [TYPE]  String name 
[REPLACE]^while  ( false )  {^195^^^^^173^258^[REPLACE] while  ( true )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^196^197^198^199^200^173^258^[ADD] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {  Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ; break;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancParent = parent.getNext (  ) ;^198^^^^^173^258^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( type != Token.GETPROP ) {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( rvalue, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestorChild =  parent;^209^^^^^173^258^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^210^^^^^173^258^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^210^^^^^173^258^[ADD] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancParent = parent.getParent (  ) ;^198^^^^^173^258^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^int type = parent.getType (  ) ;^202^^^^^173^258^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )  == n || isReferenceToRemovedVar ( t, n )  )  {^187^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n && isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^196^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  (  type != Token.GETELEM || type != Token.CALL )  {^203^204^205^^^173^258^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^206^^^^^203^208^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^209^210^^^^173^258^[ADD] ancestorChild = ancestor; ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^198^199^^^^173^258^[ADD] Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^202^^^^^173^258^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestor = n.getParent (  ) ;^193^^^^^173^258^[REPLACE] Node ancestor = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestorChild = n;^194^^^^^173^258^[REPLACE] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^194^^^^^173^258^[ADD] Node ancestorChild = parent;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^203^204^205^206^207^173^258^[ADD] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( classes != null )  {^228^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   !=  n )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( n, greatGramps ) ;^245^^^^^229^247^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REMOVE]^ancestor = ancestor.getParent (  ) ;^245^^^^^229^247^[REMOVE] ^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^246^^^^^229^247^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REMOVE]^ancestor = ancestor.getParent (  ) ;^246^^^^^229^247^[REMOVE] ^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  (   gramps    )  {^231^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^231^232^233^234^235^173^258^[ADD] if  ( NodeUtil.isExpressionNode ( gramps )  )  {  Node greatGramps = gramps.getParent (  ) ; replaceWithEmpty ( gramps, greatGramps ) ; compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue.getParent (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = parent.getNext (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getNext (  ) ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^231^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = n.getParent (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = gramps.getNext (  ) ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^233^^^^^173^258^[ADD] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = n .getNext (  )  ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^parent.removeChild ( rvalue ) ;^238^239^^^^173^258^[ADD] Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( parent.getFirstChild (  )   &&  n )  {^229^^^^^173^258^[REPLACE] if  ( parent.getFirstChild (  )  == n )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( rvalue )  )  {^231^^^^^173^258^[REPLACE] if  ( NodeUtil.isExpressionNode ( gramps )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node gramps = n.getParent (  ) ;^230^^^^^173^258^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^230^^^^^173^258^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node greatGramps = rvalue .getNext (  )  ;^233^^^^^173^258^[REPLACE] Node greatGramps = gramps.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^^^^^173^258^[ADD] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getParent (  ) ;^238^^^^^231^242^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^if  ( isReferenceToRemovedVar ( t, parent )  )  {^252^^^^^173^258^[REPLACE] if  ( isReferenceToRemovedVar ( t, n )  )  {^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^replaceWithNull ( ancestorChild, parent ) ;^253^^^^^173^258^[REPLACE] replaceWithNull ( n, parent ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^compiler.getCodingConvention (  ) ;^254^^^^^173^258^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REMOVE]^ancestor = ancestor.getParent (  ) ;^254^^^^^173^258^[REMOVE] ^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node ancestor = n.getNext (  ) ;^193^^^^^173^258^[REPLACE] Node ancestor = parent.getParent (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node rvalue = parent.getParent (  ) ;^238^^^^^173^258^[REPLACE] Node rvalue = n.getNext (  ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[ADD]^^238^239^^^^173^258^[ADD] Node rvalue = n.getNext (  ) ; parent.removeChild ( rvalue ) ;^[METHOD] maybeRemoveReferenceToRemovedVariable [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  gramps  greatGramps  n  parent  rvalue  [TYPE]  int type 
[REPLACE]^Node lvalue = parent.getFirstChild (  ) ;^274^^^^^269^285^[REPLACE] Node lvalue = n.getFirstChild (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^274^^^^^269^285^[ADD] Node lvalue = n.getFirstChild (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  (  qualifiedNameBeginsWithStripType ( lvalue )  )  {^275^276^^^^269^285^[REPLACE] if  ( nameEndsWithFieldNameToStrip ( lvalue )  || qualifiedNameBeginsWithStripType ( lvalue )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  (   parent    )  {^277^^^^^269^285^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^replaceWithEmpty ( parent, gramps ) ;^281^^^^^269^285^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^281^^^^^269^285^[ADD] replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = parent.getNext (  ) ;^278^^^^^269^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^278^^^^^269^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^277^^^^^269^285^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node gramps = n.getNext (  ) ;^278^^^^^269^285^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[ADD]^^278^^^^^269^285^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateAssignmentByLvalueName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node gramps  lvalue  n  parent 
[REPLACE]^Node expression = parent.getFirstChild (  ) ;^303^^^^^299^314^[REPLACE] Node expression = n.getFirstChild (  ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^if  (  qualifiedNameBeginsWithStripType ( expression )  )  {^304^305^^^^299^314^[REPLACE] if  ( nameEndsWithFieldNameToStrip ( expression )  || qualifiedNameBeginsWithStripType ( expression )  )  {^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( n )  )  {^306^^^^^299^314^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[ADD]^^306^307^308^309^310^299^314^[ADD] if  ( NodeUtil.isExpressionNode ( parent )  )  { Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ; } else { replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^replaceWithEmpty ( n, expression ) ;^310^^^^^299^314^[REPLACE] replaceWithEmpty ( n, parent ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^Node gramps = parent .getNext (  )  ;^307^^^^^299^314^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^307^^^^^299^314^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^if  (   parent    )  {^306^^^^^299^314^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  )  {^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[ADD]^^307^308^^^^299^314^[ADD] Node gramps = parent.getParent (  ) ; replaceWithEmpty ( parent, gramps ) ;^[METHOD] maybeEliminateExpressionByName [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node expression  gramps  n  parent 
[REPLACE]^while  ( false )  {^336^^^^^324^359^[REPLACE] while  ( true )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^336^337^338^^^324^359^[ADD] while  ( true )  { if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( parent.removeChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = parent.getParent (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  (  type != Token.GETELEM || type != Token.CALL )  {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestorChild =  parent;^354^^^^^324^359^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^354^^^^^324^359^[ADD] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor =  null.getParent (  ) ;^355^^^^^324^359^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^355^^^^^324^359^[ADD] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = parent .getNext (  )  ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^343^^^^^324^359^[ADD] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = parent.getType (  ) ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( classes != null )  {^328^^^^^324^359^[REPLACE] if  ( isMethodCallThatTriggersRemoval ( t, n, parent )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( ancestor.getFirstChild (  )   ==  parent )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^338^^^^^324^359^[ADD] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( type != Token.GETPROP ) {^348^349^350^^^324^359^[REPLACE] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^348^349^350^351^352^324^359^[ADD] if  ( type != Token.GETPROP && type != Token.GETELEM && type != Token.CALL )  { replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^351^352^^^^348^353^[ADD] replaceWithNull ( ancestorChild, ancestor ) ; break;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestorChild =  null;^354^^^^^324^359^[REPLACE] ancestorChild = ancestor;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor =  parent.getParent (  ) ;^355^^^^^324^359^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = n.getNext (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^343^344^^^^324^359^[ADD] Node ancParent = ancestor.getParent (  ) ; replaceWithEmpty ( ancestor, ancParent ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( ancestor.getFirstChild (  )   ==  ancestorChild )  {^337^^^^^324^359^[REPLACE] if  ( ancestor.getFirstChild (  )  != ancestorChild )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parent, ancestor ) ;^338^^^^^324^359^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( gramps )  )  {^341^^^^^324^359^[REPLACE] if  ( NodeUtil.isExpressionNode ( ancestor )  )  {^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^ancestor =  n.getParent (  ) ;^355^^^^^324^359^[REPLACE] ancestor = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestor = n;^333^^^^^324^359^[REPLACE] Node ancestor = parent;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancestorChild = parent;^334^^^^^324^359^[REPLACE] Node ancestorChild = n;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int ancestorLevel = 1 >> 4;^335^^^^^324^359^[REPLACE] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int type = n.getType (  ) ;^347^^^^^324^359^[REPLACE] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^347^^^^^324^359^[ADD] int type = ancestor.getType (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^replaceWithNull ( ancestorChild, ancestor ) ;break;^337^338^339^340^^324^359^[ADD] if  ( ancestor.getFirstChild (  )  != ancestorChild )  { replaceWithNull ( ancestorChild, ancestor ) ; break; }^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^replaceWithNull ( parentChild, ancestor ) ;^351^^^^^348^353^[REPLACE] replaceWithNull ( ancestorChild, ancestor ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REMOVE]^ancestor = ancestor.getParent (  ) ;^351^^^^^348^353^[REMOVE] ^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^int ancestorLevel = 4;^335^^^^^324^359^[REPLACE] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[ADD]^^335^^^^^324^359^[ADD] int ancestorLevel = 1;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node ancParent = parent.getNext (  ) ;^343^^^^^324^359^[REPLACE] Node ancParent = ancestor.getParent (  ) ;^[METHOD] maybeRemoveCall [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node ancParent  ancestor  ancestorChild  n  parent  [TYPE]  int ancestorLevel  type 
[REPLACE]^Node key = next.getLastChild (  ) ;^373^^^^^368^387^[REPLACE] Node key = n.getFirstChild (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^while  ( key ==next )  {^374^^^^^368^387^[REPLACE] while  ( key != null )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^if  ( key.getType (  )  == Token.STRING || isStripName ( key.getString (  )  )  )  {^375^376^^^^368^387^[REPLACE] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  next.getNext (  ) .getNext (  ) ;^384^^^^^368^387^[REPLACE] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^key =  n;^381^^^^^368^387^[REPLACE] key = next;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = key.getParent (  ) ;^377^^^^^368^387^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node next = value.getParent (  ) ;^378^^^^^368^387^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[ADD]^^378^^^^^368^387^[ADD] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[ADD]^^384^^^^^368^387^[ADD] key = key.getNext (  ) .getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node value = next.getNext (  ) ;^377^^^^^368^387^[REPLACE] Node value = key.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^if  ( key.getType (  )  == Token.STRING ) {^375^376^^^^368^387^[REPLACE] if  ( key.getType (  )  == Token.STRING && isStripName ( key.getString (  )  )  )  {^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^Node next = value .getParent (  )  ;^378^^^^^368^387^[REPLACE] Node next = value.getNext (  ) ;^[METHOD] eliminateKeysWithStripNamesFromObjLit [TYPE] void [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node key  n  next  value 
[REPLACE]^return false ;^403^404^405^^^402^406^[REPLACE] return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  || nameEndsWithFieldNameToStrip ( n.getFirstChild (  )  )  ) ;^[METHOD] isCallWhoseReturnValueShouldBeStripped [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^String name = n.getParent (  ) ;^418^^^^^417^420^[REPLACE] String name = n.getQualifiedName (  ) ;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^return n != null && n.getType (  )  == Token.CALL && n.hasChildren (  ) &&  ( qualifiedNameBeginsWithStripType ( n.getFirstChild (  )  )  ||^419^^^^^417^420^[REPLACE] return qualifiedNameBeginsWithStripType ( name ) ;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^if  ( name == null )  {^432^^^^^431^445^[REPLACE] if  ( name != null )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[ADD]^^432^433^434^435^436^431^445^[ADD] if  ( name != null )  { for  ( String type : stripTypes )  { if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^if  ( name.equals ( type )  && name.startsWith ( type +true." )  )  {^434^^^^^431^445^[REPLACE] if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^return false;^435^^^^^431^445^[REPLACE] return true;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^if  ( name.endsWith ( type )  )  {^439^^^^^431^445^[REPLACE] if  ( name.startsWith ( type )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^return false;^440^^^^^431^445^[REPLACE] return true;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^for  ( String type : stripTypePrefixes )  { if  ( name.startsWith ( type )  )  {^433^^^^^431^445^[REPLACE] for  ( String type : stripTypes )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^for  ( String stripName : stripNamePrefixes )  { if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^438^^^^^431^445^[REPLACE] for  ( String type : stripTypePrefixes )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^if  ( name.equals ( type )  && name.startsWith ( type + "." )  )  {^434^^^^^431^445^[REPLACE] if  ( name.equals ( type )  || name.startsWith ( type + "." )  )  {^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[ADD]^^439^440^441^^^431^445^[ADD] if  ( name.startsWith ( type )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[ADD]^^438^439^440^441^^431^445^[ADD] for  ( String type : stripTypePrefixes )  { if  ( name.startsWith ( type )  )  { return true; }^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^return true;^444^^^^^431^445^[REPLACE] return false;^[METHOD] qualifiedNameBeginsWithStripType [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String name  type 
[REPLACE]^String name = n .getParent (  )  ;^456^^^^^455^460^[REPLACE] String name = n.getString (  ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Node ancParent = ancestor.getParent (  ) ;^457^^^^^455^460^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Node ancParent = ancestor.getParent (  ) ;^458^^^^^455^460^[REPLACE] Scope.Var var = scope.getVar ( name ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[ADD]^^458^^^^^455^460^[ADD] Scope.Var var = scope.getVar ( name ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^return 0sToRemove .add (  )  ;^459^^^^^455^460^[REPLACE] return varsToRemove.contains ( var ) ;^[METHOD] isReferenceToRemovedVar [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Node n  [TYPE]  String name 
[REPLACE]^Node function = parent.getFirstChild (  ) ;^483^^^^^474^509^[REPLACE] Node function = n.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( n != null || function.getType (  )  != Token.GETPROP )  {^484^^^^^474^509^[REPLACE] if  ( function == null || function.getType (  )  != Token.GETPROP )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^489^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( parent != this && parent.getType (  )  != Token.NAME )  {^492^^^^^474^509^[REPLACE] if  ( parent != null && parent.getType (  )  == Token.NAME )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( gramps != null && gramps.getType (  )  != Token.VAR )  {^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^494^495^^^^474^509^[ADD] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return true;^500^^^^^474^509^[REPLACE] return false;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node gramps = n.getNext (  ) ;^493^^^^^474^509^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[ADD]^^493^^^^^474^509^[ADD] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  (  gramps.getType (  )  != Token.VAR )  {^494^^^^^474^509^[REPLACE] if  ( gramps != null && gramps.getType (  )  == Token.VAR )  {^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node gramps = n.getParent (  ) ;^493^^^^^474^509^[REPLACE] Node gramps = parent.getParent (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^Node callee = n.getLastChild (  ) ;^504^^^^^474^509^[REPLACE] Node callee = function.getFirstChild (  ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^return nameEndsWithFieldNameToStrip ( callee )  && nameEndsWithFieldNameToStrip ( function )  && qualifiedNameBeginsWithStripType ( callee )  && actsOnStripType ( t, n ) ;^505^506^507^508^^474^509^[REPLACE] return nameEndsWithFieldNameToStrip ( callee )  || nameEndsWithFieldNameToStrip ( function )  || qualifiedNameBeginsWithStripType ( callee )  || actsOnStripType ( t, n ) ;^[METHOD] isMethodCallThatTriggersRemoval [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callee  function  gramps  n  parent 
[REPLACE]^if  ( n != null ) {^520^^^^^519^526^[REPLACE] if  ( n != null && n.getType (  )  == Token.GETPROP )  {^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  propNode 
[REPLACE]^return true ;^522^523^^^^519^526^[REPLACE] return propNode != null && propNode.getType (  )  == Token.STRING && isStripName ( propNode.getString (  )  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  propNode 
[REPLACE]^Node propNode = propNode.getLastChild (  ) ;^521^^^^^519^526^[REPLACE] Node propNode = n.getLastChild (  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  propNode 
[ADD]^^521^^^^^519^526^[ADD] Node propNode = n.getLastChild (  ) ;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  propNode 
[REPLACE]^return true;^525^^^^^519^526^[REPLACE] return false;^[METHOD] nameEndsWithFieldNameToStrip [TYPE] boolean [PARAMETER] Node n [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  propNode 
[REPLACE]^SubclassRelationship classes = compiler.getCodingConvention (  )  .getNext (  )  ;^539^540^^^^538^557^[REPLACE] SubclassRelationship classes = compiler.getCodingConvention (  ) .getClassesDefinedByCall ( callNode ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( classes == null )  {^541^^^^^538^557^[REPLACE] if  ( classes != null )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^544^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[ADD]^return true;^544^545^546^^^538^557^[ADD] if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  { return true; }^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return false;^545^^^^^538^557^[REPLACE] return true;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( qualifiedNameBeginsWithStripType ( classes.subclassName )  )  {^550^^^^^538^557^[REPLACE] if  ( qualifiedNameBeginsWithStripType ( classes.superclassName )  )  {^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^t .getScope (  )  ;^551^552^^^^538^557^[REPLACE] t.report ( callNode, STRIP_TYPE_INHERIT_ERROR, classes.subclassName, classes.superclassName ) ;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^return true;^556^^^^^538^557^[REPLACE] return false;^[METHOD] actsOnStripType [TYPE] boolean [PARAMETER] NodeTraversal t Node callNode [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node callNode  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( stripNameSuffixes.contains ( name )  && stripNamePrefixes.contains ( name )  )  {^567^568^^^^566^590^[REPLACE] if  ( stripNameSuffixes.contains ( name )  || stripNamePrefixes.contains ( name )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return false;^569^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  (  Character.isUpperCase ( name.charAt ( 0 )  )  )  {^572^^^^^566^590^[REPLACE] if  (  ( name.length (  )  == 0 )  || Character.isUpperCase ( name.charAt ( 0 )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return true;^573^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^String lcName = stripName.toLowerCase (  ) ;^576^^^^^566^590^[REPLACE] String lcName = name.toLowerCase (  ) ;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  ( name.startsWith ( stripName.toLowerCase (  )  )  )  {^578^^^^^566^590^[REPLACE] if  ( lcName.startsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return false;^579^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^String name = n.getString (  ) ;^577^^^^^566^590^[REPLACE] for  ( String stripName : stripNamePrefixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^if  ( lcName.endsWith ( name.toLowerCase (  )  )  )  {^584^^^^^566^590^[REPLACE] if  ( lcName.endsWith ( stripName.toLowerCase (  )  )  )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return false;^585^^^^^566^590^[REPLACE] return true;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^String name = n.getString (  ) ;^583^^^^^566^590^[REPLACE] for  ( String stripName : stripNameSuffixes )  {^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^return true;^589^^^^^566^590^[REPLACE] return false;^[METHOD] isStripName [TYPE] boolean [PARAMETER] String name [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  String lcName  name  stripName 
[REPLACE]^parent .removeChild ( n )  ;^600^^^^^599^601^[REPLACE] parent.replaceChild ( n, new Node ( Token.NULL )  ) ;^[METHOD] replaceWithNull [TYPE] void [PARAMETER] Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  parent 
[REMOVE]^if  ( !n.hasChildren (  )  )  {^600^^^^^599^601^[REMOVE] ^[METHOD] replaceWithNull [TYPE] void [PARAMETER] Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  parent 
[REPLACE]^ancestor = ancestor.getParent (  ) ;^611^^^^^610^612^[REPLACE] NodeUtil.removeChild ( parent, n ) ;^[METHOD] replaceWithEmpty [TYPE] void [PARAMETER] Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  parent 
[ADD]^^611^^^^^610^612^[ADD] NodeUtil.removeChild ( parent, n ) ;^[METHOD] replaceWithEmpty [TYPE] void [PARAMETER] Node n Node parent [CLASS] Strip   [TYPE]  boolean false  true  [TYPE]  Node n  parent 
