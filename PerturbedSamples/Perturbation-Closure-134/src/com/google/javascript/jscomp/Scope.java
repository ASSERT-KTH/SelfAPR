[REPLACE]^private final Map<String, Var> vars  = null ;^54^^^^^^^[REPLACE] private final Map<String, Var> vars = new LinkedHashMap<String, Var> (  ) ;^ [CLASS] Scope Var  
[REPLACE]^private  Scope parent;^55^^^^^^^[REPLACE] private final Scope parent;^ [CLASS] Scope Var  
[REPLACE]^private  Node rootNode;^56^^^^^^^[REPLACE] private final Node rootNode;^ [CLASS] Scope Var  
[REPLACE]^private  ObjectType thisType;^59^^^^^^^[REPLACE] private final ObjectType thisType;^ [CLASS] Scope Var  
[REPLACE]^private  boolean isBottom;^62^^^^^^^[REPLACE] private final boolean isBottom;^ [CLASS] Scope Var  
[REPLACE]^int  name;^67^^^^^^^[REPLACE] String name;^ [CLASS] Scope Var  
[REPLACE]^private JSDocInfo info ;^80^^^^^^^[REPLACE] private JSDocInfo info = null;^ [CLASS] Scope Var  
[REPLACE]^this.typeInferred =  typeInferred;^110^^^^^109^111^[REPLACE] this.typeInferred = inferred;^[METHOD] <init> [TYPE] Scope$Var(boolean) [PARAMETER] boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[ADD]^^110^^^^^109^111^[ADD] this.typeInferred = inferred;^[METHOD] <init> [TYPE] Scope$Var(boolean) [PARAMETER] boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^Preconditions.checkState ( parent ) ;^267^^^^^266^279^[REPLACE] Preconditions.checkNotNull ( parent ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^Preconditions.checkArgument ( rootNode  ==  parent.rootNode ) ;^268^^^^^266^279^[REPLACE] Preconditions.checkArgument ( rootNode != parent.rootNode ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.parent = null; ;^270^^^^^266^279^[REPLACE] this.parent = parent;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.rootNode =  nameNode;^271^^^^^266^279^[REPLACE] this.rootNode = rootNode;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^JSType nodeType = nameNode.getType (  ) ;^272^^^^^266^279^[REPLACE] JSType nodeType = rootNode.getJSType (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[ADD]^^272^^^^^266^279^[ADD] JSType nodeType = rootNode.getJSType (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^if  ( nodeType == this && nodeType instanceof FunctionType )  {^273^^^^^266^279^[REPLACE] if  ( nodeType != null && nodeType instanceof FunctionType )  {^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^thisType =  null.thisType;^276^^^^^266^279^[REPLACE] thisType = parent.thisType;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^thisType =   (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ;^274^^^^^266^279^[REPLACE] thisType =  (  ( FunctionType )  nodeType ) .getTypeOfThis (  ) ;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[ADD]^^276^^^^^266^279^[ADD] thisType = parent.thisType;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.isBottom = true;^278^^^^^266^279^[REPLACE] this.isBottom = false;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[ADD]^^278^^^^^266^279^[ADD] this.isBottom = false;^[METHOD] <init> [TYPE] Node) [PARAMETER] Scope parent Node rootNode [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.parent = parent; ;^287^^^^^286^291^[REPLACE] this.parent = null;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node rootNode AbstractCompiler compiler [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[ADD]^^287^^^^^286^291^[ADD] this.parent = null;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node rootNode AbstractCompiler compiler [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.rootNode =  nameNode;^288^^^^^286^291^[REPLACE] this.rootNode = rootNode;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node rootNode AbstractCompiler compiler [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^thisType =  null.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ;^289^^^^^286^291^[REPLACE] thisType = compiler.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node rootNode AbstractCompiler compiler [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[ADD]^^289^^^^^286^291^[ADD] thisType = compiler.getTypeRegistry (  ) .getNativeObjectType ( GLOBAL_THIS ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node rootNode AbstractCompiler compiler [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.isBottom = true;^290^^^^^286^291^[REPLACE] this.isBottom = false;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] Node rootNode AbstractCompiler compiler [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.parent = true;^299^^^^^298^303^[REPLACE] this.parent = null;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] Node rootNode ObjectType thisType [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.rootNode =  nameNode;^300^^^^^298^303^[REPLACE] this.rootNode = rootNode;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] Node rootNode ObjectType thisType [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.thisType =  null;^301^^^^^298^303^[REPLACE] this.thisType = thisType;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] Node rootNode ObjectType thisType [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^this.isBottom = false;^302^^^^^298^303^[REPLACE] this.isBottom = true;^[METHOD] <init> [TYPE] ObjectType) [PARAMETER] Node rootNode ObjectType thisType [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^return num;^117^^^^^116^118^[REPLACE] return name;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^return nameNode != null ? null : nameNode.getType (  ) ;;^124^^^^^123^125^[REPLACE] return nameNode == null ? null : nameNode.getParent (  ) ;^[METHOD] getParentNode [TYPE] Node [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index 
[REPLACE]^Scope s = scope.getParent (  ) ;^133^^^^^132^143^[REPLACE] int num = index;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Scope s = scope.getVarCount (  ) ;^134^^^^^132^143^[REPLACE] Scope s = scope.getParent (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( scope != null )  {^135^^^^^132^143^[REPLACE] if  ( s == null )  {^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^135^136^137^^^132^143^[ADD] if  ( s == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return ;^136^^^^^132^143^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^136^^^^^132^143^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^while  (s (  )  == null )  {^138^^^^^132^143^[REPLACE] while  ( s.getParent (  )  != null )  {^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^s = s.getParent (  ) ; ;^139^^^^^132^143^[REPLACE] num += s.getVarCount (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^num += s.getVarCount (  ) ; ;^140^^^^^132^143^[REPLACE] s = s.getParent (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^140^^^^^132^143^[ADD] s = s.getParent (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return name;^142^^^^^132^143^[REPLACE] return num;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^149^^^^^148^150^[REPLACE] return scope.isGlobal (  ) ;^[METHOD] isGlobal [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return scope .isGlobal (  )  ;^156^^^^^155^157^[REPLACE] return scope.isLocal (  ) ;^[METHOD] isLocal [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return input ;^163^^^^^162^164^[REPLACE] return input == null || input.isExtern (  ) ;^[METHOD] isExtern [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return NodeUtil.getInfoForNameNode ( nameNode ) ;^171^^^^^170^172^[REPLACE] return NodeUtil.isConstantName ( nameNode ) ;^[METHOD] isConst [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^179^^^^^178^180^[REPLACE] return isDefine;^[METHOD] isDefine [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Scope s = scope.getParent (  ) ;^183^^^^^182^186^[REPLACE] Node parent = getParentNode (  ) ;^[METHOD] getInitialValue [TYPE] Node [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getJSType (  ) ;^184^185^^^^182^186^[REPLACE] return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[METHOD] getInitialValue [TYPE] Node [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return true;^193^^^^^192^194^[REPLACE] return type;^[METHOD] getType [TYPE] JSType [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^200^^^^^199^201^[REPLACE] return nameNode;^[METHOD] getNameNode [TYPE] Node [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^207^^^^^206^208^[REPLACE] return info;^[METHOD] getJSDocInfo [TYPE] JSDocInfo [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkNotNull ( isTypeInferred (  )  ) ;^215^^^^^214^217^[REPLACE] Preconditions.checkState ( isTypeInferred (  )  ) ;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REMOVE]^Scope s = scope.getParent (  ) ;^215^^^^^214^217^[REMOVE] ^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^215^^^^^214^217^[REPLACE] Preconditions.checkState ( isTypeInferred (  )  ) ;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.type = type; ;^216^^^^^214^217^[REPLACE] this.type = type;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^224^^^^^223^225^[REPLACE] return typeInferred;^[METHOD] isTypeInferred [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( input != null ) return "<non-file>";^228^229^^^^227^232^[REPLACE] if  ( input == null ) return "<non-file>";^[METHOD] getInputName [TYPE] String [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return input.isExtern (  ) ;^231^^^^^227^232^[REPLACE] return input.getName (  ) ;^[METHOD] getInputName [TYPE] String [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^229^^^^^227^232^[REPLACE] return "<non-file>";^[METHOD] getInputName [TYPE] String [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( info == null ) {^235^^^^^234^240^[REPLACE] if  ( info != null && info.isNoShadow (  )  )  {^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^return true;return false;^235^236^237^238^239^234^240^[ADD] if  ( info != null && info.isNoShadow (  )  )  { return true; } else { return false; }^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return true;^238^^^^^234^240^[REPLACE] return false;^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return false;^236^^^^^234^240^[REPLACE] return true;^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return type;^236^^^^^234^240^[REPLACE] return true;^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( ! ! ( other instanceof Var )  )  {^243^^^^^242^249^[REPLACE] if  ( ! ( other instanceof Var )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return true;^244^^^^^242^249^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Var var = new Var ( inferred ) ;^247^^^^^242^249^[REPLACE] Var otherVar =  ( Var )  other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^247^248^^^^242^249^[ADD] Var otherVar =  ( Var )  other; return otherVar.nameNode == nameNode;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^returnrootNode  &&  nameNode;^248^^^^^242^249^[REPLACE] return otherVar.nameNode == nameNode;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return nameNode.getType (  ) ;^252^^^^^251^253^[REPLACE] return nameNode.hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return "Scope.Var "  ^  name;^257^^^^^256^258^[REPLACE] return "Scope.Var " + name;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^307^^^^^306^308^[REPLACE] return isBottom;^[METHOD] isBottom [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^315^^^^^314^316^[REPLACE] return rootNode;^[METHOD] getRootNode [TYPE] Node [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^319^^^^^318^320^[REPLACE] return parent;^[METHOD] getParent [TYPE] Scope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Scope scope = this;^323^^^^^322^328^[REPLACE] Scope result = this;^[METHOD] getGlobalScope [TYPE] Scope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^while  ( result.getVarCount (  )  == true )  {^324^^^^^322^328^[REPLACE] while  ( result.getParent (  )  != null )  {^[METHOD] getGlobalScope [TYPE] Scope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^324^325^^^^322^328^[ADD] while  ( result.getParent (  )  != null )  { result = result.getParent (  ) ;^[METHOD] getGlobalScope [TYPE] Scope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^result =  s.getParent (  ) ;^325^^^^^322^328^[REPLACE] result = result.getParent (  ) ;^[METHOD] getGlobalScope [TYPE] Scope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return s;^327^^^^^322^328^[REPLACE] return result;^[METHOD] getGlobalScope [TYPE] Scope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^332^^^^^331^333^[REPLACE] return parent;^[METHOD] getParentScope [TYPE] StaticScope [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return nullType;^339^^^^^338^340^[REPLACE] return thisType;^[METHOD] getTypeOfThis [TYPE] ObjectType [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return declare ( name, nameNode, nodeType, input, false ) ;^351^^^^^350^352^[REPLACE] return declare ( name, nameNode, type, input, true ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( name != null && name.length (  )  - 2 > 0 ) ;^366^^^^^364^388^[REPLACE] Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( var.scope == this ) ;^366^^^^^364^388^[REPLACE] Preconditions.checkState ( name != null && name.length (  )  > 0 ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions .checkNotNull ( result )  ;^369^^^^^364^388^[REPLACE] Preconditions.checkState ( vars.get ( name )  == null ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^369^^^^^364^388^[ADD] Preconditions.checkState ( vars.get ( name )  == null ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( vars.remove ( name )  == null ) ;^369^^^^^364^388^[REPLACE] Preconditions.checkState ( vars.get ( name )  == null ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Var var = new Var ( typeInferred ) ;^371^^^^^364^388^[REPLACE] Var var = new Var ( inferred ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.name =  name;^372^^^^^364^388^[REPLACE] var.name = name;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^372^373^^^^364^388^[ADD] var.name = name; var.nameNode = nameNode;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.nameNode =  nameNode;^373^^^^^364^388^[REPLACE] var.nameNode = nameNode;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^373^374^^^^364^388^[ADD] var.nameNode = nameNode; var.type = type;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^this.type = type; ;^374^^^^^364^388^[REPLACE] var.type = type;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.scope =  this;^375^^^^^364^388^[REPLACE] var.scope = this;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.index =  nulls.size (  ) ;^376^^^^^364^388^[REPLACE] var.index = vars.size (  ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^376^^^^^364^388^[ADD] var.index = vars.size (  ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.input =  input;^377^^^^^364^388^[REPLACE] var.input = input;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^JSDocInfo info = NodeUtil.getInfoForNameNode ( rootNode ) ;^381^^^^^364^388^[REPLACE] JSDocInfo info = NodeUtil.getInfoForNameNode ( nameNode ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.isDefine = info != null || info.isDefine (  ) ;^383^^^^^364^388^[REPLACE] var.isDefine = info != null && info.isDefine (  ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^var.info =  info;^384^^^^^364^388^[REPLACE] var.info = info;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^^384^^^^^364^388^[ADD] var.info = info;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^386^^^^^364^388^[REPLACE] vars.put ( name, var ) ;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^387^^^^^364^388^[REPLACE] return var;^[METHOD] declare [TYPE] Scope$Var [PARAMETER] String name Node nameNode JSType type CompilerInput input boolean inferred [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkArgument ( scope  !=  this ) ;^395^^^^^394^398^[REPLACE] Preconditions.checkState ( var.scope == this ) ;^[METHOD] undeclare [TYPE] void [PARAMETER] Var var [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( vars.remove ( var.name )   !=  var ) ;^396^^^^^394^398^[REPLACE] Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[METHOD] undeclare [TYPE] void [PARAMETER] Var var [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Preconditions.checkState ( vars.remove ( var.name )  == var ) ;^396^^^^^394^398^[REPLACE] Preconditions.checkState ( vars.get ( var.name )  == var ) ;^[METHOD] undeclare [TYPE] void [PARAMETER] Var var [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^vars.get ( var.name ) ;^397^^^^^394^398^[REPLACE] vars.remove ( var.name ) ;^[METHOD] undeclare [TYPE] void [PARAMETER] Var var [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return input == null || input.isExtern (  ) ;^401^^^^^400^402^[REPLACE] return getVar ( name ) ;^[METHOD] getSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.remove ( name ) ;^405^^^^^404^406^[REPLACE] return vars.get ( name ) ;^[METHOD] getOwnSlot [TYPE] StaticSlot [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Var var = vars.remove ( name ) ;^412^^^^^411^420^[REPLACE] Var var = vars.get ( name ) ;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( var == null )  {^413^^^^^411^420^[REPLACE] if  ( var != null )  {^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^} else if  ( parent == false )  {^415^^^^^411^420^[REPLACE] } else if  ( parent != null )  {^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return this;^418^^^^^411^420^[REPLACE] return null;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return parent.getSlot ( name ) ;^416^^^^^411^420^[REPLACE] return parent.getVar ( name ) ;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return parent .getParent (  )  ;^416^^^^^411^420^[REPLACE] return parent.getVar ( name ) ;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return true;^418^^^^^411^420^[REPLACE] return null;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.get ( name ) ;^414^^^^^411^420^[REPLACE] return var;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^}  else {^415^^^^^411^420^[REPLACE] } else if  ( parent != null )  {^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^}   return parent.getVar ( name ) ;return null;^415^416^417^418^419^411^420^[ADD] else if  ( parent != null )  { return parent.getVar ( name ) ; } else { return null; }^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return num;^418^^^^^411^420^[REPLACE] return null;^[METHOD] getVar [TYPE] Scope$Var [PARAMETER] String name [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Var var  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^Scope s = scope.getParent (  ) ;^426^^^^^425^434^[REPLACE] Scope scope = this;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( scope.vars.containsKey ( name )  ) return false;^427^428^^^^425^434^[REPLACE] if  ( scope.vars.containsKey ( name )  ) return true;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[ADD]^return true;return scope.parent.isDeclared ( name, recurse ) ;^427^428^^430^431^425^434^[ADD] if  ( scope.vars.containsKey ( name )  ) return true; if  ( scope.parent != null && recurse )  { return scope.parent.isDeclared ( name, recurse ) ;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return type;^428^^^^^425^434^[REPLACE] return true;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return false;^428^^^^^425^434^[REPLACE] return true;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^if  ( scope.parent == null ) {^430^^^^^425^434^[REPLACE] if  ( scope.parent != null && recurse )  {^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return scope.parent.Scope ( name, recurse ) ;^431^^^^^425^434^[REPLACE] return scope.parent.isDeclared ( name, recurse ) ;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return scope.parent.isDeclared ( name, typeInferred ) ;^431^^^^^425^434^[REPLACE] return scope.parent.isDeclared ( name, recurse ) ;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return true;^433^^^^^425^434^[REPLACE] return false;^[METHOD] isDeclared [TYPE] boolean [PARAMETER] String name boolean recurse [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars.size (  ) .iterator (  ) ;^440^^^^^439^441^[REPLACE] return vars.values (  ) .iterator (  ) ;^[METHOD] getVars [TYPE] Iterator [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return vars .containsKey ( null )  ;^447^^^^^446^448^[REPLACE] return vars.size (  ) ;^[METHOD] getVarCount [TYPE] int [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^returnresult != null;;^454^^^^^453^455^[REPLACE] return parent == null;^[METHOD] isGlobal [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^return input == null || input.isExtern (  ) ;^461^^^^^460^462^[REPLACE] return !isGlobal (  ) ;^[METHOD] isLocal [TYPE] boolean [PARAMETER] [CLASS] Scope Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^private JSDocInfo info ;^80^^^^^^^[REPLACE] private JSDocInfo info = null;^[METHOD] isLocal [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  ObjectType thisType  [TYPE]  CompilerInput input  [TYPE]  boolean false  inferred  isBottom  isDefine  recurse  true  typeInferred  [TYPE]  JSType nodeType  type  [TYPE]  Scope parent  result  s  scope  [TYPE]  Node nameNode  parent  rootNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  Map vars  [TYPE]  int index  num 
[REPLACE]^this.typeInferred =  typeInferred;^110^^^^^109^111^[REPLACE] this.typeInferred = inferred;^[METHOD] <init> [TYPE] Scope$Var(boolean) [PARAMETER] boolean inferred [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index 
[REPLACE]^return num;^117^^^^^116^118^[REPLACE] return name;^[METHOD] getName [TYPE] String [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index 
[REPLACE]^return nameNode == this ? this : nameNode.getType (  ) ;^124^^^^^123^125^[REPLACE] return nameNode == null ? null : nameNode.getParent (  ) ;^[METHOD] getParentNode [TYPE] Node [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index 
[REPLACE]^Scope s = scope.getParent (  ) ;^133^^^^^132^143^[REPLACE] int num = index;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^Scope s = scope.getVarCount (  ) ;^134^^^^^132^143^[REPLACE] Scope s = scope.getParent (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^if  ( s != null )  {^135^^^^^132^143^[REPLACE] if  ( s == null )  {^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return ;^136^^^^^132^143^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[ADD]^^136^^^^^132^143^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^while  ( s.getParent (  )  == null )  {^138^^^^^132^143^[REPLACE] while  ( s.getParent (  )  != null )  {^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^s = s.getParent (  ) ; ;^139^^^^^132^143^[REPLACE] num += s.getVarCount (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^num += s.getVarCount (  ) ; ;^140^^^^^132^143^[REPLACE] s = s.getParent (  ) ;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return index;^142^^^^^132^143^[REPLACE] return num;^[METHOD] getLocalVarIndex [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^149^^^^^148^150^[REPLACE] return scope.isGlobal (  ) ;^[METHOD] isGlobal [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isGlobal (  ) ;^156^^^^^155^157^[REPLACE] return scope.isLocal (  ) ;^[METHOD] isLocal [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return input == true || input .getName (  )  ;^163^^^^^162^164^[REPLACE] return input == null || input.isExtern (  ) ;^[METHOD] isExtern [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return   nameNode   ;^171^^^^^170^172^[REPLACE] return NodeUtil.isConstantName ( nameNode ) ;^[METHOD] isConst [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^179^^^^^178^180^[REPLACE] return isDefine;^[METHOD] isDefine [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^Scope s = scope.getParent (  ) ;^183^^^^^182^186^[REPLACE] Node parent = getParentNode (  ) ;^[METHOD] getInitialValue [TYPE] Node [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return nameNode.getFirstChild (  ) ;^184^185^^^^182^186^[REPLACE] return parent.getType (  )  == Token.FUNCTION ? parent : nameNode.getFirstChild (  ) ;^[METHOD] getInitialValue [TYPE] Node [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return true;^193^^^^^192^194^[REPLACE] return type;^[METHOD] getType [TYPE] JSType [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^200^^^^^199^201^[REPLACE] return nameNode;^[METHOD] getNameNode [TYPE] Node [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^207^^^^^206^208^[REPLACE] return info;^[METHOD] getJSDocInfo [TYPE] JSDocInfo [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^isTypeInferred (  )  ;^215^^^^^214^217^[REPLACE] Preconditions.checkState ( isTypeInferred (  )  ) ;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[ADD]^this.type = type;^215^216^^^^214^217^[ADD] Preconditions.checkState ( isTypeInferred (  )  ) ; this.type = type;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return input == null || input.isExtern (  ) ;^215^^^^^214^217^[REPLACE] Preconditions.checkState ( isTypeInferred (  )  ) ;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^this.type =  null;^216^^^^^214^217^[REPLACE] this.type = type;^[METHOD] setType [TYPE] void [PARAMETER] JSType type [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^224^^^^^223^225^[REPLACE] return typeInferred;^[METHOD] isTypeInferred [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^if  ( input != null ) return "<non-file>";^228^229^^^^227^232^[REPLACE] if  ( input == null ) return "<non-file>";^[METHOD] getInputName [TYPE] String [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return input.isExtern (  ) ;^231^^^^^227^232^[REPLACE] return input.getName (  ) ;^[METHOD] getInputName [TYPE] String [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return scope.isLocal (  ) ;^229^^^^^227^232^[REPLACE] return "<non-file>";^[METHOD] getInputName [TYPE] String [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^if  ( info == null && info.isNoShadow (  )  )  {^235^^^^^234^240^[REPLACE] if  ( info != null && info.isNoShadow (  )  )  {^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return true;^238^^^^^234^240^[REPLACE] return false;^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return false;^236^^^^^234^240^[REPLACE] return true;^[METHOD] isNoShadow [TYPE] boolean [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^if  ( ! ! ( other instanceof Var )  )  {^243^^^^^242^249^[REPLACE] if  ( ! ( other instanceof Var )  )  {^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[ADD]^^243^244^245^^^242^249^[ADD] if  ( ! ( other instanceof Var )  )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return true;^244^^^^^242^249^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^Scope s = scope.getParent (  ) ;^247^^^^^242^249^[REPLACE] Var otherVar =  ( Var )  other;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[ADD]^^247^248^^^^242^249^[ADD] Var otherVar =  ( Var )  other; return otherVar.nameNode == nameNode;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return otherVar.nameNode  && parent;^248^^^^^242^249^[REPLACE] return otherVar.nameNode == nameNode;^[METHOD] equals [TYPE] boolean [PARAMETER] Object other [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Var otherVar  [TYPE]  Node nameNode  parent  [TYPE]  Object other  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return nameNode.getType (  ) ;^252^^^^^251^253^[REPLACE] return nameNode.hashCode (  ) ;^[METHOD] hashCode [TYPE] int [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
[REPLACE]^return "Scope.Var "  ^  name;^257^^^^^256^258^[REPLACE] return "Scope.Var " + name;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Var   [TYPE]  CompilerInput input  [TYPE]  JSType type  [TYPE]  boolean false  inferred  isDefine  true  typeInferred  [TYPE]  Scope s  scope  [TYPE]  Node nameNode  parent  [TYPE]  String name  [TYPE]  JSDocInfo info  [TYPE]  int index  num 
