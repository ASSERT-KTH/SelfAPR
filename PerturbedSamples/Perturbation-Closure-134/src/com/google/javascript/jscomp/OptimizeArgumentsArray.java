[REPLACE]^private static final  long  ARGUMENTS = "arguments";^50^^^^^^^[REPLACE] private static final String ARGUMENTS = "arguments";^ [CLASS] OptimizeArgumentsArray  
[REPLACE]^private static final String PARAMETER_PREFIX ;^54^55^^^^54^55^[REPLACE] private static final String PARAMETER_PREFIX = "JSCompiler_OptimizeArgumentsArray_p";^ [CLASS] OptimizeArgumentsArray  
[REPLACE]^private int uniqueId ;^62^^^^^^^[REPLACE] private int uniqueId = 0;^ [CLASS] OptimizeArgumentsArray  
[REPLACE]^private  AbstractCompiler compiler;^65^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] OptimizeArgumentsArray  
[REPLACE]^private final Deque<List<Node>> argumentsAccessStack  = null ;^68^^^^^^^[REPLACE] private final Deque<List<Node>> argumentsAccessStack = Lists.newLinkedList (  ) ;^ [CLASS] OptimizeArgumentsArray  
[REPLACE]^private List<Node> currentArgumentsAccess  = null ;^71^^^^^^^[REPLACE] private List<Node> currentArgumentsAccess = null;^ [CLASS] OptimizeArgumentsArray  
[REPLACE]^traversal.getCompiler (  ) .reportCodeChange (  ) ;^78^^^^^77^79^[REPLACE] this ( compiler, PARAMETER_PREFIX ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  [TYPE]  boolean false  true  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ; ;^86^^^^^85^88^[REPLACE] this.compiler = Preconditions.checkNotNull ( compiler ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String paramPrefix [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  boolean false  true  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^this.compiler = Preconditions.checkNotNull ( compiler ) ; ;^87^^^^^85^88^[REPLACE] this.paramPredix = Preconditions.checkNotNull ( paramPrefix ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] AbstractCompiler compiler String paramPrefix [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  boolean false  true  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^traversal.getCompiler (  ) .reportCodeChange (  ) ;^92^^^^^91^93^[REPLACE] NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node externs  root  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[ADD]^^92^^^^^91^93^[ADD] NodeTraversal.traverse ( compiler, Preconditions.checkNotNull ( root ) , this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  Node externs  root  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^Preconditions .checkState (  )  ;^97^^^^^96^112^[REPLACE] Preconditions.checkNotNull ( traversal ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^Node function = traversal.getScope (  ) ;^101^^^^^96^112^[REPLACE] Node function = traversal.getScopeRoot (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( !NodeUtil.isName ( function )  )  {^102^^^^^96^112^[REPLACE] if  ( !NodeUtil.isFunction ( function )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^return false;^103^^^^^96^112^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( currentArgumentsAccess == null )  {^108^^^^^96^112^[REPLACE] if  ( currentArgumentsAccess != null )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^argumentsAccessStack .pop (  )  ;^109^^^^^96^112^[REPLACE] argumentsAccessStack.push ( currentArgumentsAccess ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REMOVE]^currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^109^^^^^96^112^[REMOVE] ^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^currentArgumentsAccess  = null ;^111^^^^^96^112^[REPLACE] currentArgumentsAccess = Lists.newLinkedList (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[ADD]^^111^^^^^96^112^[ADD] currentArgumentsAccess = Lists.newLinkedList (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node function  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^116^^^^^115^141^[REPLACE] Preconditions.checkNotNull ( traversal ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[ADD]^^116^^^^^115^141^[ADD] Preconditions.checkNotNull ( traversal ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( currentArgumentsAccess != null )  {^121^^^^^115^141^[REPLACE] if  ( currentArgumentsAccess == null )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^return false;^122^^^^^115^141^[REPLACE] return;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( !NodeUtil.isFunction ( function )  )  {^127^^^^^115^141^[REPLACE] if  ( tryReplaceArguments ( traversal.getScope (  )  )  )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^traversal.getScope (  ) .reportCodeChange (  ) ;^128^^^^^115^141^[REPLACE] traversal.getCompiler (  ) .reportCodeChange (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REMOVE]^if  ( tryReplaceArguments ( traversal.getScope (  )  )  )  { traversal.getCompiler (  ) .reportCodeChange (  ) ;^128^^^^^115^141^[REMOVE] ^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( !argumentsAccessStack.push (  )  )  {^136^^^^^115^141^[REPLACE] if  ( !argumentsAccessStack.isEmpty (  )  )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^currentArgumentsAccess = false;^139^^^^^136^140^[REPLACE] currentArgumentsAccess = null;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^currentArgumentsAccess  =  currentArgumentsAccess ;^137^^^^^115^141^[REPLACE] currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[ADD]^^137^^^^^115^141^[ADD] currentArgumentsAccess = argumentsAccessStack.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^currentArgumentsAccess = this;^139^^^^^115^141^[REPLACE] currentArgumentsAccess = null;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal traversal [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^return false;^147^^^^^144^148^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^Preconditions .checkState (  )  ;^152^^^^^151^170^[REPLACE] Preconditions.checkNotNull ( traversal ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REMOVE]^Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^152^^^^^151^170^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^Preconditions.checkNotNull ( parent ) ;^153^^^^^151^170^[REPLACE] Preconditions.checkNotNull ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( currentArgumentsAccess != null )  {^161^^^^^151^170^[REPLACE] if  ( currentArgumentsAccess == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^return false;^162^^^^^151^170^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^if  ( NodeUtil.isName ( node )  ) {^167^^^^^151^170^[REPLACE] if  ( NodeUtil.isName ( node )  && ARGUMENTS.equals ( node.getString (  )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^currentArgumentsAccess.add ( parent ) ;^168^^^^^151^170^[REPLACE] currentArgumentsAccess.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[ADD]^^168^^^^^151^170^[ADD] currentArgumentsAccess.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  paramPredix  paramPrefix  [TYPE]  Deque argumentsAccessStack  [TYPE]  int uniqueId 
[REPLACE]^Node parametersList = scope.getRootNode (  ) .getFirstChild (  )  .getParent (  )  ;^181^^^^^179^291^[REPLACE] Node parametersList = scope.getRootNode (  ) .getFirstChild (  ) .getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Preconditions.checkState ( parametersList.getType (  )   !=  Token.LP ) ;^182^^^^^179^291^[REPLACE] Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Preconditions.checkState ( parametersList.newString (  )  == Token.LP ) ;^182^^^^^179^291^[REPLACE] Preconditions.checkState ( parametersList.getType (  )  == Token.LP ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^boolean changed = true;^186^^^^^179^291^[REPLACE] boolean changed = false;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^186^^^^^179^291^[ADD] boolean changed = false;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^int numNamedParameter = ref.getChildCount (  ) ;^190^^^^^179^291^[REPLACE] int numNamedParameter = parametersList.getChildCount (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^int highestIndex = numNamedParameter  <  1;^195^^^^^179^291^[REPLACE] int highestIndex = numNamedParameter - 1;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^if  ( getElem.newString (  )   ==  Token.GETELEM )  {^206^^^^^179^291^[REPLACE] if  ( getElem.getType (  )  != Token.GETELEM )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^return false;^206^207^208^^^179^291^[ADD] if  ( getElem.getType (  )  != Token.GETELEM )  { return false; }^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^return true;^207^^^^^179^291^[REPLACE] return false;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^if  ( index .getString (  )    ==  Token.NUMBER )  {^214^^^^^179^291^[REPLACE] if  ( index.getType (  )  != Token.NUMBER )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^214^215^^^^179^291^[ADD] if  ( index.getType (  )  != Token.NUMBER )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^return true;^219^^^^^179^291^[REPLACE] return false;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^if  ( NodeUtil.isCall ( ref )  || getElemParent.getFirstChild (  )  == getElem )  {^225^226^^^^179^291^[REPLACE] if  ( NodeUtil.isCall ( getElemParent )  && getElemParent.getFirstChild (  )  == getElem )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^return true;^229^^^^^225^230^[REPLACE] return false;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^if  (uniqueId  >=  uniqueId )  {^235^^^^^179^291^[REPLACE] if  ( value > highestIndex )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^highestIndex =  uniqueId;^236^^^^^179^291^[REPLACE] highestIndex = value;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^return true;^229^^^^^179^291^[REPLACE] return false;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( Node ref : currentArgumentsAccess )  { Node index = ref.getNext (  ) ;^199^^^^^179^291^[REPLACE] for  ( Node ref : currentArgumentsAccess )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node getElem = parametersList.getParent (  ) ;^201^^^^^179^291^[REPLACE] Node getElem = ref.getParent (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node index = ref.getParent (  ) ;^210^^^^^179^291^[REPLACE] Node index = ref.getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node refParent = getElem.getParent (  ) ;^222^^^^^179^291^[REPLACE] Node getElemParent = getElem.getParent (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^222^^^^^179^291^[ADD] Node getElemParent = getElem.getParent (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^int value =  ( int )  ref.getDouble (  ) ;^234^^^^^179^291^[REPLACE] int value =  ( int )  index.getDouble (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^int numExtraArgs =value + 1;^244^^^^^179^291^[REPLACE] int numExtraArgs = highestIndex - numNamedParameter + 1;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^244^^^^^179^291^[ADD] int numExtraArgs = highestIndex - numNamedParameter + 1;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^String name = getNewName (  ) ;^247^^^^^179^291^[REPLACE] String[] argNames = new String[numExtraArgs];^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( int i = 2; i  ==  value; i++ )  {^251^^^^^179^291^[REPLACE] for  ( int i = 0; i < numExtraArgs; i++ )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^argNames[i]  =  argNames[i] ;^253^^^^^179^291^[REPLACE] argNames[i] = name;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^253^254^^^^179^291^[ADD] argNames[i] = name; parametersList.addChildrenToBack ( Node.newString ( Token.NAME, name )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^changed = false;^255^^^^^179^291^[REPLACE] changed = true;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node index = ref.getNext (  ) ;^252^^^^^179^291^[REPLACE] String name = getNewName (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^argNames[i]  = null ;^253^^^^^179^291^[REPLACE] argNames[i] = name;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( int i = 3; i < numExtraArgs; i++ )  {^251^^^^^179^291^[REPLACE] for  ( int i = 0; i < numExtraArgs; i++ )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^if  ( ref.getType (  )   ==  Token.NUMBER )  {^263^^^^^179^291^[REPLACE] if  ( index.getType (  )  != Token.NUMBER )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^if  ( value  >  numNamedParameter )  {^269^^^^^179^291^[REPLACE] if  ( value >= numNamedParameter )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^269^270^271^272^^179^291^[ADD] if  ( value >= numNamedParameter )  { ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ; } else {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  (uniqueIdnt i = 4; i  ==  value; i++ )  {^281^^^^^269^286^[REPLACE] for  ( int i = 0; i < value; i++ )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^281^282^283^^^269^286^[ADD] for  ( int i = 0; i < value; i++ )  { name = name.getNext (  ) ; }^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^name =  parametersList.getNext (  ) ;^282^^^^^269^286^[REPLACE] name = name.getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node name = ref.getFirstChild (  ) ;^276^^^^^269^286^[REPLACE] Node name = parametersList.getFirstChild (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( int i = 0 % 0; i < value; i++ )  {^281^^^^^269^286^[REPLACE] for  ( int i = 0; i < value; i++ )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value  &&  numNamedParameter] )  ) ;^270^271^^^^179^291^[REPLACE] ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^270^271^^^^179^291^[ADD] ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^ref.getString (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^179^291^[REPLACE] ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^ref.getString (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^179^291^[REPLACE] ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^ref.getParent (  ) .getParent (  ) .replaceChild ( parametersList.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^270^271^^^^179^291^[REPLACE] ref.getParent (  ) .getParent (  ) .replaceChild ( ref.getParent (  ) , Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node.newString ( Token.NAME, argNames[value  <=  numNamedParameter] )  ) ;^271^^^^^179^291^[REPLACE] Node.newString ( Token.NAME, argNames[value - numNamedParameter] )  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( int i = 0; i  <= uniqueId; i++ )  {^281^^^^^179^291^[REPLACE] for  ( int i = 0; i < value; i++ )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^name =  parametersList.getNext (  ) ;^282^^^^^179^291^[REPLACE] name = name.getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^282^^^^^179^291^[ADD] name = name.getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^changed = false;^287^^^^^179^291^[REPLACE] changed = true;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( Node ref : currentArgumentsAccess )  { Node index = ref.getNext (  ) ;^259^^^^^179^291^[REPLACE] for  ( Node ref : currentArgumentsAccess )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^259^260^^^^179^291^[ADD] for  ( Node ref : currentArgumentsAccess )  { Node index = ref.getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node index = parametersList.getNext (  ) ;^260^^^^^179^291^[REPLACE] Node index = ref.getNext (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^int value =  ( int )  ref.getDouble (  ) ;^266^^^^^179^291^[REPLACE] int value =  ( int )  index.getDouble (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^Node name = ref.getFirstChild (  ) ;^276^^^^^179^291^[REPLACE] Node name = parametersList.getFirstChild (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[ADD]^^276^^^^^179^291^[ADD] Node name = parametersList.getFirstChild (  ) ;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^for  ( int i = 0 * 2; i < value; i++ )  {^281^^^^^179^291^[REPLACE] for  ( int i = 0; i < value; i++ )  {^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^return true;^290^^^^^179^291^[REPLACE] return changed;^[METHOD] tryReplaceArguments [TYPE] boolean [PARAMETER] Scope scope [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean changed  false  true  [TYPE]  Scope scope  [TYPE]  Node getElem  getElemParent  index  name  parametersList  ref  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  String[] argNames  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
[REPLACE]^return paramPrefix + numNamedParameter++;^297^^^^^296^298^[REPLACE] return paramPredix + uniqueId++;^[METHOD] getNewName [TYPE] String [PARAMETER] [CLASS] OptimizeArgumentsArray   [TYPE]  AbstractCompiler compiler  [TYPE]  List currentArgumentsAccess  [TYPE]  String ARGUMENTS  PARAMETER_PREFIX  name  paramPredix  paramPrefix  [TYPE]  boolean false  true  [TYPE]  Deque argumentsAccessStack  [TYPE]  int highestIndex  i  numExtraArgs  numNamedParameter  uniqueId  value 
