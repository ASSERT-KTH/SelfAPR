[REPLACE]^private static final String GLOBAL_THIS_NAME ;^38^^^^^^^[REPLACE] private static final String GLOBAL_THIS_NAME = "window";^ [CLASS] GatherRawExports  
[REPLACE]^private  Set<String> exportedVariables = Sets.newHashSet (  ) ;^40^^^^^^^[REPLACE] private final Set<String> exportedVariables = Sets.newHashSet (  ) ;^ [CLASS] GatherRawExports  
[REPLACE]^this.compiler =  null;^43^^^^^42^44^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true 
[REPLACE]^compiler.isNormalized (  )  ;^48^^^^^47^50^[REPLACE] Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[ADD]^^48^^^^^47^50^[ADD] Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^} else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  { String varName = n.getString (  ) ;^48^^^^^47^50^[REPLACE] Preconditions.checkState ( compiler.isNormalized (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[ADD]^^48^49^^^^47^50^[ADD] Preconditions.checkState ( compiler.isNormalized (  )  ) ; NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal .inGlobalScope (  )  ;^49^^^^^47^50^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  Node externs  root 
[REPLACE]^Node sibling = sibling.getType (  ) ;^54^^^^^53^64^[REPLACE] Node sibling = n.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  sibling 
[REPLACE]^if  ( sibling != null ) {^55^56^57^^^53^64^[REPLACE] if  ( sibling != null && sibling.getType (  )  == Token.STRING && NodeUtil.isGet ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  sibling 
[REPLACE]^if  ( n.getType (  )  == Token.THIS )  {^60^^^^^53^64^[REPLACE] if  ( isGlobalThisObject ( t, n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  sibling 
[REPLACE]^exportedVariables.add ( parent.getString (  )  ) ;^61^^^^^53^64^[REPLACE] exportedVariables.add ( sibling.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  sibling 
[REPLACE]^exportedVariables.add ( parent.getType (  )  ) ;^61^^^^^53^64^[REPLACE] exportedVariables.add ( sibling.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  sibling 
[REPLACE]^if  ( isGlobalThisObject ( t, sibling )  )  {^60^^^^^53^64^[REPLACE] if  ( isGlobalThisObject ( t, n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  sibling 
[REPLACE]^if  ( n.getType (  )   &&  Token.THIS )  {^67^^^^^66^76^[REPLACE] if  ( n.getType (  )  == Token.THIS )  {^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^}  else {^69^^^^^66^76^[REPLACE] } else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^if  ( GLOBAL_THIS_NAME.equals ( GLOBAL_THIS_NAME )  )  {^71^^^^^66^76^[REPLACE] if  ( varName.equals ( GLOBAL_THIS_NAME )  )  {^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[ADD]^return true;^71^72^73^^^66^76^[ADD] if  ( varName.equals ( GLOBAL_THIS_NAME )  )  { return true; }^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^return false;^72^^^^^66^76^[REPLACE] return true;^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^String varName = n.getType (  ) ;^70^^^^^66^76^[REPLACE] String varName = n.getString (  ) ;^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^return false;^68^^^^^66^76^[REPLACE] return t.inGlobalScope (  ) ;^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^}  if  ( n.getType (  )  == Token.NAME ) {^69^^^^^66^76^[REPLACE] } else if  ( n.getType (  )  == Token.NAME && !NodeUtil.isLabelName ( n )  )  {^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^String varName = n .getType (  )  ;^70^^^^^66^76^[REPLACE] String varName = n.getString (  ) ;^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^return t .traverse ( compiler , n , false )  ;^68^^^^^66^76^[REPLACE] return t.inGlobalScope (  ) ;^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^return true;^75^^^^^66^76^[REPLACE] return false;^[METHOD] isGlobalThisObject [TYPE] boolean [PARAMETER] NodeTraversal t Node n [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n 
[REPLACE]^return t.inGlobalScope (  ) ;^79^^^^^78^80^[REPLACE] return exportedVariables;^[METHOD] getExportedVariableNames [TYPE] Set [PARAMETER] [CLASS] GatherRawExports   [TYPE]  AbstractCompiler compiler  [TYPE]  Set exportedVariables  [TYPE]  String GLOBAL_THIS_NAME  varName  [TYPE]  boolean false  true 
