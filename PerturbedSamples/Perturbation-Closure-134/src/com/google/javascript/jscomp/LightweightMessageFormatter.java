[REPLACE]^private static final ExcerptFormatter excerptFormatter  = null ;^33^34^^^^33^34^[REPLACE] private static final ExcerptFormatter excerptFormatter = new LineNumberingFormatter (  ) ;^ [CLASS] LightweightMessageFormatter LineNumberingFormatter  
[REPLACE]^super ( source ) ;^37^^^^^36^38^[REPLACE] this ( source, LINE ) ;^[METHOD] <init> [TYPE] SourceExcerptProvider) [PARAMETER] SourceExcerptProvider source [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter 
[ADD]^^37^^^^^36^38^[ADD] this ( source, LINE ) ;^[METHOD] <init> [TYPE] SourceExcerptProvider) [PARAMETER] SourceExcerptProvider source [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter 
[REPLACE]^b.append ( " - " ) ;^42^^^^^40^44^[REPLACE] super ( source ) ;^[METHOD] <init> [TYPE] SourceExcerpt) [PARAMETER] SourceExcerptProvider source SourceExcerpt excerpt [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter 
[REPLACE]^this.excerpt =  null;^43^^^^^40^44^[REPLACE] this.excerpt = excerpt;^[METHOD] <init> [TYPE] SourceExcerpt) [PARAMETER] SourceExcerptProvider source SourceExcerpt excerpt [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter 
[REPLACE]^return format ( error, true ) ;^47^^^^^46^48^[REPLACE] return format ( error, false ) ;^[METHOD] formatError [TYPE] String [PARAMETER] JSError error [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  JSError error 
[REPLACE]^return format ( warning, false ) ;^51^^^^^50^52^[REPLACE] return format ( warning, true ) ;^[METHOD] formatWarning [TYPE] String [PARAMETER] JSError warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  JSError warning 
[REPLACE]^String code = region.getSourceExcerpt (  ) ;^56^^^^^54^96^[REPLACE] SourceExcerptProvider source = getSource (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^61^^^^^54^96^[REPLACE] StringBuilder b = new StringBuilder (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.sourceName == false )  {^62^^^^^54^96^[REPLACE] if  ( error.sourceName != null )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.lineNumber  ==  0 )  {^64^^^^^54^96^[REPLACE] if  ( error.lineNumber > 0 )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( '\n' ) ;^65^^^^^54^96^[REPLACE] b.append ( ':' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( " - " ) ;^66^^^^^54^96^[REPLACE] b.append ( error.lineNumber ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.lineNumber  !=  0 )  {^64^^^^^54^96^[REPLACE] if  ( error.lineNumber > 0 )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^66^^^^^54^96^[REPLACE] b.append ( error.lineNumber ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( getLevelName ( true ? CheckLevel.WARNING : CheckLevel.ERROR )  ) ;^71^^^^^54^96^[REPLACE] b.append ( getLevelName ( warning ? CheckLevel.WARNING : CheckLevel.ERROR )  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( ": " ) ;^72^^^^^54^96^[REPLACE] b.append ( " - " ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( " - " ) ;^74^^^^^54^96^[REPLACE] b.append ( error.description ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^75^^^^^54^96^[REPLACE] b.append ( '\n' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^75^^^^^54^96^[ADD] b.append ( '\n' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( sourceExcerpt == null )  {^76^^^^^54^96^[REPLACE] if  ( sourceExcerpt != null )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( excerpt.equals ( LINE ) ) {^82^83^^^^54^96^[REPLACE] if  ( excerpt.equals ( LINE ) && 0 <= charno && charno < sourceExcerpt.length (  )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  (   c    )  {^86^^^^^82^93^[REPLACE] if  ( Character.isWhitespace ( c )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^89^^^^^82^93^[REPLACE] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REMOVE]^b.append ( " - " ) ;^89^^^^^82^93^[REMOVE] ^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( " - " ) ;^87^^^^^82^93^[REPLACE] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0; i  !=  charno; i++ )  {^84^^^^^82^93^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.sourceName != null )  {^86^^^^^82^93^[REPLACE] if  ( Character.isWhitespace ( c )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^86^87^88^89^90^82^93^[ADD] if  ( Character.isWhitespace ( c )  )  { b.append ( c ) ; } else { b.append ( ' ' ) ; }^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( '\n' ) ;^89^^^^^82^93^[REPLACE] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^87^^^^^82^93^[REPLACE] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^87^^^^^82^93^[ADD] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^char c = sourceExcerpt.substring ( i ) ;^85^^^^^82^93^[REPLACE] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0 / 2; i < charno; i++ )  {^84^^^^^82^93^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  ( error.sourceName != null )  {^86^^^^^54^96^[REPLACE] if  ( Character.isWhitespace ( c )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^b.append ( c ) ;b.append ( ' ' ) ;^86^87^88^89^90^54^96^[ADD] if  ( Character.isWhitespace ( c )  )  { b.append ( c ) ; } else { b.append ( ' ' ) ; }^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( '\n' ) ;^89^^^^^86^90^[REPLACE] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^87^^^^^54^96^[REPLACE] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^87^^^^^54^96^[ADD] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0; i  ==  charno; i++ )  {^84^^^^^54^96^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^if  (   c    )  {^86^^^^^54^96^[REPLACE] if  ( Character.isWhitespace ( c )  )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b .StringBuilder (  )  ;^89^^^^^86^90^[REPLACE] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^b.append ( " - " ) ;^87^^^^^54^96^[REPLACE] b.append ( c ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^char c = sourceExcerpt.substring ( i ) ;^85^^^^^54^96^[REPLACE] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^int lineNumber = region.getBeginningLineNumber (  ) ;^79^^^^^54^96^[REPLACE] int charno = error.getCharno (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0 * 2; i < charno; i++ )  {^84^^^^^54^96^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^char c = sourceExcerpt .substring ( i )  ;^85^^^^^54^96^[REPLACE] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^85^^^^^54^96^[ADD] char c = sourceExcerpt.charAt ( i ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0; i  ==  charno; i++ )  {^84^^^^^82^93^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^89^^^^^82^93^[ADD] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 0L; i < charno; i++ )  {^84^^^^^82^93^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[ADD]^^89^^^^^86^90^[ADD] b.append ( ' ' ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REMOVE]^b.append ( " - " ) ;^87^^^^^54^96^[REMOVE] ^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^for  ( int i = 4; i < charno; i++ )  {^84^^^^^54^96^[REPLACE] for  ( int i = 0; i < charno; i++ )  {^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^return b.StringBuilder (  ) ;^95^^^^^54^96^[REPLACE] return b.toString (  ) ;^[METHOD] format [TYPE] String [PARAMETER] JSError error boolean warning [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  warning  [TYPE]  StringBuilder b  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  char c  [TYPE]  SourceExcerpt excerpt  [TYPE]  SourceExcerptProvider source  [TYPE]  String sourceExcerpt  [TYPE]  JSError error  [TYPE]  int charno  i 
[REPLACE]^return null;^107^^^^^106^108^[REPLACE] return line;^[METHOD] formatLine [TYPE] String [PARAMETER] String line int lineNumber [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  SourceExcerpt excerpt  [TYPE]  String line  [TYPE]  boolean false  true  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  int lineNumber 
[REPLACE]^if  ( region != null )  {^111^^^^^110^160^[REPLACE] if  ( region == null )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return true;^112^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^String code = region.getEndingLineNumber (  ) ;^114^^^^^110^160^[REPLACE] String code = region.getSourceExcerpt (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( code.size (  )  == 0  )  {^115^^^^^110^160^[REPLACE] if  ( code.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return true;^116^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int numberLength = Integer.toString ( region.getBeginningLineNumber (  )  ) .length (  ) ;^120^121^^^^110^160^[REPLACE] int numberLength = Integer.toString ( region.getEndingLineNumber (  )  ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^StringBuilder builder = new StringBuilder ( line.charAt (  )  %  2 * 2 ) ;^124^^^^^110^160^[REPLACE] StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^124^^^^^110^160^[ADD] StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int start = 4;^125^^^^^110^160^[REPLACE] int start = 0;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int end = line.indexOf ( '\n', start ) ;^126^^^^^110^160^[REPLACE] int end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int lineNumber = region.getEndingLineNumber (  ) ;^127^^^^^110^160^[REPLACE] int lineNumber = region.getBeginningLineNumber (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^while  ( start  <  0L )  {^128^^^^^110^160^[REPLACE] while  ( start >= 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  (numberLength  >=  0 / 3 )  {^131^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start ) ; ;^137^^^^^131^138^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.size (  )  == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0 , builder.length (  )  + 2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start, end ) ; ;^132^^^^^110^160^[REPLACE] line = code.substring ( start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder .substring ( end )   - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.length (  )  %  2 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  /  2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  >=  0 )  {^148^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start =numberLength + 3;^154^^^^^148^157^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  line.indexOf ( '\n', start ) ;^155^^^^^148^157^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -3;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^150^^^^^110^160^[ADD] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start ) ; ;^137^^^^^110^160^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^137^^^^^110^160^[ADD] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -4;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = end  ^  1;^154^^^^^110^160^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  line.indexOf ( '\n', start ) ;^155^^^^^110^160^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.size (  )  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^130^^^^^110^160^[REPLACE] String line;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^130^^^^^110^160^[ADD] String line;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int spaces = numberLength - Integer .StringBuilder (  )  .length (  )  %  2;^142^^^^^110^160^[REPLACE] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  >=  0L )  {^131^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^line = code.substring ( start ) ;return builder.substring ( 0, builder.length (  )  - 1 ) ;^131^132^133^134^135^110^160^[ADD] if  ( end < 0 )  { line = code.substring ( start ) ; if  ( line.length (  )  == 0 )  { return builder.substring ( 0, builder.length (  )  - 1 ) ; }^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line .substring ( start )   - 1 == 0  )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder .substring ( spaces )   - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  *  0.5  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0 , builder.length (  )  - 2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  ==  0 )  {^148^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = end  >=  1;^154^^^^^148^157^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -0;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1L;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start =numberLength + 1;^154^^^^^110^160^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return false ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int spaces = numberLength - Integer.toString ( lineNumber ) .length (  )  + 4;^142^^^^^110^160^[REPLACE] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.StringBuilder (  ) ;^159^^^^^110^160^[REPLACE] return builder.toString (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LightweightMessageFormatter LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  ExcerptFormatter excerptFormatter  [TYPE]  SourceExcerpt excerpt  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return null;^107^^^^^106^108^[REPLACE] return line;^[METHOD] formatLine [TYPE] String [PARAMETER] String line int lineNumber [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  String line  [TYPE]  int lineNumber 
[REPLACE]^if  ( region != null )  {^111^^^^^110^160^[REPLACE] if  ( region == null )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return false;^112^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^String code = region.getEndingLineNumber (  ) ;^114^^^^^110^160^[REPLACE] String code = region.getSourceExcerpt (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^114^^^^^110^160^[ADD] String code = region.getSourceExcerpt (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( code.size (  )  == 0 )  {^115^^^^^110^160^[REPLACE] if  ( code.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return false;^116^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return this;^116^^^^^110^160^[REPLACE] return null;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int numberLength = Integer.toString ( region.getBeginningLineNumber (  )  ) .length (  ) ;^120^121^^^^110^160^[REPLACE] int numberLength = Integer.toString ( region.getEndingLineNumber (  )  ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^120^121^^^^110^160^[ADD] int numberLength = Integer.toString ( region.getEndingLineNumber (  )  ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^StringBuilder builder = new StringBuilder ( line.length (  )  - 1 * 2 ) ;^124^^^^^110^160^[REPLACE] StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^124^125^^^^110^160^[ADD] StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ; int start = 0;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int start = 2;^125^^^^^110^160^[REPLACE] int start = 0;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int end = line.substring ( '\n', start ) ;^126^^^^^110^160^[REPLACE] int end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int lineNumber = region .getEndingLineNumber (  )  ;^127^^^^^110^160^[REPLACE] int lineNumber = region.getBeginningLineNumber (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^while  (spaces  <  0 )  {^128^^^^^110^160^[REPLACE] while  ( start >= 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  >  0 )  {^131^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start ) ; ;^137^^^^^131^138^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.length (  )  %  2 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  %  0.5  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start, end ) ; ;^132^^^^^110^160^[REPLACE] line = code.substring ( start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder .substring ( numberLength )    ||  1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( code.length (  )  - 3 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REMOVE]^if  ( end < 0 )  {     line = code.substring ( start ) ;     if  (  ( line.length (  )  )  == 0 )  {         return builder.substring ( 0,  (  ( builder.length (  )  )  - 1 )  ) ;     } }else {     line = code.substring ( start, end ) ; }^133^^^^^110^160^[REMOVE] ^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  %  2 - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  !=  0 )  {^148^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^148^149^150^151^152^110^160^[ADD] if  ( end < 0 )  { builder.append ( line ) ; start = -1; } else { builder.append ( line ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = end +numberLength;^154^^^^^148^157^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  line.indexOf ( '\n', start ) ;^155^^^^^148^157^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1 >> 2;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^line = code.substring ( start ) ; ;^137^^^^^110^160^[REPLACE] line = code.substring ( start, end ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -2;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = end +numberLength;^154^^^^^110^160^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^154^^^^^110^160^[ADD] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^end =  line.indexOf ( '\n', start ) ;^155^^^^^110^160^[REPLACE] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^StringBuilder builder = new StringBuilder ( code.length (  )  * 2 ) ;^130^^^^^110^160^[REPLACE] String line;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int spaces = numberLength - Integer.toString ( lineNumber )  .substring ( end )   - 1;^142^^^^^110^160^[REPLACE] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  >=  0 )  {^131^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.size (  )  == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^return builder.substring ( 0, builder.length (  )  - 1 ) ;^133^134^135^^^110^160^[ADD] if  ( line.length (  )  == 0 )  { return builder.substring ( 0, builder.length (  )  - 1 ) ; }^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder .substring ( start )  ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder .substring ( lineNumber )  ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( line.length (  )  - 2 == 0 )  {^133^^^^^110^160^[REPLACE] if  ( line.length (  )  == 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0 % 4, builder .substring ( lineNumber )   - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^if  ( end  >  1 )  {^148^^^^^110^160^[REPLACE] if  ( end < 0 )  {^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^155^^^^^148^157^[ADD] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1 - 1;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = -1 * 4;^150^^^^^110^160^[REPLACE] start = -1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^start = numberLength + 0;^154^^^^^110^160^[REPLACE] start = end + 1;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^155^^^^^110^160^[ADD] end = code.indexOf ( '\n', start ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder.substring ( 0, builder.length (  )  *  0.5  - 1 ) ;^134^^^^^110^160^[REPLACE] return builder.substring ( 0, builder.length (  )  - 1 ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^int spaces = numberLength - Integer.toString ( lineNumber ) .size (  ) ;^142^^^^^110^160^[REPLACE] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[ADD]^^142^143^^^^110^160^[ADD] int spaces = numberLength - Integer.toString ( lineNumber ) .length (  ) ; builder.append ( StringUtil.repeat ( " ", spaces )  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
[REPLACE]^return builder .toString ( numberLength )  ;^159^^^^^110^160^[REPLACE] return builder.toString (  ) ;^[METHOD] formatRegion [TYPE] String [PARAMETER] Region region [CLASS] LineNumberingFormatter   [TYPE]  boolean false  true  [TYPE]  StringBuilder builder  [TYPE]  Region region  [TYPE]  String code  line  [TYPE]  int end  lineNumber  numberLength  spaces  start 
