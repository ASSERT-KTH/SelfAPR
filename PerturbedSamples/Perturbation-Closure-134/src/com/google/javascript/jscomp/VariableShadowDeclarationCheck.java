[REPLACE]^static  DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^40^41^42^43^^40^43^[REPLACE] static final DiagnosticType SHADOW_VAR_ERROR = DiagnosticType.error ( "JSC_REDECL_NOSHADOW_VARIABLE", "Highly error prone shadowing of variable name {0}." + "Consider using a different local variable name." ) ;^ [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  
[REPLACE]^private  AbstractCompiler compiler;^45^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  
[REPLACE]^private  CheckLevel checkLevel;^46^^^^^^^[REPLACE] private final CheckLevel checkLevel;^ [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback  
[REPLACE]^this.compiler =  null;^52^^^^^50^55^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel 
[ADD]^^52^53^^^^50^55^[ADD] this.compiler = compiler; this.checkLevel = checkLevel;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel 
[REPLACE]^this.checkLevel =  null;^53^^^^^50^55^[REPLACE] this.checkLevel = checkLevel;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel 
[REPLACE]^this.externalNoShadowVariableNames ;^54^^^^^50^55^[REPLACE] this.externalNoShadowVariableNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] CheckLevel) [PARAMETER] AbstractCompiler compiler CheckLevel checkLevel [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel 
[REPLACE]^NodeTraversal .inGlobalScope (  )  ;^61^62^^^^58^63^[REPLACE] NodeTraversal.traverse ( compiler, root, new ShadowDeclarationCheckingCallback (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Node externs  root 
[REPLACE]^Scope scope = t.inGlobalScope (  ) ;^72^^^^^71^79^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^75^^^^^71^79^[REPLACE] if  ( var.isNoShadow (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^externalNoShadowVariableNames.contains ( var.getName (  )  ) ;^76^^^^^71^79^[REPLACE] externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^externalNoShadowVariableNames.add ( var.isLocal (  )  ) ;^76^^^^^71^79^[REPLACE] externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> this = scope.getVars (  ) ; vars.next (  ) ; )  {^73^^^^^71^79^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^if  ( var.isLocal (  )  )  {^75^^^^^71^79^[REPLACE] if  ( var.isNoShadow (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^externalNoShadowVariableNames .contains ( this )  ;^76^^^^^71^79^[REPLACE] externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REMOVE]^var.getName (  )  )  ) ;^76^^^^^71^79^[REMOVE] ^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^Var var = false.next (  ) ;^74^^^^^71^79^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = scope.getVar (  ) ; vars.hasNext (  ) ; )  {^73^^^^^71^79^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^Var var = null.next (  ) ;^74^^^^^71^79^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[ADD]^^74^^^^^71^79^[ADD] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^return false;^88^^^^^86^89^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Node n  parent 
[REPLACE]^if  ( t.getScope (  )  )  {^103^^^^^102^128^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^return;^103^104^105^^^102^128^[ADD] if  ( t.inGlobalScope (  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^return true;^104^^^^^102^128^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope scope = t .inGlobalScope (  )  ;^107^^^^^102^128^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope parentScope = scope.getVars (  ) ;^108^^^^^102^128^[REPLACE] Scope parentScope = scope.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^108^^^^^102^128^[ADD] Scope parentScope = scope.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  ( externalNoShadowVariableNames.contains ( var.isLocal (  )  )  )  {^112^^^^^102^128^[REPLACE] if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^112^113^114^115^116^102^128^[ADD] if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ; continue;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^113^114^115^^^102^128^[ADD] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var .isNoShadow (  )   )  ) ;^115^^^^^102^128^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  (  ( shadowedVar == null )  && ( shadowedVar.isNoShadow (  )  ) {^120^121^^^^102^128^[REPLACE] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var.isLocal (  )  )  ) ;^124^^^^^120^126^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> true = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^109^110^^112^113^102^128^[ADD] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  { Var var = vars.next (  ) ; if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel,^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  (  shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^[REPLACE] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.isLocal (  )  )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^122^123^124^^^120^126^[ADD] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^124^125^^^^120^126^[ADD] var.getName (  )  )  ) ; continue;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var var = true.next (  ) ;^110^^^^^102^128^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var shadowedVar = scope.getVar ( var.getName (  )  ) ;^119^^^^^102^128^[REPLACE] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^119^^^^^102^128^[ADD] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = parentScope.getVars (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var var = null.next (  ) ;^110^^^^^102^128^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^110^^^^^102^128^[ADD] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var shadowedVar = parentScope.getVar ( shadowedVar.getName (  )  ) ;^119^^^^^102^128^[REPLACE] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^return false;^137^^^^^135^138^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] VariableShadowDeclarationCheck NoShadowAnnotationGatheringCallback ShadowDeclarationCheckingCallback   [TYPE]  AbstractCompiler compiler  [TYPE]  Set externalNoShadowVariableNames  [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  DiagnosticType SHADOW_VAR_ERROR  [TYPE]  CheckLevel checkLevel  [TYPE]  Node n  parent 
[REPLACE]^Var var = vars.next (  ) ;^72^^^^^71^79^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[ADD]^^72^^^^^71^79^[ADD] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^if  ( var .getName (  )   )  {^75^^^^^71^79^[REPLACE] if  ( var.isNoShadow (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^externalNoShadowVariableNames.add ( var .isNoShadow (  )   ) ;^76^^^^^71^79^[REPLACE] externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^externalNoShadowVariableNames.add ( var.isNoShadow (  )  ) ;^76^^^^^71^79^[REPLACE] externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars .next (  )  ; )  {^73^^^^^71^79^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^if  ( var.getName (  )  )  {^75^^^^^71^79^[REPLACE] if  ( var.isNoShadow (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[ADD]^^76^^^^^71^79^[ADD] externalNoShadowVariableNames.add ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^Var var = null.next (  ) ;^74^^^^^71^79^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  { Var var = vars.next (  ) ;^73^^^^^71^79^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^Var var = 0.next (  ) ;^74^^^^^71^79^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  Scope scope  [TYPE]  NodeTraversal t  [TYPE]  Var var  [TYPE]  Iterator vars 
[REPLACE]^return false;^88^^^^^86^89^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] NoShadowAnnotationGatheringCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
[REPLACE]^if  ( t.getScope (  )  )  {^103^^^^^102^128^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^103^104^105^^^102^128^[ADD] if  ( t.inGlobalScope (  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^return true;^104^^^^^102^128^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope scope = t.inGlobalScope (  ) ;^107^^^^^102^128^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Scope parentScope = parentScope.getParent (  ) ;^108^^^^^102^128^[REPLACE] Scope parentScope = scope.getParent (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  ( externalNoShadowVariableNames.contains ( shadowedVar.getName (  )  )  )  {^112^^^^^102^128^[REPLACE] if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^113^114^115^^^102^128^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^113^114^115^^^102^128^[ADD] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var.isLocal (  )  )  ) ;^115^^^^^102^128^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  (  shadowedVar.isLocal (  )  )  )  {^120^121^^^^102^128^[REPLACE] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^120^121^122^123^124^102^128^[ADD] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, shadowedVar.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^122^123^124^^^120^126^[ADD] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.isLocal (  )  )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var .isNoShadow (  )   )  ) ;^124^^^^^120^126^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^continue;^124^125^^^^120^126^[ADD] var.getName (  )  )  ) ; continue;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = scope.getVar (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^109^110^^112^113^102^128^[ADD] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  { Var var = vars.next (  ) ; if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  { compiler.report ( JSError.make ( t, var.nameNode, checkLevel,^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  ( t.inGlobalScope (  )  )  {^112^^^^^102^128^[REPLACE] if  ( externalNoShadowVariableNames.contains ( var.getName (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.isLocal (  )  )  ) ;^113^114^115^^^102^128^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^var .isNoShadow (  )   )  ) ;^115^^^^^102^128^[REPLACE] var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^if  (  ( shadowedVar == null )  && ( shadowedVar.isNoShadow (  )  ) {^120^121^^^^102^128^[REPLACE] if  (  ( shadowedVar != null )  && ( shadowedVar.isNoShadow (  )  || shadowedVar.isLocal (  )  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var .isNoShadow (  )   )  ) ;^122^123^124^^^120^126^[REPLACE] compiler.report ( JSError.make ( t, var.nameNode, checkLevel, SHADOW_VAR_ERROR, var.getName (  )  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var var = this.next (  ) ;^110^^^^^102^128^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[ADD]^^110^^^^^102^128^[ADD] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var shadowedVar = parentScope .getVars (  )  ;^119^^^^^102^128^[REPLACE] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^for  ( Iterator<Var> vars = parentScope.getVar (  ) ; vars.hasNext (  ) ; )  {^109^^^^^102^128^[REPLACE] for  ( Iterator<Var> vars = scope.getVars (  ) ; vars.hasNext (  ) ; )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var var = vars.hasNext (  ) ;^110^^^^^102^128^[REPLACE] Var var = vars.next (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^Var shadowedVar = parentScope.getVar ( shadowedVar.getName (  )  ) ;^119^^^^^102^128^[REPLACE] Var shadowedVar = parentScope.getVar ( var.getName (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  Scope parentScope  scope  [TYPE]  NodeTraversal t  [TYPE]  Var shadowedVar  var  [TYPE]  Iterator vars 
[REPLACE]^return false;^137^^^^^135^138^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal nodeTraversal Node n Node parent [CLASS] ShadowDeclarationCheckingCallback   [TYPE]  boolean false  true  [TYPE]  NodeTraversal nodeTraversal  [TYPE]  Node n  parent 
