[REPLACE]^private  Map<Node, Node> nodes = Maps.newHashMap (  ) ;^81^^^^^^^[REPLACE] private final Map<Node, Node> nodes = Maps.newHashMap (  ) ;^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^private boolean isAliased  = null ;^87^^^^^^^[REPLACE] private boolean isAliased = false;^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^private  int  aliasName;^89^^^^^^^[REPLACE] private String aliasName;^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^static final String ALIAS_NULL  = null ;^256^^^^^^^[REPLACE] static final String ALIAS_NULL = "$$ALIAS_NULL";^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^static final String ALIAS_TRUE  = null ;^257^^^^^^^[REPLACE] static final String ALIAS_TRUE = "$$ALIAS_TRUE";^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^final String ALIAS_FALSE = "$$ALIAS_FALSE";^258^^^^^^^[REPLACE] static final String ALIAS_FALSE = "$$ALIAS_FALSE";^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^static final String ALIAS_THROW  = null ;^259^^^^^^^[REPLACE] static final String ALIAS_THROW = "$$ALIAS_THROW";^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  = null ;^283^^^^^^^[REPLACE] static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL = 6;^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  = null ;^289^290^^^^289^290^[REPLACE] static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW = ThrowAliasSpecification.estimateMinOccurrencesRequriedToAlias (  ) ;^ [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification  
[REPLACE]^this.aliasName =  ALIAS_TRUE;^98^^^^^97^100^[REPLACE] this.aliasName = aliasName;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[ADD]^this.tokenId = tokenId;^98^99^^^^97^100^[ADD] this.aliasName = aliasName; this.tokenId = tokenId;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^this.tokenId =  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;^99^^^^^97^100^[REPLACE] this.tokenId = tokenId;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^super ( ALIAS_TRUE, Token.THROW ) ;^167^^^^^166^168^[REPLACE] super ( aliasName, Token.THROW ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[ADD]^^167^^^^^166^168^[ADD] super ( aliasName, Token.THROW ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^super ( ALIAS_TRUE, tokenId ) ;^226^^^^^225^227^[REPLACE] super ( aliasName, tokenId ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[ADD]^^226^^^^^225^227^[ADD] super ( aliasName, tokenId ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^this.compiler =  null;^307^^^^^306^315^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification specification  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^aliasSpecifications ;^308^^^^^306^315^[REPLACE] aliasSpecifications = createAliasSpecifications (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification specification  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^aliasNames = Sets.newLinkedHashSet (  ) ; ;^309^^^^^306^315^[REPLACE] aliasTypes = Maps.newLinkedHashMap (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification specification  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^aliasTypes = Maps.newLinkedHashMap (  ) ; ;^310^^^^^306^315^[REPLACE] aliasNames = Sets.newLinkedHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification specification  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[ADD]^^310^^^^^306^315^[ADD] aliasNames = Sets.newLinkedHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification specification  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^for  ( AliasSpecification specification : aliasSpecifications )  { aliasTypes.put ( specification.getTokenId (  ) , specification ) ;^311^^^^^306^315^[REPLACE] for  ( AliasSpecification specification : aliasSpecifications )  {^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification specification  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId 
[REPLACE]^final int type = parent.getType (  ) ;^44^^^^^43^50^[REPLACE] final int type = n.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^44^^^^^43^50^[ADD] final int type = n.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( isAliasableType ( tokenId )  )  {^45^^^^^43^50^[REPLACE] if  ( isAliasableType ( type )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^}  if  ( type  &&  Token.NAME )  {^47^^^^^43^50^[REPLACE] } else if  ( type == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^visitNameNode ( parent ) ;^48^^^^^43^50^[REPLACE] visitNameNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^spec.doAlias ( compiler ) ;^46^^^^^43^50^[REPLACE] visitAliasableNode ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^}  if  (tokenId  !=  Token.NAME )  {^47^^^^^43^50^[REPLACE] } else if  ( type == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^AliasSpecification aliasableNodes = aliasTypes.containsKey ( parent.getType (  )  ) ;^57^^^^^56^59^[REPLACE] AliasSpecification aliasableNodes = aliasTypes.get ( n.getType (  )  ) ;^[METHOD] visitAliasableNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification aliasableNodes  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^aliasableNodes.visit ( n, parent ) ;^57^58^59^^^56^59^[ADD] AliasSpecification aliasableNodes = aliasTypes.get ( n.getType (  )  ) ; aliasableNodes.visit ( n, parent ) ; }^[METHOD] visitAliasableNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification aliasableNodes  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^aliasableNodes.aliasNode ( n, parent ) ;^58^^^^^56^59^[REPLACE] aliasableNodes.visit ( n, parent ) ;^[METHOD] visitAliasableNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification aliasableNodes  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( isAliasableType ( type )  )  {^66^^^^^65^70^[REPLACE] if  ( isAliasDefinition ( n )  )  {^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^66^67^68^69^^65^70^[ADD] if  ( isAliasDefinition ( n )  )  { throw new IllegalStateException ( "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ; }^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return ;^67^68^^^^65^70^[REPLACE] throw new IllegalStateException ( "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^"Existing alias definition for " + Node.tokenToName ( n.getString (  )  )  ) ;^68^^^^^65^70^[REPLACE] "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^68^69^^^^65^70^[ADD] "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ; }^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^67^68^^^^65^70^[ADD] throw new IllegalStateException ( "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^aliasNode ( n, parent ) ;^103^^^^^102^104^[REPLACE] nodes.put ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( nodes.size (  )  %  0.5  >= minOccurrencesRequiredToAlias (  )  )  {^114^^^^^113^120^[REPLACE] if  ( nodes.size (  )  >= minOccurrencesRequiredToAlias (  )  )  {^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^isAliased = false;^116^^^^^113^120^[REPLACE] isAliased = true;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return false;^117^^^^^113^120^[REPLACE] return true;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return true;^119^^^^^113^120^[REPLACE] return false;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( isAliasableType ( type )  )  {^127^^^^^126^135^[REPLACE] if  ( isAliased )  {^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^127^128^129^130^131^126^135^[ADD] if  ( isAliased )  { for  ( Map.Entry<Node, Node> entry : nodes.entrySet (  )  )  { Node n = entry.getKey (  ) ; Node parent = entry.getValue (  ) ; aliasNode ( n, parent ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^for  ( Map.Entry<Node, Node> entry : nodes.entrySet (  )  )  { Node n = entry.getKey (  ) ;^128^^^^^126^135^[REPLACE] for  ( Map.Entry<Node, Node> entry : nodes.entrySet (  )  )  {^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node n = this.getKey (  ) ;^129^^^^^126^135^[REPLACE] Node n = entry.getKey (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^129^130^^^^126^135^[ADD] Node n = entry.getKey (  ) ; Node parent = entry.getValue (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node parent = this.getValue (  ) ;^130^^^^^126^135^[REPLACE] Node parent = entry.getValue (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node n = null.getKey (  ) ;^129^^^^^126^135^[REPLACE] Node n = entry.getKey (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node parent = null.getValue (  ) ;^130^^^^^126^135^[REPLACE] Node parent = entry.getValue (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  parent  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return false;^138^^^^^137^139^[REPLACE] return tokenId;^[METHOD] getTokenId [TYPE] int [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return false;^142^^^^^141^143^[REPLACE] return aliasName;^[METHOD] getAliasName [TYPE] String [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node name = NodeUtil.newName ( getAliasName (  ) , parent, getAliasName (  )  ) ;^173^^^^^172^177^[REPLACE] Node name = NodeUtil.newName ( getAliasName (  ) , throwNode, getAliasName (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^173^174^^^^172^177^[ADD] Node name = NodeUtil.newName ( getAliasName (  ) , throwNode, getAliasName (  )  ) ; Node aliasCall = new Node ( Token.CALL, name, throwNode.removeFirstChild (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node aliasCall = new Node ( Token.CALL, name, parent.removeFirstChild (  )  ) ;^174^^^^^172^177^[REPLACE] Node aliasCall = new Node ( Token.CALL, name, throwNode.removeFirstChild (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^Node exprResult = new Node ( Token.EXPR_RESULT, aliasCall ) ;^174^175^^^^172^177^[ADD] Node aliasCall = new Node ( Token.CALL, name, throwNode.removeFirstChild (  )  ) ; Node exprResult = new Node ( Token.EXPR_RESULT, aliasCall ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node exprResult = new Node ( Token.EXPR_RESULT, parent ) ;^175^^^^^172^177^[REPLACE] Node exprResult = new Node ( Token.EXPR_RESULT, aliasCall ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^parent.replaceChild ( name, exprResult ) ;^176^^^^^172^177^[REPLACE] parent.replaceChild ( throwNode, exprResult ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^176^^^^^172^177^[ADD] parent.replaceChild ( throwNode, exprResult ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^codeRoot.addChildrenToFront ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^184^^^^^183^185^[REPLACE] codeRoot.addChildToFront ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node name = NodeUtil.newName ( getAliasName (  ) , throwNode, getAliasName (  )  ) ;^184^^^^^183^185^[REPLACE] codeRoot.addChildToFront ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL;^190^^^^^189^191^[REPLACE] return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;^[METHOD] minOccurrencesRequiredToAlias [TYPE] int [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node aliasCall = new Node ( Token.CALL, name, throwNode.removeFirstChild (  )  ) ;^206^^^^^197^208^[REPLACE] Node alias = createAliasFunctionNode ( "TT" ) ;^[METHOD] estimateMinOccurrencesRequriedToAlias [TYPE] int [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node alias  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^206^^^^^197^208^[ADD] Node alias = createAliasFunctionNode ( "TT" ) ;^[METHOD] estimateMinOccurrencesRequriedToAlias [TYPE] int [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node alias  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return   alias    / 2 + 1;^207^^^^^197^208^[REPLACE] return InlineCostEstimator.getCost ( alias )  / 2 + 1;^[METHOD] estimateMinOccurrencesRequriedToAlias [TYPE] int [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node alias  [TYPE]  List aliasSpecifications  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node parameterName = Node.replaceChild ( Token.NAME, "t" ) ;^215^^^^^214^220^[REPLACE] Node parameterName = Node.newString ( Token.NAME, "t" ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^List<Node> parameters = Lists.newArrayList ( throwStatement.cloneNode (  )  ) ;^216^^^^^214^220^[REPLACE] List<Node> parameters = Lists.newArrayList ( parameterName.cloneNode (  )  ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node throwStatement = new Node ( Token.THROW, throwStatement ) ;^217^^^^^214^220^[REPLACE] Node throwStatement = new Node ( Token.THROW, parameterName ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^217^218^^^^214^220^[ADD] Node throwStatement = new Node ( Token.THROW, parameterName ) ; Node body = new Node ( Token.BLOCK, throwStatement ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node body = new Node ( Token.BLOCK, parameterName ) ;^218^^^^^214^220^[REPLACE] Node body = new Node ( Token.BLOCK, throwStatement ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return NodeUtil.newFunctionNode ( aliasName, null, body, -3, -3 ) ;^219^^^^^214^220^[REPLACE] return NodeUtil.newFunctionNode ( aliasName, parameters, body, -1, -1 ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;^232^^^^^231^233^[REPLACE] return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL;^[METHOD] minOccurrencesRequiredToAlias [TYPE] int [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node aliasNode =   getAliasName (  )   ) ;^238^^^^^237^240^[REPLACE] Node aliasNode = NodeUtil.newName ( getAliasName (  ) , n, getAliasName (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasNode  n  parent  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^parent .getFirstChild (  )  ;^239^^^^^237^240^[REPLACE] parent.replaceChild ( n, aliasNode ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node aliasNode  n  parent  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node body = new Node ( Token.BLOCK, throwStatement ) ;^247^^^^^246^253^[REPLACE] Node varNode = new Node ( Token.VAR ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node alias = createAliasFunctionNode ( "TT" ) ;^248^^^^^246^253^[REPLACE] Node value = new Node ( getTokenId (  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^Node name = NodeUtil.newName ( getAliasName (  ) , value, getAliasName (  )  ) ;^249^^^^^246^253^[REPLACE] Node name = NodeUtil.newName ( getAliasName (  ) , varNode, getAliasName (  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^name.addChildToFront ( value ) ;^250^^^^^246^253^[REPLACE] name.addChildToBack ( value ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^250^^^^^246^253^[ADD] name.addChildToBack ( value ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^varNode.addChildToBack ( value ) ;^251^^^^^246^253^[REPLACE] varNode.addChildToBack ( name ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^codeRoot.addChildrenToFront ( value ) ;^252^^^^^246^253^[REPLACE] codeRoot.addChildrenToFront ( varNode ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node codeRoot  name  value  varNode  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^addAliasNodes ( compiler.getNodeForCodeInsertion ( null )  ) ;^322^^^^^320^333^[REPLACE] NodeTraversal.traverse ( compiler, root, new FindAliasableNodes (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node externs  root  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( isAliasableType ( type )  )  {^324^^^^^320^333^[REPLACE] if  ( needsAliases (  )  )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node externs  root  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^for  ( AliasSpecification specification : aliasSpecifications )  { aliasTypes.put ( specification.getTokenId (  ) , specification ) ;^329^^^^^320^333^[REPLACE] for  ( AliasSpecification spec : aliasSpecifications )  {^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node externs  root  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^329^330^331^^^320^333^[ADD] for  ( AliasSpecification spec : aliasSpecifications )  { spec.doAlias ( compiler ) ; }^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node externs  root  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( !spec.nodes.get (  )  )  {^337^^^^^335^343^[REPLACE] if  ( !spec.nodes.isEmpty (  )  )  {^[METHOD] needsAliases [TYPE] boolean [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return false;^338^^^^^335^343^[REPLACE] return true;^[METHOD] needsAliases [TYPE] boolean [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^for  ( AliasSpecification specification : aliasSpecifications )  { aliasTypes.put ( specification.getTokenId (  ) , specification ) ;^336^^^^^335^343^[REPLACE] for  ( AliasSpecification spec : aliasSpecifications )  {^[METHOD] needsAliases [TYPE] boolean [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return true;^342^^^^^335^343^[REPLACE] return false;^[METHOD] needsAliases [TYPE] boolean [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^boolean codeChanged = true;^350^^^^^349^361^[REPLACE] boolean codeChanged = false;^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( spec.insertAliasDeclaration ( codeRoot )  )  {^353^^^^^349^361^[REPLACE] if  ( spec.maybeInsertAliasDeclarationIntoParseTree ( codeRoot )  )  {^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^codeChanged = true;^353^354^355^^^349^361^[ADD] if  ( spec.maybeInsertAliasDeclarationIntoParseTree ( codeRoot )  )  { codeChanged = true; }^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^codeChanged = false;^354^^^^^349^361^[REPLACE] codeChanged = true;^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^354^^^^^349^361^[ADD] codeChanged = true;^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^for  ( AliasSpecification specification : aliasSpecifications )  { aliasTypes.put ( specification.getTokenId (  ) , specification ) ;^352^^^^^349^361^[REPLACE] for  ( AliasSpecification spec : aliasSpecifications )  {^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^352^353^354^355^^349^361^[ADD] for  ( AliasSpecification spec : aliasSpecifications )  { if  ( spec.maybeInsertAliasDeclarationIntoParseTree ( codeRoot )  )  { codeChanged = true; }^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( true )  {^358^^^^^349^361^[REPLACE] if  ( codeChanged )  {^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^addAliasNodes ( compiler.getNodeForCodeInsertion ( null )  ) ;^359^^^^^349^361^[REPLACE] compiler.reportCodeChange (  ) ;^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^359^^^^^349^361^[ADD] compiler.reportCodeChange (  ) ;^[METHOD] addAliasNodes [TYPE] void [PARAMETER] Node codeRoot [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  AliasSpecification spec  [TYPE]  Node codeRoot  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( n.getType (  )   ==  Token.NAME )  {^367^^^^^366^381^[REPLACE] if  ( n.getType (  )  != Token.NAME )  {^[METHOD] isAliasDefinition [TYPE] boolean [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REMOVE]^if  ( ! ( isAliasName ( n.getString (  )  )  )  )  {     return false; }^367^^^^^366^381^[REMOVE] ^[METHOD] isAliasDefinition [TYPE] boolean [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return true;^368^^^^^366^381^[REPLACE] return false;^[METHOD] isAliasDefinition [TYPE] boolean [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^if  ( isAliasName ( n.getString (  )  )  )  {^371^^^^^366^381^[REPLACE] if  ( !isAliasName ( n.getString (  )  )  )  {^[METHOD] isAliasDefinition [TYPE] boolean [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return true;^373^^^^^366^381^[REPLACE] return false;^[METHOD] isAliasDefinition [TYPE] boolean [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return n.Node (  )  != false;^380^^^^^366^381^[REPLACE] return n.getFirstChild (  )  != null;^[METHOD] isAliasDefinition [TYPE] boolean [PARAMETER] Node n [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  Node n  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return aliasTypes.get ( type ) ;^387^^^^^386^388^[REPLACE] return aliasTypes.containsKey ( type ) ;^[METHOD] isAliasableType [TYPE] boolean [PARAMETER] int type [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return aliasNames .add ( false )  ;^394^^^^^393^395^[REPLACE] return aliasNames.contains ( name ) ;^[METHOD] isAliasName [TYPE] boolean [PARAMETER] String name [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^for  ( AliasSpecification spec : aliasSpecifications )  { if  ( !spec.nodes.isEmpty (  )  )  {^403^^^^^402^415^[REPLACE] List<AliasSpecification> l = Lists.newArrayList (  ) ;^[METHOD] createAliasSpecifications [TYPE] List [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  l  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^l .contains ( true )  ;^404^^^^^402^415^[REPLACE] l.add ( new KeywordAliasSpecification ( ALIAS_FALSE, Token.FALSE )  ) ;^[METHOD] createAliasSpecifications [TYPE] List [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  l  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^l .contains ( null )  ;^406^^^^^402^415^[REPLACE] l.add ( new KeywordAliasSpecification ( ALIAS_TRUE, Token.TRUE )  ) ;^[METHOD] createAliasSpecifications [TYPE] List [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  l  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[ADD]^^406^407^^^^402^415^[ADD] l.add ( new KeywordAliasSpecification ( ALIAS_TRUE, Token.TRUE )  ) ;^[METHOD] createAliasSpecifications [TYPE] List [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  l  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^l .contains ( null )  ;^413^^^^^402^415^[REPLACE] l.add ( new ThrowAliasSpecification ( ALIAS_THROW )  ) ;^[METHOD] createAliasSpecifications [TYPE] List [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  l  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^return null;^414^^^^^402^415^[REPLACE] return l;^[METHOD] createAliasSpecifications [TYPE] List [PARAMETER] [CLASS] AliasKeywords FindAliasableNodes AliasSpecification ThrowAliasSpecification KeywordAliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean codeChanged  false  isAliased  true  [TYPE]  Set aliasNames  [TYPE]  List aliasSpecifications  l  parameters  [TYPE]  String ALIAS_FALSE  ALIAS_NULL  ALIAS_THROW  ALIAS_TRUE  aliasName  name  [TYPE]  Map aliasTypes  nodes  [TYPE]  int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL  MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW  tokenId  type 
[REPLACE]^final int type = parent.getType (  ) ;^44^^^^^43^50^[REPLACE] final int type = n.getType (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REPLACE]^if  ( isAliasDefinition ( n )  )  {^45^^^^^43^50^[REPLACE] if  ( isAliasableType ( type )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REPLACE]^}  if  ( type  &&  Token.NAME )  {^47^^^^^43^50^[REPLACE] } else if  ( type == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REPLACE]^visitNameNode ( parent ) ;^48^^^^^43^50^[REPLACE] visitNameNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[ADD]^^48^^^^^43^50^[ADD] visitNameNode ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REPLACE]^visitNameNode ( n ) ;^46^^^^^43^50^[REPLACE] visitAliasableNode ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REMOVE]^visitNameNode ( n ) ;^46^^^^^43^50^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REPLACE]^}  else {^47^^^^^43^50^[REPLACE] } else if  ( type == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent  [TYPE]  int type 
[REPLACE]^AliasSpecification aliasableNodes = aliasTypes.get ( parent.getType (  )  ) ;^57^^^^^56^59^[REPLACE] AliasSpecification aliasableNodes = aliasTypes.get ( n.getType (  )  ) ;^[METHOD] visitAliasableNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  AliasSpecification aliasableNodes  [TYPE]  Node n  parent 
[REPLACE]^aliasableNodes.visit ( parent, parent ) ;^58^^^^^56^59^[REPLACE] aliasableNodes.visit ( n, parent ) ;^[METHOD] visitAliasableNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  AliasSpecification aliasableNodes  [TYPE]  Node n  parent 
[ADD]^^58^^^^^56^59^[ADD] aliasableNodes.visit ( n, parent ) ;^[METHOD] visitAliasableNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  AliasSpecification aliasableNodes  [TYPE]  Node n  parent 
[REPLACE]^if  ( isAliasableType ( type )  )  {^66^^^^^65^70^[REPLACE] if  ( isAliasDefinition ( n )  )  {^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^return ;^67^68^^^^65^70^[REPLACE] throw new IllegalStateException ( "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^"Existing alias definition for " + Node.tokenToName ( n.tokenToName (  )  )  ) ;^68^^^^^65^70^[REPLACE] "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  Node n 
[ADD]^^68^69^^^^65^70^[ADD] "Existing alias definition for " + Node.tokenToName ( n.getType (  )  )  ) ; }^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] FindAliasableNodes   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^private final Map<Node, Node> nodes  = null ;^81^^^^^^^[REPLACE] private final Map<Node, Node> nodes = Maps.newHashMap (  ) ;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^private boolean isAliased  = null ;^87^^^^^^^[REPLACE] private boolean isAliased = false;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^private  short  tokenId;^91^^^^^^^[REPLACE] private int tokenId;^[METHOD] visitNameNode [TYPE] void [PARAMETER] Node n [CLASS] AliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node n 
[REPLACE]^this.aliasName =  null;^98^^^^^97^100^[REPLACE] this.aliasName = aliasName;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^this.tokenId =  null;^99^^^^^97^100^[REPLACE] this.tokenId = tokenId;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^aliasNode ( n, parent ) ;^103^^^^^102^104^[REPLACE] nodes.put ( n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] Node n Node parent [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId  [TYPE]  Node n  parent 
[REPLACE]^if  ( nodes.length (  )  >= minOccurrencesRequiredToAlias (  )  )  {^114^^^^^113^120^[REPLACE] if  ( nodes.size (  )  >= minOccurrencesRequiredToAlias (  )  )  {^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId  [TYPE]  Node codeRoot 
[REPLACE]^isAliased = false;^116^^^^^113^120^[REPLACE] isAliased = true;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId  [TYPE]  Node codeRoot 
[ADD]^^116^^^^^113^120^[ADD] isAliased = true;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId  [TYPE]  Node codeRoot 
[REPLACE]^return false;^117^^^^^113^120^[REPLACE] return true;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId  [TYPE]  Node codeRoot 
[REPLACE]^return true;^119^^^^^113^120^[REPLACE] return false;^[METHOD] maybeInsertAliasDeclarationIntoParseTree [TYPE] boolean [PARAMETER] Node codeRoot [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId  [TYPE]  Node codeRoot 
[REPLACE]^if  ( nodes.size (  )  >= minOccurrencesRequiredToAlias (  )  )  {^127^^^^^126^135^[REPLACE] if  ( isAliased )  {^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Node n  parent  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^for  ( Map.Entry<Node, Node> entry : nodes.entrySet (  )  )  { Node n = entry.getKey (  ) ;^128^^^^^126^135^[REPLACE] for  ( Map.Entry<Node, Node> entry : nodes.entrySet (  )  )  {^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Node n  parent  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^Node n = null.getKey (  ) ;^129^^^^^126^135^[REPLACE] Node n = entry.getKey (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Node n  parent  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^Node parent = this.getValue (  ) ;^130^^^^^126^135^[REPLACE] Node parent = entry.getValue (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Node n  parent  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^Node parent = null.getValue (  ) ;^130^^^^^126^135^[REPLACE] Node parent = entry.getValue (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Node n  parent  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[ADD]^^130^^^^^126^135^[ADD] Node parent = entry.getValue (  ) ;^[METHOD] doAlias [TYPE] void [PARAMETER] AbstractCompiler compiler [CLASS] AliasSpecification   [TYPE]  AbstractCompiler compiler  [TYPE]  Entry entry  [TYPE]  boolean false  isAliased  true  [TYPE]  Node n  parent  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^return false;^138^^^^^137^139^[REPLACE] return tokenId;^[METHOD] getTokenId [TYPE] int [PARAMETER] [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^return false;^142^^^^^141^143^[REPLACE] return aliasName;^[METHOD] getAliasName [TYPE] String [PARAMETER] [CLASS] AliasSpecification   [TYPE]  boolean false  isAliased  true  [TYPE]  String aliasName  [TYPE]  Map nodes  [TYPE]  int tokenId 
[REPLACE]^Node alias = createAliasFunctionNode ( "TT" ) ;^167^^^^^166^168^[REPLACE] super ( aliasName, Token.THROW ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  String aliasName 
[REPLACE]^Node name = NodeUtil.newName ( getAliasName (  ) , parent, getAliasName (  )  ) ;^173^^^^^172^177^[REPLACE] Node name = NodeUtil.newName ( getAliasName (  ) , throwNode, getAliasName (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode 
[REPLACE]^Node aliasCall = new Node ( Token.CALL, name, parent.removeFirstChild (  )  ) ;^174^^^^^172^177^[REPLACE] Node aliasCall = new Node ( Token.CALL, name, throwNode.removeFirstChild (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode 
[REPLACE]^Node exprResult = new Node ( Token.EXPR_RESULT, parent ) ;^175^^^^^172^177^[REPLACE] Node exprResult = new Node ( Token.EXPR_RESULT, aliasCall ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode 
[REPLACE]^parent.replaceChild ( throwNode, parent ) ;^176^^^^^172^177^[REPLACE] parent.replaceChild ( throwNode, exprResult ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode 
[ADD]^^176^^^^^172^177^[ADD] parent.replaceChild ( throwNode, exprResult ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node throwNode Node parent [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasCall  exprResult  name  parent  throwNode 
[REPLACE]^codeRoot.newString ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^184^^^^^183^185^[REPLACE] codeRoot.addChildToFront ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot 
[REPLACE]^Node alias = createAliasFunctionNode ( "TT" ) ;^184^^^^^183^185^[REPLACE] codeRoot.addChildToFront ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot 
[ADD]^^184^^^^^183^185^[ADD] codeRoot.addChildToFront ( createAliasFunctionNode ( getAliasName (  )  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot 
[REPLACE]^return InlineCostEstimator.getCost ( alias )  / 2 + 1;^190^^^^^189^191^[REPLACE] return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;^[METHOD] minOccurrencesRequiredToAlias [TYPE] int [PARAMETER] [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true 
[REPLACE]^List<Node> parameters = Lists.newArrayList ( parameterName.cloneNode (  )  ) ;^206^^^^^197^208^[REPLACE] Node alias = createAliasFunctionNode ( "TT" ) ;^[METHOD] estimateMinOccurrencesRequriedToAlias [TYPE] int [PARAMETER] [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node alias 
[REPLACE]^return   alias    / 2 + 4 + 1;^207^^^^^197^208^[REPLACE] return InlineCostEstimator.getCost ( alias )  / 2 + 1;^[METHOD] estimateMinOccurrencesRequriedToAlias [TYPE] int [PARAMETER] [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node alias 
[REPLACE]^Node parameterName = Node.replaceChild ( Token.NAME, "t" ) ;^215^^^^^214^220^[REPLACE] Node parameterName = Node.newString ( Token.NAME, "t" ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List parameters  [TYPE]  String aliasName 
[REPLACE]^List<Node> parameters =   throwStatement.cloneNode (  )  ;^216^^^^^214^220^[REPLACE] List<Node> parameters = Lists.newArrayList ( parameterName.cloneNode (  )  ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List parameters  [TYPE]  String aliasName 
[REPLACE]^Node throwStatement = new Node ( Token.THROW, throwStatement ) ;^217^^^^^214^220^[REPLACE] Node throwStatement = new Node ( Token.THROW, parameterName ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List parameters  [TYPE]  String aliasName 
[ADD]^^217^^^^^214^220^[ADD] Node throwStatement = new Node ( Token.THROW, parameterName ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List parameters  [TYPE]  String aliasName 
[REPLACE]^Node body = new Node ( Token.BLOCK, parameterName ) ;^218^^^^^214^220^[REPLACE] Node body = new Node ( Token.BLOCK, throwStatement ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List parameters  [TYPE]  String aliasName 
[REPLACE]^return NodeUtil.newFunctionNode ( aliasName, parameters, throwStatement, -4, -4 ) ;^219^^^^^214^220^[REPLACE] return NodeUtil.newFunctionNode ( aliasName, parameters, body, -1, -1 ) ;^[METHOD] createAliasFunctionNode [TYPE] Node [PARAMETER] String aliasName [CLASS] ThrowAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node body  parameterName  throwStatement  [TYPE]  List parameters  [TYPE]  String aliasName 
[REPLACE]^Node value = new Node ( getTokenId (  )  ) ;^226^^^^^225^227^[REPLACE] super ( aliasName, tokenId ) ;^[METHOD] <init> [TYPE] String,int) [PARAMETER] String aliasName int tokenId [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  String aliasName  [TYPE]  int tokenId 
[REPLACE]^Node aliasNode =   getAliasName (  )   ) ;^238^^^^^237^240^[REPLACE] Node aliasNode = NodeUtil.newName ( getAliasName (  ) , n, getAliasName (  )  ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasNode  n  parent 
[REPLACE]^parent .addChildToBack ( n )  ;^239^^^^^237^240^[REPLACE] parent.replaceChild ( n, aliasNode ) ;^[METHOD] aliasNode [TYPE] void [PARAMETER] Node n Node parent [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node aliasNode  n  parent 
[REPLACE]^Node value = new Node ( getTokenId (  )  ) ;^247^^^^^246^253^[REPLACE] Node varNode = new Node ( Token.VAR ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
[REPLACE]^Node aliasNode = NodeUtil.newName ( getAliasName (  ) , n, getAliasName (  )  ) ;^248^^^^^246^253^[REPLACE] Node value = new Node ( getTokenId (  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
[ADD]^^248^^^^^246^253^[ADD] Node value = new Node ( getTokenId (  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
[REPLACE]^Node name = NodeUtil.newName ( getAliasName (  ) , value, getAliasName (  )  ) ;^249^^^^^246^253^[REPLACE] Node name = NodeUtil.newName ( getAliasName (  ) , varNode, getAliasName (  )  ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
[REPLACE]^name.addChildToBack ( varNode ) ;^250^^^^^246^253^[REPLACE] name.addChildToBack ( value ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
[REPLACE]^varNode.addChildrenToFront ( name ) ;^251^^^^^246^253^[REPLACE] varNode.addChildToBack ( name ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
[REPLACE]^codeRoot.addChildToBack ( varNode ) ;^252^^^^^246^253^[REPLACE] codeRoot.addChildrenToFront ( varNode ) ;^[METHOD] insertAliasDeclaration [TYPE] void [PARAMETER] Node codeRoot [CLASS] KeywordAliasSpecification   [TYPE]  boolean false  true  [TYPE]  Node codeRoot  name  value  varNode 
