[REPLACE]^private  JSModuleGraph moduleGraph;^46^^^^^^^[REPLACE] private final JSModuleGraph moduleGraph;^ [CLASS] AnalyzeNameReferences PropagateReferences NameInfo  
[REPLACE]^private boolean referenced  = null ;^98^^^^^^^[REPLACE] private boolean referenced = false;^ [CLASS] AnalyzeNameReferences PropagateReferences NameInfo  
[REPLACE]^private JSModule deepestCommonModuleRef ;^99^^^^^^^[REPLACE] private JSModule deepestCommonModuleRef = null;^ [CLASS] AnalyzeNameReferences PropagateReferences NameInfo  
[REPLACE]^this.compiler =  null;^50^^^^^49^52^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^this.moduleGraph =  null.getModuleGraph (  ) ;^51^^^^^49^52^[REPLACE] this.moduleGraph = compiler.getModuleGraph (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^56^57^^^^55^64^[ADD] NameReferenceGraphConstruction gc = new NameReferenceGraphConstruction ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^gc .getNameReferenceGraph (  )  ;^58^^^^^55^64^[REPLACE] gc.process ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^graph =  null.getNameReferenceGraph (  ) ;^59^^^^^55^64^[REPLACE] graph = gc.getNameReferenceGraph (  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^FixedPointGraphTraversal<Name, Reference> t = FixedPointGraphTraversal.computeFixedPoint ( new PropagateReferences (  )  ) ;^60^61^^^^55^64^[REPLACE] FixedPointGraphTraversal<Name, Reference> t = FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^getInfo ( graph.MAIN ) .markReference ( true ) ;^62^^^^^55^64^[REPLACE] getInfo ( graph.MAIN ) .markReference ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^graph = gc.getNameReferenceGraph (  ) ;^62^^^^^55^64^[REPLACE] getInfo ( graph.MAIN ) .markReference ( null ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^t.computeFixedPointhis ( graph, Sets.newHashSet ( graph.MAIN )  ) ;^63^^^^^55^64^[REPLACE] t.computeFixedPoint ( graph, Sets.newHashSet ( graph.MAIN )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REMOVE]^NameInfo info = name.getAnnotation (  ) ;^63^^^^^55^64^[REMOVE] ^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^t.computeFixedPoint ( graph,   graph.MAIN    ) ;^63^^^^^55^64^[REPLACE] t.computeFixedPoint ( graph, Sets.newHashSet ( graph.MAIN )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  Node externs  root  [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  NameReferenceGraphConstruction gc  [TYPE]  FixedPointGraphTraversal t  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return info;^67^^^^^66^68^[REPLACE] return graph;^[METHOD] getGraph [TYPE] NameReferenceGraph [PARAMETER] [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^NameInfo destInfo = getInfo ( start ) ;^72^^^^^71^84^[REPLACE] NameInfo startInfo = getInfo ( start ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^NameInfo startInfo = getInfo ( dest ) ;^73^^^^^71^84^[REPLACE] NameInfo destInfo = getInfo ( dest ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^if  ( info == null )  {^74^^^^^71^84^[REPLACE] if  ( startInfo.isReferenced (  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^if  ( startModule == null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^return startInfo.markReference ( edge.getModule (  )  ) ;^80^^^^^71^84^[REPLACE] return destInfo.markReference ( edge.getModule (  )  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^return startInfo.markReference ( startModule ) ;^78^^^^^71^84^[REPLACE] return destInfo.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^return destInfo .markReference ( deepestCommonModuleRef )  ;^78^^^^^71^84^[REPLACE] return destInfo.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^JSModule startModule = destInfo.getDeepestCommonModuleRef (  ) ;^75^^^^^71^84^[REPLACE] JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^if  ( startModule == null ) {^76^77^^^^71^84^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[ADD]^^76^77^78^79^80^71^84^[ADD] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  { return destInfo.markReference ( startModule ) ; } else { return destInfo.markReference ( edge.getModule (  )  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^return destInfo.markReference ( startModule ) ;^80^^^^^71^84^[REPLACE] return destInfo.markReference ( edge.getModule (  )  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^return startInfo .markReference ( startModule )  ;^78^^^^^71^84^[REPLACE] return destInfo.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^return true;^83^^^^^71^84^[REPLACE] return false;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo destInfo  startInfo  [TYPE]  Reference edge  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name dest  start 
[REPLACE]^FixedPointGraphTraversal<Name, Reference> t = FixedPointGraphTraversal.newTraversal ( new PropagateReferences (  )  ) ;^88^^^^^87^95^[REPLACE] GraphNode<Name, Reference> name = graph.getNode ( symbol ) ;^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[ADD]^^88^89^^^^87^95^[ADD] GraphNode<Name, Reference> name = graph.getNode ( symbol ) ; NameInfo info = name.getAnnotation (  ) ;^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[REPLACE]^NameInfo info = this.getAnnotation (  ) ;^89^^^^^87^95^[REPLACE] NameInfo info = name.getAnnotation (  ) ;^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[REPLACE]^if  ( info != this  )  {^90^^^^^87^95^[REPLACE] if  ( info == null )  {^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[ADD]^^90^91^92^93^^87^95^[ADD] if  ( info == null )  { info = new NameInfo (  ) ; name.setAnnotation ( info ) ; }^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[REPLACE]^info =  new PropagateReferences (  )  ;^91^^^^^87^95^[REPLACE] info = new NameInfo (  ) ;^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[REPLACE]^return false;^94^^^^^87^95^[REPLACE] return info;^[METHOD] getInfo [TYPE] AnalyzeNameReferences$NameInfo [PARAMETER] Name symbol [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameInfo info  [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  GraphNode name  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph  [TYPE]  Name symbol 
[REPLACE]^return info;^103^^^^^102^104^[REPLACE] return referenced;^[METHOD] isReferenced [TYPE] boolean [PARAMETER] [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return info;^111^^^^^110^112^[REPLACE] return deepestCommonModuleRef;^[METHOD] getDeepestCommonModuleRef [TYPE] JSModule [PARAMETER] [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^boolean hasChanged = true;^121^^^^^120^143^[REPLACE] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( referenced )  {^122^^^^^120^143^[REPLACE] if  ( !referenced )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^referenced = false;^123^^^^^120^143^[REPLACE] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^hasChanged = false;^124^^^^^120^143^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^123^^^^^120^143^[ADD] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( moduleGraph == null )  {^127^^^^^120^143^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( deepestCommonModuleRef != null )  {^130^^^^^120^143^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^130^131^132^133^134^120^143^[ADD] if  ( deepestCommonModuleRef == null )  { deepestCommonModuleRef = module; } else { deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^deepestCommonModuleRef =  nullGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, null ) ;^133^134^135^^^120^143^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^133^134^135^^^120^143^[ADD] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^deepestCommonModuleRef =  null;^131^^^^^120^143^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^131^^^^^120^143^[ADD] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  (startModule  ==  deepestCommonModuleRef )  {^138^^^^^120^143^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REMOVE]^if  ( ! ( referenced )  )  {     referenced = true;     hasChanged = true; }^138^^^^^120^143^[REMOVE] ^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^hasChanged = false;^139^^^^^120^143^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^deepestCommonModuleRef =  startModule;^131^^^^^120^143^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^deepestCommonModuleRef =  startModuleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, startModule ) ;^133^134^135^^^120^143^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^128^^^^^120^143^[REPLACE] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^if  ( startModule  ==  deepestCommonModuleRef )  {^138^^^^^120^143^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^138^139^140^^^120^143^[ADD] if  ( originalDeepestCommon != deepestCommonModuleRef )  { hasChanged = true; }^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[ADD]^^139^^^^^120^143^[ADD] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^return true;^142^^^^^120^143^[REPLACE] return hasChanged;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] AnalyzeNameReferences PropagateReferences NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  startModule  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  hasChanged  referenced  true  [TYPE]  NameReferenceGraph graph  [TYPE]  JSModuleGraph moduleGraph 
[REPLACE]^NameInfo destInfo = getInfo ( start ) ;^72^^^^^71^84^[REPLACE] NameInfo startInfo = getInfo ( start ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[ADD]^^72^^^^^71^84^[ADD] NameInfo startInfo = getInfo ( start ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^NameInfo startInfo = getInfo ( dest ) ;^73^^^^^71^84^[REPLACE] NameInfo destInfo = getInfo ( dest ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^74^^^^^71^84^[REPLACE] if  ( startInfo.isReferenced (  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^if  ( startModule == false && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^76^77^^^^71^84^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[ADD]^^76^77^78^79^80^71^84^[ADD] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  { return destInfo.markReference ( startModule ) ; } else { return destInfo.markReference ( edge.getModule (  )  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^return destInfo.markReference ( startModule ) ;^80^^^^^71^84^[REPLACE] return destInfo.markReference ( edge.getModule (  )  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^return startInfo .isReferenced (  )  ;^78^^^^^71^84^[REPLACE] return destInfo.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^return startInfo.markReference ( edge.getModule (  )  ) ;^80^^^^^71^84^[REPLACE] return destInfo.markReference ( edge.getModule (  )  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^JSModule startModule = destInfo .isReferenced (  )  ;^75^^^^^71^84^[REPLACE] JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^if  ( startModule == this ) {^76^77^^^^71^84^[REPLACE] if  ( startModule != null && moduleGraph.dependsOn ( startModule, edge.getModule (  )  )  )  {^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^return destInfo.markReference ( edge.getModule (  )  ) ;^78^^^^^71^84^[REPLACE] return destInfo.markReference ( startModule ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^JSModule startModule = destInfo.getDeepestCommonModuleRef (  ) ;^75^^^^^71^84^[REPLACE] JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[ADD]^^75^^^^^71^84^[ADD] JSModule startModule = startInfo.getDeepestCommonModuleRef (  ) ;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^return true;^83^^^^^71^84^[REPLACE] return false;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] PropagateReferences   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^private boolean referenced  = null ;^98^^^^^^^[REPLACE] private boolean referenced = false;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] NameInfo   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^private JSModule deepestCommonModuleRef ;^99^^^^^^^[REPLACE] private JSModule deepestCommonModuleRef = null;^[METHOD] traverseEdge [TYPE] boolean [PARAMETER] Name start Reference edge Name dest [CLASS] NameInfo   [TYPE]  NameInfo destInfo  startInfo  [TYPE]  boolean false  true  [TYPE]  Reference edge  [TYPE]  JSModule startModule  [TYPE]  Name dest  start 
[REPLACE]^return hasChanged;^103^^^^^102^104^[REPLACE] return referenced;^[METHOD] isReferenced [TYPE] boolean [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  boolean false  referenced  true 
[REPLACE]^return hasChanged;^111^^^^^110^112^[REPLACE] return deepestCommonModuleRef;^[METHOD] getDeepestCommonModuleRef [TYPE] JSModule [PARAMETER] [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  [TYPE]  boolean false  referenced  true 
[REPLACE]^boolean hasChanged = true;^121^^^^^120^143^[REPLACE] boolean hasChanged = false;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^if  ( referenced )  {^122^^^^^120^143^[REPLACE] if  ( !referenced )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^referenced = false;^123^^^^^120^143^[REPLACE] referenced = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[ADD]^hasChanged = true;^123^124^^^^120^143^[ADD] referenced = true; hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^hasChanged = false;^124^^^^^120^143^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^if  ( moduleGraph == true )  {^127^^^^^120^143^[REPLACE] if  ( moduleGraph != null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^if  ( deepestCommonModuleRef != null )  {^130^^^^^120^143^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[ADD]^deepestCommonModuleRef = module;^130^131^132^133^134^120^143^[ADD] if  ( deepestCommonModuleRef == null )  { deepestCommonModuleRef = module; } else { deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive (^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommonGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, originalDeepestCommon ) ;^133^134^135^^^120^143^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^deepestCommonModuleRef =  originalDeepestCommon;^131^^^^^120^143^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[ADD]^^131^^^^^120^143^[ADD] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^if  ( originalDeepestCommon  ==  deepestCommonModuleRef )  {^138^^^^^120^143^[REPLACE] if  ( originalDeepestCommon != deepestCommonModuleRef )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^hasChanged = false;^139^^^^^120^143^[REPLACE] hasChanged = true;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^deepestCommonModuleRef =  null;^131^^^^^120^143^[REPLACE] deepestCommonModuleRef = module;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^deepestCommonModuleRef =  nullGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, null ) ;^133^134^135^^^120^143^[REPLACE] deepestCommonModuleRef = moduleGraph.getDeepestCommonDependencyInclusive ( deepestCommonModuleRef, module ) ;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^boolean hasChanged = false;^128^^^^^120^143^[REPLACE] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^if  (originalDeepestCommon != null )  {^130^^^^^120^143^[REPLACE] if  ( deepestCommonModuleRef == null )  {^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[ADD]^^128^^^^^120^143^[ADD] JSModule originalDeepestCommon = deepestCommonModuleRef;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
[REPLACE]^return true;^142^^^^^120^143^[REPLACE] return hasChanged;^[METHOD] markReference [TYPE] boolean [PARAMETER] JSModule module [CLASS] NameInfo   [TYPE]  JSModule deepestCommonModuleRef  module  originalDeepestCommon  [TYPE]  boolean false  hasChanged  referenced  true 
