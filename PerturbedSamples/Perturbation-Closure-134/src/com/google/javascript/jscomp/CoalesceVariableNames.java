[REPLACE]^private static final Comparator<Var> coloringTieBreaker ;^68^69^^^^68^73^[REPLACE] private static final Comparator<Var> coloringTieBreaker = new Comparator<Var> (  )  {^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private  LiveRangeChecker callback1;^317^^^^^^^[REPLACE] private final LiveRangeChecker callback1;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private  LiveRangeChecker callback2;^318^^^^^^^[REPLACE] private final LiveRangeChecker callback2;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^boolean defFound ;^390^^^^^^^[REPLACE] boolean defFound = false;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^boolean crossed  = null ;^391^^^^^^^[REPLACE] boolean crossed = false;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private  Var def;^392^^^^^^^[REPLACE] private final Var def;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^private  Var use;^393^^^^^^^[REPLACE] private final Var use;^ [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker  
[REPLACE]^this.compiler =  null;^80^^^^^79^83^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean usePseudoNames [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^colorings  =  colorings ;^81^^^^^79^83^[REPLACE] colorings = Lists.newLinkedList (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean usePseudoNames [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^this.usePseudoNames =  null;^82^^^^^79^83^[REPLACE] this.usePseudoNames = usePseudoNames;^[METHOD] <init> [TYPE] AbstractCompiler,boolean) [PARAMETER] AbstractCompiler compiler boolean usePseudoNames [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^this.callback1 = callback1; ;^296^^^^^294^297^[REPLACE] this.callbacks = callbacks;^[METHOD] <init> [TYPE] ArrayList) [PARAMETER] CombinedLiveRangeChecker> callbacks [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^this.callbacks = callbacks; ;^323^^^^^320^325^[REPLACE] this.callback1 = callback1;^[METHOD] <init> [TYPE] CoalesceVariableNames$LiveRangeChecker) [PARAMETER] LiveRangeChecker callback1 LiveRangeChecker callback2 [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^this.callbacks = callbacks; ;^324^^^^^320^325^[REPLACE] this.callback2 = callback2;^[METHOD] <init> [TYPE] CoalesceVariableNames$LiveRangeChecker) [PARAMETER] LiveRangeChecker callback1 LiveRangeChecker callback2 [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^this.def =  null;^396^^^^^395^398^[REPLACE] this.def = def;^[METHOD] <init> [TYPE] Var) [PARAMETER] Var def Var use [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^396^^^^^395^398^[ADD] this.def = def;^[METHOD] <init> [TYPE] Var) [PARAMETER] Var def Var use [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^this.use =  null;^397^^^^^395^398^[REPLACE] this.use = use;^[METHOD] <init> [TYPE] Var) [PARAMETER] Var def Var use [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return v1.index  ;^71^^^^^70^72^[REPLACE] return v1.index - v2.index;^[METHOD] compare [TYPE] int [PARAMETER] Var v1 Var v2 [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeTraversal.traverse ( compiler, root, callbacks ) ;^87^^^^^86^88^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Var def  use  v1  v2  [TYPE]  Node externs  root  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Scope scope = t.inGlobalScope (  ) ;^96^^^^^91^116^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^if  ( scope.getVars (  )  )  {^97^^^^^91^116^[REPLACE] if  ( scope.isGlobal (  )  )  {^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[ADD]^return;^97^98^99^^^91^116^[ADD] if  ( scope.isGlobal (  )  )  { return; }^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^return false;^98^^^^^91^116^[REPLACE] return;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^ControlFlowGraph<Node> cfg = t.getScope (  ) ;^100^^^^^91^116^[REPLACE] ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( this, scope, compiler ) ;^102^103^^^^91^116^[REPLACE] LiveVariablesAnalysis liveness = new LiveVariablesAnalysis ( cfg, scope, compiler ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^liveness.getEscapedLocals (  ) ;^104^^^^^91^116^[REPLACE] liveness.analyze (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.analyze (  )  ) ;^106^107^108^^^91^116^[REPLACE] UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[ADD]^^106^107^108^^^91^116^[ADD] UndiGraph<Var, Void> interferenceGraph = computeVariableNamesInterferenceGraph ( t, cfg, liveness.getEscapedLocals (  )  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( false, coloringTieBreaker ) ;^110^111^112^^^91^116^[REPLACE] GraphColoring<Var, Void> coloring = new GreedyGraphColoring<Var, Void> ( interferenceGraph, coloringTieBreaker ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^Node parent = var.getParent (  ) ;^114^^^^^91^116^[REPLACE] coloring.color (  ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^colorings.push ( this ) ;^115^^^^^91^116^[REPLACE] colorings.push ( coloring ) ;^[METHOD] enterScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  GraphColoring coloring  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  LiveVariablesAnalysis liveness  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg 
[REPLACE]^if  ( t.getScope (  )  )  {^120^^^^^119^124^[REPLACE] if  ( t.inGlobalScope (  )  )  {^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^return;^120^121^122^^^119^124^[ADD] if  ( t.inGlobalScope (  )  )  { return; }^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return false;^121^^^^^119^124^[REPLACE] return;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^colorings .push ( null )  ;^123^^^^^119^124^[REPLACE] colorings.pop (  ) ;^[METHOD] exitScope [TYPE] void [PARAMETER] NodeTraversal t [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  v1  v2  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( colorings.isEmpty (  )  || NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^128^129^^^^127^189^[REPLACE] if  ( colorings.isEmpty (  )  || !NodeUtil.isName ( n )  || NodeUtil.isFunction ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return false;^131^^^^^128^132^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return false;^131^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var var = t.getScope (  ) .getVar ( n.setString (  )  ) ;^133^^^^^127^189^[REPLACE] Var var = t.getScope (  ) .getVar ( n.getString (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^GraphNode<Var, ?> vNode = colorings.pop (  ) .getGraph (  ) .getNode ( var ) ;^134^^^^^127^189^[REPLACE] GraphNode<Var, ?> vNode = colorings.peek (  ) .getGraph (  ) .getNode ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( null != true )  {^135^^^^^127^189^[REPLACE] if  ( vNode == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return false;^137^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( v2 ) ;^139^^^^^127^189^[REPLACE] Var coalescedVar = colorings.peek (  ) .getPartitionSuperNode ( var ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^while  ( t.getScope (  ) .isDeclared ( pseudoName, false )  )  {^178^^^^^127^189^[REPLACE] while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName + =  pseudoName +;^179^^^^^127^189^[REPLACE] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( usePseudoNames )  {^141^^^^^127^189^[REPLACE] if  ( !usePseudoNames )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^while  ( t.getScope (  ) .isDeclared ( pseudoName, false )  )  {^178^^^^^141^188^[REPLACE] while  ( t.getScope (  ) .isDeclared ( pseudoName, true )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName + = null ;^179^^^^^141^188^[REPLACE] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  (  coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^141^188^[REPLACE] if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^allMergedNames.contains ( iVar.name ) ;^167^^^^^165^168^[REPLACE] allMergedNames.add ( iVar.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( allMergedNames.size (  )  + 2 == 1 )  {^172^^^^^141^188^[REPLACE] if  ( allMergedNames.size (  )  == 1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^return;^172^173^174^^^141^188^[ADD] if  ( allMergedNames.size (  )  == 1 )  { return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return false;^173^^^^^141^188^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isName ( parent )  )  {^185^^^^^141^188^[REPLACE] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^185^186^187^^^141^188^[ADD] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^removeVarDeclaration ( parent ) ;^186^^^^^141^188^[REPLACE] removeVarDeclaration ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^160^^^^^141^188^[REPLACE] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^160^161^^^^141^188^[ADD] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  { Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  == null ) {^165^166^^^^141^188^[REPLACE] if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REMOVE]^var.removeChild ( name ) ;^167^^^^^165^168^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var nullVar = i.hasNext (  ) ;^161^^^^^141^188^[REPLACE] Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName =  Joiner.on ( "_" ) .join ( null ) ;^176^^^^^141^188^[REPLACE] pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^176^^^^^141^188^[ADD] pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName +;^179^^^^^141^188^[REPLACE] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^179^^^^^141^188^[ADD] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^String pseudoName = true;^158^^^^^141^188^[REPLACE] String pseudoName = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Scope scope = t.getScope (  ) ;^159^^^^^141^188^[REPLACE] Set<String> allMergedNames = Sets.newTreeSet (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^for  ( Iterator<Var> i = t.getScope (  ) .join (  ) ; i.hasNext (  ) ; )  {^160^^^^^141^188^[REPLACE] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var thisVar = i .hasNext (  )  ;^161^^^^^141^188^[REPLACE] Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( vNode.getValue (  )  .getVars (  )   )  {^142^^^^^127^189^[REPLACE] if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^142^143^144^145^^127^189^[ADD] if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {  return; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return false;^144^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( NodeUtil.isForIn ( parent )  )  {^151^^^^^127^189^[REPLACE] if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^removeVarDeclaration ( parent ) ;^152^^^^^127^189^[REPLACE] removeVarDeclaration ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( null.getValue (  ) .equals ( coalescedVar )  )  {^142^^^^^127^189^[REPLACE] if  ( vNode.getValue (  ) .equals ( coalescedVar )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REMOVE]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^151^^^^^127^189^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( var )  == null ) {^165^166^^^^127^189^[REPLACE] if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^allMergedNames.contains ( var.name ) ;^167^^^^^165^168^[REPLACE] allMergedNames.add ( iVar.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( allMergedNames.size (  )  - 2 == 1 )  {^172^^^^^127^189^[REPLACE] if  ( allMergedNames.size (  )  == 1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^return false;^173^^^^^127^189^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  (  NodeUtil.isVar ( n )  )  {^185^^^^^127^189^[REPLACE] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^185^186^187^^^127^189^[ADD] if  ( !vNode.getValue (  ) .equals ( coalescedVar )  && NodeUtil.isVar ( parent )  )  { removeVarDeclaration ( n ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^removeVarDeclaration ( parent ) ;^186^^^^^127^189^[REPLACE] removeVarDeclaration ( n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.next (  ) ; )  {^160^^^^^127^189^[REPLACE] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  == null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^165^166^^^^127^189^[REPLACE] if  ( colorings.peek (  ) .getGraph (  ) .getNode ( iVar )  != null && coalescedVar.equals ( colorings.peek (  ) .getPartitionSuperNode ( iVar )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^allMergedNames.add ( var.name ) ;^167^^^^^165^168^[REPLACE] allMergedNames.add ( iVar.name ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var trueVar = i.next (  ) ;^161^^^^^127^189^[REPLACE] Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName =  Joiner.on ( "_" ) .join ( null ) ;^176^^^^^127^189^[REPLACE] pseudoName = Joiner.on ( "_" ) .join ( allMergedNames ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^pseudoName + = null ;^179^^^^^127^189^[REPLACE] pseudoName += "$";^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^String pseudoName = this;^158^^^^^127^189^[REPLACE] String pseudoName = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Scope scope = t.getScope (  ) ;^159^^^^^127^189^[REPLACE] Set<String> allMergedNames = Sets.newTreeSet (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^for  ( Iterator<Var> i = t.getScope (  ) .join (  ) ; i.hasNext (  ) ; )  {^160^^^^^127^189^[REPLACE] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[ADD]^^160^161^^^^127^189^[ADD] for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  { Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Var iVar = i .hasNext (  )  ;^161^^^^^127^189^[REPLACE] Var iVar = i.next (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  Set allMergedNames  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  GraphNode vNode  [TYPE]  String pseudoName  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  [TYPE]  Iterator i 
[REPLACE]^Scope scope = t.inGlobalScope (  ) ;^195^^^^^192^265^[REPLACE] Scope scope = t.getScope (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( escaped.contains ( v )  )  {^200^^^^^192^265^[REPLACE] if  ( !escaped.contains ( v )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( !NodeUtil.isFunction ( v .getName (  )   )  )  {^208^^^^^192^265^[REPLACE] if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.createNode ( var ) ;^209^^^^^192^265^[REPLACE] interferenceGraph.createNode ( v ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( !NodeUtil.isFunction ( var.getParentNode (  )  )  )  {^208^^^^^192^265^[REPLACE] if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.hasNode ( v ) ;^209^^^^^192^265^[REPLACE] interferenceGraph.createNode ( v ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i = t.getScope (  ) .getVars (  ) ; i.hasNext (  ) ; )  {^198^^^^^192^265^[REPLACE] for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^198^199^200^^^192^265^[ADD] for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  { Var v = i.next (  ) ; if  ( !escaped.contains ( v )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REMOVE]^if  ( isVar ( parent )  )  {     return n.hasChildren (  ) ; }^208^^^^^192^265^[REMOVE] ^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( !NodeUtil.isFunction ( var.getName (  )  )  )  {^208^^^^^192^265^[REPLACE] if  ( !NodeUtil.isFunction ( v.getParentNode (  )  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v = i.hasNext (  ) ;^199^^^^^192^265^[REPLACE] Var v = i.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i = scope.getVarCount (  ) ; i.hasNext (  ) ; )  {^198^^^^^192^265^[REPLACE] for  ( Iterator<Var> i = scope.getVars (  ) ; i.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v = this.next (  ) ;^199^^^^^192^265^[REPLACE] Var v = i.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( null.isImplicitReturn ( cfgNode )  )  {^218^^^^^192^265^[REPLACE] if  ( cfg.isImplicitReturn ( cfgNode )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1 == v2 || null.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^192^265^[REPLACE] if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP || v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^192^265^[REPLACE] if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^}  else {^245^246^^^^192^265^[REPLACE] } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^}   interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^245^246^247^248^249^192^265^[ADD] else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  { interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; } else { LiveRangeChecker checker1 =^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? true : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? true : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, true, v2 ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^247^^^^^245^254^[ADD] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? true : v2 ) ;^249^250^^^^192^265^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? false : v1 ) ;^251^252^^^^192^265^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, this, v2 ) ;^244^^^^^242^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^} else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  && ( v1OutLive && v2OutLive )  )  {^245^246^^^^192^265^[REPLACE] } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? false : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, this, v2 ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^227^^^^^192^265^[REPLACE] for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^227^228^229^230^^192^265^[ADD] for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  { Var v1 = i1.next (  ) ; for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  { Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1 == v2 ) {^232^233^^^^192^265^[REPLACE] if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  (  v2.getParentNode (  ) .getType (  )  == Token.LP )  {^242^243^^^^192^265^[REPLACE] if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^}  if  (  state.getIn (  ) .isLive ( v2 )  )  && ( v1OutLive && v2OutLive )  )  {^245^246^^^^192^265^[REPLACE] } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  || ( v1OutLive && v2OutLive )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, varOutLive ? this : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^249^250^^^^192^265^[ADD] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? true : v1 ) ;^251^252^^^^192^265^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, true, v2 ) ;^244^^^^^242^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REMOVE]^NodeUtil.removeChild ( parent, var ) ;^244^^^^^242^254^[REMOVE] ^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( var, v2OutLive ? false : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? this : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, false, v2 ) ;^247^^^^^245^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^229^^^^^192^265^[REPLACE] for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  ( v1.getParentNode (  ) .getType (  )  == Token.LP ) {^242^243^^^^192^265^[REPLACE] if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^242^243^244^245^^192^265^[ADD] if  ( v1.getParentNode (  ) .getType (  )  == Token.LP && v2.getParentNode (  ) .getType (  )  == Token.LP )  { interferenceGraph.connectIfNotFound ( v1, null, v2 ) ; } else if  (  ( state.getIn (  ) .isLive ( v1 )  && state.getIn (  ) .isLive ( v2 )  )  ||^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? false : v2 ) ;^249^250^^^^245^254^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^249^250^^^^245^254^[ADD] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v1OutLive ? this : v2 ) ;^249^250^^^^192^265^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? this : v1 ) ;^251^252^^^^192^265^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^251^252^^^^192^265^[ADD] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^interferenceGraph.connectIfNotFound ( v1, true, var ) ;^244^^^^^242^254^[REPLACE] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^244^^^^^242^254^[ADD] interferenceGraph.connectIfNotFound ( v1, null, v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? this : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v2 = this.next (  ) ;^230^^^^^192^265^[REPLACE] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^230^^^^^192^265^[ADD] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean varOutLive = state.getIn (  ) .isLive ( v1 ) ;^239^^^^^192^265^[REPLACE] boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^240^^^^^192^265^[REPLACE] boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^240^^^^^192^265^[ADD] boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v1 = null.next (  ) ;^228^^^^^192^265^[REPLACE] Var v1 = i1.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i2 = scope .getVar (  )  ; i2.hasNext (  ) ; )  {^229^^^^^192^265^[REPLACE] for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^229^230^^232^^192^265^[ADD] for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  { Var v2 = i2.next (  ) ; if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  ||^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v2 = null.next (  ) ;^230^^^^^192^265^[REPLACE] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean v1OutLive = null.getOut (  ) .isLive ( v1 ) ;^239^^^^^192^265^[REPLACE] boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean varOutLive = state.getOut (  ) .isLive ( v2 ) ;^240^^^^^192^265^[REPLACE] boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? this : v2 ) ;^249^250^^^^192^265^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( var, v1OutLive ? this : v1 ) ;^251^252^^^^192^265^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^if  (  interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^232^233^^^^192^265^[REPLACE] if  ( v1 == v2 || !interferenceGraph.hasNode ( v1 )  || !interferenceGraph.hasNode ( v2 )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v2OutLive ? false : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? false : v2 ) ;^249^250^^^^192^265^[REPLACE] LiveRangeChecker checker1 = new LiveRangeChecker ( v1, v2OutLive ? null : v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^LiveRangeChecker checker2 = new LiveRangeChecker ( v2, varOutLive ? false : v1 ) ;^251^252^^^^245^254^[REPLACE] LiveRangeChecker checker2 = new LiveRangeChecker ( v2, v1OutLive ? null : v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v2 = i2.hasNext (  ) ;^230^^^^^192^265^[REPLACE] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean varOutLive = state .getIn (  )  .isLive ( v1 ) ;^239^^^^^192^265^[REPLACE] boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean v2OutLive = null.getOut (  ) .isLive ( v2 ) ;^240^^^^^192^265^[REPLACE] boolean v2OutLive = state.getOut (  ) .isLive ( v2 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^ControlFlowGraph<Node> cfg = t.getControlFlowGraph (  ) ;^216^^^^^192^265^[REPLACE] for  ( DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes (  )  )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^FlowState<LiveVariableLattice> state = null.getValue (  ) ;^217^^^^^192^265^[REPLACE] FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^217^^^^^192^265^[ADD] FlowState<LiveVariableLattice> state = cfgNode.getAnnotation (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^int varsInScope = scope .getVars (  )  ;^222^^^^^192^265^[REPLACE] int varsInScope = scope.getVarCount (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope  <  varsInScope ) ;^223^224^225^^^192^265^[REPLACE] ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[ADD]^^223^224^225^^^192^265^[ADD] ArrayList<CombinedLiveRangeChecker> rangesToCheck = new ArrayList<CombinedLiveRangeChecker> ( varsInScope * varsInScope ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i1 = scope.getVarCount (  ) ; i1.hasNext (  ) ; )  {^227^^^^^192^265^[REPLACE] for  ( Iterator<Var> i1 = scope.getVars (  ) ; i1.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v1 = null .hasNext (  )  ;^228^^^^^192^265^[REPLACE] Var v1 = i1.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( Iterator<Var> i2 = scope.getVarCount (  ) ; i2.hasNext (  ) ; )  {^229^^^^^192^265^[REPLACE] for  ( Iterator<Var> i2 = scope.getVars (  ) ; i2.hasNext (  ) ; )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^Var v2 = null.hasNext (  ) ;^230^^^^^192^265^[REPLACE] Var v2 = i2.next (  ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^boolean varOutLive = state.getOut (  ) .isLive ( v1 ) ;^239^^^^^192^265^[REPLACE] boolean v1OutLive = state.getOut (  ) .isLive ( v1 ) ;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ;^260^^^^^192^265^[REPLACE] for  ( CombinedLiveRangeChecker range : rangesToCheck )  {^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^return this;^264^^^^^192^265^[REPLACE] return interferenceGraph;^[METHOD] computeVariableNamesInterferenceGraph [TYPE] UndiGraph [PARAMETER] NodeTraversal t Node> cfg Var> escaped [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  FlowState state  [TYPE]  Set escaped  [TYPE]  UndiGraph interferenceGraph  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  int varsInScope  [TYPE]  Comparator coloringTieBreaker  [TYPE]  AbstractCompiler compiler  [TYPE]  DiGraphNode cfgNode  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Scope scope  [TYPE]  ControlFlowGraph cfg  [TYPE]  Iterator i  i1  i2  [TYPE]  CombinedLiveRangeChecker range 
[REPLACE]^CombinedCfgNodeLiveRangeChecker callbacks = new CombinedCfgNodeLiveRangeChecker ( 0 ) ;^279^280^^^^277^282^[REPLACE] CombinedCfgNodeLiveRangeChecker callbacks = new CombinedCfgNodeLiveRangeChecker ( rangesToCheck ) ;^[METHOD] checkRanges [TYPE] void [PARAMETER] CombinedLiveRangeChecker> rangesToCheck Node root [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node root  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  CombinedCfgNodeLiveRangeChecker callbacks  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeTraversal.traverse ( compiler, root, this ) ;^281^^^^^277^282^[REPLACE] NodeTraversal.traverse ( compiler, root, callbacks ) ;^[METHOD] checkRanges [TYPE] void [PARAMETER] CombinedLiveRangeChecker> rangesToCheck Node root [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node root  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  CombinedCfgNodeLiveRangeChecker callbacks  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  (   n    )  {^301^^^^^300^306^[REPLACE] if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ;^302^^^^^300^306^[REPLACE] for  ( CombinedLiveRangeChecker callback : callbacks )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^302^303^304^^^300^306^[ADD] for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return   n   ;^332^^^^^331^333^[REPLACE] return LiveRangeChecker.shouldVisit ( n ) ;^[METHOD] shouldVisit [TYPE] boolean [PARAMETER] Node n [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^callback1.isAssignTo ( t, n, parent ) ;^337^^^^^336^339^[REPLACE] callback1.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^callback2.visit ( t, parent, parent ) ;^338^^^^^336^339^[REPLACE] callback2.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( callback1.crossed ) {^342^^^^^341^347^[REPLACE] if  ( callback1.crossed || callback2.crossed )  {^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  UndiGraph interferenceGraph  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Var v2 = callback2.getDef (  ) ;^343^^^^^341^347^[REPLACE] Var v1 = callback1.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  UndiGraph interferenceGraph  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Var v2 = callback2 .isReadFrom ( var , false )  ;^344^^^^^341^347^[REPLACE] Var v2 = callback2.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  UndiGraph interferenceGraph  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Var v1 = callback1 .isReadFrom ( v1 , true )  ;^343^^^^^341^347^[REPLACE] Var v1 = callback1.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  UndiGraph interferenceGraph  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^343^^^^^341^347^[ADD] Var v1 = callback1.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  UndiGraph interferenceGraph  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Var v2 = callback2 .isReadFrom ( v , null )  ;^344^^^^^341^347^[REPLACE] Var v2 = callback2.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  UndiGraph interferenceGraph  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node var = var.getParent (  ) ;^355^^^^^354^386^[REPLACE] Node var = name.getParent (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node parent = value.getParent (  ) ;^356^^^^^354^386^[REPLACE] Node parent = var.getParent (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  )  {^359^^^^^354^386^[REPLACE] if  ( NodeUtil.isForIn ( parent )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^} else if  ( var.getChildCount (  )   ||  1 )  {^362^^^^^354^386^[REPLACE] } else if  ( var.getChildCount (  )  == 1 )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^}   Node value = name.removeFirstChild (  ) ;var.removeChild ( name ) ;^362^363^364^365^366^354^386^[ADD] else if  ( var.getChildCount (  )  == 1 )  {  if  ( name.hasChildren (  )  )  { Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( !name.setString (  )  )  {^381^^^^^362^385^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var .removeChild ( value , assign )  ;^382^^^^^362^385^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^382^^^^^362^385^[ADD] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( !name.hasChildren (  )  )  {^364^^^^^354^386^[REPLACE] if  ( name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeUtil.removeChild ( parent, value ) ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.getType (  )   ==  Token.FOR )  {^370^^^^^354^386^[REPLACE] if  ( parent.getType (  )  != Token.FOR )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^assign =  NodeUtil.newExpr ( null ) ;^371^^^^^354^386^[REPLACE] assign = NodeUtil.newExpr ( assign ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node value = var.getFirstChild (  ) ;^365^^^^^354^386^[REPLACE] Node value = name.removeFirstChild (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node assign = new Node ( Token.ASSIGN, name, var ) ;^367^^^^^354^386^[REPLACE] Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^367^^^^^354^386^[ADD] Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^371^^^^^354^386^[ADD] assign = NodeUtil.newExpr ( assign ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node value = var.removeFirstChild (  ) ;^365^^^^^354^386^[REPLACE] Node value = name.removeFirstChild (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^364^365^366^367^^354^386^[ADD] if  ( name.hasChildren (  )  )  { Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ; Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeUtil.removeChild ( value, var ) ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.setString (  )   ==  Token.FOR )  {^370^^^^^354^386^[REPLACE] if  ( parent.getType (  )  != Token.FOR )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node assign = new Node ( Token.ASSIGN, var, value ) ;^367^^^^^354^386^[REPLACE] Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( !name.setString (  )  )  {^381^^^^^354^386^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var .removeChild ( assign , var )  ;^382^^^^^354^386^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^382^^^^^354^386^[ADD] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var .removeChild ( name , var )  ;^360^^^^^354^386^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.removeChild ( name ) ;^361^^^^^354^386^[REPLACE] parent.replaceChild ( var, name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  else {^362^^^^^354^386^[REPLACE] } else if  ( var.getChildCount (  )  == 1 )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( name.hasChildren (  )  )  {^381^^^^^362^385^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.setString ( name ) ;^382^^^^^362^385^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^Node value = name.removeFirstChild (  ) ;var.removeChild ( name ) ;Node assign = new Node ( Token.ASSIGN, name, value ) ;^364^365^366^367^^354^386^[ADD] if  ( name.hasChildren (  )  )  { Node value = name.removeFirstChild (  ) ; var.removeChild ( name ) ; Node assign = new Node ( Token.ASSIGN, name, value ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^NodeUtil .removeChild ( name )  ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node value = name .removeChild ( value )  ;^365^^^^^354^386^[REPLACE] Node value = name.removeFirstChild (  ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.removeChild ( name ) ;^378^^^^^364^379^[REPLACE] NodeUtil.removeChild ( parent, var ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^370^371^372^^^354^386^[ADD] if  ( parent.getType (  )  != Token.FOR )  { assign = NodeUtil.newExpr ( assign ) ; }^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( !name .getChildCount (  )   )  {^381^^^^^354^386^[REPLACE] if  ( !name.hasChildren (  )  )  {^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^var.setString ( name ) ;^382^^^^^354^386^[REPLACE] var.removeChild ( name ) ;^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REMOVE]^coloring.color (  ) ;^382^^^^^354^386^[REMOVE] ^[METHOD] removeVarDeclaration [TYPE] void [PARAMETER] Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node assign  name  parent  value  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return v1.index - v2.index;^401^^^^^400^402^[REPLACE] return def;^[METHOD] getDef [TYPE] Var [PARAMETER] [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return   NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^408^409^^^^407^410^[REPLACE] return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[METHOD] shouldVisit [TYPE] boolean [PARAMETER] Node n [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( defFound ) {^414^^^^^413^421^[REPLACE] if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^defFound = true;^414^415^416^^^413^421^[ADD] if  ( !defFound && isAssignTo ( def, n, parent )  )  { defFound = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^defFound = false;^415^^^^^413^421^[REPLACE] defFound = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  (  isReadFrom ( use, n )  )  )  {^418^^^^^413^421^[REPLACE] if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^crossed = false;^419^^^^^413^421^[REPLACE] crossed = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  NodeTraversal t  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( NodeUtil.isName ( n )  && var.equals (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^[REPLACE] if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name .setString (  )   )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^Node parentame = n.getFirstChild (  ) ;^437^^^^^423^442^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.getType (  )   &&  Token.LP )  {^426^^^^^423^442^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  else {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return n.getChildCount (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return false;^428^^^^^423^442^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  if  ( NodeUtil .isName ( name )   )  {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return parent.getChildCount (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return true;^434^^^^^423^442^[REPLACE] return false;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^if  ( parent.getType (  )   ||  Token.LP )  {^426^^^^^423^442^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^}   return n.hasChildren (  ) ;^429^430^^432^433^423^442^[ADD] else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^}  if  ( NodeUtil.isVar ( parent )  )  {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return parentame != null && NodeUtil.isName ( name )  && var.equals (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[ADD]^^437^^^^^423^442^[ADD] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node n  name  parent  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return name != false && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isVar ( name, name.getParent (  )  ) ;^445^446^447^^^444^448^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[METHOD] isReadFrom [TYPE] boolean [PARAMETER] Var var Node name [CLASS] CoalesceVariableNames 1 CombinedCfgNodeLiveRangeChecker CombinedLiveRangeChecker LiveRangeChecker   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean crossed  defFound  false  true  usePseudoNames  v1OutLive  v2OutLive  [TYPE]  Var coalescedVar  def  iVar  use  v  v1  v2  var  [TYPE]  Node name  [TYPE]  ArrayList callbacks  rangesToCheck  [TYPE]  LiveRangeChecker callback1  callback2  checker1  checker2  [TYPE]  Deque colorings  [TYPE]  Comparator coloringTieBreaker 
[REPLACE]^return v1.index  ||  v2.index;^71^^^^^70^72^[REPLACE] return v1.index - v2.index;^[METHOD] compare [TYPE] int [PARAMETER] Var v1 Var v2 [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^this.callbacks =  null;^296^^^^^294^297^[REPLACE] this.callbacks = callbacks;^[METHOD] <init> [TYPE] ArrayList) [PARAMETER] CombinedLiveRangeChecker> callbacks [CLASS] CombinedCfgNodeLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true 
[REPLACE]^if  (   n    )  {^301^^^^^300^306^[REPLACE] if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedCfgNodeLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^301^302^303^304^^300^306^[ADD] if  ( CombinedLiveRangeChecker.shouldVisit ( n )  )  { for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedCfgNodeLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ;^302^^^^^300^306^[REPLACE] for  ( CombinedLiveRangeChecker callback : callbacks )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedCfgNodeLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^302^303^304^^^300^306^[ADD] for  ( CombinedLiveRangeChecker callback : callbacks )  { callback.visit ( t, n, parent ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedCfgNodeLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^private  LiveRangeChecker callback1;^317^^^^^^^[REPLACE] private final LiveRangeChecker callback1;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^private  LiveRangeChecker callback2;^318^^^^^^^[REPLACE] private final LiveRangeChecker callback2;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedLiveRangeChecker   [TYPE]  ArrayList callbacks  [TYPE]  boolean false  true  [TYPE]  CombinedLiveRangeChecker callback  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^this.callback2 = callback2; ;^323^^^^^320^325^[REPLACE] this.callback1 = callback1;^[METHOD] <init> [TYPE] CoalesceVariableNames$LiveRangeChecker) [PARAMETER] LiveRangeChecker callback1 LiveRangeChecker callback2 [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  boolean false  true 
[REPLACE]^this.callback1 = callback1; ;^324^^^^^320^325^[REPLACE] this.callback2 = callback2;^[METHOD] <init> [TYPE] CoalesceVariableNames$LiveRangeChecker) [PARAMETER] LiveRangeChecker callback1 LiveRangeChecker callback2 [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  boolean false  true 
[REPLACE]^return   n   ;^332^^^^^331^333^[REPLACE] return LiveRangeChecker.shouldVisit ( n ) ;^[METHOD] shouldVisit [TYPE] boolean [PARAMETER] Node n [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  Node n  [TYPE]  boolean false  true 
[REPLACE]^callback2.visit ( t, n, parent ) ;^337^^^^^336^339^[REPLACE] callback1.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^callback2.visit ( t, parent, parent ) ;^338^^^^^336^339^[REPLACE] callback2.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[ADD]^^338^^^^^336^339^[ADD] callback2.visit ( t, n, parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node n  parent 
[REPLACE]^if  ( callback1.crossed ) {^342^^^^^341^347^[REPLACE] if  ( callback1.crossed || callback2.crossed )  {^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^Var v1 = callback1 .shouldVisit ( null )  ;^343^^^^^341^347^[REPLACE] Var v1 = callback1.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^Var v1 = callback1.getDef (  ) ;^344^^^^^341^347^[REPLACE] Var v2 = callback2.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[ADD]^^343^344^^^^341^347^[ADD] Var v1 = callback1.getDef (  ) ; Var v2 = callback2.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[ADD]^^344^^^^^341^347^[ADD] Var v2 = callback2.getDef (  ) ;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] CombinedLiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^boolean defFound ;^390^^^^^^^[REPLACE] boolean defFound = false;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] LiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^boolean crossed ;^391^^^^^^^[REPLACE] boolean crossed = false;^[METHOD] connectIfCrossed [TYPE] void [PARAMETER] Void> interferenceGraph [CLASS] LiveRangeChecker   [TYPE]  LiveRangeChecker callback1  callback2  [TYPE]  UndiGraph interferenceGraph  [TYPE]  boolean false  true  [TYPE]  Var v1  v2 
[REPLACE]^this.def =  null;^396^^^^^395^398^[REPLACE] this.def = def;^[METHOD] <init> [TYPE] Var) [PARAMETER] Var def Var use [CLASS] LiveRangeChecker   [TYPE]  Var def  use  [TYPE]  boolean crossed  defFound  false  true 
[ADD]^^396^397^^^^395^398^[ADD] this.def = def; this.use = use;^[METHOD] <init> [TYPE] Var) [PARAMETER] Var def Var use [CLASS] LiveRangeChecker   [TYPE]  Var def  use  [TYPE]  boolean crossed  defFound  false  true 
[REPLACE]^this.use =  null;^397^^^^^395^398^[REPLACE] this.use = use;^[METHOD] <init> [TYPE] Var) [PARAMETER] Var def Var use [CLASS] LiveRangeChecker   [TYPE]  Var def  use  [TYPE]  boolean crossed  defFound  false  true 
[REPLACE]^return false;^401^^^^^400^402^[REPLACE] return def;^[METHOD] getDef [TYPE] Var [PARAMETER] [CLASS] LiveRangeChecker   [TYPE]  Var def  use  [TYPE]  boolean crossed  defFound  false  true 
[REPLACE]^return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getString (  )  )  )  ) ;^408^409^^^^407^410^[REPLACE] return  ( NodeUtil.isName ( n ) ||  ( n.hasChildren (  )  && NodeUtil.isName ( n.getFirstChild (  )  )  )  ) ;^[METHOD] shouldVisit [TYPE] boolean [PARAMETER] Node n [CLASS] LiveRangeChecker   [TYPE]  Var def  use  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n 
[REPLACE]^if  ( defFound && isAssignTo ( def, n, parent )  )  {^414^^^^^413^421^[REPLACE] if  ( !defFound && isAssignTo ( def, n, parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  boolean crossed  defFound  false  true  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  [TYPE]  Node n  parent 
[REPLACE]^defFound = false;^415^^^^^413^421^[REPLACE] defFound = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  boolean crossed  defFound  false  true  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  [TYPE]  Node n  parent 
[REPLACE]^if  (  isReadFrom ( use, parent )  )  )  {^418^^^^^413^421^[REPLACE] if  ( defFound &&  ( use == null || isReadFrom ( use, n )  )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  boolean crossed  defFound  false  true  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  [TYPE]  Node n  parent 
[REPLACE]^crossed = false;^419^^^^^413^421^[REPLACE] crossed = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  boolean crossed  defFound  false  true  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  [TYPE]  Node n  parent 
[ADD]^^419^^^^^413^421^[ADD] crossed = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  boolean crossed  defFound  false  true  [TYPE]  NodeTraversal t  [TYPE]  Var def  use  [TYPE]  Node n  parent 
[REPLACE]^if  (  var.getName (  ) .equals ( n.getString (  )  )  && parent == null )  {^424^425^^^^423^442^[REPLACE] if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[ADD]^^424^425^426^^428^423^442^[ADD] if  ( NodeUtil.isName ( n )  && var.getName (  ) .equals ( n.getString (  )  )  && parent != null )  { if  ( parent.getType (  )  == Token.LP )  { return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return name != null ;;^438^439^440^^^423^442^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^Node name = n.getString (  ) ;^437^^^^^423^442^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^if  ( parent.getType (  )   ||  Token.LP )  {^426^^^^^423^442^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[ADD]^^426^427^428^429^^423^442^[ADD] if  ( parent.getType (  )  == Token.LP )  {  return true; } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^}  else {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return n.getParent (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return false;^428^^^^^423^442^[REPLACE] return true;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[ADD]^}   return n.hasChildren (  ) ;^429^430^^432^433^423^442^[ADD] else if  ( NodeUtil.isVar ( parent )  )  {  return n.hasChildren (  ) ; }^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return true;^434^^^^^423^442^[REPLACE] return false;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^if  ( parent .getString (  )    &&  Token.LP )  {^426^^^^^423^442^[REPLACE] if  ( parent.getType (  )  == Token.LP )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^} else if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return parent.getParent (  ) ;^432^^^^^423^442^[REPLACE] return n.hasChildren (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^}  if  ( NodeUtil.isVar ( name )  )  {^429^^^^^423^442^[REPLACE] } else if  ( NodeUtil.isVar ( parent )  )  {^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getParent (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^438^439^440^^^423^442^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && NodeUtil.isAssignmentOp ( n ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^Node parentame = n.getFirstChild (  ) ;^437^^^^^423^442^[REPLACE] Node name = n.getFirstChild (  ) ;^[METHOD] isAssignTo [TYPE] boolean [PARAMETER] Var var Node n Node parent [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node n  name  parent 
[REPLACE]^return true ;^445^446^447^^^444^448^[REPLACE] return name != null && NodeUtil.isName ( name )  && var.getName (  ) .equals ( name.getString (  )  )  && !NodeUtil.isLhs ( name, name.getParent (  )  ) ;^[METHOD] isReadFrom [TYPE] boolean [PARAMETER] Var var Node name [CLASS] LiveRangeChecker   [TYPE]  Var def  use  var  [TYPE]  boolean crossed  defFound  false  true  [TYPE]  Node name 
