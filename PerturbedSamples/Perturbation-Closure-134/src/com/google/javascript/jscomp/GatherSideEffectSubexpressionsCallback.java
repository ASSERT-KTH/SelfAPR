[REPLACE]^private  List<Node> replacements;^89^^^^^^^[REPLACE] private final List<Node> replacements;^ [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  
[REPLACE]^private static final Set<Integer> FORBIDDEN_TYPES  = null ;^183^184^^^^183^184^[REPLACE] private static final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of ( Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN ) ;^ [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions  
[REPLACE]^this.compiler =  null;^99^^^^^97^101^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] List) [PARAMETER] AbstractCompiler compiler Node> replacements [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator 
[REPLACE]^this.replacements =  true;^100^^^^^97^101^[REPLACE] this.replacements = replacements;^[METHOD] <init> [TYPE] List) [PARAMETER] AbstractCompiler compiler Node> replacements [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator 
[REPLACE]^this.compiler =  null;^195^^^^^193^197^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] GatherSideEffectSubexpressionsCallback$SideEffectAccumulator) [PARAMETER] AbstractCompiler compiler SideEffectAccumulator accumulator [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator 
[REPLACE]^this.accumulator =  null;^196^^^^^193^197^[REPLACE] this.accumulator = accumulator;^[METHOD] <init> [TYPE] GatherSideEffectSubexpressionsCallback$SideEffectAccumulator) [PARAMETER] AbstractCompiler compiler SideEffectAccumulator accumulator [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator 
[ADD]^^196^^^^^193^197^[ADD] this.accumulator = accumulator;^[METHOD] <init> [TYPE] GatherSideEffectSubexpressionsCallback$SideEffectAccumulator) [PARAMETER] AbstractCompiler compiler SideEffectAccumulator accumulator [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator 
[REPLACE]^return false;^105^^^^^104^106^[REPLACE] return true;^[METHOD] classDefiningCallsHaveSideEffects [TYPE] boolean [PARAMETER] [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator 
[REPLACE]^replacements.add ( original .cloneNode (  )   ) ;^110^^^^^109^111^[REPLACE] replacements.add ( original.cloneTree (  )  ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node original 
[REMOVE]^Node elseBranch = ifBranch.getNext (  ) ;^110^^^^^109^111^[REMOVE] ^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node original 
[REPLACE]^Preconditions.checkArgument ( ( original.addChildToBack (  )  == Token.AND )  &&  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^115^116^117^^^114^126^[REPLACE] Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^^115^116^117^^^114^126^[ADD] Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^( simplifiedRight.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^[REPLACE] ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^^116^117^^^^114^126^[ADD] ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^( simplifiedRight.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^[REPLACE] ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getType (  )  )  ) ;^117^^^^^114^126^[REPLACE] "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getNext (  )  )  ) ;^117^^^^^114^126^[REPLACE] "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node left = simplifiedRight.getType (  ) ;^118^^^^^114^126^[REPLACE] Node left = original.getFirstChild (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node right = simplifiedRight.getNext (  ) ;^119^^^^^114^126^[REPLACE] Node right = left.getNext (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^119^120^^^^114^126^[ADD] Node right = left.getNext (  ) ; Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node simplifiedRight = simplifyShortCircuitBranch ( simplifiedRight ) ;^120^^^^^114^126^[REPLACE] Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node simplified = original.cloneTree (  ) ;^122^^^^^114^126^[REPLACE] Node simplified = original.cloneNode (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^simplified.addChildToBack ( left.cloneNode (  )  ) ;^123^^^^^114^126^[REPLACE] simplified.addChildToBack ( left.cloneTree (  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^simplified.addChildToBack ( simplifiedRight.cloneTree (  )  ) ;^123^^^^^114^126^[REPLACE] simplified.addChildToBack ( left.cloneTree (  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^simplified.addChildToBack ( simplifiedRight ) ;replacements.add ( simplified ) ;^123^124^125^126^^114^126^[ADD] simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^simplified.addChildToBack ( rightRight ) ;^124^^^^^114^126^[REPLACE] simplified.addChildToBack ( simplifiedRight ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^replacements.add ( simplifiedRight ) ;^125^^^^^114^126^[REPLACE] replacements.add ( simplified ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^^125^126^^^^114^126^[ADD] replacements.add ( simplified ) ; }^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Preconditions.checkArgument ( hook.getType (  )   &&  Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^[REPLACE] Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^133^134^^^^129^154^[REPLACE] hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^134^^^^^129^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node condition = thenBranch.getFirstChild (  ) ;^135^^^^^129^154^[REPLACE] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node thenBranch = thenBranch.getNext (  ) ;^136^^^^^129^154^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node elseBranch = hook.getType (  ) ;^137^^^^^129^154^[REPLACE] Node elseBranch = thenBranch.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^if  (   else {^138^^^^^129^154^[REPLACE] if  ( thenHasSideEffects && elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^}  if  ( thenHasSideEffects && HasSideEffects )  {^144^^^^^129^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ; ;^151^152^^^^129^154^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^151^152^^^^129^154^[ADD] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^int type = true ? Token.AND : Token.OR;^145^^^^^129^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node body = thenHasSideEffects ? hook : elseBranch;^146^^^^^129^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;replacements.add ( simplified ) ;^147^148^149^150^151^129^154^[ADD] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ; } else { throw new IllegalArgumentException (^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^Node body = thenHasSideEffects ? thenBranch : elseBranch;^145^146^^^^129^154^[ADD] int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^146^147^148^149^^129^154^[ADD] Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^return ;^151^152^^^^129^154^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node simplified = hook.cloneTree (  ) ;^139^^^^^129^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^} else if  (  elseHasSideEffects )  {^144^^^^^129^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^}   Node body = thenHasSideEffects ? thenBranch : elseBranch;type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^144^145^146^147^148^129^154^[ADD] else if  ( thenHasSideEffects || elseHasSideEffects )  { int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node body = thenHasSideEffects ? thenBranch : elseBranch;^145^^^^^129^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[ADD]^^145^146^^^^129^154^[ADD] int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node body = true ? thenBranch : elseBranch;^146^^^^^129^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^129^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch  [TYPE]  List replacements  [TYPE]  int type 
[REPLACE]^Node right = left.getNext (  ) ;^157^^^^^156^180^[REPLACE] List<Node> parts = Lists.newArrayList (  ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^158^159^160^^^156^180^[ADD] NodeTraversal.traverse ( compiler, node, new GatherSideEffectSubexpressionsCallback (^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^Node ret = false;^164^^^^^156^180^[REPLACE] Node ret = null;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^164^^^^^156^180^[ADD] Node ret = null;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret == null )  {^166^^^^^156^180^[REPLACE] if  ( ret != null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  null;^169^^^^^156^180^[REPLACE] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^[REPLACE] ret = new Node ( Token.COMMA, ret, part ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^169^^^^^156^180^[ADD] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^for  ( Node part : parts )  { if  ( ret != null )  {^165^^^^^156^180^[REPLACE] for  ( Node part : parts )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^165^166^167^168^169^156^180^[ADD] for  ( Node part : parts )  { if  ( ret != null )  { ret = new Node ( Token.COMMA, ret, part ) ; } else { ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret != true )  {^173^^^^^156^180^[REPLACE] if  ( ret == null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^return ;^174^175^176^^^156^180^[REPLACE] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[ADD]^^174^175^176^^^156^180^[ADD] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^return part;^179^^^^^156^180^[REPLACE] return ret;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node  part  ret 
[REPLACE]^return classes ;^206^^^^^203^207^[REPLACE] return classes != null;^[METHOD] isClassDefiningCall [TYPE] boolean [PARAMETER] Node callNode [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node callNode  [TYPE]  List parts  replacements  [TYPE]  SubclassRelationship classes 
[REPLACE]^if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  && NodeUtil.isControlStructure ( node )  )  {^224^225^^^^223^260^[REPLACE] if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^224^225^226^227^228^223^260^[ADD] if  ( FORBIDDEN_TYPES.contains ( node.getType (  )  )  || NodeUtil.isControlStructure ( node )  )  { throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ; ;^226^227^^^^224^228^[REPLACE] throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^Token.name ( node.getNext (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^[REPLACE] Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^227^^^^^224^228^[ADD] Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^Token.name ( parent.getNext (  )  )  + " nodes are not supported." ) ;^227^^^^^224^228^[REPLACE] Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return ;^226^227^^^^223^260^[REPLACE] throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^226^227^^^^223^260^[ADD] throw new IllegalArgumentException ( Token.name ( node.getType (  )  )  + " nodes are not supported." ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.getType (  )   !=  Token.FUNCTION )  {^231^^^^^223^260^[REPLACE] if  ( node.getType (  )  == Token.FUNCTION )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^232^^^^^223^260^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.addChildToBack (  )   ||  Token.HOOK )  {^236^^^^^223^260^[REPLACE] if  ( node.getType (  )  == Token.HOOK )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processHook ( parent ) ;^237^^^^^223^260^[REPLACE] return processHook ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  (  ( parent.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR )  )  {^241^^^^^223^260^[REPLACE] if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^return processShortCircuitExpression ( node ) ;^241^242^243^^^223^260^[ADD] if  (  ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR )  )  { return processShortCircuitExpression ( node ) ; }^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processShortCircuitExpression ( parent ) ;^242^^^^^223^260^[REPLACE] return processShortCircuitExpression ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( NodeUtil.nodeTypeMayHaveSideEffects ( parent )  )  {^245^^^^^223^260^[REPLACE] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^245^246^247^^^223^260^[ADD] if  ( !NodeUtil.nodeTypeMayHaveSideEffects ( node )  )  { return true; } else {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.getType (  )   !=  Token.CALL )  {^251^^^^^245^259^[REPLACE] if  ( node.getType (  )  == Token.CALL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^^251^252^253^254^^245^259^[ADD] if  ( node.getType (  )  == Token.CALL )  { return processFunctionCall ( node ) ; } else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.NEW )  {^253^^^^^245^259^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^257^^^^^245^259^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processConstructorCall ( parent ) ;^254^^^^^245^259^[REPLACE] return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processFunctionCall ( parent ) ;^252^^^^^245^259^[REPLACE] return processFunctionCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^}  if  ( node.getType (  )   !=  Token.NEW )  {^253^^^^^245^259^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REMOVE]^if  (  ( node.getType (  )  )  ==  ( FUNCTION )  )  {     return false; }^253^^^^^245^259^[REMOVE] ^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processShortCircuitExpression ( node ) ;^252^^^^^245^259^[REPLACE] return processFunctionCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return false;^246^^^^^223^260^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^if  ( node.getType (  )   &&  Token.CALL )  {^251^^^^^223^260^[REPLACE] if  ( node.getType (  )  == Token.CALL )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REMOVE]^if  ( ! ( nodeTypeMayHaveSideEffects ( node )  )  )  {     return true; }else {     if  (  ( node.getType (  )  )  ==  ( CALL )  )  {         return processFunctionCall ( node ) ;     }else         if  (  ( node.getType (  )  )  ==  ( NEW )  )  {             return processConstructorCall ( node ) ;         }else {             accumulator.keepSubTree ( node ) ;             return false;         }      }^251^^^^^223^260^[REMOVE] ^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^} else if  ( node.getType (  )   &&  Token.NEW )  {^253^^^^^223^260^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[ADD]^}   return processConstructorCall ( node ) ;accumulator.keepSubTree ( node ) ;return false;^253^254^255^256^257^223^260^[ADD] else if  ( node.getType (  )  == Token.NEW )  { return processConstructorCall ( node ) ; } else { accumulator.keepSubTree ( node ) ; return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^257^^^^^253^258^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processConstructorCall ( parent ) ;^254^^^^^223^260^[REPLACE] return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processShortCircuitExpression ( node ) ;^254^^^^^223^260^[REPLACE] return processConstructorCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return true;^257^^^^^223^260^[REPLACE] return false;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^return processFunctionCall ( parent ) ;^252^^^^^223^260^[REPLACE] return processFunctionCall ( node ) ;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^} else if  ( node.addChildToBack (  )   &&  Token.NEW )  {^253^^^^^223^260^[REPLACE] } else if  ( node.getType (  )  == Token.NEW )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  &&  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^268^269^270^^^267^282^[REPLACE] Preconditions.checkArgument ( ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^( node.addChildToBack (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^269^270^^^^267^282^[REPLACE] ( node.getType (  )  == Token.AND )  ||  ( node.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^"Expected: AND or OR, Got: " +   node.getType (  )   ) ;^270^^^^^267^282^[REPLACE] "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^"Expected: AND or OR, Got: " + Token.name ( node.getNext (  )  )  ) ;^270^^^^^267^282^[REPLACE] "Expected: AND or OR, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^Node left = node .getType (  )  ;^274^^^^^267^282^[REPLACE] Node left = node.getFirstChild (  ) ;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^Node right = right.getType (  ) ;^275^^^^^267^282^[REPLACE] Node right = left.getNext (  ) ;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^if  ( NodeUtil.mayHaveSideEffects ( left )  )  {^276^^^^^267^282^[REPLACE] if  ( NodeUtil.mayHaveSideEffects ( right )  )  {^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^return false;^280^^^^^267^282^[REPLACE] return true;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^return true;^278^^^^^267^282^[REPLACE] return false;^[METHOD] processShortCircuitExpression [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node left  node  right 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   ||  Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^290^291^292^^^289^306^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( elseBranch.getType (  )  )  ) ;^291^292^^^^289^306^[REPLACE] node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^^291^292^^^^289^306^[ADD] node.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^"Expected: HOOK, Got: " +   elseBranch.getType (  )   ) ;^292^^^^^289^306^[REPLACE] "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^"Expected: HOOK, Got: " + Token.name ( elseBranch.getType (  )  )  ) ;^292^^^^^289^306^[REPLACE] "Expected: HOOK, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REMOVE]^( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^292^^^^^289^306^[REMOVE] ^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Node condition = elseBranch.getFirstChild (  ) ;^294^^^^^289^306^[REPLACE] Node condition = node.getFirstChild (  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Node ifBranch = node .getType (  )  ;^295^^^^^289^306^[REPLACE] Node ifBranch = condition.getNext (  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^^295^296^297^298^^289^306^[ADD] Node ifBranch = condition.getNext (  ) ; Node elseBranch = ifBranch.getNext (  ) ; boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ; boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Node elseBranch = elseBranch.getType (  ) ;^296^^^^^289^306^[REPLACE] Node elseBranch = ifBranch.getNext (  ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^^296^297^298^299^300^289^306^[ADD] Node elseBranch = ifBranch.getNext (  ) ; boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ; boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ; if  ( thenHasSideEffects || elseHasSideEffects )  { accumulator.keepSimplifiedHookExpression (^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^297^^^^^289^306^[REPLACE] boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[ADD]^^297^298^299^300^301^289^306^[ADD] boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects ( ifBranch ) ; boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ; if  ( thenHasSideEffects || elseHasSideEffects )  { accumulator.keepSimplifiedHookExpression ( node, thenHasSideEffects, elseHasSideEffects ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( node ) ;^298^^^^^289^306^[REPLACE] boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects ( elseBranch ) ;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^if  ( true && true )  { else {^299^^^^^289^306^[REPLACE] if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^return false;^304^^^^^289^306^[REPLACE] return true;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^return true;^302^^^^^289^306^[REPLACE] return false;^[METHOD] processHook [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node condition  elseBranch  ifBranch  node 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   &&  Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^314^315^316^^^313^334^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^node.addChildToBack (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^315^316^^^^313^334^[REPLACE] node.getType (  )  == Token.CALL, "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^"Expected: CALL, Got: " + Token.name ( functionName.getType (  )  )  ) ;^316^^^^^313^334^[REPLACE] "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^"Expected: CALL, Got: " + Token.name ( node .getNext (  )   )  ) ;^316^^^^^313^334^[REPLACE] "Expected: CALL, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^Node functionName = functionName.getFirstChild (  ) ;^320^^^^^313^334^[REPLACE] Node functionName = node.getFirstChild (  ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( NodeUtil.isGetProp ( functionName )  ) {^321^^^^^313^334^[REPLACE] if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[ADD]^^321^322^323^324^325^313^334^[ADD] if  ( NodeUtil.isName ( functionName )  || NodeUtil.isGetProp ( functionName )  )  { if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  { return true; }^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  (  isClassDefiningCall ( node )  )  {^322^323^^^^313^334^[REPLACE] if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return false;^324^^^^^313^334^[REPLACE] return true;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( accumulator.classDefiningCallsHaveSideEffects (  )  ) {^322^323^^^^313^334^[REPLACE] if  ( !accumulator.classDefiningCallsHaveSideEffects (  )  && isClassDefiningCall ( node )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^if  ( !NodeUtil.constructorCallHasSideEffects ( functionName )  )  {^328^^^^^313^334^[REPLACE] if  ( !NodeUtil.functionCallHasSideEffects ( node )  )  {^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return false;^329^^^^^313^334^[REPLACE] return true;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^accumulator .CopySideEffectSubexpressions ( compiler , null )  ;^332^^^^^313^334^[REPLACE] accumulator.keepSubTree ( node ) ;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^return true;^333^^^^^313^334^[REPLACE] return false;^[METHOD] processFunctionCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node functionName  node 
[REPLACE]^Preconditions.checkArgument ( node.getType (  )   !=  Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^342^343^344^^^341^354^[REPLACE] Preconditions.checkArgument ( node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^node .getNext (  )   == Token.NEW, "Expected: NEW, Got: " + Token.name ( node^343^344^^^^341^354^[REPLACE] node.getType (  )  == Token.NEW, "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^"Expected: NEW, Got: " + Token.name ( node .getNext (  )   )  ) ;^344^^^^^341^354^[REPLACE] "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[ADD]^^344^^^^^341^354^[ADD] "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^"Expected: NEW, Got: " + Token.name ( node.getNext (  )  )  ) ;^344^^^^^341^354^[REPLACE] "Expected: NEW, Got: " + Token.name ( node.getType (  )  )  ) ;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^if  ( !NodeUtil .functionCallHasSideEffects ( node )   )  {^348^^^^^341^354^[REPLACE] if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  {^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[ADD]^return true;^348^349^350^^^341^354^[ADD] if  ( !NodeUtil.constructorCallHasSideEffects ( node )  )  { return true; }^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^return false;^349^^^^^341^354^[REPLACE] return true;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^accumulator.keepSimplifiedShortCircuitExpression ( node ) ;^352^^^^^341^354^[REPLACE] accumulator.keepSubTree ( node ) ;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^return true;^353^^^^^341^354^[REPLACE] return false;^[METHOD] processConstructorCall [TYPE] boolean [PARAMETER] Node node [CLASS] GatherSideEffectSubexpressionsCallback CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  Node node 
[REPLACE]^private  AbstractCompiler compiler;^88^^^^^^^[REPLACE] private final AbstractCompiler compiler;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^private  List<Node> replacements;^89^^^^^^^[REPLACE] private final List<Node> replacements;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  Set FORBIDDEN_TYPES  [TYPE]  boolean false  true  [TYPE]  SideEffectAccumulator accumulator  [TYPE]  NodeTraversal traversal  [TYPE]  Node node  parent  [TYPE]  List parts  replacements 
[REPLACE]^this.compiler =  null;^99^^^^^97^101^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] List) [PARAMETER] AbstractCompiler compiler Node> replacements [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true 
[ADD]^^99^^^^^97^101^[ADD] this.compiler = compiler;^[METHOD] <init> [TYPE] List) [PARAMETER] AbstractCompiler compiler Node> replacements [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true 
[REPLACE]^this.replacements =  null;^100^^^^^97^101^[REPLACE] this.replacements = replacements;^[METHOD] <init> [TYPE] List) [PARAMETER] AbstractCompiler compiler Node> replacements [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true 
[REPLACE]^return false;^105^^^^^104^106^[REPLACE] return true;^[METHOD] classDefiningCallsHaveSideEffects [TYPE] boolean [PARAMETER] [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true 
[REPLACE]^replacements.add ( original.cloneNode (  )  ) ;^110^^^^^109^111^[REPLACE] replacements.add ( original.cloneTree (  )  ) ;^[METHOD] keepSubTree [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node original 
[REPLACE]^Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ;^115^116^117^^^114^126^[REPLACE] Preconditions.checkArgument ( ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^( simplifiedRight.addChildToBack (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^116^117^^^^114^126^[REPLACE] ( original.getType (  )  == Token.AND )  ||  ( original.getType (  )  == Token.OR ) , "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^"Expected: AND or OR, Got: " + Token.name ( simplifiedRight.getType (  )  )  ) ;^117^^^^^114^126^[REPLACE] "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^^117^118^^^^114^126^[ADD] "Expected: AND or OR, Got: " + Token.name ( original.getType (  )  )  ) ; Node left = original.getFirstChild (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node left = simplifiedRight.getType (  ) ;^118^^^^^114^126^[REPLACE] Node left = original.getFirstChild (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node right = left.getType (  ) ;^119^^^^^114^126^[REPLACE] Node right = left.getNext (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^^119^120^^^^114^126^[ADD] Node right = left.getNext (  ) ; Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node simplifiedRight = simplifyShortCircuitBranch ( simplifiedRight ) ;^120^^^^^114^126^[REPLACE] Node simplifiedRight = simplifyShortCircuitBranch ( right ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Node simplified = simplifiedRight.cloneNode (  ) ;^122^^^^^114^126^[REPLACE] Node simplified = original.cloneNode (  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^simplified.addChildToBack ( left.cloneTree (  )  ) ;simplified.addChildToBack ( simplifiedRight ) ;replacements.add ( simplified ) ;^122^123^124^125^126^114^126^[ADD] Node simplified = original.cloneNode (  ) ; simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^simplified .cloneTree (  )  ;^123^^^^^114^126^[REPLACE] simplified.addChildToBack ( left.cloneTree (  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^simplified.addChildToBack ( simplifiedRight.cloneTree (  )  ) ;^123^^^^^114^126^[REPLACE] simplified.addChildToBack ( left.cloneTree (  )  ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[ADD]^^123^124^125^126^^114^126^[ADD] simplified.addChildToBack ( left.cloneTree (  )  ) ; simplified.addChildToBack ( simplifiedRight ) ; replacements.add ( simplified ) ; }^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^simplified.addChildToBack ( right ) ;^124^^^^^114^126^[REPLACE] simplified.addChildToBack ( simplifiedRight ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^replacements.add ( simplifiedRight ) ;^125^^^^^114^126^[REPLACE] replacements.add ( simplified ) ;^[METHOD] keepSimplifiedShortCircuitExpression [TYPE] void [PARAMETER] Node original [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean false  true  [TYPE]  Node left  original  right  simplified  simplifiedRight 
[REPLACE]^Preconditions.checkArgument ( hook.getType (  )   &&  Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^132^133^134^^^129^154^[REPLACE] Preconditions.checkArgument ( hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^hook.addChildToBack (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^133^134^^^^129^154^[REPLACE] hook.getType (  )  == Token.HOOK, "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^"Expected: HOOK, Got: " + Token.name ( thenBranch.getType (  )  )  ) ;^134^^^^^129^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^"Expected: HOOK, Got: " + Token.name ( hook.getNext (  )  )  ) ;^134^^^^^129^154^[REPLACE] "Expected: HOOK, Got: " + Token.name ( hook.getType (  )  )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node condition = thenBranch.getType (  ) ;^135^^^^^129^154^[REPLACE] Node condition = hook.getFirstChild (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^135^136^^^^129^154^[ADD] Node condition = hook.getFirstChild (  ) ; Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node thenBranch = condition.getType (  ) ;^136^^^^^129^154^[REPLACE] Node thenBranch = condition.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node elseBranch = hook.getNext (  ) ;^137^^^^^129^154^[REPLACE] Node elseBranch = thenBranch.getNext (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^if  ( true ) {^138^^^^^129^154^[REPLACE] if  ( thenHasSideEffects && elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^Node simplified = hook.cloneNode (  ) ;simplified.addChildToBack ( condition.cloneTree (  )  ) ;simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ;simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^138^139^140^141^142^129^154^[ADD] if  ( thenHasSideEffects && elseHasSideEffects )  { Node simplified = hook.cloneNode (  ) ; simplified.addChildToBack ( condition.cloneTree (  )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^} else if  (true && elseHasSideEffects )  {^144^^^^^129^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^}   int type = thenHasSideEffects ? Token.AND : Token.OR;Node body = thenHasSideEffects ? thenBranch : elseBranch;type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^144^145^146^147^148^129^154^[ADD] else if  ( thenHasSideEffects || elseHasSideEffects )  { int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch; Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^return ;^151^152^^^^129^154^[REPLACE] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^int type = true ? Token.AND : Token.OR;^145^^^^^129^154^[REPLACE] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^145^^^^^129^154^[ADD] int type = thenHasSideEffects ? Token.AND : Token.OR;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node body = thenHasSideEffects ? hook : elseBranch;^146^^^^^129^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( thenBranch )  ) ;^147^148^^^^129^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^145^146^^^^129^154^[ADD] int type = thenHasSideEffects ? Token.AND : Token.OR; Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node body = true ? thenBranch : elseBranch;^146^^^^^129^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^151^152^^^^129^154^[ADD] throw new IllegalArgumentException ( "keepSimplifiedHookExpression must keep at least 1 branch" ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = thenBranch.cloneTree (  ) ;^139^^^^^129^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^}  if  (  true )  {^144^^^^^129^154^[REPLACE] } else if  ( thenHasSideEffects || elseHasSideEffects )  {^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, thenBranch.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;replacements.add ( simplified ) ;^147^148^149^150^151^129^154^[ADD] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ; replacements.add ( simplified ) ; } else { throw new IllegalArgumentException (^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = thenBranch.cloneNode (  ) ;^139^^^^^129^154^[REPLACE] Node simplified = hook.cloneNode (  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[ADD]^^139^140^141^142^143^129^154^[ADD] Node simplified = hook.cloneNode (  ) ; simplified.addChildToBack ( condition.cloneTree (  )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( thenBranch )  ) ; simplified.addChildToBack ( simplifyShortCircuitBranch ( elseBranch )  ) ; replacements.add ( simplified ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node body = thenHasSideEffects ? thenBranch : body;^146^^^^^129^154^[REPLACE] Node body = thenHasSideEffects ? thenBranch : elseBranch;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node simplified = new Node ( type, condition.cloneNode (  ) , simplifyShortCircuitBranch ( body )  ) ;^147^148^^^^129^154^[REPLACE] Node simplified = new Node ( type, condition.cloneTree (  ) , simplifyShortCircuitBranch ( body )  ) ;^[METHOD] keepSimplifiedHookExpression [TYPE] void [PARAMETER] Node hook boolean thenHasSideEffects boolean elseHasSideEffects [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List replacements  [TYPE]  boolean elseHasSideEffects  false  thenHasSideEffects  true  [TYPE]  int type  [TYPE]  Node body  condition  elseBranch  hook  simplified  thenBranch 
[REPLACE]^Node right = left.getNext (  ) ;^157^^^^^156^180^[REPLACE] List<Node> parts = Lists.newArrayList (  ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^157^^^^^156^180^[ADD] List<Node> parts = Lists.newArrayList (  ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^Node ret = this;^164^^^^^156^180^[REPLACE] Node ret = null;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^if  (part == this )  {^166^^^^^156^180^[REPLACE] if  ( ret != null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  null;^169^^^^^156^180^[REPLACE] ret = part;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^ret =  new Node ( Token.COMMA, part, part ) ;^167^^^^^156^180^[REPLACE] ret = new Node ( Token.COMMA, ret, part ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^for  ( Node part : parts )  { if  ( ret != null )  {^165^^^^^156^180^[REPLACE] for  ( Node part : parts )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^if  ( ret != null )  {^173^^^^^156^180^[REPLACE] if  ( ret == null )  {^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^return ;^174^175^176^^^156^180^[REPLACE] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[ADD]^^174^175^176^^^156^180^[ADD] throw new IllegalArgumentException ( "expected at least one side effect subexpression in short " + "circuit branch." ) ;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
[REPLACE]^return part;^179^^^^^156^180^[REPLACE] return ret;^[METHOD] simplifyShortCircuitBranch [TYPE] Node [PARAMETER] Node node [CLASS] CopySideEffectSubexpressions   [TYPE]  AbstractCompiler compiler  [TYPE]  List parts  replacements  [TYPE]  boolean false  true  [TYPE]  Node node  part  ret 
