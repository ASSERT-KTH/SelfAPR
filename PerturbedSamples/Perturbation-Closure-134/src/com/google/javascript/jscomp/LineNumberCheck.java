[REPLACE]^static  DiagnosticType MISSING_LINE_INFO = DiagnosticType.error ( "JSC_MISSING_LINE_INFO", "No source line associated with {0}" ) ;^31^32^33^^^31^33^[REPLACE] static final DiagnosticType MISSING_LINE_INFO = DiagnosticType.error ( "JSC_MISSING_LINE_INFO", "No source line associated with {0}" ) ;^ [CLASS] LineNumberCheck  
[REPLACE]^private  AbstractCompiler compiler;^35^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] LineNumberCheck  
[REPLACE]^private boolean requiresLineNumbers  = null ;^36^^^^^^^[REPLACE] private boolean requiresLineNumbers = false;^ [CLASS] LineNumberCheck  
[REPLACE]^this.compiler =  null;^39^^^^^38^40^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  DiagnosticType MISSING_LINE_INFO 
[REPLACE]^requiresLineNumbers = true;^43^^^^^42^46^[REPLACE] requiresLineNumbers = false;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node externs  root 
[REPLACE]^if  ( n.getType (  )  == Token.SCRIPT )  { requiresLineNumbers = false;^45^^^^^42^46^[REPLACE] NodeTraversal.traverse ( compiler, root, this ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node externs  root 
[REPLACE]^if  ( n.getType (  )   !=  Token.SCRIPT )  {^51^^^^^48^55^[REPLACE] if  ( n.getType (  )  == Token.SCRIPT )  {^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^requiresLineNumbers = false;^52^^^^^48^55^[REPLACE] requiresLineNumbers = true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^return false;^54^^^^^48^55^[REPLACE] return true;^[METHOD] shouldTraverse [TYPE] boolean [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getType (  )   &&  Token.SCRIPT )  {^58^^^^^57^69^[REPLACE] if  ( n.getType (  )  == Token.SCRIPT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REMOVE]^if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {     compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ; }^58^^^^^57^69^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^}  else {^60^^^^^57^69^[REPLACE] } else if  ( requiresLineNumbers )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getLineno (  )   ||  -1 )  {^61^^^^^57^69^[REPLACE] if  ( n.getLineno (  )  == -1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REMOVE]^if  (  ( n.getType (  )  )  ==  ( SCRIPT )  )  {     requiresLineNumbers = false; }else     if  ( requiresLineNumbers )  {         if  (  ( n.getLineno (  )  )  ==  ( -1 )  )  {             compiler.report ( make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;         }     }^61^^^^^57^69^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^compiler.report ( JSError.make ( t, parent, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^64^65^66^^^57^69^[REPLACE] compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^JSError.make ( t, n, MISSING_LINE_INFO, n.getType (  )  )  ) ;^65^66^^^^57^69^[REPLACE] JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^n .getType (  )   )  ) ;^66^^^^^57^69^[REPLACE] n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^if  ( n.getLineno (  )   &&  -1 )  {^61^^^^^57^69^[REPLACE] if  ( n.getLineno (  )  == -1 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n .getType (  )   )  ) ;^64^65^66^^^57^69^[REPLACE] compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^JSError.make ( t, parent, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^65^66^^^^57^69^[REPLACE] JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^n.getType (  )  )  ) ;^66^^^^^57^69^[REPLACE] n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[ADD]^^66^^^^^57^69^[ADD] n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^requiresLineNumbers = true;^59^^^^^57^69^[REPLACE] requiresLineNumbers = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[ADD]^}^60^61^^^64^57^69^[ADD] else if  ( requiresLineNumbers )  { if  ( n.getLineno (  )  == -1 )  { compiler.report (^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[ADD]^^64^65^66^^^57^69^[ADD] compiler.report ( JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^JSError.make ( t, parent, MISSING_LINE_INFO, n.getType (  )  )  ) ;^65^66^^^^57^69^[REPLACE] JSError.make ( t, n, MISSING_LINE_INFO, n.toStringTree (  )  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
[REPLACE]^requiresLineNumbers = true; ;^59^^^^^57^69^[REPLACE] requiresLineNumbers = false;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] LineNumberCheck   [TYPE]  AbstractCompiler compiler  [TYPE]  boolean false  requiresLineNumbers  true  [TYPE]  NodeTraversal t  [TYPE]  DiagnosticType MISSING_LINE_INFO  [TYPE]  Node n  parent 
