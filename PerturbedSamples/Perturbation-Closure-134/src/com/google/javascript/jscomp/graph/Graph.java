[REPLACE]^private static  long serialVersionUID = 1L;^66^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  
[REPLACE]^private static final long serialVersionUID = 1;^78^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  
[REPLACE]^private List<GraphNode<N, E>> nodes ;^287^^^^^^^[REPLACE] private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^ [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph  
[REPLACE]^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^69^^^^^68^70^[REPLACE] super ( annotatable, annotation ) ;^[METHOD] <init> [TYPE] Annotation) [PARAMETER] Annotatable annotatable Annotation annotation [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Annotatable annotatable  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List nodes  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  Annotation annotation 
[REPLACE]^super ( annotatable, annotation ) ;^81^^^^^80^82^[REPLACE] super ( size ) ;^[METHOD] <init> [TYPE] Graph$GraphAnnotationState(int) [PARAMETER] int size [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  int size 
[REMOVE]^connect ( n1, edge, n2 ) ;^81^^^^^80^82^[REMOVE] ^[METHOD] <init> [TYPE] Graph$GraphAnnotationState(int) [PARAMETER] int size [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  int size 
[REPLACE]^this.graph =  null;^290^^^^^289^291^[REPLACE] this.graph = graph;^[METHOD] <init> [TYPE] Graph) [PARAMETER] Graph<N, E> graph [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[ADD]^^290^^^^^289^291^[ADD] this.graph = graph;^[METHOD] <init> [TYPE] Graph) [PARAMETER] Graph<N, E> graph [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^GraphNode<N, E> node1 = getNode ( n2 ) ;^122^^^^^121^138^[REPLACE] GraphNode<N, E> node1 = getNode ( n1 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^GraphNode<N, E> node2 = getNode ( n1 ) ;^123^^^^^121^138^[REPLACE] GraphNode<N, E> node2 = getNode ( n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if  ( node1 != null )  {^124^^^^^121^138^[REPLACE] if  ( node1 == null )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return ;^125^^^^^121^138^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^125^^^^^121^138^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if  ( node2 != null )  {^127^^^^^121^138^[REPLACE] if  ( node2 == null )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^127^128^129^^^121^138^[ADD] if  ( node2 == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return ;^128^^^^^121^138^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^128^^^^^121^138^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^for  ( GraphEdge<N, E> e : edgeList )  {^130^^^^^121^138^[REPLACE] List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^130^^^^^121^138^[ADD] List<GraphEdge<N, E>> edgeList = getEdges ( n1, n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^if  ( e.getValue (  )  == edge && e.getValue (  ) .equals ( edge )  )  {^133^^^^^121^138^[REPLACE] if  ( e.getValue (  )  == edge || e.getValue (  ) .equals ( edge )  )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return false;^134^^^^^121^138^[REPLACE] return;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^for  ( GraphEdge<N, E> e : getEdges (  )  )  { e.setAnnotation ( null ) ;^131^^^^^121^138^[REPLACE] for  ( GraphEdge<N, E> e : edgeList )  {^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^GraphNode<N, E> node2 = getNode ( n2 ) ;^137^^^^^121^138^[REPLACE] connect ( n1, edge, n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[ADD]^^137^^^^^121^138^[ADD] connect ( n1, edge, n2 ) ;^[METHOD] connectIfNotFound [TYPE] void [PARAMETER] N n1 E edge N n2 [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  E edge  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode node1  node2  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID  [TYPE]  N n1  n2 
[REPLACE]^return false;^165^^^^^164^166^[REPLACE] return getNodeDegree ( value ) ;^[METHOD] getWeight [TYPE] int [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^return getNode ( n )  ;^195^^^^^194^196^[REPLACE] return getNode ( n )  != null;^[METHOD] hasNode [TYPE] boolean [PARAMETER] N n [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N n 
[REPLACE]^for  ( GraphEdge<N, E> e : edgeList )  {^208^^^^^207^211^[REPLACE] for  ( GraphNode<N, E> n : getNodes (  )  )  {^[METHOD] clearNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( GraphEdge<N, E> e : edgeList )  {^215^^^^^214^218^[REPLACE] for  ( GraphEdge<N, E> e : getEdges (  )  )  {^[METHOD] clearEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  GraphEdge e  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( nodeAnnotationStack != this  )  {^225^^^^^224^229^[REPLACE] if  ( nodeAnnotationStack == null )  {^[METHOD] pushNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[ADD]^nodeAnnotationStack = Lists.newLinkedList (  ) ;^225^226^227^^^224^229^[ADD] if  ( nodeAnnotationStack == null )  { nodeAnnotationStack = Lists.newLinkedList (  ) ; }^[METHOD] pushNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^edgeAnnotationStack = Lists.newLinkedList (  ) ; ;^226^^^^^224^229^[REPLACE] nodeAnnotationStack = Lists.newLinkedList (  ) ;^[METHOD] pushNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^228^^^^^224^229^[REPLACE] pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^[METHOD] pushNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[ADD]^^236^237^^^^235^239^[ADD] Preconditions.checkNotNull ( nodeAnnotationStack, "Popping node annotations without pushing." ) ;^[METHOD] popNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^popAnnotations ( edgeAnnotationStack ) ;^238^^^^^235^239^[REPLACE] popAnnotations ( nodeAnnotationStack ) ;^[METHOD] popNodeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( edgeAnnotationStack != false )  {^246^^^^^245^250^[REPLACE] if  ( edgeAnnotationStack == null )  {^[METHOD] pushEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^nodeAnnotationStack = Lists.newLinkedList (  ) ; ;^247^^^^^245^250^[REPLACE] edgeAnnotationStack = Lists.newLinkedList (  ) ;^[METHOD] pushEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^pushAnnotations ( nodeAnnotationStack, getNodes (  )  ) ;^249^^^^^245^250^[REPLACE] pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[METHOD] pushEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[ADD]^^249^^^^^245^250^[ADD] pushAnnotations ( edgeAnnotationStack, getEdges (  )  ) ;^[METHOD] pushEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REMOVE]^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^249^^^^^245^250^[REMOVE] ^[METHOD] pushEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^popAnnotations ( nodeAnnotationStack ) ;^259^^^^^256^260^[REPLACE] popAnnotations ( edgeAnnotationStack ) ;^[METHOD] popEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REMOVE]^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^259^^^^^256^260^[REMOVE] ^[METHOD] popEdgeAnnotations [TYPE] void [PARAMETER] [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID 
[REPLACE]^GraphNode<N, E> node = graph.hasNode ( value ) ;^294^^^^^293^301^[REPLACE] GraphNode<N, E> node = graph.getNode ( value ) ;^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  node  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^if  ( graph.getNeighborNodes ( true.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^[REPLACE] if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  node  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[ADD]^return false;^296^297^298^^^293^301^[ADD] if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  { return false; }^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  node  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^return true;^297^^^^^293^301^[REPLACE] return false;^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  node  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^for  ( GraphEdge<N, E> e : edgeList )  {^295^^^^^293^301^[REPLACE] for  ( GraphNode<N, E> n : nodes )  {^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  node  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^return false;^300^^^^^293^301^[REPLACE] return true;^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  List edgeList  nodes  [TYPE]  GraphNode n  node  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^if  ( graph.hasNode ( value )  )  {^304^^^^^303^308^[REPLACE] if  ( !graph.hasNode ( value )  )  {^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^return ;^305^^^^^303^308^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[ADD]^^305^^^^^303^308^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^nodes.add ( graph.hasNode ( value )  ) ;^307^^^^^303^308^[REPLACE] nodes.add ( graph.getNode ( value )  ) ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[ADD]^^307^^^^^303^308^[ADD] nodes.add ( graph.getNode ( value )  ) ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  [TYPE]  long serialVersionUID  [TYPE]  N value 
[REPLACE]^stack.peek (  ) .add ( new AnnotationState ( h, h.getAnnotation (  )  )  ) ;^318^^^^^315^323^[REPLACE] stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[METHOD] pushAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack Annotatable> haveAnnotations [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Annotatable h  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Collection haveAnnotations  [TYPE]  List edgeList  nodes  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[ADD]^^318^^^^^315^323^[ADD] stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[METHOD] pushAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack Annotatable> haveAnnotations [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Annotatable h  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Collection haveAnnotations  [TYPE]  List edgeList  nodes  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[REPLACE]^stack.push ( new GraphAnnotationState ( null.size (  )  )  ) ;^318^^^^^315^323^[REPLACE] stack.push ( new GraphAnnotationState ( haveAnnotations.size (  )  )  ) ;^[METHOD] pushAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack Annotatable> haveAnnotations [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Annotatable h  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Collection haveAnnotations  [TYPE]  List edgeList  nodes  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( GraphEdge<N, E> e : getEdges (  )  )  { e.setAnnotation ( null ) ;^319^^^^^315^323^[REPLACE] for  ( Annotatable h : haveAnnotations )  {^[METHOD] pushAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack Annotatable> haveAnnotations [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  Annotatable h  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  Collection haveAnnotations  [TYPE]  List edgeList  nodes  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( AnnotationState as : stack.pop (  )  )  { as.first.setAnnotation ( as.second ) ;^329^^^^^328^332^[REPLACE] for  ( AnnotationState as : stack.pop (  )  )  {^[METHOD] popAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack [CLASS] Graph AnnotationState GraphAnnotationState SimpleSubGraph   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  AnnotationState as  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[REPLACE]^private static final long serialVersionUID  = null ;^66^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] popAnnotations [TYPE] void [PARAMETER] GraphAnnotationState> stack [CLASS] AnnotationState   [TYPE]  List edgeList  nodes  [TYPE]  Graph graph  [TYPE]  AnnotationState as  [TYPE]  boolean false  true  [TYPE]  Deque edgeAnnotationStack  nodeAnnotationStack  stack  [TYPE]  long serialVersionUID 
[REPLACE]^private  final long serialVersionUID = 1L;^78^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] <init> [TYPE] Annotation) [PARAMETER] Annotatable annotatable Annotation annotation [CLASS] GraphAnnotationState   [TYPE]  Annotatable annotatable  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  Annotation annotation 
[REPLACE]^private List<GraphNode<N, E>> nodes  = null ;^287^^^^^^^[REPLACE] private List<GraphNode<N, E>> nodes = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] Graph$GraphAnnotationState(int) [PARAMETER] int size [CLASS] SimpleSubGraph   [TYPE]  long serialVersionUID  [TYPE]  int size  [TYPE]  boolean false  true 
[REPLACE]^this.graph =  true;^290^^^^^289^291^[REPLACE] this.graph = graph;^[METHOD] <init> [TYPE] Graph) [PARAMETER] Graph<N, E> graph [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true 
[REPLACE]^GraphNode<N, E> node = graph .hasNode ( value )  ;^294^^^^^293^301^[REPLACE] GraphNode<N, E> node = graph.getNode ( value ) ;^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  GraphNode n  node  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^if  ( graph.getNeighborNodes ( this.getValue (  )  ) .contains ( node )  )  {^296^^^^^293^301^[REPLACE] if  ( graph.getNeighborNodes ( n.getValue (  )  ) .contains ( node )  )  {^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  GraphNode n  node  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^return true;^297^^^^^293^301^[REPLACE] return false;^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  GraphNode n  node  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^GraphNode<N, E> node = graph.getNode ( value ) ;^295^^^^^293^301^[REPLACE] for  ( GraphNode<N, E> n : nodes )  {^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  GraphNode n  node  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^return false;^300^^^^^293^301^[REPLACE] return true;^[METHOD] isIndependentOf [TYPE] boolean [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  GraphNode n  node  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^if  ( graph.hasNode ( value )  )  {^304^^^^^303^308^[REPLACE] if  ( !graph.hasNode ( value )  )  {^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^return ;^305^^^^^303^308^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[ADD]^^305^^^^^303^308^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^nodes.add ( graph .hasNode ( value )   ) ;^307^^^^^303^308^[REPLACE] nodes.add ( graph.getNode ( value )  ) ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
[REPLACE]^nodes.add ( graph.hasNode ( value )  ) ;^307^^^^^303^308^[REPLACE] nodes.add ( graph.getNode ( value )  ) ;^[METHOD] addNode [TYPE] void [PARAMETER] N value [CLASS] SimpleSubGraph   [TYPE]  List nodes  [TYPE]  Graph graph  [TYPE]  boolean false  true  [TYPE]  N value 
