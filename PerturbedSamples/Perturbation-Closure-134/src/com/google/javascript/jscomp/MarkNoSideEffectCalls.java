[REPLACE]^static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION ;^42^43^44^45^^42^45^[REPLACE] static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION = DiagnosticType.error ( "JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION", "@nosideeffects may only appear in externs files." ) ;^ [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty  
[REPLACE]^private  AbstractCompiler compiler;^47^^^^^^^[REPLACE] private final AbstractCompiler compiler;^ [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty  
[REPLACE]^private  boolean inExterns;^114^^^^^^^[REPLACE] private final boolean inExterns;^ [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty  
[REPLACE]^private  SimpleDefinitionFinder defFinder;^170^^^^^^^[REPLACE] private final SimpleDefinitionFinder defFinder;^ [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty  
[REPLACE]^this.compiler =  null;^54^^^^^53^56^[REPLACE] this.compiler = compiler;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION 
[ADD]^this.noSideEffectFunctionNames = Sets.newHashSet (  ) ;^54^55^^^^53^56^[ADD] this.compiler = compiler; this.noSideEffectFunctionNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION 
[REPLACE]^this.noSideEffectFunctionNames  =  this.noSideEffectFunctionNames ;^55^^^^^53^56^[REPLACE] this.noSideEffectFunctionNames = Sets.newHashSet (  ) ;^[METHOD] <init> [TYPE] AbstractCompiler) [PARAMETER] AbstractCompiler compiler [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION 
[REPLACE]^this.inExterns =  true;^117^^^^^116^118^[REPLACE] this.inExterns = inExterns;^[METHOD] <init> [TYPE] MarkNoSideEffectCalls$GatherNoSideEffectFunctions(boolean) [PARAMETER] boolean inExterns [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION 
[REPLACE]^this.defFinder =  null;^173^^^^^172^174^[REPLACE] this.defFinder = defFinder;^[METHOD] <init> [TYPE] SimpleDefinitionFinder) [PARAMETER] SimpleDefinitionFinder defFinder [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION 
[REPLACE]^Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  ) ;^60^^^^^59^72^[REPLACE] SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder ( compiler ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node externs  root 
[REPLACE]^defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  ) ;^61^^^^^59^72^[REPLACE] defFinder.process ( externs, root ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal .report ( externs , INVALID_NO_SIDE_EFFECT_ANNOTATION )  ;^65^66^^^^59^72^[REPLACE] NodeTraversal.traverse ( compiler, externs, new GatherNoSideEffectFunctions ( true )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal.traverse ( compiler, root, new GatherNoSideEffectFunctions ( true )  ) ;^67^68^^^^59^72^[REPLACE] NodeTraversal.traverse ( compiler, root, new GatherNoSideEffectFunctions ( false )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node externs  root 
[ADD]^^67^68^^^^59^72^[ADD] NodeTraversal.traverse ( compiler, root, new GatherNoSideEffectFunctions ( false )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node externs  root 
[REPLACE]^NodeTraversal .report ( root , INVALID_NO_SIDE_EFFECT_ANNOTATION )  ;^70^71^^^^59^72^[REPLACE] NodeTraversal.traverse ( compiler, root, new SetNoSideEffectCallProperty ( defFinder )  ) ;^[METHOD] process [TYPE] void [PARAMETER] Node externs Node root [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node externs  root 
[REPLACE]^Node rhs = def.getLValue (  ) ;^79^^^^^78^99^[REPLACE] Node rhs = def.getRValue (  ) ;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( rhs != false )  {^80^^^^^78^99^[REPLACE] if  ( rhs == null )  {^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^80^81^82^^^78^99^[ADD] if  ( rhs == null )  { return true; }^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^81^^^^^78^99^[REPLACE] return true;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^95^^^^^78^99^[REPLACE] return true;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return true;^97^^^^^78^99^[REPLACE] return false;^[METHOD] definitionTypeContainsFunctionType [TYPE] boolean [PARAMETER] Definition def [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node rhs  [TYPE]  Definition def  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^JSDocInfo docInfo = node.getParent (  ) ;^106^^^^^105^108^[REPLACE] JSDocInfo docInfo = node.getJSDocInfo (  ) ;^[METHOD] hasNoSideEffectsAnnotation [TYPE] boolean [PARAMETER] Node node [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node node  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  JSDocInfo docInfo 
[ADD]^^106^^^^^105^108^[ADD] JSDocInfo docInfo = node.getJSDocInfo (  ) ;^[METHOD] hasNoSideEffectsAnnotation [TYPE] boolean [PARAMETER] Node node [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node node  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  JSDocInfo docInfo 
[REPLACE]^return docInfo != false ;;^107^^^^^105^108^[REPLACE] return docInfo != null && docInfo.isNoSideEffects (  ) ;^[METHOD] hasNoSideEffectsAnnotation [TYPE] boolean [PARAMETER] Node node [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  inExterns  true  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node node  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  JSDocInfo docInfo 
[REPLACE]^if  ( inExterns && hasNoSideEffectsAnnotation ( node )  )  {^122^^^^^121^162^[REPLACE] if  ( !inExterns && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^123^^^^^121^162^[REPLACE] traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^126^^^^^121^162^[REPLACE] if  ( NodeUtil.isGetProp ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^126^127^128^129^130^121^162^[ADD] if  ( NodeUtil.isGetProp ( node )  )  { if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  { noSideEffectFunctionNames.add ( node ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  else {^131^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isFunction ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isName ( node )  )  {^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^} else if  ( NodeUtil.isFunction ( node )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^150^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( hasNoSideEffectsAnnotation ( node )  )  {^151^^^^^121^162^[REPLACE] if  ( hasNoSideEffectsAnnotation ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^hasAnnotation = true;^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^hasAnnotation = false;^152^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  (  gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^hasAnnotation = false;^146^^^^^143^147^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^hasAnnotation = false;^146^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = node .getType (  )  ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^142^^^^^121^162^[ADD] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil .isName ( node )   ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^146^^^^^143^147^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  if  ( NodeUtil.isAssign ( node )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( true )  {^158^^^^^121^162^[REPLACE] if  ( hasAnnotation )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.addAll ( 0 ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^boolean hasAnnotation = hasNoSideEffectsAnnotation ( parent ) ;^135^^^^^121^162^[REPLACE] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^135^^^^^121^162^[ADD] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = parent.getParent (  ) ;^136^^^^^121^162^[REPLACE] List<Node> nameNodes = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^nameNodes.add ( node.getFirstChild (  )  ) ;^136^137^^^^121^162^[ADD] List<Node> nameNodes = Lists.newArrayList (  ) ; nameNodes.add ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node nameNode = this;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = node.getParent (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil .isVar ( gramp )   )  {^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^152^^^^^121^162^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  || gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = parent .getType (  )  ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  else {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^158^^^^^121^162^[REPLACE] if  ( hasAnnotation )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.addAll ( false ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^List<Node> nameNodes = Lists.newArrayList (  ) ;^135^136^^^^121^162^[ADD] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ; List<Node> nameNodes = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node nameNode = false;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^139^^^^^121^162^[ADD] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( nameNode )  || hasNoSideEffectsAnnotation ( node )  )  {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^127^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.add ( parent ) ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  (  hasNoSideEffectsAnnotation ( node )  )  {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames .addAll ( this )  ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^}  if  ( NodeUtil.isFunction ( parent )  )  {^131^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isFunction ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^141^142^143^144^^121^162^[ADD] if  ( NodeUtil.isName ( parent )  )  { Node gramp = parent.getParent (  ) ; if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  &&^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  || gramp .getFirstChild (  )   || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^143^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^143^144^145^146^147^121^162^[ADD] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^}   hasAnnotation = true;^150^151^152^153^^121^162^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  { if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REMOVE]^if  (  ( ! ( noSideEffectFunctionNames.contains ( lValue )  )  )  &&  ( definitionTypeContainsFunctionType ( def )  )  )  {     return ; }^151^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.addAll ( this ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^135^136^^^^121^162^[ADD] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ; List<Node> nameNodes = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node nameNode = true;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node gramp = parent.getType (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^noSideEffectFunctionNames.add ( nameNodes ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[ADD]^^136^137^^^^121^162^[ADD] List<Node> nameNodes = Lists.newArrayList (  ) ; nameNodes.add ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node gramp  nameNode  node  parent  [TYPE]  List nameNodes  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( NodeUtil.isCall ( node )  && !NodeUtil.isNew ( node )  )  {^178^^^^^177^198^[REPLACE] if  ( !NodeUtil.isCall ( node )  && !NodeUtil.isNew ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^179^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( parent.getFirstChild (  )  ) ;^182^183^^^^177^198^[REPLACE] Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( definitions != null )  {^184^^^^^177^198^[REPLACE] if  ( definitions == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^185^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^if  ( noSideEffectFunctionNames.contains ( node )  && definitionTypeContainsFunctionType ( def )  )  {^191^192^^^^177^198^[REPLACE] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^return false;^193^^^^^177^198^[REPLACE] return;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder ( compiler ) ;^188^^^^^177^198^[REPLACE] for  ( Definition def : definitions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^Node lValue = def .getRValue (  )  ;^189^^^^^177^198^[REPLACE] Node lValue = def.getLValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^node.getJSDocInfo (  ) ;^197^^^^^177^198^[REPLACE] node.setIsNoSideEffectsCall (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] MarkNoSideEffectCalls GatherNoSideEffectFunctions SetNoSideEffectCallProperty   [TYPE]  AbstractCompiler compiler  [TYPE]  Set noSideEffectFunctionNames  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION  [TYPE]  Node lValue  node  parent  [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder 
[REPLACE]^this.inExterns =  true;^117^^^^^116^118^[REPLACE] this.inExterns = inExterns;^[METHOD] <init> [TYPE] MarkNoSideEffectCalls$GatherNoSideEffectFunctions(boolean) [PARAMETER] boolean inExterns [CLASS] GatherNoSideEffectFunctions   [TYPE]  boolean false  inExterns  true 
[REPLACE]^if  ( inExterns && hasNoSideEffectsAnnotation ( node )  )  {^122^^^^^121^162^[REPLACE] if  ( !inExterns && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^122^123^124^^^121^162^[ADD] if  ( !inExterns && hasNoSideEffectsAnnotation ( node )  )  { traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^traversal.report ( parent, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^123^^^^^121^162^[REPLACE] traversal.report ( node, INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^126^^^^^121^162^[REPLACE] if  ( NodeUtil.isGetProp ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  ( NodeUtil.isFunction ( node )  )  {^131^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isFunction ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^141^^^^^121^162^[REPLACE] if  ( NodeUtil.isName ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  ( NodeUtil.isAssign ( node )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^}   hasAnnotation = true;^150^151^152^153^^121^162^[ADD] else if  ( NodeUtil.isAssign ( parent )  )  { if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( hasNoSideEffectsAnnotation ( node )  )  {^151^^^^^121^162^[REPLACE] if  ( hasNoSideEffectsAnnotation ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^hasAnnotation = false;^152^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^152^^^^^121^162^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {     hasAnnotation = true; }^151^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  ( hasNoSideEffectsAnnotation ( parent )  )  {     hasAnnotation = true; }^143^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^hasAnnotation = false;^146^^^^^143^147^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^hasAnnotation = false;^146^^^^^121^162^[REPLACE] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = node.getParent (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  (  gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  ( NodeUtil.isFunction ( parent )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^hasAnnotation = true;^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( true )  {^158^^^^^121^162^[REPLACE] if  ( hasAnnotation )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^noSideEffectFunctionNames.addAll ( nameNodes ) ;^158^159^160^^^121^162^[ADD] if  ( hasAnnotation )  { noSideEffectFunctionNames.addAll ( nameNodes ) ; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.add ( nameNodes ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^146^^^^^121^162^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^boolean hasAnnotation = hasNoSideEffectsAnnotation ( parent ) ;^135^^^^^121^162^[REPLACE] boolean hasAnnotation = hasNoSideEffectsAnnotation ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = parent.getParent (  ) ;^136^^^^^121^162^[REPLACE] List<Node> nameNodes = Lists.newArrayList (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node nameNode = this;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = node .getFirstChild (  )  ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  ( NodeUtil.isAssign ( parent )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^151^152^153^^^121^162^[ADD] if  ( hasNoSideEffectsAnnotation ( parent )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  || gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^146^^^^^143^147^[ADD] hasAnnotation = true;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^}  if  (   node    )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.addAll ( null ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^159^^^^^121^162^[ADD] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^nameNodes.add ( node.getFirstChild (  )  ) ;^136^137^^^^121^162^[ADD] List<Node> nameNodes = Lists.newArrayList (  ) ; nameNodes.add ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node nameNode = false;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  || hasNoSideEffectsAnnotation ( node )  )  {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {     hasAnnotation = true; }^127^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.addAll ( parent ) ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isExpressionNode ( parent )  || hasNoSideEffectsAnnotation ( nameNode )  )  {^127^128^^^^121^162^[REPLACE] if  ( NodeUtil.isExpressionNode ( parent )  && hasNoSideEffectsAnnotation ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.add ( parent ) ;^129^^^^^127^130^[REPLACE] noSideEffectFunctionNames.add ( node ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  ( isName ( parent )  )  {     Node gramp = parent.getParent (  ) ;     if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {         hasAnnotation = true;     }     nameNodes.add ( parent ) ; }else     if  ( isAssign ( parent )  )  {         if  ( hasNoSideEffectsAnnotation ( parent )  )  {             hasAnnotation = true;         }         nameNodes.add ( parent.getFirstChild (  )  ) ;     }^131^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( gramp )  ) {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^143^144^145^146^147^121^162^[ADD] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  { hasAnnotation = true; }^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node gramp = parent.getFirstChild (  ) ;^142^^^^^121^162^[REPLACE] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^142^^^^^121^162^[ADD] Node gramp = parent.getParent (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^} else if  ( NodeUtil.isAssign ( node )  )  {^150^^^^^121^162^[REPLACE] } else if  ( NodeUtil.isAssign ( parent )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.add ( null ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[ADD]^^139^^^^^121^162^[ADD] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REMOVE]^if  (  (  ( isVar ( gramp )  )  &&  ( gramp.hasOneChild (  )  )  )  &&  ( hasNoSideEffectsAnnotation ( gramp )  )  )  {     hasAnnotation = true; }^150^^^^^121^162^[REMOVE] ^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^if  ( NodeUtil.isVar ( parent )  || gramp.hasOneChild (  )  || hasNoSideEffectsAnnotation ( gramp )  )  {^143^144^145^^^121^162^[REPLACE] if  ( NodeUtil.isVar ( gramp )  && gramp.hasOneChild (  )  && hasNoSideEffectsAnnotation ( gramp )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^noSideEffectFunctionNames.addAll ( true ) ;^159^^^^^121^162^[REPLACE] noSideEffectFunctionNames.addAll ( nameNodes ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^Node nameNode = true;^139^^^^^121^162^[REPLACE] Node nameNode = null;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] GatherNoSideEffectFunctions   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^private  SimpleDefinitionFinder defFinder;^170^^^^^^^[REPLACE] private final SimpleDefinitionFinder defFinder;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  List nameNodes  [TYPE]  boolean false  hasAnnotation  inExterns  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node gramp  nameNode  node  parent 
[REPLACE]^this.defFinder =  null;^173^^^^^172^174^[REPLACE] this.defFinder = defFinder;^[METHOD] <init> [TYPE] SimpleDefinitionFinder) [PARAMETER] SimpleDefinitionFinder defFinder [CLASS] SetNoSideEffectCallProperty   [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true 
[REPLACE]^if  (  !NodeUtil.isCall ( node )  )  {^178^^^^^177^198^[REPLACE] if  ( !NodeUtil.isCall ( node )  && !NodeUtil.isNew ( node )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.setIsNoSideEffectsCall (  )  ) ;^182^183^^^^177^198^[REPLACE] Collection<Definition> definitions = defFinder.getDefinitionsReferencedAt ( node.getFirstChild (  )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^if  ( definitions != this  )  {^184^^^^^177^198^[REPLACE] if  ( definitions == null )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^if  ( noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^191^192^^^^177^198^[REPLACE] if  ( !noSideEffectFunctionNames.contains ( lValue )  && definitionTypeContainsFunctionType ( def )  )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^for  ( Definition def : definitions )  { Node lValue = def.getLValue (  ) ;^188^^^^^177^198^[REPLACE] for  ( Definition def : definitions )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^for  ( Definition def : definitions )  { Node lValue = def.getLValue (  ) ;^189^^^^^177^198^[REPLACE] Node lValue = def.getLValue (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
[REPLACE]^node.getFirstChild (  ) ;^197^^^^^177^198^[REPLACE] node.setIsNoSideEffectsCall (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal traversal Node node Node parent [CLASS] SetNoSideEffectCallProperty   [TYPE]  Definition def  [TYPE]  Collection definitions  [TYPE]  SimpleDefinitionFinder defFinder  [TYPE]  boolean false  true  [TYPE]  NodeTraversal traversal  [TYPE]  Node lValue  node  parent 
