[REPLACE]^listeners  =  listeners ;^49^^^^^48^50^[REPLACE] listeners = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AstChangeProxy() [PARAMETER] [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  boolean false  true 
[ADD]^^49^^^^^48^50^[ADD] listeners = Lists.newArrayList (  ) ;^[METHOD] <init> [TYPE] AstChangeProxy() [PARAMETER] [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  boolean false  true 
[REPLACE]^listeners.get ( listener ) ;^56^^^^^55^57^[REPLACE] listeners.add ( listener ) ;^[METHOD] registerListener [TYPE] void [PARAMETER] ChangeListener listener [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  ChangeListener listener  [TYPE]  boolean false  true 
[ADD]^^56^^^^^55^57^[ADD] listeners.add ( listener ) ;^[METHOD] registerListener [TYPE] void [PARAMETER] ChangeListener listener [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  ChangeListener listener  [TYPE]  boolean false  true 
[REPLACE]^listeners .size (  )  ;^63^^^^^62^64^[REPLACE] listeners.remove ( listener ) ;^[METHOD] unregisterListener [TYPE] void [PARAMETER] ChangeListener listener [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  ChangeListener listener  [TYPE]  boolean false  true 
[REPLACE]^for  ( ChangeListener listener : listeners )  { listener.nodeRemoved ( node ) ;^70^^^^^69^73^[REPLACE] for  ( ChangeListener listener : listeners )  {^[METHOD] notifyOfRemoval [TYPE] void [PARAMETER] Node node [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  ChangeListener listener  [TYPE]  boolean false  true  [TYPE]  Node node 
[REPLACE]^parent.addChildToBack ( node ) ;^79^^^^^78^82^[REPLACE] parent.removeChild ( node ) ;^[METHOD] removeChild [TYPE] void [PARAMETER] Node parent Node node [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^notifyOfRemoval ( parent ) ;^81^^^^^78^82^[REPLACE] notifyOfRemoval ( node ) ;^[METHOD] removeChild [TYPE] void [PARAMETER] Node parent Node node [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  Node node  parent  [TYPE]  boolean false  true 
[REPLACE]^replaceWith ( replacement, node,   replacement    ) ;^88^^^^^87^89^[REPLACE] replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node replacement [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  Node node  parent  replacement  [TYPE]  boolean false  true 
[REPLACE]^replaceWith ( parent, node,   parent    ) ;^88^^^^^87^89^[REPLACE] replaceWith ( parent, node, Lists.newArrayList ( replacement )  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node replacement [CLASS] AstChangeProxy   [TYPE]  List listeners  [TYPE]  Node node  parent  replacement  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkNotNull ( replacements, "\"replacements\" is this." ) ;^95^^^^^94^129^[REPLACE] Preconditions.checkNotNull ( replacements, "\"replacements\" is null." ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^int size = null.size (  ) ;^97^^^^^94^129^[REPLACE] int size = replacements.size (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^if ((size == 1) || parent .getParent (  ) ) {^99^^^^^94^129^[REPLACE] if  (  ( size == 1 )  && node.checkTreeEqualsSilent ( replacements.get ( 0 )  )  )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^int oldParentType = parent.getType (  ) ;^104^^^^^94^129^[REPLACE] int parentType = parent.getType (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^104^^^^^94^129^[ADD] int parentType = parent.getType (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Preconditions.checkState(size == 1 && parentType == Token.BLOCK && parentType == Token.SCRIPT && parentType == Token.LABEL);^106^107^108^109^^94^129^[REPLACE] Preconditions.checkState ( size == 1 || parentType == Token.BLOCK || parentType == Token.SCRIPT || parentType == Token.LABEL ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^if (parentType == Token.LABEL || parentType != 0 ) {^111^^^^^94^129^[REPLACE] if  ( parentType == Token.LABEL && size != 1 )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  ) ;^121^^^^^111^127^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = node.getParent (  ) ;^122^^^^^111^127^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^122^^^^^111^127^[ADD] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  ) ;^112^^^^^94^129^[REPLACE] Node block = new Node ( Token.BLOCK ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  ) ;^113^^^^^94^129^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getType (  ) ;^114^^^^^94^129^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = node.getParent (  ) ;^114^^^^^94^129^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = newChild.getParent (  ) ;^121^^^^^94^129^[REPLACE] for  ( Node newChild : replacements )  {^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^Node oldParent = node.getType (  ) ;^122^^^^^94^129^[REPLACE] Node oldParent = newChild.getParent (  ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[ADD]^^122^123^^^^94^129^[ADD] Node oldParent = newChild.getParent (  ) ; parent.addChildBefore ( newChild, node ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
[REPLACE]^notifyOfRemoval ( parent ) ;^128^^^^^94^129^[REPLACE] notifyOfRemoval ( node ) ;^[METHOD] replaceWith [TYPE] void [PARAMETER] Node parent Node node Node> replacements [CLASS] AstChangeProxy   [TYPE]  List listeners  replacements  [TYPE]  boolean false  true  [TYPE]  int parentType  size  [TYPE]  Node block  newChild  node  oldParent  parent 
