[REPLACE]^this.namer =  null;^66^^^^^65^67^[REPLACE] this.namer = namer;^[METHOD] <init> [TYPE] AnonymousFunctionNamingCallback$FunctionNamer) [PARAMETER] FunctionNamer namer [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  boolean false  true 
[REPLACE]^if  ( functionName.length (  )  *  2 == 0  )  {^80^^^^^69^109^[REPLACE] if  ( functionName.length (  )  == 0 )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^if  ( parent.getType (  )   ||  Token.ASSIGN )  {^81^^^^^69^109^[REPLACE] if  ( parent.getType (  )  == Token.ASSIGN )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^}  else {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer .getCombinedName ( functionName , functionName )  ;^92^^^^^69^109^[REPLACE] String name = namer.getName ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer.getName ( rhs ) ;^92^^^^^69^109^[REPLACE] String name = namer.getName ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^92^^^^^69^109^[ADD] String name = namer.getName ( parent ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node lhs = rhs.getString (  ) ;^86^^^^^69^109^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^86^87^^^^69^109^[ADD] Node lhs = parent.getFirstChild (  ) ; String name = namer.getName ( lhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String name = namer.getName ( rhs ) ;^87^^^^^69^109^[REPLACE] String name = namer.getName ( lhs ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^}  if  ( parent.getType (  )   !=  Token.NAME )  {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^}   String name = namer.getName ( parent ) ;namer.setFunctionName ( name, n ) ;^89^90^^92^93^69^109^[ADD] else if  ( parent.getType (  )  == Token.NAME )  {  String name = namer.getName ( parent ) ; namer.setFunctionName ( name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node lhs = rhs.getFirstChild (  ) ;^86^^^^^69^109^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^92^93^^^^69^109^[ADD] String name = namer.getName ( parent ) ; namer.setFunctionName ( name, n ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node lhs = parent .getString (  )  ;^86^^^^^69^109^[REPLACE] Node lhs = parent.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^}  if  ( parent.getType (  )   &&  Token.NAME )  {^89^^^^^69^109^[REPLACE] } else if  ( parent.getType (  )  == Token.NAME )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^if  ( rhs.getType (  )   !=  Token.OBJECTLIT )  {^105^^^^^69^109^[REPLACE] if  ( rhs.getType (  )  == Token.OBJECTLIT )  {^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^nameObjectLiteralMethods ( parent, namer.getName ( lhs )  ) ;^106^^^^^69^109^[REPLACE] nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^nameObjectLiteralMethods ( rhs, namer.getName ( rhs )  ) ;^106^^^^^69^109^[REPLACE] nameObjectLiteralMethods ( rhs, namer.getName ( lhs )  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node functionNameNode = parent.getFirstChild (  ) ;^78^^^^^69^109^[REPLACE] Node functionNameNode = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^String functionName = parent.getString (  ) ;^79^^^^^69^109^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node lhs = parent .getString (  )  ;^103^^^^^69^109^[REPLACE] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[ADD]^^103^^^^^69^109^[ADD] Node lhs = n.getFirstChild (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Node rhs = rhs.getType (  ) ;^104^^^^^69^109^[REPLACE] Node rhs = lhs.getNext (  ) ;^[METHOD] visit [TYPE] void [PARAMETER] NodeTraversal t Node n Node parent [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String functionName  name  [TYPE]  boolean false  true  [TYPE]  NodeTraversal t  [TYPE]  Node functionNameNode  lhs  n  parent  rhs 
[REPLACE]^Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2  ||  0 ) ;^115^^^^^111^143^[REPLACE] Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Preconditions.checkState ( valueNode.getChildCount (  )  % 2 == 0 ) ;^115^^^^^111^143^[REPLACE] Preconditions.checkState ( objectLiteral.getChildCount (  )  % 2 == 0 ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( keyNode.getType (  )   &&  Token.STRING )  {^125^^^^^111^143^[REPLACE] if  ( keyNode.getType (  )  == Token.STRING )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^125^126^127^^129^111^143^[ADD] if  ( keyNode.getType (  )  == Token.STRING )  {  String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ; int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( type  !=  Token.FUNCTION )  {^130^^^^^111^143^[REPLACE] if  ( type == Token.FUNCTION )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^130^131^132^133^^111^143^[ADD] if  ( type == Token.FUNCTION )  {  Node functionNameNode = valueNode.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^} else if  ( type  !=  Token.OBJECTLIT )  {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^}   nameObjectLiteralMethods ( valueNode, name ) ;^137^138^139^140^^111^143^[ADD] else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^111^143^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( context.isEmpty (  )  )  {^134^^^^^111^143^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^111^143^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REMOVE]^namer.setFunctionName ( name, n ) ;^135^^^^^111^143^[REMOVE] ^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral .getString (  )  ;^132^^^^^111^143^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String functionName = valueNode.getType (  ) ;^133^^^^^111^143^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( functionName.length (  )  )  {^134^^^^^111^143^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  if  ( type  ||  Token.OBJECTLIT )  {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^111^143^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^139^^^^^111^143^[ADD] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String name = namer.setFunctionName ( name, namer.getName ( keyNode )  ) ;^127^^^^^111^143^[REPLACE] String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^127^^^^^111^143^[ADD] String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^int type = valueNode .getString (  )  ;^129^^^^^111^143^[REPLACE] int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( type  ||  Token.FUNCTION )  {^130^^^^^111^143^[REPLACE] if  ( type == Token.FUNCTION )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  if  ( type  !=  Token.OBJECTLIT )  {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( name.isEmpty (  )  )  {^134^^^^^111^143^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^135^^^^^111^143^[ADD] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral.getFirstChild (  ) ;^132^^^^^111^143^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String functionName = valueNode.getString (  ) ;^133^^^^^111^143^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^133^^^^^111^143^[ADD] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( functionName.length (  )  == 0 )  {^134^^^^^111^143^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.setFunctionName ( functionName, valueNode ) ;^135^^^^^111^143^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  else {^137^^^^^111^143^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REMOVE]^if  (  ( parent.getType (  )  )  ==  ( NAME )  )  {     String name = namer.getName ( parent ) ;     namer.setFunctionName ( name, n ) ; }^137^^^^^111^143^[REMOVE] ^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^for  ( NodevalueNode = objectLiteral.getString (  ) ;^117^^^^^111^143^[REPLACE] for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^117^118^119^^121^111^143^[ADD] for  ( Node keyNode = objectLiteral.getFirstChild (  ) ; keyNode != null; keyNode = keyNode.getNext (  ) .getNext (  )  )  { Node valueNode = keyNode.getNext (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( keyNode.getType (  )   ||  Token.STRING )  {^125^^^^^117^142^[REPLACE] if  ( keyNode.getType (  )  == Token.STRING )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( type  !=  Token.FUNCTION )  {^130^^^^^117^142^[REPLACE] if  ( type == Token.FUNCTION )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  if  ( type  !=  Token.OBJECTLIT )  {^137^^^^^117^142^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^}   nameObjectLiteralMethods ( valueNode, name ) ;^137^138^139^140^^117^142^[ADD] else if  ( type == Token.OBJECTLIT )  {  nameObjectLiteralMethods ( valueNode, name ) ; }^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( objectLiteral, name ) ;^139^^^^^117^142^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( context.isEmpty (  )  )  {^134^^^^^117^142^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.getCombinedName ( functionName, valueNode ) ;^135^^^^^117^142^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral .getString (  )  ;^132^^^^^117^142^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String functionName = valueNode.getType (  ) ;^133^^^^^117^142^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( functionName.length (  )  == 0 )  {^134^^^^^117^142^[REPLACE] if  ( functionName.isEmpty (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.setFunctionName ( functionName, valueNode ) ;^135^^^^^117^142^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  if  ( type  ||  Token.OBJECTLIT )  {^137^^^^^117^142^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^139^^^^^117^142^[ADD] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String name = namer.getCombinedName ( context, namer.getName ( valueNode )  ) ;^127^^^^^117^142^[REPLACE] String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^int type = valueNode.getNext (  ) ;^129^^^^^117^142^[REPLACE] int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^129^^^^^117^142^[ADD] int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral.getString (  ) ;^132^^^^^117^142^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String functionName = functionNameNode.getType (  ) ;^133^^^^^117^142^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^if  ( type  ||  Token.FUNCTION )  {^130^^^^^117^142^[REPLACE] if  ( type == Token.FUNCTION )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^}  if  ( type  &&  Token.OBJECTLIT )  {^137^^^^^117^142^[REPLACE] } else if  ( type == Token.OBJECTLIT )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^nameObjectLiteralMethods ( valueNode, functionName ) ;^139^^^^^117^142^[REPLACE] nameObjectLiteralMethods ( valueNode, name ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.setFunctionName ( name, objectLiteral ) ;^135^^^^^117^142^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^135^^^^^117^142^[ADD] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node functionNameNode = objectLiteral.getFirstChild (  ) ;^132^^^^^117^142^[REPLACE] Node functionNameNode = valueNode.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[ADD]^^132^133^^^^117^142^[ADD] Node functionNameNode = valueNode.getFirstChild (  ) ; String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^namer.getCombinedName ( name, valueNode ) ;^135^^^^^117^142^[REPLACE] namer.setFunctionName ( name, valueNode ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node valueNode = valueNode .getType (  )  ;^121^^^^^117^142^[REPLACE] Node valueNode = keyNode.getNext (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^int type = objectLiteral.getType (  ) ;^129^^^^^117^142^[REPLACE] int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String functionName = valueNode.getString (  ) ;^133^^^^^117^142^[REPLACE] String functionName = functionNameNode.getString (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^keyNode =  valueNode.getNext (  ) .getNext (  )  )  {^119^^^^^111^143^[REPLACE] keyNode = keyNode.getNext (  ) .getNext (  )  )  {^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^for  ( Node keyNode = valueNode.getString (  ) ;^117^^^^^111^143^[REPLACE] for  ( Node keyNode = objectLiteral.getFirstChild (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^Node valueNode = valueNode.getNext (  ) ;^121^^^^^111^143^[REPLACE] Node valueNode = keyNode.getNext (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^String name = namer.getCombinedName ( name, namer.getName ( keyNode )  ) ;^127^^^^^111^143^[REPLACE] String name = namer.getCombinedName ( context, namer.getName ( keyNode )  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
[REPLACE]^int type = objectLiteral.getType (  ) ;^129^^^^^111^143^[REPLACE] int type = valueNode.getType (  ) ;^[METHOD] nameObjectLiteralMethods [TYPE] void [PARAMETER] Node objectLiteral String context [CLASS] AnonymousFunctionNamingCallback   [TYPE]  FunctionNamer namer  [TYPE]  String context  functionName  name  [TYPE]  boolean false  true  [TYPE]  int type  [TYPE]  Node functionNameNode  keyNode  objectLiteral  valueNode 
